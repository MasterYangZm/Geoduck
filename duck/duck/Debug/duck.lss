
duck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c5c0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000168  20000000  0000c5c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000508  20000168  0000c728  00020168  2**2
                  ALLOC
  3 .stack        00002000  20000670  0000cc30  00020168  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003daf3  00000000  00000000  000201e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004dce  00000000  00000000  0005dcdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000d163  00000000  00000000  00062aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000021e0  00000000  00000000  0006fc0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001fe0  00000000  00000000  00071ded  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020bdf  00000000  00000000  00073dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001c37c  00000000  00000000  000949ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009acba  00000000  00000000  000b0d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00007fc0  00000000  00000000  0014b9e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 26 00 20 31 01 00 00 29 02 00 00 29 02 00 00     p&. 1...)...)...
	...
      2c:	29 02 00 00 00 00 00 00 00 00 00 00 29 02 00 00     )...........)...
      3c:	29 02 00 00 29 02 00 00 29 02 00 00 29 02 00 00     )...)...)...)...
      4c:	bd 40 00 00 f1 39 00 00 29 02 00 00 29 02 00 00     .@...9..)...)...
      5c:	65 94 00 00 29 02 00 00 29 02 00 00 29 02 00 00     e...)...)...)...
      6c:	29 02 00 00 29 02 00 00 29 02 00 00 29 02 00 00     )...)...)...)...
      7c:	29 02 00 00 d5 65 00 00 29 02 00 00 29 02 00 00     )....e..)...)...
      8c:	29 02 00 00 29 02 00 00 29 02 00 00 29 02 00 00     )...)...)...)...
      9c:	29 02 00 00 29 02 00 00 29 02 00 00 29 02 00 00     )...)...)...)...
      ac:	29 02 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000168 	.word	0x20000168
      d4:	00000000 	.word	0x00000000
      d8:	0000c5c0 	.word	0x0000c5c0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000016c 	.word	0x2000016c
     108:	0000c5c0 	.word	0x0000c5c0
     10c:	0000c5c0 	.word	0x0000c5c0
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	system_init();
     118:	4b03      	ldr	r3, [pc, #12]	; (128 <atmel_start_init+0x14>)
     11a:	4798      	blx	r3
	usb_init();
     11c:	4b03      	ldr	r3, [pc, #12]	; (12c <atmel_start_init+0x18>)
     11e:	4798      	blx	r3
}
     120:	46c0      	nop			; (mov r8, r8)
     122:	46bd      	mov	sp, r7
     124:	bd80      	pop	{r7, pc}
     126:	46c0      	nop			; (mov r8, r8)
     128:	00001249 	.word	0x00001249
     12c:	0000b8b5 	.word	0x0000b8b5

00000130 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     130:	b580      	push	{r7, lr}
     132:	b082      	sub	sp, #8
     134:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     136:	4b2f      	ldr	r3, [pc, #188]	; (1f4 <Reset_Handler+0xc4>)
     138:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     13a:	4b2f      	ldr	r3, [pc, #188]	; (1f8 <Reset_Handler+0xc8>)
     13c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     13e:	687a      	ldr	r2, [r7, #4]
     140:	683b      	ldr	r3, [r7, #0]
     142:	429a      	cmp	r2, r3
     144:	d00c      	beq.n	160 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     146:	e007      	b.n	158 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     148:	683b      	ldr	r3, [r7, #0]
     14a:	1d1a      	adds	r2, r3, #4
     14c:	603a      	str	r2, [r7, #0]
     14e:	687a      	ldr	r2, [r7, #4]
     150:	1d11      	adds	r1, r2, #4
     152:	6079      	str	r1, [r7, #4]
     154:	6812      	ldr	r2, [r2, #0]
     156:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     158:	683a      	ldr	r2, [r7, #0]
     15a:	4b28      	ldr	r3, [pc, #160]	; (1fc <Reset_Handler+0xcc>)
     15c:	429a      	cmp	r2, r3
     15e:	d3f3      	bcc.n	148 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4b27      	ldr	r3, [pc, #156]	; (200 <Reset_Handler+0xd0>)
     162:	603b      	str	r3, [r7, #0]
     164:	e004      	b.n	170 <Reset_Handler+0x40>
                *pDest++ = 0;
     166:	683b      	ldr	r3, [r7, #0]
     168:	1d1a      	adds	r2, r3, #4
     16a:	603a      	str	r2, [r7, #0]
     16c:	2200      	movs	r2, #0
     16e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     170:	683a      	ldr	r2, [r7, #0]
     172:	4b24      	ldr	r3, [pc, #144]	; (204 <Reset_Handler+0xd4>)
     174:	429a      	cmp	r2, r3
     176:	d3f6      	bcc.n	166 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     178:	4b23      	ldr	r3, [pc, #140]	; (208 <Reset_Handler+0xd8>)
     17a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     17c:	4b23      	ldr	r3, [pc, #140]	; (20c <Reset_Handler+0xdc>)
     17e:	687a      	ldr	r2, [r7, #4]
     180:	21ff      	movs	r1, #255	; 0xff
     182:	438a      	bics	r2, r1
     184:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     186:	4a22      	ldr	r2, [pc, #136]	; (210 <Reset_Handler+0xe0>)
     188:	2390      	movs	r3, #144	; 0x90
     18a:	005b      	lsls	r3, r3, #1
     18c:	2102      	movs	r1, #2
     18e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     190:	4a20      	ldr	r2, [pc, #128]	; (214 <Reset_Handler+0xe4>)
     192:	78d3      	ldrb	r3, [r2, #3]
     194:	2103      	movs	r1, #3
     196:	438b      	bics	r3, r1
     198:	1c19      	adds	r1, r3, #0
     19a:	2302      	movs	r3, #2
     19c:	430b      	orrs	r3, r1
     19e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     1a0:	4a1c      	ldr	r2, [pc, #112]	; (214 <Reset_Handler+0xe4>)
     1a2:	78d3      	ldrb	r3, [r2, #3]
     1a4:	210c      	movs	r1, #12
     1a6:	438b      	bics	r3, r1
     1a8:	1c19      	adds	r1, r3, #0
     1aa:	2308      	movs	r3, #8
     1ac:	430b      	orrs	r3, r1
     1ae:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     1b0:	4a19      	ldr	r2, [pc, #100]	; (218 <Reset_Handler+0xe8>)
     1b2:	7b93      	ldrb	r3, [r2, #14]
     1b4:	2130      	movs	r1, #48	; 0x30
     1b6:	438b      	bics	r3, r1
     1b8:	1c19      	adds	r1, r3, #0
     1ba:	2320      	movs	r3, #32
     1bc:	430b      	orrs	r3, r1
     1be:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1c0:	4a15      	ldr	r2, [pc, #84]	; (218 <Reset_Handler+0xe8>)
     1c2:	7b93      	ldrb	r3, [r2, #14]
     1c4:	210c      	movs	r1, #12
     1c6:	438b      	bics	r3, r1
     1c8:	1c19      	adds	r1, r3, #0
     1ca:	2308      	movs	r3, #8
     1cc:	430b      	orrs	r3, r1
     1ce:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1d0:	4a11      	ldr	r2, [pc, #68]	; (218 <Reset_Handler+0xe8>)
     1d2:	7b93      	ldrb	r3, [r2, #14]
     1d4:	2103      	movs	r1, #3
     1d6:	438b      	bics	r3, r1
     1d8:	1c19      	adds	r1, r3, #0
     1da:	2302      	movs	r3, #2
     1dc:	430b      	orrs	r3, r1
     1de:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1e0:	4a0e      	ldr	r2, [pc, #56]	; (21c <Reset_Handler+0xec>)
     1e2:	6853      	ldr	r3, [r2, #4]
     1e4:	2180      	movs	r1, #128	; 0x80
     1e6:	430b      	orrs	r3, r1
     1e8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1ea:	4b0d      	ldr	r3, [pc, #52]	; (220 <Reset_Handler+0xf0>)
     1ec:	4798      	blx	r3

        /* Branch to main function */
        main();
     1ee:	4b0d      	ldr	r3, [pc, #52]	; (224 <Reset_Handler+0xf4>)
     1f0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     1f2:	e7fe      	b.n	1f2 <Reset_Handler+0xc2>
     1f4:	0000c5c0 	.word	0x0000c5c0
     1f8:	20000000 	.word	0x20000000
     1fc:	20000168 	.word	0x20000168
     200:	20000168 	.word	0x20000168
     204:	20000670 	.word	0x20000670
     208:	00000000 	.word	0x00000000
     20c:	e000ed00 	.word	0xe000ed00
     210:	41007000 	.word	0x41007000
     214:	41005000 	.word	0x41005000
     218:	41004800 	.word	0x41004800
     21c:	41004000 	.word	0x41004000
     220:	0000b9fd 	.word	0x0000b9fd
     224:	00009b39 	.word	0x00009b39

00000228 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     228:	b580      	push	{r7, lr}
     22a:	af00      	add	r7, sp, #0
        while (1) {
     22c:	e7fe      	b.n	22c <Dummy_Handler+0x4>

0000022e <hri_gclk_write_CLKCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
     22e:	b580      	push	{r7, lr}
     230:	b082      	sub	sp, #8
     232:	af00      	add	r7, sp, #0
     234:	6078      	str	r0, [r7, #4]
     236:	000a      	movs	r2, r1
     238:	1cbb      	adds	r3, r7, #2
     23a:	801a      	strh	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     23c:	687b      	ldr	r3, [r7, #4]
     23e:	1cba      	adds	r2, r7, #2
     240:	8812      	ldrh	r2, [r2, #0]
     242:	805a      	strh	r2, [r3, #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     244:	46c0      	nop			; (mov r8, r8)
     246:	46bd      	mov	sp, r7
     248:	b002      	add	sp, #8
     24a:	bd80      	pop	{r7, pc}

0000024c <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     24c:	b580      	push	{r7, lr}
     24e:	b084      	sub	sp, #16
     250:	af00      	add	r7, sp, #0
     252:	60f8      	str	r0, [r7, #12]
     254:	607a      	str	r2, [r7, #4]
     256:	230b      	movs	r3, #11
     258:	18fb      	adds	r3, r7, r3
     25a:	1c0a      	adds	r2, r1, #0
     25c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     25e:	230b      	movs	r3, #11
     260:	18fb      	adds	r3, r7, r3
     262:	781b      	ldrb	r3, [r3, #0]
     264:	68fa      	ldr	r2, [r7, #12]
     266:	01db      	lsls	r3, r3, #7
     268:	18d3      	adds	r3, r2, r3
     26a:	3308      	adds	r3, #8
     26c:	687a      	ldr	r2, [r7, #4]
     26e:	601a      	str	r2, [r3, #0]
}
     270:	46c0      	nop			; (mov r8, r8)
     272:	46bd      	mov	sp, r7
     274:	b004      	add	sp, #16
     276:	bd80      	pop	{r7, pc}

00000278 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     278:	b580      	push	{r7, lr}
     27a:	b084      	sub	sp, #16
     27c:	af00      	add	r7, sp, #0
     27e:	60f8      	str	r0, [r7, #12]
     280:	607a      	str	r2, [r7, #4]
     282:	230b      	movs	r3, #11
     284:	18fb      	adds	r3, r7, r3
     286:	1c0a      	adds	r2, r1, #0
     288:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     28a:	230b      	movs	r3, #11
     28c:	18fb      	adds	r3, r7, r3
     28e:	781b      	ldrb	r3, [r3, #0]
     290:	68fa      	ldr	r2, [r7, #12]
     292:	01db      	lsls	r3, r3, #7
     294:	18d3      	adds	r3, r2, r3
     296:	3304      	adds	r3, #4
     298:	687a      	ldr	r2, [r7, #4]
     29a:	601a      	str	r2, [r3, #0]
}
     29c:	46c0      	nop			; (mov r8, r8)
     29e:	46bd      	mov	sp, r7
     2a0:	b004      	add	sp, #16
     2a2:	bd80      	pop	{r7, pc}

000002a4 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b084      	sub	sp, #16
     2a8:	af00      	add	r7, sp, #0
     2aa:	60f8      	str	r0, [r7, #12]
     2ac:	607a      	str	r2, [r7, #4]
     2ae:	230b      	movs	r3, #11
     2b0:	18fb      	adds	r3, r7, r3
     2b2:	1c0a      	adds	r2, r1, #0
     2b4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2b6:	230b      	movs	r3, #11
     2b8:	18fb      	adds	r3, r7, r3
     2ba:	781b      	ldrb	r3, [r3, #0]
     2bc:	68fa      	ldr	r2, [r7, #12]
     2be:	01db      	lsls	r3, r3, #7
     2c0:	18d3      	adds	r3, r2, r3
     2c2:	3318      	adds	r3, #24
     2c4:	687a      	ldr	r2, [r7, #4]
     2c6:	601a      	str	r2, [r3, #0]
}
     2c8:	46c0      	nop			; (mov r8, r8)
     2ca:	46bd      	mov	sp, r7
     2cc:	b004      	add	sp, #16
     2ce:	bd80      	pop	{r7, pc}

000002d0 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b084      	sub	sp, #16
     2d4:	af00      	add	r7, sp, #0
     2d6:	60f8      	str	r0, [r7, #12]
     2d8:	607a      	str	r2, [r7, #4]
     2da:	230b      	movs	r3, #11
     2dc:	18fb      	adds	r3, r7, r3
     2de:	1c0a      	adds	r2, r1, #0
     2e0:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2e2:	230b      	movs	r3, #11
     2e4:	18fb      	adds	r3, r7, r3
     2e6:	781b      	ldrb	r3, [r3, #0]
     2e8:	68fa      	ldr	r2, [r7, #12]
     2ea:	01db      	lsls	r3, r3, #7
     2ec:	18d3      	adds	r3, r2, r3
     2ee:	3314      	adds	r3, #20
     2f0:	687a      	ldr	r2, [r7, #4]
     2f2:	601a      	str	r2, [r3, #0]
}
     2f4:	46c0      	nop			; (mov r8, r8)
     2f6:	46bd      	mov	sp, r7
     2f8:	b004      	add	sp, #16
     2fa:	bd80      	pop	{r7, pc}

000002fc <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     2fc:	b590      	push	{r4, r7, lr}
     2fe:	b085      	sub	sp, #20
     300:	af00      	add	r7, sp, #0
     302:	6078      	str	r0, [r7, #4]
     304:	000c      	movs	r4, r1
     306:	0010      	movs	r0, r2
     308:	0019      	movs	r1, r3
     30a:	1cfb      	adds	r3, r7, #3
     30c:	1c22      	adds	r2, r4, #0
     30e:	701a      	strb	r2, [r3, #0]
     310:	1cbb      	adds	r3, r7, #2
     312:	1c02      	adds	r2, r0, #0
     314:	701a      	strb	r2, [r3, #0]
     316:	1c7b      	adds	r3, r7, #1
     318:	1c0a      	adds	r2, r1, #0
     31a:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     31c:	1cfb      	adds	r3, r7, #3
     31e:	7819      	ldrb	r1, [r3, #0]
     320:	1cbb      	adds	r3, r7, #2
     322:	781a      	ldrb	r2, [r3, #0]
     324:	230f      	movs	r3, #15
     326:	18fb      	adds	r3, r7, r3
     328:	6878      	ldr	r0, [r7, #4]
     32a:	2430      	movs	r4, #48	; 0x30
     32c:	01c9      	lsls	r1, r1, #7
     32e:	1841      	adds	r1, r0, r1
     330:	188a      	adds	r2, r1, r2
     332:	1912      	adds	r2, r2, r4
     334:	7812      	ldrb	r2, [r2, #0]
     336:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     338:	230f      	movs	r3, #15
     33a:	18fb      	adds	r3, r7, r3
     33c:	220f      	movs	r2, #15
     33e:	18ba      	adds	r2, r7, r2
     340:	7812      	ldrb	r2, [r2, #0]
     342:	210f      	movs	r1, #15
     344:	438a      	bics	r2, r1
     346:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     348:	1c7b      	adds	r3, r7, #1
     34a:	781b      	ldrb	r3, [r3, #0]
     34c:	220f      	movs	r2, #15
     34e:	4013      	ands	r3, r2
     350:	b2d9      	uxtb	r1, r3
     352:	230f      	movs	r3, #15
     354:	18fb      	adds	r3, r7, r3
     356:	220f      	movs	r2, #15
     358:	18ba      	adds	r2, r7, r2
     35a:	7812      	ldrb	r2, [r2, #0]
     35c:	430a      	orrs	r2, r1
     35e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     360:	1cfb      	adds	r3, r7, #3
     362:	781a      	ldrb	r2, [r3, #0]
     364:	1cbb      	adds	r3, r7, #2
     366:	781b      	ldrb	r3, [r3, #0]
     368:	6879      	ldr	r1, [r7, #4]
     36a:	2030      	movs	r0, #48	; 0x30
     36c:	01d2      	lsls	r2, r2, #7
     36e:	188a      	adds	r2, r1, r2
     370:	18d3      	adds	r3, r2, r3
     372:	181b      	adds	r3, r3, r0
     374:	220f      	movs	r2, #15
     376:	18ba      	adds	r2, r7, r2
     378:	7812      	ldrb	r2, [r2, #0]
     37a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     37c:	46c0      	nop			; (mov r8, r8)
     37e:	46bd      	mov	sp, r7
     380:	b005      	add	sp, #20
     382:	bd90      	pop	{r4, r7, pc}

00000384 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     384:	b590      	push	{r4, r7, lr}
     386:	b085      	sub	sp, #20
     388:	af00      	add	r7, sp, #0
     38a:	6078      	str	r0, [r7, #4]
     38c:	000c      	movs	r4, r1
     38e:	0010      	movs	r0, r2
     390:	0019      	movs	r1, r3
     392:	1cfb      	adds	r3, r7, #3
     394:	1c22      	adds	r2, r4, #0
     396:	701a      	strb	r2, [r3, #0]
     398:	1cbb      	adds	r3, r7, #2
     39a:	1c02      	adds	r2, r0, #0
     39c:	701a      	strb	r2, [r3, #0]
     39e:	1c7b      	adds	r3, r7, #1
     3a0:	1c0a      	adds	r2, r1, #0
     3a2:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3a4:	1cfb      	adds	r3, r7, #3
     3a6:	7819      	ldrb	r1, [r3, #0]
     3a8:	1cbb      	adds	r3, r7, #2
     3aa:	781a      	ldrb	r2, [r3, #0]
     3ac:	230f      	movs	r3, #15
     3ae:	18fb      	adds	r3, r7, r3
     3b0:	6878      	ldr	r0, [r7, #4]
     3b2:	2430      	movs	r4, #48	; 0x30
     3b4:	01c9      	lsls	r1, r1, #7
     3b6:	1841      	adds	r1, r0, r1
     3b8:	188a      	adds	r2, r1, r2
     3ba:	1912      	adds	r2, r2, r4
     3bc:	7812      	ldrb	r2, [r2, #0]
     3be:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3c0:	230f      	movs	r3, #15
     3c2:	18fb      	adds	r3, r7, r3
     3c4:	220f      	movs	r2, #15
     3c6:	18ba      	adds	r2, r7, r2
     3c8:	7812      	ldrb	r2, [r2, #0]
     3ca:	210f      	movs	r1, #15
     3cc:	400a      	ands	r2, r1
     3ce:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     3d0:	1c7b      	adds	r3, r7, #1
     3d2:	781b      	ldrb	r3, [r3, #0]
     3d4:	011b      	lsls	r3, r3, #4
     3d6:	b2d9      	uxtb	r1, r3
     3d8:	230f      	movs	r3, #15
     3da:	18fb      	adds	r3, r7, r3
     3dc:	220f      	movs	r2, #15
     3de:	18ba      	adds	r2, r7, r2
     3e0:	7812      	ldrb	r2, [r2, #0]
     3e2:	430a      	orrs	r2, r1
     3e4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3e6:	1cfb      	adds	r3, r7, #3
     3e8:	781a      	ldrb	r2, [r3, #0]
     3ea:	1cbb      	adds	r3, r7, #2
     3ec:	781b      	ldrb	r3, [r3, #0]
     3ee:	6879      	ldr	r1, [r7, #4]
     3f0:	2030      	movs	r0, #48	; 0x30
     3f2:	01d2      	lsls	r2, r2, #7
     3f4:	188a      	adds	r2, r1, r2
     3f6:	18d3      	adds	r3, r2, r3
     3f8:	181b      	adds	r3, r3, r0
     3fa:	220f      	movs	r2, #15
     3fc:	18ba      	adds	r2, r7, r2
     3fe:	7812      	ldrb	r2, [r2, #0]
     400:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     402:	46c0      	nop			; (mov r8, r8)
     404:	46bd      	mov	sp, r7
     406:	b005      	add	sp, #20
     408:	bd90      	pop	{r4, r7, pc}

0000040a <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     40a:	b590      	push	{r4, r7, lr}
     40c:	b085      	sub	sp, #20
     40e:	af00      	add	r7, sp, #0
     410:	6078      	str	r0, [r7, #4]
     412:	000c      	movs	r4, r1
     414:	0010      	movs	r0, r2
     416:	0019      	movs	r1, r3
     418:	1cfb      	adds	r3, r7, #3
     41a:	1c22      	adds	r2, r4, #0
     41c:	701a      	strb	r2, [r3, #0]
     41e:	1cbb      	adds	r3, r7, #2
     420:	1c02      	adds	r2, r0, #0
     422:	701a      	strb	r2, [r3, #0]
     424:	1c7b      	adds	r3, r7, #1
     426:	1c0a      	adds	r2, r1, #0
     428:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     42a:	1cfb      	adds	r3, r7, #3
     42c:	7819      	ldrb	r1, [r3, #0]
     42e:	1cbb      	adds	r3, r7, #2
     430:	781a      	ldrb	r2, [r3, #0]
     432:	230f      	movs	r3, #15
     434:	18fb      	adds	r3, r7, r3
     436:	6878      	ldr	r0, [r7, #4]
     438:	2440      	movs	r4, #64	; 0x40
     43a:	01c9      	lsls	r1, r1, #7
     43c:	1841      	adds	r1, r0, r1
     43e:	188a      	adds	r2, r1, r2
     440:	1912      	adds	r2, r2, r4
     442:	7812      	ldrb	r2, [r2, #0]
     444:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     446:	230f      	movs	r3, #15
     448:	18fb      	adds	r3, r7, r3
     44a:	220f      	movs	r2, #15
     44c:	18ba      	adds	r2, r7, r2
     44e:	7812      	ldrb	r2, [r2, #0]
     450:	2101      	movs	r1, #1
     452:	438a      	bics	r2, r1
     454:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     456:	1c7b      	adds	r3, r7, #1
     458:	7819      	ldrb	r1, [r3, #0]
     45a:	230f      	movs	r3, #15
     45c:	18fb      	adds	r3, r7, r3
     45e:	220f      	movs	r2, #15
     460:	18ba      	adds	r2, r7, r2
     462:	7812      	ldrb	r2, [r2, #0]
     464:	430a      	orrs	r2, r1
     466:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     468:	1cfb      	adds	r3, r7, #3
     46a:	781a      	ldrb	r2, [r3, #0]
     46c:	1cbb      	adds	r3, r7, #2
     46e:	781b      	ldrb	r3, [r3, #0]
     470:	6879      	ldr	r1, [r7, #4]
     472:	2040      	movs	r0, #64	; 0x40
     474:	01d2      	lsls	r2, r2, #7
     476:	188a      	adds	r2, r1, r2
     478:	18d3      	adds	r3, r2, r3
     47a:	181b      	adds	r3, r3, r0
     47c:	220f      	movs	r2, #15
     47e:	18ba      	adds	r2, r7, r2
     480:	7812      	ldrb	r2, [r2, #0]
     482:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     484:	46c0      	nop			; (mov r8, r8)
     486:	46bd      	mov	sp, r7
     488:	b005      	add	sp, #20
     48a:	bd90      	pop	{r4, r7, pc}

0000048c <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     48c:	b5b0      	push	{r4, r5, r7, lr}
     48e:	b082      	sub	sp, #8
     490:	af00      	add	r7, sp, #0
     492:	6078      	str	r0, [r7, #4]
     494:	0008      	movs	r0, r1
     496:	0011      	movs	r1, r2
     498:	1cfb      	adds	r3, r7, #3
     49a:	1c02      	adds	r2, r0, #0
     49c:	701a      	strb	r2, [r3, #0]
     49e:	1cbb      	adds	r3, r7, #2
     4a0:	1c0a      	adds	r2, r1, #0
     4a2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4a4:	1cfb      	adds	r3, r7, #3
     4a6:	781a      	ldrb	r2, [r3, #0]
     4a8:	1cbb      	adds	r3, r7, #2
     4aa:	781b      	ldrb	r3, [r3, #0]
     4ac:	1cf9      	adds	r1, r7, #3
     4ae:	7808      	ldrb	r0, [r1, #0]
     4b0:	1cb9      	adds	r1, r7, #2
     4b2:	7809      	ldrb	r1, [r1, #0]
     4b4:	687c      	ldr	r4, [r7, #4]
     4b6:	2540      	movs	r5, #64	; 0x40
     4b8:	01c0      	lsls	r0, r0, #7
     4ba:	1820      	adds	r0, r4, r0
     4bc:	1841      	adds	r1, r0, r1
     4be:	1949      	adds	r1, r1, r5
     4c0:	7809      	ldrb	r1, [r1, #0]
     4c2:	b2c9      	uxtb	r1, r1
     4c4:	2004      	movs	r0, #4
     4c6:	4301      	orrs	r1, r0
     4c8:	b2cc      	uxtb	r4, r1
     4ca:	6879      	ldr	r1, [r7, #4]
     4cc:	2040      	movs	r0, #64	; 0x40
     4ce:	01d2      	lsls	r2, r2, #7
     4d0:	188a      	adds	r2, r1, r2
     4d2:	18d3      	adds	r3, r2, r3
     4d4:	181b      	adds	r3, r3, r0
     4d6:	1c22      	adds	r2, r4, #0
     4d8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     4da:	46c0      	nop			; (mov r8, r8)
     4dc:	46bd      	mov	sp, r7
     4de:	b002      	add	sp, #8
     4e0:	bdb0      	pop	{r4, r5, r7, pc}

000004e2 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     4e2:	b5b0      	push	{r4, r5, r7, lr}
     4e4:	b082      	sub	sp, #8
     4e6:	af00      	add	r7, sp, #0
     4e8:	6078      	str	r0, [r7, #4]
     4ea:	0008      	movs	r0, r1
     4ec:	0011      	movs	r1, r2
     4ee:	1cfb      	adds	r3, r7, #3
     4f0:	1c02      	adds	r2, r0, #0
     4f2:	701a      	strb	r2, [r3, #0]
     4f4:	1cbb      	adds	r3, r7, #2
     4f6:	1c0a      	adds	r2, r1, #0
     4f8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4fa:	1cfb      	adds	r3, r7, #3
     4fc:	781a      	ldrb	r2, [r3, #0]
     4fe:	1cbb      	adds	r3, r7, #2
     500:	781b      	ldrb	r3, [r3, #0]
     502:	1cf9      	adds	r1, r7, #3
     504:	7808      	ldrb	r0, [r1, #0]
     506:	1cb9      	adds	r1, r7, #2
     508:	7809      	ldrb	r1, [r1, #0]
     50a:	687c      	ldr	r4, [r7, #4]
     50c:	2540      	movs	r5, #64	; 0x40
     50e:	01c0      	lsls	r0, r0, #7
     510:	1820      	adds	r0, r4, r0
     512:	1841      	adds	r1, r0, r1
     514:	1949      	adds	r1, r1, r5
     516:	7809      	ldrb	r1, [r1, #0]
     518:	b2c9      	uxtb	r1, r1
     51a:	2004      	movs	r0, #4
     51c:	4381      	bics	r1, r0
     51e:	b2cc      	uxtb	r4, r1
     520:	6879      	ldr	r1, [r7, #4]
     522:	2040      	movs	r0, #64	; 0x40
     524:	01d2      	lsls	r2, r2, #7
     526:	188a      	adds	r2, r1, r2
     528:	18d3      	adds	r3, r2, r3
     52a:	181b      	adds	r3, r3, r0
     52c:	1c22      	adds	r2, r4, #0
     52e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     530:	46c0      	nop			; (mov r8, r8)
     532:	46bd      	mov	sp, r7
     534:	b002      	add	sp, #8
     536:	bdb0      	pop	{r4, r5, r7, pc}

00000538 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     538:	b580      	push	{r7, lr}
     53a:	b084      	sub	sp, #16
     53c:	af00      	add	r7, sp, #0
     53e:	60f8      	str	r0, [r7, #12]
     540:	607a      	str	r2, [r7, #4]
     542:	230b      	movs	r3, #11
     544:	18fb      	adds	r3, r7, r3
     546:	1c0a      	adds	r2, r1, #0
     548:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     54a:	230b      	movs	r3, #11
     54c:	18fb      	adds	r3, r7, r3
     54e:	781b      	ldrb	r3, [r3, #0]
     550:	68fa      	ldr	r2, [r7, #12]
     552:	01db      	lsls	r3, r3, #7
     554:	18d3      	adds	r3, r2, r3
     556:	3328      	adds	r3, #40	; 0x28
     558:	687a      	ldr	r2, [r7, #4]
     55a:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     55c:	46c0      	nop			; (mov r8, r8)
     55e:	46bd      	mov	sp, r7
     560:	b004      	add	sp, #16
     562:	bd80      	pop	{r7, pc}

00000564 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     564:	b580      	push	{r7, lr}
     566:	b082      	sub	sp, #8
     568:	af00      	add	r7, sp, #0
     56a:	6039      	str	r1, [r7, #0]
     56c:	0011      	movs	r1, r2
     56e:	1dfb      	adds	r3, r7, #7
     570:	1c02      	adds	r2, r0, #0
     572:	701a      	strb	r2, [r3, #0]
     574:	1dbb      	adds	r3, r7, #6
     576:	1c0a      	adds	r2, r1, #0
     578:	701a      	strb	r2, [r3, #0]
	switch (direction) {
     57a:	1dbb      	adds	r3, r7, #6
     57c:	781b      	ldrb	r3, [r3, #0]
     57e:	2b01      	cmp	r3, #1
     580:	d023      	beq.n	5ca <_gpio_set_direction+0x66>
     582:	2b02      	cmp	r3, #2
     584:	d03f      	beq.n	606 <_gpio_set_direction+0xa2>
     586:	2b00      	cmp	r3, #0
     588:	d15d      	bne.n	646 <_gpio_set_direction+0xe2>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     58a:	683a      	ldr	r2, [r7, #0]
     58c:	1dfb      	adds	r3, r7, #7
     58e:	7819      	ldrb	r1, [r3, #0]
     590:	23c0      	movs	r3, #192	; 0xc0
     592:	05db      	lsls	r3, r3, #23
     594:	0018      	movs	r0, r3
     596:	4b31      	ldr	r3, [pc, #196]	; (65c <_gpio_set_direction+0xf8>)
     598:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     59a:	683b      	ldr	r3, [r7, #0]
     59c:	041b      	lsls	r3, r3, #16
     59e:	0c1b      	lsrs	r3, r3, #16
     5a0:	2280      	movs	r2, #128	; 0x80
     5a2:	05d2      	lsls	r2, r2, #23
     5a4:	431a      	orrs	r2, r3
     5a6:	1dfb      	adds	r3, r7, #7
     5a8:	781b      	ldrb	r3, [r3, #0]
     5aa:	482d      	ldr	r0, [pc, #180]	; (660 <_gpio_set_direction+0xfc>)
     5ac:	0019      	movs	r1, r3
     5ae:	4b2d      	ldr	r3, [pc, #180]	; (664 <_gpio_set_direction+0x100>)
     5b0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     5b2:	683b      	ldr	r3, [r7, #0]
     5b4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     5b6:	22c0      	movs	r2, #192	; 0xc0
     5b8:	0612      	lsls	r2, r2, #24
     5ba:	431a      	orrs	r2, r3
     5bc:	1dfb      	adds	r3, r7, #7
     5be:	781b      	ldrb	r3, [r3, #0]
     5c0:	4827      	ldr	r0, [pc, #156]	; (660 <_gpio_set_direction+0xfc>)
     5c2:	0019      	movs	r1, r3
     5c4:	4b27      	ldr	r3, [pc, #156]	; (664 <_gpio_set_direction+0x100>)
     5c6:	4798      	blx	r3
		break;
     5c8:	e043      	b.n	652 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     5ca:	683a      	ldr	r2, [r7, #0]
     5cc:	1dfb      	adds	r3, r7, #7
     5ce:	7819      	ldrb	r1, [r3, #0]
     5d0:	23c0      	movs	r3, #192	; 0xc0
     5d2:	05db      	lsls	r3, r3, #23
     5d4:	0018      	movs	r0, r3
     5d6:	4b21      	ldr	r3, [pc, #132]	; (65c <_gpio_set_direction+0xf8>)
     5d8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     5da:	683b      	ldr	r3, [r7, #0]
     5dc:	041b      	lsls	r3, r3, #16
     5de:	0c1b      	lsrs	r3, r3, #16
     5e0:	4a21      	ldr	r2, [pc, #132]	; (668 <_gpio_set_direction+0x104>)
     5e2:	431a      	orrs	r2, r3
     5e4:	1dfb      	adds	r3, r7, #7
     5e6:	781b      	ldrb	r3, [r3, #0]
     5e8:	481d      	ldr	r0, [pc, #116]	; (660 <_gpio_set_direction+0xfc>)
     5ea:	0019      	movs	r1, r3
     5ec:	4b1d      	ldr	r3, [pc, #116]	; (664 <_gpio_set_direction+0x100>)
     5ee:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     5f0:	683b      	ldr	r3, [r7, #0]
     5f2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     5f4:	4a1d      	ldr	r2, [pc, #116]	; (66c <_gpio_set_direction+0x108>)
     5f6:	431a      	orrs	r2, r3
     5f8:	1dfb      	adds	r3, r7, #7
     5fa:	781b      	ldrb	r3, [r3, #0]
     5fc:	4818      	ldr	r0, [pc, #96]	; (660 <_gpio_set_direction+0xfc>)
     5fe:	0019      	movs	r1, r3
     600:	4b18      	ldr	r3, [pc, #96]	; (664 <_gpio_set_direction+0x100>)
     602:	4798      	blx	r3
		break;
     604:	e025      	b.n	652 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
     606:	683a      	ldr	r2, [r7, #0]
     608:	1dfb      	adds	r3, r7, #7
     60a:	7819      	ldrb	r1, [r3, #0]
     60c:	23c0      	movs	r3, #192	; 0xc0
     60e:	05db      	lsls	r3, r3, #23
     610:	0018      	movs	r0, r3
     612:	4b17      	ldr	r3, [pc, #92]	; (670 <_gpio_set_direction+0x10c>)
     614:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     616:	683b      	ldr	r3, [r7, #0]
     618:	041b      	lsls	r3, r3, #16
     61a:	0c1b      	lsrs	r3, r3, #16
     61c:	2280      	movs	r2, #128	; 0x80
     61e:	05d2      	lsls	r2, r2, #23
     620:	431a      	orrs	r2, r3
     622:	1dfb      	adds	r3, r7, #7
     624:	781b      	ldrb	r3, [r3, #0]
     626:	480e      	ldr	r0, [pc, #56]	; (660 <_gpio_set_direction+0xfc>)
     628:	0019      	movs	r1, r3
     62a:	4b0e      	ldr	r3, [pc, #56]	; (664 <_gpio_set_direction+0x100>)
     62c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     62e:	683b      	ldr	r3, [r7, #0]
     630:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     632:	22c0      	movs	r2, #192	; 0xc0
     634:	0612      	lsls	r2, r2, #24
     636:	431a      	orrs	r2, r3
     638:	1dfb      	adds	r3, r7, #7
     63a:	781b      	ldrb	r3, [r3, #0]
     63c:	4808      	ldr	r0, [pc, #32]	; (660 <_gpio_set_direction+0xfc>)
     63e:	0019      	movs	r1, r3
     640:	4b08      	ldr	r3, [pc, #32]	; (664 <_gpio_set_direction+0x100>)
     642:	4798      	blx	r3
		break;
     644:	e005      	b.n	652 <_gpio_set_direction+0xee>

	default:
		ASSERT(false);
     646:	4b0b      	ldr	r3, [pc, #44]	; (674 <_gpio_set_direction+0x110>)
     648:	2245      	movs	r2, #69	; 0x45
     64a:	0019      	movs	r1, r3
     64c:	2000      	movs	r0, #0
     64e:	4b0a      	ldr	r3, [pc, #40]	; (678 <_gpio_set_direction+0x114>)
     650:	4798      	blx	r3
	}
}
     652:	46c0      	nop			; (mov r8, r8)
     654:	46bd      	mov	sp, r7
     656:	b002      	add	sp, #8
     658:	bd80      	pop	{r7, pc}
     65a:	46c0      	nop			; (mov r8, r8)
     65c:	00000279 	.word	0x00000279
     660:	41004400 	.word	0x41004400
     664:	00000539 	.word	0x00000539
     668:	40020000 	.word	0x40020000
     66c:	c0020000 	.word	0xc0020000
     670:	0000024d 	.word	0x0000024d
     674:	0000c2a8 	.word	0x0000c2a8
     678:	00002cd5 	.word	0x00002cd5

0000067c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     67c:	b580      	push	{r7, lr}
     67e:	b082      	sub	sp, #8
     680:	af00      	add	r7, sp, #0
     682:	6039      	str	r1, [r7, #0]
     684:	0011      	movs	r1, r2
     686:	1dfb      	adds	r3, r7, #7
     688:	1c02      	adds	r2, r0, #0
     68a:	701a      	strb	r2, [r3, #0]
     68c:	1dbb      	adds	r3, r7, #6
     68e:	1c0a      	adds	r2, r1, #0
     690:	701a      	strb	r2, [r3, #0]
	if (level) {
     692:	1dbb      	adds	r3, r7, #6
     694:	781b      	ldrb	r3, [r3, #0]
     696:	2b00      	cmp	r3, #0
     698:	d008      	beq.n	6ac <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     69a:	683a      	ldr	r2, [r7, #0]
     69c:	1dfb      	adds	r3, r7, #7
     69e:	7819      	ldrb	r1, [r3, #0]
     6a0:	23c0      	movs	r3, #192	; 0xc0
     6a2:	05db      	lsls	r3, r3, #23
     6a4:	0018      	movs	r0, r3
     6a6:	4b07      	ldr	r3, [pc, #28]	; (6c4 <_gpio_set_level+0x48>)
     6a8:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     6aa:	e007      	b.n	6bc <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     6ac:	683a      	ldr	r2, [r7, #0]
     6ae:	1dfb      	adds	r3, r7, #7
     6b0:	7819      	ldrb	r1, [r3, #0]
     6b2:	23c0      	movs	r3, #192	; 0xc0
     6b4:	05db      	lsls	r3, r3, #23
     6b6:	0018      	movs	r0, r3
     6b8:	4b03      	ldr	r3, [pc, #12]	; (6c8 <_gpio_set_level+0x4c>)
     6ba:	4798      	blx	r3
}
     6bc:	46c0      	nop			; (mov r8, r8)
     6be:	46bd      	mov	sp, r7
     6c0:	b002      	add	sp, #8
     6c2:	bd80      	pop	{r7, pc}
     6c4:	000002a5 	.word	0x000002a5
     6c8:	000002d1 	.word	0x000002d1

000006cc <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     6cc:	b590      	push	{r4, r7, lr}
     6ce:	b083      	sub	sp, #12
     6d0:	af00      	add	r7, sp, #0
     6d2:	0004      	movs	r4, r0
     6d4:	0008      	movs	r0, r1
     6d6:	0011      	movs	r1, r2
     6d8:	1dfb      	adds	r3, r7, #7
     6da:	1c22      	adds	r2, r4, #0
     6dc:	701a      	strb	r2, [r3, #0]
     6de:	1dbb      	adds	r3, r7, #6
     6e0:	1c02      	adds	r2, r0, #0
     6e2:	701a      	strb	r2, [r3, #0]
     6e4:	1d7b      	adds	r3, r7, #5
     6e6:	1c0a      	adds	r2, r1, #0
     6e8:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
     6ea:	1d7b      	adds	r3, r7, #5
     6ec:	781b      	ldrb	r3, [r3, #0]
     6ee:	2b01      	cmp	r3, #1
     6f0:	d00c      	beq.n	70c <_gpio_set_pin_pull_mode+0x40>
     6f2:	2b02      	cmp	r3, #2
     6f4:	d029      	beq.n	74a <_gpio_set_pin_pull_mode+0x7e>
     6f6:	2b00      	cmp	r3, #0
     6f8:	d146      	bne.n	788 <_gpio_set_pin_pull_mode+0xbc>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     6fa:	1dbb      	adds	r3, r7, #6
     6fc:	781a      	ldrb	r2, [r3, #0]
     6fe:	1dfb      	adds	r3, r7, #7
     700:	781b      	ldrb	r3, [r3, #0]
     702:	4827      	ldr	r0, [pc, #156]	; (7a0 <_gpio_set_pin_pull_mode+0xd4>)
     704:	0019      	movs	r1, r3
     706:	4b27      	ldr	r3, [pc, #156]	; (7a4 <_gpio_set_pin_pull_mode+0xd8>)
     708:	4798      	blx	r3
		break;
     70a:	e044      	b.n	796 <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     70c:	1dbb      	adds	r3, r7, #6
     70e:	781b      	ldrb	r3, [r3, #0]
     710:	2201      	movs	r2, #1
     712:	409a      	lsls	r2, r3
     714:	1dfb      	adds	r3, r7, #7
     716:	7819      	ldrb	r1, [r3, #0]
     718:	23c0      	movs	r3, #192	; 0xc0
     71a:	05db      	lsls	r3, r3, #23
     71c:	0018      	movs	r0, r3
     71e:	4b22      	ldr	r3, [pc, #136]	; (7a8 <_gpio_set_pin_pull_mode+0xdc>)
     720:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     722:	1dbb      	adds	r3, r7, #6
     724:	781a      	ldrb	r2, [r3, #0]
     726:	1dfb      	adds	r3, r7, #7
     728:	781b      	ldrb	r3, [r3, #0]
     72a:	481d      	ldr	r0, [pc, #116]	; (7a0 <_gpio_set_pin_pull_mode+0xd4>)
     72c:	0019      	movs	r1, r3
     72e:	4b1f      	ldr	r3, [pc, #124]	; (7ac <_gpio_set_pin_pull_mode+0xe0>)
     730:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
     732:	1dbb      	adds	r3, r7, #6
     734:	781b      	ldrb	r3, [r3, #0]
     736:	2201      	movs	r2, #1
     738:	409a      	lsls	r2, r3
     73a:	1dfb      	adds	r3, r7, #7
     73c:	7819      	ldrb	r1, [r3, #0]
     73e:	23c0      	movs	r3, #192	; 0xc0
     740:	05db      	lsls	r3, r3, #23
     742:	0018      	movs	r0, r3
     744:	4b1a      	ldr	r3, [pc, #104]	; (7b0 <_gpio_set_pin_pull_mode+0xe4>)
     746:	4798      	blx	r3
		break;
     748:	e025      	b.n	796 <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     74a:	1dbb      	adds	r3, r7, #6
     74c:	781b      	ldrb	r3, [r3, #0]
     74e:	2201      	movs	r2, #1
     750:	409a      	lsls	r2, r3
     752:	1dfb      	adds	r3, r7, #7
     754:	7819      	ldrb	r1, [r3, #0]
     756:	23c0      	movs	r3, #192	; 0xc0
     758:	05db      	lsls	r3, r3, #23
     75a:	0018      	movs	r0, r3
     75c:	4b12      	ldr	r3, [pc, #72]	; (7a8 <_gpio_set_pin_pull_mode+0xdc>)
     75e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     760:	1dbb      	adds	r3, r7, #6
     762:	781a      	ldrb	r2, [r3, #0]
     764:	1dfb      	adds	r3, r7, #7
     766:	781b      	ldrb	r3, [r3, #0]
     768:	480d      	ldr	r0, [pc, #52]	; (7a0 <_gpio_set_pin_pull_mode+0xd4>)
     76a:	0019      	movs	r1, r3
     76c:	4b0f      	ldr	r3, [pc, #60]	; (7ac <_gpio_set_pin_pull_mode+0xe0>)
     76e:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
     770:	1dbb      	adds	r3, r7, #6
     772:	781b      	ldrb	r3, [r3, #0]
     774:	2201      	movs	r2, #1
     776:	409a      	lsls	r2, r3
     778:	1dfb      	adds	r3, r7, #7
     77a:	7819      	ldrb	r1, [r3, #0]
     77c:	23c0      	movs	r3, #192	; 0xc0
     77e:	05db      	lsls	r3, r3, #23
     780:	0018      	movs	r0, r3
     782:	4b0c      	ldr	r3, [pc, #48]	; (7b4 <_gpio_set_pin_pull_mode+0xe8>)
     784:	4798      	blx	r3
		break;
     786:	e006      	b.n	796 <_gpio_set_pin_pull_mode+0xca>

	default:
		ASSERT(false);
     788:	4b0b      	ldr	r3, [pc, #44]	; (7b8 <_gpio_set_pin_pull_mode+0xec>)
     78a:	2288      	movs	r2, #136	; 0x88
     78c:	0019      	movs	r1, r3
     78e:	2000      	movs	r0, #0
     790:	4b0a      	ldr	r3, [pc, #40]	; (7bc <_gpio_set_pin_pull_mode+0xf0>)
     792:	4798      	blx	r3
		break;
     794:	46c0      	nop			; (mov r8, r8)
	}
}
     796:	46c0      	nop			; (mov r8, r8)
     798:	46bd      	mov	sp, r7
     79a:	b003      	add	sp, #12
     79c:	bd90      	pop	{r4, r7, pc}
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	41004400 	.word	0x41004400
     7a4:	000004e3 	.word	0x000004e3
     7a8:	00000279 	.word	0x00000279
     7ac:	0000048d 	.word	0x0000048d
     7b0:	000002a5 	.word	0x000002a5
     7b4:	000002d1 	.word	0x000002d1
     7b8:	0000c2a8 	.word	0x0000c2a8
     7bc:	00002cd5 	.word	0x00002cd5

000007c0 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     7c0:	b590      	push	{r4, r7, lr}
     7c2:	b085      	sub	sp, #20
     7c4:	af00      	add	r7, sp, #0
     7c6:	6078      	str	r0, [r7, #4]
     7c8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     7ca:	687b      	ldr	r3, [r7, #4]
     7cc:	095a      	lsrs	r2, r3, #5
     7ce:	230f      	movs	r3, #15
     7d0:	18fb      	adds	r3, r7, r3
     7d2:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
     7d4:	687b      	ldr	r3, [r7, #4]
     7d6:	b2da      	uxtb	r2, r3
     7d8:	230e      	movs	r3, #14
     7da:	18fb      	adds	r3, r7, r3
     7dc:	211f      	movs	r1, #31
     7de:	400a      	ands	r2, r1
     7e0:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     7e2:	683b      	ldr	r3, [r7, #0]
     7e4:	3301      	adds	r3, #1
     7e6:	d10a      	bne.n	7fe <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     7e8:	230e      	movs	r3, #14
     7ea:	18fb      	adds	r3, r7, r3
     7ec:	781a      	ldrb	r2, [r3, #0]
     7ee:	230f      	movs	r3, #15
     7f0:	18fb      	adds	r3, r7, r3
     7f2:	7819      	ldrb	r1, [r3, #0]
     7f4:	481b      	ldr	r0, [pc, #108]	; (864 <_gpio_set_pin_function+0xa4>)
     7f6:	2300      	movs	r3, #0
     7f8:	4c1b      	ldr	r4, [pc, #108]	; (868 <_gpio_set_pin_function+0xa8>)
     7fa:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     7fc:	e02e      	b.n	85c <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     7fe:	230e      	movs	r3, #14
     800:	18fb      	adds	r3, r7, r3
     802:	781a      	ldrb	r2, [r3, #0]
     804:	230f      	movs	r3, #15
     806:	18fb      	adds	r3, r7, r3
     808:	7819      	ldrb	r1, [r3, #0]
     80a:	4816      	ldr	r0, [pc, #88]	; (864 <_gpio_set_pin_function+0xa4>)
     80c:	2301      	movs	r3, #1
     80e:	4c16      	ldr	r4, [pc, #88]	; (868 <_gpio_set_pin_function+0xa8>)
     810:	47a0      	blx	r4
		if (pin & 1) {
     812:	230e      	movs	r3, #14
     814:	18fb      	adds	r3, r7, r3
     816:	781b      	ldrb	r3, [r3, #0]
     818:	2201      	movs	r2, #1
     81a:	4013      	ands	r3, r2
     81c:	d00f      	beq.n	83e <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     81e:	230e      	movs	r3, #14
     820:	18fb      	adds	r3, r7, r3
     822:	781b      	ldrb	r3, [r3, #0]
     824:	085b      	lsrs	r3, r3, #1
     826:	b2da      	uxtb	r2, r3
     828:	683b      	ldr	r3, [r7, #0]
     82a:	b2d8      	uxtb	r0, r3
     82c:	230f      	movs	r3, #15
     82e:	18fb      	adds	r3, r7, r3
     830:	7819      	ldrb	r1, [r3, #0]
     832:	4c0c      	ldr	r4, [pc, #48]	; (864 <_gpio_set_pin_function+0xa4>)
     834:	0003      	movs	r3, r0
     836:	0020      	movs	r0, r4
     838:	4c0c      	ldr	r4, [pc, #48]	; (86c <_gpio_set_pin_function+0xac>)
     83a:	47a0      	blx	r4
}
     83c:	e00e      	b.n	85c <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     83e:	230e      	movs	r3, #14
     840:	18fb      	adds	r3, r7, r3
     842:	781b      	ldrb	r3, [r3, #0]
     844:	085b      	lsrs	r3, r3, #1
     846:	b2da      	uxtb	r2, r3
     848:	683b      	ldr	r3, [r7, #0]
     84a:	b2d8      	uxtb	r0, r3
     84c:	230f      	movs	r3, #15
     84e:	18fb      	adds	r3, r7, r3
     850:	7819      	ldrb	r1, [r3, #0]
     852:	4c04      	ldr	r4, [pc, #16]	; (864 <_gpio_set_pin_function+0xa4>)
     854:	0003      	movs	r3, r0
     856:	0020      	movs	r0, r4
     858:	4c05      	ldr	r4, [pc, #20]	; (870 <_gpio_set_pin_function+0xb0>)
     85a:	47a0      	blx	r4
}
     85c:	46c0      	nop			; (mov r8, r8)
     85e:	46bd      	mov	sp, r7
     860:	b005      	add	sp, #20
     862:	bd90      	pop	{r4, r7, pc}
     864:	41004400 	.word	0x41004400
     868:	0000040b 	.word	0x0000040b
     86c:	00000385 	.word	0x00000385
     870:	000002fd 	.word	0x000002fd

00000874 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     874:	b580      	push	{r7, lr}
     876:	b082      	sub	sp, #8
     878:	af00      	add	r7, sp, #0
     87a:	0002      	movs	r2, r0
     87c:	1dfb      	adds	r3, r7, #7
     87e:	701a      	strb	r2, [r3, #0]
     880:	1dbb      	adds	r3, r7, #6
     882:	1c0a      	adds	r2, r1, #0
     884:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     886:	1dfb      	adds	r3, r7, #7
     888:	781b      	ldrb	r3, [r3, #0]
     88a:	095b      	lsrs	r3, r3, #5
     88c:	b2d8      	uxtb	r0, r3
     88e:	1dfb      	adds	r3, r7, #7
     890:	781b      	ldrb	r3, [r3, #0]
     892:	221f      	movs	r2, #31
     894:	4013      	ands	r3, r2
     896:	b2d9      	uxtb	r1, r3
     898:	1dbb      	adds	r3, r7, #6
     89a:	781b      	ldrb	r3, [r3, #0]
     89c:	001a      	movs	r2, r3
     89e:	4b03      	ldr	r3, [pc, #12]	; (8ac <gpio_set_pin_pull_mode+0x38>)
     8a0:	4798      	blx	r3
}
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	46bd      	mov	sp, r7
     8a6:	b002      	add	sp, #8
     8a8:	bd80      	pop	{r7, pc}
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	000006cd 	.word	0x000006cd

000008b0 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     8b0:	b580      	push	{r7, lr}
     8b2:	b082      	sub	sp, #8
     8b4:	af00      	add	r7, sp, #0
     8b6:	6078      	str	r0, [r7, #4]
     8b8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     8ba:	683a      	ldr	r2, [r7, #0]
     8bc:	687b      	ldr	r3, [r7, #4]
     8be:	0011      	movs	r1, r2
     8c0:	0018      	movs	r0, r3
     8c2:	4b03      	ldr	r3, [pc, #12]	; (8d0 <gpio_set_pin_function+0x20>)
     8c4:	4798      	blx	r3
}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	46bd      	mov	sp, r7
     8ca:	b002      	add	sp, #8
     8cc:	bd80      	pop	{r7, pc}
     8ce:	46c0      	nop			; (mov r8, r8)
     8d0:	000007c1 	.word	0x000007c1

000008d4 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     8d4:	b580      	push	{r7, lr}
     8d6:	b082      	sub	sp, #8
     8d8:	af00      	add	r7, sp, #0
     8da:	0002      	movs	r2, r0
     8dc:	1dfb      	adds	r3, r7, #7
     8de:	701a      	strb	r2, [r3, #0]
     8e0:	1dbb      	adds	r3, r7, #6
     8e2:	1c0a      	adds	r2, r1, #0
     8e4:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     8e6:	1dfb      	adds	r3, r7, #7
     8e8:	781b      	ldrb	r3, [r3, #0]
     8ea:	095b      	lsrs	r3, r3, #5
     8ec:	b2d8      	uxtb	r0, r3
     8ee:	1dfb      	adds	r3, r7, #7
     8f0:	781b      	ldrb	r3, [r3, #0]
     8f2:	221f      	movs	r2, #31
     8f4:	4013      	ands	r3, r2
     8f6:	2201      	movs	r2, #1
     8f8:	409a      	lsls	r2, r3
     8fa:	0011      	movs	r1, r2
     8fc:	1dbb      	adds	r3, r7, #6
     8fe:	781b      	ldrb	r3, [r3, #0]
     900:	001a      	movs	r2, r3
     902:	4b03      	ldr	r3, [pc, #12]	; (910 <gpio_set_pin_direction+0x3c>)
     904:	4798      	blx	r3
}
     906:	46c0      	nop			; (mov r8, r8)
     908:	46bd      	mov	sp, r7
     90a:	b002      	add	sp, #8
     90c:	bd80      	pop	{r7, pc}
     90e:	46c0      	nop			; (mov r8, r8)
     910:	00000565 	.word	0x00000565

00000914 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     914:	b580      	push	{r7, lr}
     916:	b082      	sub	sp, #8
     918:	af00      	add	r7, sp, #0
     91a:	0002      	movs	r2, r0
     91c:	1dfb      	adds	r3, r7, #7
     91e:	701a      	strb	r2, [r3, #0]
     920:	1dbb      	adds	r3, r7, #6
     922:	1c0a      	adds	r2, r1, #0
     924:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     926:	1dfb      	adds	r3, r7, #7
     928:	781b      	ldrb	r3, [r3, #0]
     92a:	095b      	lsrs	r3, r3, #5
     92c:	b2d8      	uxtb	r0, r3
     92e:	1dfb      	adds	r3, r7, #7
     930:	781b      	ldrb	r3, [r3, #0]
     932:	221f      	movs	r2, #31
     934:	4013      	ands	r3, r2
     936:	2201      	movs	r2, #1
     938:	409a      	lsls	r2, r3
     93a:	0011      	movs	r1, r2
     93c:	1dbb      	adds	r3, r7, #6
     93e:	781b      	ldrb	r3, [r3, #0]
     940:	001a      	movs	r2, r3
     942:	4b03      	ldr	r3, [pc, #12]	; (950 <gpio_set_pin_level+0x3c>)
     944:	4798      	blx	r3
}
     946:	46c0      	nop			; (mov r8, r8)
     948:	46bd      	mov	sp, r7
     94a:	b002      	add	sp, #8
     94c:	bd80      	pop	{r7, pc}
     94e:	46c0      	nop			; (mov r8, r8)
     950:	0000067d 	.word	0x0000067d

00000954 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     954:	b580      	push	{r7, lr}
     956:	af00      	add	r7, sp, #0
	_init_chip();
     958:	4b02      	ldr	r3, [pc, #8]	; (964 <init_mcu+0x10>)
     95a:	4798      	blx	r3
}
     95c:	46c0      	nop			; (mov r8, r8)
     95e:	46bd      	mov	sp, r7
     960:	bd80      	pop	{r7, pc}
     962:	46c0      	nop			; (mov r8, r8)
     964:	000036b9 	.word	0x000036b9

00000968 <_gclk_enable_channel>:
 *
 * \param[in] channel The channel to enable clock for
 * \param[in] source The clock source for the given channel
 */
static inline void _gclk_enable_channel(const uint8_t channel, const uint8_t source)
{
     968:	b580      	push	{r7, lr}
     96a:	b082      	sub	sp, #8
     96c:	af00      	add	r7, sp, #0
     96e:	0002      	movs	r2, r0
     970:	1dfb      	adds	r3, r7, #7
     972:	701a      	strb	r2, [r3, #0]
     974:	1dbb      	adds	r3, r7, #6
     976:	1c0a      	adds	r2, r1, #0
     978:	701a      	strb	r2, [r3, #0]

	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(channel) | GCLK_CLKCTRL_GEN(source) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
     97a:	1dfb      	adds	r3, r7, #7
     97c:	781b      	ldrb	r3, [r3, #0]
     97e:	b29b      	uxth	r3, r3
     980:	223f      	movs	r2, #63	; 0x3f
     982:	4013      	ands	r3, r2
     984:	b29a      	uxth	r2, r3
     986:	1dbb      	adds	r3, r7, #6
     988:	781b      	ldrb	r3, [r3, #0]
     98a:	b29b      	uxth	r3, r3
     98c:	021b      	lsls	r3, r3, #8
     98e:	b299      	uxth	r1, r3
     990:	23f0      	movs	r3, #240	; 0xf0
     992:	011b      	lsls	r3, r3, #4
     994:	400b      	ands	r3, r1
     996:	b29b      	uxth	r3, r3
     998:	4313      	orrs	r3, r2
     99a:	b29b      	uxth	r3, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
     99c:	2280      	movs	r2, #128	; 0x80
     99e:	01d2      	lsls	r2, r2, #7
     9a0:	4313      	orrs	r3, r2
     9a2:	b29b      	uxth	r3, r3
     9a4:	4a04      	ldr	r2, [pc, #16]	; (9b8 <_gclk_enable_channel+0x50>)
     9a6:	0019      	movs	r1, r3
     9a8:	0010      	movs	r0, r2
     9aa:	4b04      	ldr	r3, [pc, #16]	; (9bc <_gclk_enable_channel+0x54>)
     9ac:	4798      	blx	r3
}
     9ae:	46c0      	nop			; (mov r8, r8)
     9b0:	46bd      	mov	sp, r7
     9b2:	b002      	add	sp, #8
     9b4:	bd80      	pop	{r7, pc}
     9b6:	46c0      	nop			; (mov r8, r8)
     9b8:	40000c00 	.word	0x40000c00
     9bc:	0000022f 	.word	0x0000022f

000009c0 <_pm_get_ahb_index>:
 * \param[in] module Module to get index for
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static inline int32_t _pm_get_ahb_index(const void *const module)
{
     9c0:	b580      	push	{r7, lr}
     9c2:	b082      	sub	sp, #8
     9c4:	af00      	add	r7, sp, #0
     9c6:	6078      	str	r0, [r7, #4]
	if ((uint32_t)module == (uint32_t)PM_BUS_APBA) {
     9c8:	687b      	ldr	r3, [r7, #4]
     9ca:	2b01      	cmp	r3, #1
     9cc:	d101      	bne.n	9d2 <_pm_get_ahb_index+0x12>
		return 0;
     9ce:	2300      	movs	r3, #0
     9d0:	e023      	b.n	a1a <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)PM_BUS_APBB) {
     9d2:	687b      	ldr	r3, [r7, #4]
     9d4:	2b02      	cmp	r3, #2
     9d6:	d101      	bne.n	9dc <_pm_get_ahb_index+0x1c>
		return 1;
     9d8:	2301      	movs	r3, #1
     9da:	e01e      	b.n	a1a <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)PM_BUS_APBC) {
     9dc:	687b      	ldr	r3, [r7, #4]
     9de:	2b03      	cmp	r3, #3
     9e0:	d101      	bne.n	9e6 <_pm_get_ahb_index+0x26>
		return 2;
     9e2:	2302      	movs	r3, #2
     9e4:	e019      	b.n	a1a <_pm_get_ahb_index+0x5a>
	}
	if ((uint32_t)module == (uint32_t)DSU) {
     9e6:	687b      	ldr	r3, [r7, #4]
     9e8:	4a0e      	ldr	r2, [pc, #56]	; (a24 <_pm_get_ahb_index+0x64>)
     9ea:	4293      	cmp	r3, r2
     9ec:	d101      	bne.n	9f2 <_pm_get_ahb_index+0x32>
		return 3;
     9ee:	2303      	movs	r3, #3
     9f0:	e013      	b.n	a1a <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)NVMCTRL) {
     9f2:	687b      	ldr	r3, [r7, #4]
     9f4:	4a0c      	ldr	r2, [pc, #48]	; (a28 <_pm_get_ahb_index+0x68>)
     9f6:	4293      	cmp	r3, r2
     9f8:	d101      	bne.n	9fe <_pm_get_ahb_index+0x3e>
		return 4;
     9fa:	2304      	movs	r3, #4
     9fc:	e00d      	b.n	a1a <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)DMAC) {
     9fe:	687b      	ldr	r3, [r7, #4]
     a00:	4a0a      	ldr	r2, [pc, #40]	; (a2c <_pm_get_ahb_index+0x6c>)
     a02:	4293      	cmp	r3, r2
     a04:	d101      	bne.n	a0a <_pm_get_ahb_index+0x4a>
		return 5;
     a06:	2305      	movs	r3, #5
     a08:	e007      	b.n	a1a <_pm_get_ahb_index+0x5a>
	}
#ifdef USB
	else if ((uint32_t)module == (uint32_t)USB) {
     a0a:	687b      	ldr	r3, [r7, #4]
     a0c:	4a08      	ldr	r2, [pc, #32]	; (a30 <_pm_get_ahb_index+0x70>)
     a0e:	4293      	cmp	r3, r2
     a10:	d101      	bne.n	a16 <_pm_get_ahb_index+0x56>
		return 6;
     a12:	2306      	movs	r3, #6
     a14:	e001      	b.n	a1a <_pm_get_ahb_index+0x5a>
	}
#endif

	return ERR_INVALID_ARG;
     a16:	230d      	movs	r3, #13
     a18:	425b      	negs	r3, r3
}
     a1a:	0018      	movs	r0, r3
     a1c:	46bd      	mov	sp, r7
     a1e:	b002      	add	sp, #8
     a20:	bd80      	pop	{r7, pc}
     a22:	46c0      	nop			; (mov r8, r8)
     a24:	41002000 	.word	0x41002000
     a28:	41004000 	.word	0x41004000
     a2c:	41004800 	.word	0x41004800
     a30:	41005000 	.word	0x41005000

00000a34 <_pm_get_apbb_index>:
 * \param[in] module Module to get index for
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static inline int32_t _pm_get_apbb_index(const void *const module)
{
     a34:	b580      	push	{r7, lr}
     a36:	b082      	sub	sp, #8
     a38:	af00      	add	r7, sp, #0
     a3a:	6078      	str	r0, [r7, #4]
	if ((uint32_t)module == (uint32_t)PAC1) {
     a3c:	687a      	ldr	r2, [r7, #4]
     a3e:	2382      	movs	r3, #130	; 0x82
     a40:	05db      	lsls	r3, r3, #23
     a42:	429a      	cmp	r2, r3
     a44:	d101      	bne.n	a4a <_pm_get_apbb_index+0x16>
		return 0;
     a46:	2300      	movs	r3, #0
     a48:	e01f      	b.n	a8a <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)DSU) {
     a4a:	687b      	ldr	r3, [r7, #4]
     a4c:	4a11      	ldr	r2, [pc, #68]	; (a94 <_pm_get_apbb_index+0x60>)
     a4e:	4293      	cmp	r3, r2
     a50:	d101      	bne.n	a56 <_pm_get_apbb_index+0x22>
		return 1;
     a52:	2301      	movs	r3, #1
     a54:	e019      	b.n	a8a <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)NVMCTRL) {
     a56:	687b      	ldr	r3, [r7, #4]
     a58:	4a0f      	ldr	r2, [pc, #60]	; (a98 <_pm_get_apbb_index+0x64>)
     a5a:	4293      	cmp	r3, r2
     a5c:	d101      	bne.n	a62 <_pm_get_apbb_index+0x2e>
		return 2;
     a5e:	2302      	movs	r3, #2
     a60:	e013      	b.n	a8a <_pm_get_apbb_index+0x56>
	}
	if ((uint32_t)module == (uint32_t)PORT) {
     a62:	687b      	ldr	r3, [r7, #4]
     a64:	4a0d      	ldr	r2, [pc, #52]	; (a9c <_pm_get_apbb_index+0x68>)
     a66:	4293      	cmp	r3, r2
     a68:	d101      	bne.n	a6e <_pm_get_apbb_index+0x3a>
		return 3;
     a6a:	2303      	movs	r3, #3
     a6c:	e00d      	b.n	a8a <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)DMAC) {
     a6e:	687b      	ldr	r3, [r7, #4]
     a70:	4a0b      	ldr	r2, [pc, #44]	; (aa0 <_pm_get_apbb_index+0x6c>)
     a72:	4293      	cmp	r3, r2
     a74:	d101      	bne.n	a7a <_pm_get_apbb_index+0x46>
		return 4;
     a76:	2304      	movs	r3, #4
     a78:	e007      	b.n	a8a <_pm_get_apbb_index+0x56>
	}
#ifdef USB
	else if ((uint32_t)module == (uint32_t)USB) {
     a7a:	687b      	ldr	r3, [r7, #4]
     a7c:	4a09      	ldr	r2, [pc, #36]	; (aa4 <_pm_get_apbb_index+0x70>)
     a7e:	4293      	cmp	r3, r2
     a80:	d101      	bne.n	a86 <_pm_get_apbb_index+0x52>
		return 5;
     a82:	2305      	movs	r3, #5
     a84:	e001      	b.n	a8a <_pm_get_apbb_index+0x56>
	}
#endif

	return ERR_INVALID_ARG;
     a86:	230d      	movs	r3, #13
     a88:	425b      	negs	r3, r3
}
     a8a:	0018      	movs	r0, r3
     a8c:	46bd      	mov	sp, r7
     a8e:	b002      	add	sp, #8
     a90:	bd80      	pop	{r7, pc}
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	41002000 	.word	0x41002000
     a98:	41004000 	.word	0x41004000
     a9c:	41004400 	.word	0x41004400
     aa0:	41004800 	.word	0x41004800
     aa4:	41005000 	.word	0x41005000

00000aa8 <_pm_enable_bus_clock>:
 *
 * \param[in] bus A bus to enable clock on
 * \param[in] module A hardware module to enable clock for
 */
static inline void _pm_enable_bus_clock(const enum _pm_bus bus, const void *const module)
{
     aa8:	b580      	push	{r7, lr}
     aaa:	b084      	sub	sp, #16
     aac:	af00      	add	r7, sp, #0
     aae:	0002      	movs	r2, r0
     ab0:	6039      	str	r1, [r7, #0]
     ab2:	1dfb      	adds	r3, r7, #7
     ab4:	701a      	strb	r2, [r3, #0]
	uint32_t peripheral = ((uint32_t)module & 0x0000ff00) >> 10;
     ab6:	683b      	ldr	r3, [r7, #0]
     ab8:	0a9b      	lsrs	r3, r3, #10
     aba:	223f      	movs	r2, #63	; 0x3f
     abc:	4013      	ands	r3, r2
     abe:	60fb      	str	r3, [r7, #12]

	switch (bus) {
     ac0:	1dfb      	adds	r3, r7, #7
     ac2:	781b      	ldrb	r3, [r3, #0]
     ac4:	2b01      	cmp	r3, #1
     ac6:	d01e      	beq.n	b06 <_pm_enable_bus_clock+0x5e>
     ac8:	dc02      	bgt.n	ad0 <_pm_enable_bus_clock+0x28>
     aca:	2b00      	cmp	r3, #0
     acc:	d005      	beq.n	ada <_pm_enable_bus_clock+0x32>
     ace:	e044      	b.n	b5a <_pm_enable_bus_clock+0xb2>
     ad0:	2b02      	cmp	r3, #2
     ad2:	d022      	beq.n	b1a <_pm_enable_bus_clock+0x72>
     ad4:	2b03      	cmp	r3, #3
     ad6:	d036      	beq.n	b46 <_pm_enable_bus_clock+0x9e>
     ad8:	e03f      	b.n	b5a <_pm_enable_bus_clock+0xb2>
	case PM_BUS_AHB:
		if (_pm_get_ahb_index(module) >= 0) {
     ada:	683b      	ldr	r3, [r7, #0]
     adc:	0018      	movs	r0, r3
     ade:	4b26      	ldr	r3, [pc, #152]	; (b78 <_pm_enable_bus_clock+0xd0>)
     ae0:	4798      	blx	r3
     ae2:	1e03      	subs	r3, r0, #0
     ae4:	db40      	blt.n	b68 <_pm_enable_bus_clock+0xc0>
			peripheral = (uint32_t)_pm_get_ahb_index(module);
     ae6:	683b      	ldr	r3, [r7, #0]
     ae8:	0018      	movs	r0, r3
     aea:	4b23      	ldr	r3, [pc, #140]	; (b78 <_pm_enable_bus_clock+0xd0>)
     aec:	4798      	blx	r3
     aee:	0003      	movs	r3, r0
     af0:	60fb      	str	r3, [r7, #12]
			PM->AHBMASK.reg |= 1 << peripheral;
     af2:	4b22      	ldr	r3, [pc, #136]	; (b7c <_pm_enable_bus_clock+0xd4>)
     af4:	4a21      	ldr	r2, [pc, #132]	; (b7c <_pm_enable_bus_clock+0xd4>)
     af6:	6952      	ldr	r2, [r2, #20]
     af8:	2001      	movs	r0, #1
     afa:	68f9      	ldr	r1, [r7, #12]
     afc:	4088      	lsls	r0, r1
     afe:	0001      	movs	r1, r0
     b00:	430a      	orrs	r2, r1
     b02:	615a      	str	r2, [r3, #20]
		}
		break;
     b04:	e030      	b.n	b68 <_pm_enable_bus_clock+0xc0>
	case PM_BUS_APBA:
		PM->APBAMASK.reg |= 1 << peripheral;
     b06:	4b1d      	ldr	r3, [pc, #116]	; (b7c <_pm_enable_bus_clock+0xd4>)
     b08:	4a1c      	ldr	r2, [pc, #112]	; (b7c <_pm_enable_bus_clock+0xd4>)
     b0a:	6992      	ldr	r2, [r2, #24]
     b0c:	2001      	movs	r0, #1
     b0e:	68f9      	ldr	r1, [r7, #12]
     b10:	4088      	lsls	r0, r1
     b12:	0001      	movs	r1, r0
     b14:	430a      	orrs	r2, r1
     b16:	619a      	str	r2, [r3, #24]
		break;
     b18:	e029      	b.n	b6e <_pm_enable_bus_clock+0xc6>
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
     b1a:	683b      	ldr	r3, [r7, #0]
     b1c:	0018      	movs	r0, r3
     b1e:	4b18      	ldr	r3, [pc, #96]	; (b80 <_pm_enable_bus_clock+0xd8>)
     b20:	4798      	blx	r3
     b22:	1e03      	subs	r3, r0, #0
     b24:	db22      	blt.n	b6c <_pm_enable_bus_clock+0xc4>
			peripheral = (uint32_t)_pm_get_apbb_index(module);
     b26:	683b      	ldr	r3, [r7, #0]
     b28:	0018      	movs	r0, r3
     b2a:	4b15      	ldr	r3, [pc, #84]	; (b80 <_pm_enable_bus_clock+0xd8>)
     b2c:	4798      	blx	r3
     b2e:	0003      	movs	r3, r0
     b30:	60fb      	str	r3, [r7, #12]
			PM->APBBMASK.reg |= 1 << peripheral;
     b32:	4b12      	ldr	r3, [pc, #72]	; (b7c <_pm_enable_bus_clock+0xd4>)
     b34:	4a11      	ldr	r2, [pc, #68]	; (b7c <_pm_enable_bus_clock+0xd4>)
     b36:	69d2      	ldr	r2, [r2, #28]
     b38:	2001      	movs	r0, #1
     b3a:	68f9      	ldr	r1, [r7, #12]
     b3c:	4088      	lsls	r0, r1
     b3e:	0001      	movs	r1, r0
     b40:	430a      	orrs	r2, r1
     b42:	61da      	str	r2, [r3, #28]
		}
		break;
     b44:	e012      	b.n	b6c <_pm_enable_bus_clock+0xc4>
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     b46:	4b0d      	ldr	r3, [pc, #52]	; (b7c <_pm_enable_bus_clock+0xd4>)
     b48:	4a0c      	ldr	r2, [pc, #48]	; (b7c <_pm_enable_bus_clock+0xd4>)
     b4a:	6a12      	ldr	r2, [r2, #32]
     b4c:	2001      	movs	r0, #1
     b4e:	68f9      	ldr	r1, [r7, #12]
     b50:	4088      	lsls	r0, r1
     b52:	0001      	movs	r1, r0
     b54:	430a      	orrs	r2, r1
     b56:	621a      	str	r2, [r3, #32]
		break;
     b58:	e009      	b.n	b6e <_pm_enable_bus_clock+0xc6>
	default:
		ASSERT(false);
     b5a:	4b0a      	ldr	r3, [pc, #40]	; (b84 <_pm_enable_bus_clock+0xdc>)
     b5c:	229b      	movs	r2, #155	; 0x9b
     b5e:	0019      	movs	r1, r3
     b60:	2000      	movs	r0, #0
     b62:	4b09      	ldr	r3, [pc, #36]	; (b88 <_pm_enable_bus_clock+0xe0>)
     b64:	4798      	blx	r3
		break;
     b66:	e002      	b.n	b6e <_pm_enable_bus_clock+0xc6>
		break;
     b68:	46c0      	nop			; (mov r8, r8)
     b6a:	e000      	b.n	b6e <_pm_enable_bus_clock+0xc6>
		break;
     b6c:	46c0      	nop			; (mov r8, r8)
	}
}
     b6e:	46c0      	nop			; (mov r8, r8)
     b70:	46bd      	mov	sp, r7
     b72:	b004      	add	sp, #16
     b74:	bd80      	pop	{r7, pc}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	000009c1 	.word	0x000009c1
     b7c:	40000400 	.word	0x40000400
     b80:	00000a35 	.word	0x00000a35
     b84:	0000c2c4 	.word	0x0000c2c4
     b88:	00002cd5 	.word	0x00002cd5

00000b8c <ADC_0_PORT_init>:
struct pwm_descriptor PWM_SERVO;

struct pwm_descriptor PWM_MOTOR1;

void ADC_0_PORT_init(void)
{
     b8c:	b580      	push	{r7, lr}
     b8e:	af00      	add	r7, sp, #0

	// Disable digital pin circuitry
	gpio_set_pin_direction(MOTOR_VREF, GPIO_DIRECTION_OFF);
     b90:	2100      	movs	r1, #0
     b92:	2002      	movs	r0, #2
     b94:	4b0d      	ldr	r3, [pc, #52]	; (bcc <ADC_0_PORT_init+0x40>)
     b96:	4798      	blx	r3

	gpio_set_pin_function(MOTOR_VREF, PINMUX_PA02B_ADC_AIN0);
     b98:	4b0d      	ldr	r3, [pc, #52]	; (bd0 <ADC_0_PORT_init+0x44>)
     b9a:	0019      	movs	r1, r3
     b9c:	2002      	movs	r0, #2
     b9e:	4b0d      	ldr	r3, [pc, #52]	; (bd4 <ADC_0_PORT_init+0x48>)
     ba0:	4798      	blx	r3

	// Disable digital pin circuitry
	gpio_set_pin_direction(VBAT_MON, GPIO_DIRECTION_OFF);
     ba2:	2100      	movs	r1, #0
     ba4:	2003      	movs	r0, #3
     ba6:	4b09      	ldr	r3, [pc, #36]	; (bcc <ADC_0_PORT_init+0x40>)
     ba8:	4798      	blx	r3

	gpio_set_pin_function(VBAT_MON, PINMUX_PA03B_ADC_AIN1);
     baa:	4b0b      	ldr	r3, [pc, #44]	; (bd8 <ADC_0_PORT_init+0x4c>)
     bac:	0019      	movs	r1, r3
     bae:	2003      	movs	r0, #3
     bb0:	4b08      	ldr	r3, [pc, #32]	; (bd4 <ADC_0_PORT_init+0x48>)
     bb2:	4798      	blx	r3

	// Disable digital pin circuitry
	gpio_set_pin_direction(MOTOR_IMON, GPIO_DIRECTION_OFF);
     bb4:	2100      	movs	r1, #0
     bb6:	2004      	movs	r0, #4
     bb8:	4b04      	ldr	r3, [pc, #16]	; (bcc <ADC_0_PORT_init+0x40>)
     bba:	4798      	blx	r3

	gpio_set_pin_function(MOTOR_IMON, PINMUX_PA04B_ADC_AIN4);
     bbc:	4b07      	ldr	r3, [pc, #28]	; (bdc <ADC_0_PORT_init+0x50>)
     bbe:	0019      	movs	r1, r3
     bc0:	2004      	movs	r0, #4
     bc2:	4b04      	ldr	r3, [pc, #16]	; (bd4 <ADC_0_PORT_init+0x48>)
     bc4:	4798      	blx	r3
}
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	46bd      	mov	sp, r7
     bca:	bd80      	pop	{r7, pc}
     bcc:	000008d5 	.word	0x000008d5
     bd0:	00020001 	.word	0x00020001
     bd4:	000008b1 	.word	0x000008b1
     bd8:	00030001 	.word	0x00030001
     bdc:	00040001 	.word	0x00040001

00000be0 <ADC_0_CLOCK_init>:

void ADC_0_CLOCK_init(void)
{
     be0:	b580      	push	{r7, lr}
     be2:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, ADC);
     be4:	4b05      	ldr	r3, [pc, #20]	; (bfc <ADC_0_CLOCK_init+0x1c>)
     be6:	0019      	movs	r1, r3
     be8:	2003      	movs	r0, #3
     bea:	4b05      	ldr	r3, [pc, #20]	; (c00 <ADC_0_CLOCK_init+0x20>)
     bec:	4798      	blx	r3
	_gclk_enable_channel(ADC_GCLK_ID, CONF_GCLK_ADC_SRC);
     bee:	2100      	movs	r1, #0
     bf0:	201e      	movs	r0, #30
     bf2:	4b04      	ldr	r3, [pc, #16]	; (c04 <ADC_0_CLOCK_init+0x24>)
     bf4:	4798      	blx	r3
}
     bf6:	46c0      	nop			; (mov r8, r8)
     bf8:	46bd      	mov	sp, r7
     bfa:	bd80      	pop	{r7, pc}
     bfc:	42004000 	.word	0x42004000
     c00:	00000aa9 	.word	0x00000aa9
     c04:	00000969 	.word	0x00000969

00000c08 <ADC_0_init>:

void ADC_0_init(void)
{
     c08:	b580      	push	{r7, lr}
     c0a:	af00      	add	r7, sp, #0
	ADC_0_CLOCK_init();
     c0c:	4b06      	ldr	r3, [pc, #24]	; (c28 <ADC_0_init+0x20>)
     c0e:	4798      	blx	r3
	ADC_0_PORT_init();
     c10:	4b06      	ldr	r3, [pc, #24]	; (c2c <ADC_0_init+0x24>)
     c12:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC, (void *)NULL);
     c14:	4906      	ldr	r1, [pc, #24]	; (c30 <ADC_0_init+0x28>)
     c16:	4b07      	ldr	r3, [pc, #28]	; (c34 <ADC_0_init+0x2c>)
     c18:	2200      	movs	r2, #0
     c1a:	0018      	movs	r0, r3
     c1c:	4b06      	ldr	r3, [pc, #24]	; (c38 <ADC_0_init+0x30>)
     c1e:	4798      	blx	r3
}
     c20:	46c0      	nop			; (mov r8, r8)
     c22:	46bd      	mov	sp, r7
     c24:	bd80      	pop	{r7, pc}
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	00000be1 	.word	0x00000be1
     c2c:	00000b8d 	.word	0x00000b8d
     c30:	42004000 	.word	0x42004000
     c34:	2000055c 	.word	0x2000055c
     c38:	000015c1 	.word	0x000015c1

00000c3c <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     c3c:	b580      	push	{r7, lr}
     c3e:	af00      	add	r7, sp, #0
	_gclk_enable_channel(EIC_GCLK_ID, CONF_GCLK_EIC_SRC);
     c40:	2100      	movs	r1, #0
     c42:	2005      	movs	r0, #5
     c44:	4b0a      	ldr	r3, [pc, #40]	; (c70 <EXTERNAL_IRQ_0_init+0x34>)
     c46:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(NAV_PPS, GPIO_DIRECTION_IN);
     c48:	2101      	movs	r1, #1
     c4a:	2022      	movs	r0, #34	; 0x22
     c4c:	4b09      	ldr	r3, [pc, #36]	; (c74 <EXTERNAL_IRQ_0_init+0x38>)
     c4e:	4798      	blx	r3

	gpio_set_pin_pull_mode(NAV_PPS,
     c50:	2100      	movs	r1, #0
     c52:	2022      	movs	r0, #34	; 0x22
     c54:	4b08      	ldr	r3, [pc, #32]	; (c78 <EXTERNAL_IRQ_0_init+0x3c>)
     c56:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(NAV_PPS, PINMUX_PB02A_EIC_EXTINT2);
     c58:	2388      	movs	r3, #136	; 0x88
     c5a:	039b      	lsls	r3, r3, #14
     c5c:	0019      	movs	r1, r3
     c5e:	2022      	movs	r0, #34	; 0x22
     c60:	4b06      	ldr	r3, [pc, #24]	; (c7c <EXTERNAL_IRQ_0_init+0x40>)
     c62:	4798      	blx	r3

	ext_irq_init();
     c64:	4b06      	ldr	r3, [pc, #24]	; (c80 <EXTERNAL_IRQ_0_init+0x44>)
     c66:	4798      	blx	r3
}
     c68:	46c0      	nop			; (mov r8, r8)
     c6a:	46bd      	mov	sp, r7
     c6c:	bd80      	pop	{r7, pc}
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	00000969 	.word	0x00000969
     c74:	000008d5 	.word	0x000008d5
     c78:	00000875 	.word	0x00000875
     c7c:	000008b1 	.word	0x000008b1
     c80:	000016f1 	.word	0x000016f1

00000c84 <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     c84:	b580      	push	{r7, lr}
     c86:	af00      	add	r7, sp, #0

	gpio_set_pin_function(NAV_TxD, PINMUX_PA10C_SERCOM0_PAD2);
     c88:	4b06      	ldr	r3, [pc, #24]	; (ca4 <USART_0_PORT_init+0x20>)
     c8a:	0019      	movs	r1, r3
     c8c:	200a      	movs	r0, #10
     c8e:	4b06      	ldr	r3, [pc, #24]	; (ca8 <USART_0_PORT_init+0x24>)
     c90:	4798      	blx	r3

	gpio_set_pin_function(NAV_RxD, PINMUX_PA11C_SERCOM0_PAD3);
     c92:	4b06      	ldr	r3, [pc, #24]	; (cac <USART_0_PORT_init+0x28>)
     c94:	0019      	movs	r1, r3
     c96:	200b      	movs	r0, #11
     c98:	4b03      	ldr	r3, [pc, #12]	; (ca8 <USART_0_PORT_init+0x24>)
     c9a:	4798      	blx	r3
}
     c9c:	46c0      	nop			; (mov r8, r8)
     c9e:	46bd      	mov	sp, r7
     ca0:	bd80      	pop	{r7, pc}
     ca2:	46c0      	nop			; (mov r8, r8)
     ca4:	000a0002 	.word	0x000a0002
     ca8:	000008b1 	.word	0x000008b1
     cac:	000b0002 	.word	0x000b0002

00000cb0 <USART_0_CLOCK_init>:

void USART_0_CLOCK_init(void)
{
     cb0:	b580      	push	{r7, lr}
     cb2:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
     cb4:	4b05      	ldr	r3, [pc, #20]	; (ccc <USART_0_CLOCK_init+0x1c>)
     cb6:	0019      	movs	r1, r3
     cb8:	2003      	movs	r0, #3
     cba:	4b05      	ldr	r3, [pc, #20]	; (cd0 <USART_0_CLOCK_init+0x20>)
     cbc:	4798      	blx	r3
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
     cbe:	2100      	movs	r1, #0
     cc0:	2014      	movs	r0, #20
     cc2:	4b04      	ldr	r3, [pc, #16]	; (cd4 <USART_0_CLOCK_init+0x24>)
     cc4:	4798      	blx	r3
}
     cc6:	46c0      	nop			; (mov r8, r8)
     cc8:	46bd      	mov	sp, r7
     cca:	bd80      	pop	{r7, pc}
     ccc:	42000800 	.word	0x42000800
     cd0:	00000aa9 	.word	0x00000aa9
     cd4:	00000969 	.word	0x00000969

00000cd8 <USART_0_init>:

void USART_0_init(void)
{
     cd8:	b580      	push	{r7, lr}
     cda:	af00      	add	r7, sp, #0
	USART_0_CLOCK_init();
     cdc:	4b06      	ldr	r3, [pc, #24]	; (cf8 <USART_0_init+0x20>)
     cde:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM0, (void *)NULL);
     ce0:	4906      	ldr	r1, [pc, #24]	; (cfc <USART_0_init+0x24>)
     ce2:	4b07      	ldr	r3, [pc, #28]	; (d00 <USART_0_init+0x28>)
     ce4:	2200      	movs	r2, #0
     ce6:	0018      	movs	r0, r3
     ce8:	4b06      	ldr	r3, [pc, #24]	; (d04 <USART_0_init+0x2c>)
     cea:	4798      	blx	r3
	USART_0_PORT_init();
     cec:	4b06      	ldr	r3, [pc, #24]	; (d08 <USART_0_init+0x30>)
     cee:	4798      	blx	r3
}
     cf0:	46c0      	nop			; (mov r8, r8)
     cf2:	46bd      	mov	sp, r7
     cf4:	bd80      	pop	{r7, pc}
     cf6:	46c0      	nop			; (mov r8, r8)
     cf8:	00000cb1 	.word	0x00000cb1
     cfc:	42000800 	.word	0x42000800
     d00:	20000594 	.word	0x20000594
     d04:	00001fd1 	.word	0x00001fd1
     d08:	00000c85 	.word	0x00000c85

00000d0c <I2C_0_PORT_init>:

void I2C_0_PORT_init(void)
{
     d0c:	b580      	push	{r7, lr}
     d0e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(NAV_SDA,
     d10:	2101      	movs	r1, #1
     d12:	2008      	movs	r0, #8
     d14:	4b09      	ldr	r3, [pc, #36]	; (d3c <I2C_0_PORT_init+0x30>)
     d16:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(NAV_SDA, PINMUX_PA08D_SERCOM2_PAD0);
     d18:	4b09      	ldr	r3, [pc, #36]	; (d40 <I2C_0_PORT_init+0x34>)
     d1a:	0019      	movs	r1, r3
     d1c:	2008      	movs	r0, #8
     d1e:	4b09      	ldr	r3, [pc, #36]	; (d44 <I2C_0_PORT_init+0x38>)
     d20:	4798      	blx	r3

	gpio_set_pin_pull_mode(NAV_SCL,
     d22:	2101      	movs	r1, #1
     d24:	2009      	movs	r0, #9
     d26:	4b05      	ldr	r3, [pc, #20]	; (d3c <I2C_0_PORT_init+0x30>)
     d28:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(NAV_SCL, PINMUX_PA09D_SERCOM2_PAD1);
     d2a:	4b07      	ldr	r3, [pc, #28]	; (d48 <I2C_0_PORT_init+0x3c>)
     d2c:	0019      	movs	r1, r3
     d2e:	2009      	movs	r0, #9
     d30:	4b04      	ldr	r3, [pc, #16]	; (d44 <I2C_0_PORT_init+0x38>)
     d32:	4798      	blx	r3
}
     d34:	46c0      	nop			; (mov r8, r8)
     d36:	46bd      	mov	sp, r7
     d38:	bd80      	pop	{r7, pc}
     d3a:	46c0      	nop			; (mov r8, r8)
     d3c:	00000875 	.word	0x00000875
     d40:	00080003 	.word	0x00080003
     d44:	000008b1 	.word	0x000008b1
     d48:	00090003 	.word	0x00090003

00000d4c <I2C_0_CLOCK_init>:

void I2C_0_CLOCK_init(void)
{
     d4c:	b580      	push	{r7, lr}
     d4e:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM2);
     d50:	4b07      	ldr	r3, [pc, #28]	; (d70 <I2C_0_CLOCK_init+0x24>)
     d52:	0019      	movs	r1, r3
     d54:	2003      	movs	r0, #3
     d56:	4b07      	ldr	r3, [pc, #28]	; (d74 <I2C_0_CLOCK_init+0x28>)
     d58:	4798      	blx	r3
	_gclk_enable_channel(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
     d5a:	2100      	movs	r1, #0
     d5c:	2016      	movs	r0, #22
     d5e:	4b06      	ldr	r3, [pc, #24]	; (d78 <I2C_0_CLOCK_init+0x2c>)
     d60:	4798      	blx	r3
	_gclk_enable_channel(SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC);
     d62:	2103      	movs	r1, #3
     d64:	2013      	movs	r0, #19
     d66:	4b04      	ldr	r3, [pc, #16]	; (d78 <I2C_0_CLOCK_init+0x2c>)
     d68:	4798      	blx	r3
}
     d6a:	46c0      	nop			; (mov r8, r8)
     d6c:	46bd      	mov	sp, r7
     d6e:	bd80      	pop	{r7, pc}
     d70:	42001000 	.word	0x42001000
     d74:	00000aa9 	.word	0x00000aa9
     d78:	00000969 	.word	0x00000969

00000d7c <I2C_0_init>:

void I2C_0_init(void)
{
     d7c:	b580      	push	{r7, lr}
     d7e:	af00      	add	r7, sp, #0
	I2C_0_CLOCK_init();
     d80:	4b06      	ldr	r3, [pc, #24]	; (d9c <I2C_0_init+0x20>)
     d82:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM2);
     d84:	4a06      	ldr	r2, [pc, #24]	; (da0 <I2C_0_init+0x24>)
     d86:	4b07      	ldr	r3, [pc, #28]	; (da4 <I2C_0_init+0x28>)
     d88:	0011      	movs	r1, r2
     d8a:	0018      	movs	r0, r3
     d8c:	4b06      	ldr	r3, [pc, #24]	; (da8 <I2C_0_init+0x2c>)
     d8e:	4798      	blx	r3
	I2C_0_PORT_init();
     d90:	4b06      	ldr	r3, [pc, #24]	; (dac <I2C_0_init+0x30>)
     d92:	4798      	blx	r3
}
     d94:	46c0      	nop			; (mov r8, r8)
     d96:	46bd      	mov	sp, r7
     d98:	bd80      	pop	{r7, pc}
     d9a:	46c0      	nop			; (mov r8, r8)
     d9c:	00000d4d 	.word	0x00000d4d
     da0:	42001000 	.word	0x42001000
     da4:	200005a0 	.word	0x200005a0
     da8:	000018fd 	.word	0x000018fd
     dac:	00000d0d 	.word	0x00000d0d

00000db0 <I2C_1_PORT_init>:

void I2C_1_PORT_init(void)
{
     db0:	b580      	push	{r7, lr}
     db2:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(SDA,
     db4:	2100      	movs	r1, #0
     db6:	2016      	movs	r0, #22
     db8:	4b09      	ldr	r3, [pc, #36]	; (de0 <I2C_1_PORT_init+0x30>)
     dba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(SDA, PINMUX_PA22C_SERCOM3_PAD0);
     dbc:	4b09      	ldr	r3, [pc, #36]	; (de4 <I2C_1_PORT_init+0x34>)
     dbe:	0019      	movs	r1, r3
     dc0:	2016      	movs	r0, #22
     dc2:	4b09      	ldr	r3, [pc, #36]	; (de8 <I2C_1_PORT_init+0x38>)
     dc4:	4798      	blx	r3

	gpio_set_pin_pull_mode(SCL,
     dc6:	2100      	movs	r1, #0
     dc8:	2017      	movs	r0, #23
     dca:	4b05      	ldr	r3, [pc, #20]	; (de0 <I2C_1_PORT_init+0x30>)
     dcc:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(SCL, PINMUX_PA23C_SERCOM3_PAD1);
     dce:	4b07      	ldr	r3, [pc, #28]	; (dec <I2C_1_PORT_init+0x3c>)
     dd0:	0019      	movs	r1, r3
     dd2:	2017      	movs	r0, #23
     dd4:	4b04      	ldr	r3, [pc, #16]	; (de8 <I2C_1_PORT_init+0x38>)
     dd6:	4798      	blx	r3
}
     dd8:	46c0      	nop			; (mov r8, r8)
     dda:	46bd      	mov	sp, r7
     ddc:	bd80      	pop	{r7, pc}
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	00000875 	.word	0x00000875
     de4:	00160002 	.word	0x00160002
     de8:	000008b1 	.word	0x000008b1
     dec:	00170002 	.word	0x00170002

00000df0 <I2C_1_CLOCK_init>:

void I2C_1_CLOCK_init(void)
{
     df0:	b580      	push	{r7, lr}
     df2:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
     df4:	4b07      	ldr	r3, [pc, #28]	; (e14 <I2C_1_CLOCK_init+0x24>)
     df6:	0019      	movs	r1, r3
     df8:	2003      	movs	r0, #3
     dfa:	4b07      	ldr	r3, [pc, #28]	; (e18 <I2C_1_CLOCK_init+0x28>)
     dfc:	4798      	blx	r3
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
     dfe:	2100      	movs	r1, #0
     e00:	2017      	movs	r0, #23
     e02:	4b06      	ldr	r3, [pc, #24]	; (e1c <I2C_1_CLOCK_init+0x2c>)
     e04:	4798      	blx	r3
	_gclk_enable_channel(SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC);
     e06:	2103      	movs	r1, #3
     e08:	2013      	movs	r0, #19
     e0a:	4b04      	ldr	r3, [pc, #16]	; (e1c <I2C_1_CLOCK_init+0x2c>)
     e0c:	4798      	blx	r3
}
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	46bd      	mov	sp, r7
     e12:	bd80      	pop	{r7, pc}
     e14:	42001400 	.word	0x42001400
     e18:	00000aa9 	.word	0x00000aa9
     e1c:	00000969 	.word	0x00000969

00000e20 <I2C_1_init>:

void I2C_1_init(void)
{
     e20:	b580      	push	{r7, lr}
     e22:	af00      	add	r7, sp, #0
	I2C_1_CLOCK_init();
     e24:	4b06      	ldr	r3, [pc, #24]	; (e40 <I2C_1_init+0x20>)
     e26:	4798      	blx	r3
	i2c_m_sync_init(&I2C_1, SERCOM3);
     e28:	4a06      	ldr	r2, [pc, #24]	; (e44 <I2C_1_init+0x24>)
     e2a:	4b07      	ldr	r3, [pc, #28]	; (e48 <I2C_1_init+0x28>)
     e2c:	0011      	movs	r1, r2
     e2e:	0018      	movs	r0, r3
     e30:	4b06      	ldr	r3, [pc, #24]	; (e4c <I2C_1_init+0x2c>)
     e32:	4798      	blx	r3
	I2C_1_PORT_init();
     e34:	4b06      	ldr	r3, [pc, #24]	; (e50 <I2C_1_init+0x30>)
     e36:	4798      	blx	r3
}
     e38:	46c0      	nop			; (mov r8, r8)
     e3a:	46bd      	mov	sp, r7
     e3c:	bd80      	pop	{r7, pc}
     e3e:	46c0      	nop			; (mov r8, r8)
     e40:	00000df1 	.word	0x00000df1
     e44:	42001400 	.word	0x42001400
     e48:	2000053c 	.word	0x2000053c
     e4c:	000018fd 	.word	0x000018fd
     e50:	00000db1 	.word	0x00000db1

00000e54 <SPI_1_PORT_init>:

void SPI_1_PORT_init(void)
{
     e54:	b580      	push	{r7, lr}
     e56:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(MISO, GPIO_DIRECTION_IN);
     e58:	2101      	movs	r1, #1
     e5a:	200c      	movs	r0, #12
     e5c:	4b13      	ldr	r3, [pc, #76]	; (eac <SPI_1_PORT_init+0x58>)
     e5e:	4798      	blx	r3

	gpio_set_pin_pull_mode(MISO,
     e60:	2100      	movs	r1, #0
     e62:	200c      	movs	r0, #12
     e64:	4b12      	ldr	r3, [pc, #72]	; (eb0 <SPI_1_PORT_init+0x5c>)
     e66:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MISO, PINMUX_PA12D_SERCOM4_PAD0);
     e68:	4b12      	ldr	r3, [pc, #72]	; (eb4 <SPI_1_PORT_init+0x60>)
     e6a:	0019      	movs	r1, r3
     e6c:	200c      	movs	r0, #12
     e6e:	4b12      	ldr	r3, [pc, #72]	; (eb8 <SPI_1_PORT_init+0x64>)
     e70:	4798      	blx	r3

	gpio_set_pin_level(MOSI,
     e72:	2100      	movs	r1, #0
     e74:	202a      	movs	r0, #42	; 0x2a
     e76:	4b11      	ldr	r3, [pc, #68]	; (ebc <SPI_1_PORT_init+0x68>)
     e78:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MOSI, GPIO_DIRECTION_OUT);
     e7a:	2102      	movs	r1, #2
     e7c:	202a      	movs	r0, #42	; 0x2a
     e7e:	4b0b      	ldr	r3, [pc, #44]	; (eac <SPI_1_PORT_init+0x58>)
     e80:	4798      	blx	r3

	gpio_set_pin_function(MOSI, PINMUX_PB10D_SERCOM4_PAD2);
     e82:	4b0f      	ldr	r3, [pc, #60]	; (ec0 <SPI_1_PORT_init+0x6c>)
     e84:	0019      	movs	r1, r3
     e86:	202a      	movs	r0, #42	; 0x2a
     e88:	4b0b      	ldr	r3, [pc, #44]	; (eb8 <SPI_1_PORT_init+0x64>)
     e8a:	4798      	blx	r3

	gpio_set_pin_level(SCK,
     e8c:	2100      	movs	r1, #0
     e8e:	202b      	movs	r0, #43	; 0x2b
     e90:	4b0a      	ldr	r3, [pc, #40]	; (ebc <SPI_1_PORT_init+0x68>)
     e92:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(SCK, GPIO_DIRECTION_OUT);
     e94:	2102      	movs	r1, #2
     e96:	202b      	movs	r0, #43	; 0x2b
     e98:	4b04      	ldr	r3, [pc, #16]	; (eac <SPI_1_PORT_init+0x58>)
     e9a:	4798      	blx	r3

	gpio_set_pin_function(SCK, PINMUX_PB11D_SERCOM4_PAD3);
     e9c:	4b09      	ldr	r3, [pc, #36]	; (ec4 <SPI_1_PORT_init+0x70>)
     e9e:	0019      	movs	r1, r3
     ea0:	202b      	movs	r0, #43	; 0x2b
     ea2:	4b05      	ldr	r3, [pc, #20]	; (eb8 <SPI_1_PORT_init+0x64>)
     ea4:	4798      	blx	r3
}
     ea6:	46c0      	nop			; (mov r8, r8)
     ea8:	46bd      	mov	sp, r7
     eaa:	bd80      	pop	{r7, pc}
     eac:	000008d5 	.word	0x000008d5
     eb0:	00000875 	.word	0x00000875
     eb4:	000c0003 	.word	0x000c0003
     eb8:	000008b1 	.word	0x000008b1
     ebc:	00000915 	.word	0x00000915
     ec0:	002a0003 	.word	0x002a0003
     ec4:	002b0003 	.word	0x002b0003

00000ec8 <SPI_1_CLOCK_init>:

void SPI_1_CLOCK_init(void)
{
     ec8:	b580      	push	{r7, lr}
     eca:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM4);
     ecc:	4b05      	ldr	r3, [pc, #20]	; (ee4 <SPI_1_CLOCK_init+0x1c>)
     ece:	0019      	movs	r1, r3
     ed0:	2003      	movs	r0, #3
     ed2:	4b05      	ldr	r3, [pc, #20]	; (ee8 <SPI_1_CLOCK_init+0x20>)
     ed4:	4798      	blx	r3
	_gclk_enable_channel(SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC);
     ed6:	2100      	movs	r1, #0
     ed8:	2018      	movs	r0, #24
     eda:	4b04      	ldr	r3, [pc, #16]	; (eec <SPI_1_CLOCK_init+0x24>)
     edc:	4798      	blx	r3
}
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	46bd      	mov	sp, r7
     ee2:	bd80      	pop	{r7, pc}
     ee4:	42001800 	.word	0x42001800
     ee8:	00000aa9 	.word	0x00000aa9
     eec:	00000969 	.word	0x00000969

00000ef0 <SPI_1_init>:

void SPI_1_init(void)
{
     ef0:	b580      	push	{r7, lr}
     ef2:	af00      	add	r7, sp, #0
	SPI_1_CLOCK_init();
     ef4:	4b06      	ldr	r3, [pc, #24]	; (f10 <SPI_1_init+0x20>)
     ef6:	4798      	blx	r3
	spi_m_sync_init(&SPI_1, SERCOM4);
     ef8:	4a06      	ldr	r2, [pc, #24]	; (f14 <SPI_1_init+0x24>)
     efa:	4b07      	ldr	r3, [pc, #28]	; (f18 <SPI_1_init+0x28>)
     efc:	0011      	movs	r1, r2
     efe:	0018      	movs	r0, r3
     f00:	4b06      	ldr	r3, [pc, #24]	; (f1c <SPI_1_init+0x2c>)
     f02:	4798      	blx	r3
	SPI_1_PORT_init();
     f04:	4b06      	ldr	r3, [pc, #24]	; (f20 <SPI_1_init+0x30>)
     f06:	4798      	blx	r3
}
     f08:	46c0      	nop			; (mov r8, r8)
     f0a:	46bd      	mov	sp, r7
     f0c:	bd80      	pop	{r7, pc}
     f0e:	46c0      	nop			; (mov r8, r8)
     f10:	00000ec9 	.word	0x00000ec9
     f14:	42001800 	.word	0x42001800
     f18:	20000524 	.word	0x20000524
     f1c:	00001aa1 	.word	0x00001aa1
     f20:	00000e55 	.word	0x00000e55

00000f24 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     f24:	b580      	push	{r7, lr}
     f26:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(MOTOR_MISO, GPIO_DIRECTION_IN);
     f28:	2101      	movs	r1, #1
     f2a:	203e      	movs	r0, #62	; 0x3e
     f2c:	4b13      	ldr	r3, [pc, #76]	; (f7c <SPI_0_PORT_init+0x58>)
     f2e:	4798      	blx	r3

	gpio_set_pin_pull_mode(MOTOR_MISO,
     f30:	2100      	movs	r1, #0
     f32:	203e      	movs	r0, #62	; 0x3e
     f34:	4b12      	ldr	r3, [pc, #72]	; (f80 <SPI_0_PORT_init+0x5c>)
     f36:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MOTOR_MISO, PINMUX_PB30D_SERCOM5_PAD0);
     f38:	4b12      	ldr	r3, [pc, #72]	; (f84 <SPI_0_PORT_init+0x60>)
     f3a:	0019      	movs	r1, r3
     f3c:	203e      	movs	r0, #62	; 0x3e
     f3e:	4b12      	ldr	r3, [pc, #72]	; (f88 <SPI_0_PORT_init+0x64>)
     f40:	4798      	blx	r3

	gpio_set_pin_level(MOTOR_MOSI,
     f42:	2100      	movs	r1, #0
     f44:	2020      	movs	r0, #32
     f46:	4b11      	ldr	r3, [pc, #68]	; (f8c <SPI_0_PORT_init+0x68>)
     f48:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MOTOR_MOSI, GPIO_DIRECTION_OUT);
     f4a:	2102      	movs	r1, #2
     f4c:	2020      	movs	r0, #32
     f4e:	4b0b      	ldr	r3, [pc, #44]	; (f7c <SPI_0_PORT_init+0x58>)
     f50:	4798      	blx	r3

	gpio_set_pin_function(MOTOR_MOSI, PINMUX_PB00D_SERCOM5_PAD2);
     f52:	4b0f      	ldr	r3, [pc, #60]	; (f90 <SPI_0_PORT_init+0x6c>)
     f54:	0019      	movs	r1, r3
     f56:	2020      	movs	r0, #32
     f58:	4b0b      	ldr	r3, [pc, #44]	; (f88 <SPI_0_PORT_init+0x64>)
     f5a:	4798      	blx	r3

	gpio_set_pin_level(MOTOR_SCK,
     f5c:	2100      	movs	r1, #0
     f5e:	2021      	movs	r0, #33	; 0x21
     f60:	4b0a      	ldr	r3, [pc, #40]	; (f8c <SPI_0_PORT_init+0x68>)
     f62:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MOTOR_SCK, GPIO_DIRECTION_OUT);
     f64:	2102      	movs	r1, #2
     f66:	2021      	movs	r0, #33	; 0x21
     f68:	4b04      	ldr	r3, [pc, #16]	; (f7c <SPI_0_PORT_init+0x58>)
     f6a:	4798      	blx	r3

	gpio_set_pin_function(MOTOR_SCK, PINMUX_PB01D_SERCOM5_PAD3);
     f6c:	4b09      	ldr	r3, [pc, #36]	; (f94 <SPI_0_PORT_init+0x70>)
     f6e:	0019      	movs	r1, r3
     f70:	2021      	movs	r0, #33	; 0x21
     f72:	4b05      	ldr	r3, [pc, #20]	; (f88 <SPI_0_PORT_init+0x64>)
     f74:	4798      	blx	r3
}
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	46bd      	mov	sp, r7
     f7a:	bd80      	pop	{r7, pc}
     f7c:	000008d5 	.word	0x000008d5
     f80:	00000875 	.word	0x00000875
     f84:	003e0003 	.word	0x003e0003
     f88:	000008b1 	.word	0x000008b1
     f8c:	00000915 	.word	0x00000915
     f90:	00200003 	.word	0x00200003
     f94:	00210003 	.word	0x00210003

00000f98 <SPI_0_CLOCK_init>:

void SPI_0_CLOCK_init(void)
{
     f98:	b580      	push	{r7, lr}
     f9a:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM5);
     f9c:	4b05      	ldr	r3, [pc, #20]	; (fb4 <SPI_0_CLOCK_init+0x1c>)
     f9e:	0019      	movs	r1, r3
     fa0:	2003      	movs	r0, #3
     fa2:	4b05      	ldr	r3, [pc, #20]	; (fb8 <SPI_0_CLOCK_init+0x20>)
     fa4:	4798      	blx	r3
	_gclk_enable_channel(SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC);
     fa6:	2100      	movs	r1, #0
     fa8:	2019      	movs	r0, #25
     faa:	4b04      	ldr	r3, [pc, #16]	; (fbc <SPI_0_CLOCK_init+0x24>)
     fac:	4798      	blx	r3
}
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	46bd      	mov	sp, r7
     fb2:	bd80      	pop	{r7, pc}
     fb4:	42001c00 	.word	0x42001c00
     fb8:	00000aa9 	.word	0x00000aa9
     fbc:	00000969 	.word	0x00000969

00000fc0 <SPI_0_init>:

void SPI_0_init(void)
{
     fc0:	b580      	push	{r7, lr}
     fc2:	af00      	add	r7, sp, #0
	SPI_0_CLOCK_init();
     fc4:	4b06      	ldr	r3, [pc, #24]	; (fe0 <SPI_0_init+0x20>)
     fc6:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM5);
     fc8:	4a06      	ldr	r2, [pc, #24]	; (fe4 <SPI_0_init+0x24>)
     fca:	4b07      	ldr	r3, [pc, #28]	; (fe8 <SPI_0_init+0x28>)
     fcc:	0011      	movs	r1, r2
     fce:	0018      	movs	r0, r3
     fd0:	4b06      	ldr	r3, [pc, #24]	; (fec <SPI_0_init+0x2c>)
     fd2:	4798      	blx	r3
	SPI_0_PORT_init();
     fd4:	4b06      	ldr	r3, [pc, #24]	; (ff0 <SPI_0_init+0x30>)
     fd6:	4798      	blx	r3
}
     fd8:	46c0      	nop			; (mov r8, r8)
     fda:	46bd      	mov	sp, r7
     fdc:	bd80      	pop	{r7, pc}
     fde:	46c0      	nop			; (mov r8, r8)
     fe0:	00000f99 	.word	0x00000f99
     fe4:	42001c00 	.word	0x42001c00
     fe8:	2000057c 	.word	0x2000057c
     fec:	00001aa1 	.word	0x00001aa1
     ff0:	00000f25 	.word	0x00000f25

00000ff4 <delay_driver_init>:

void delay_driver_init(void)
{
     ff4:	b580      	push	{r7, lr}
     ff6:	af00      	add	r7, sp, #0
	delay_init(SysTick);
     ff8:	4b03      	ldr	r3, [pc, #12]	; (1008 <delay_driver_init+0x14>)
     ffa:	0018      	movs	r0, r3
     ffc:	4b03      	ldr	r3, [pc, #12]	; (100c <delay_driver_init+0x18>)
     ffe:	4798      	blx	r3
}
    1000:	46c0      	nop			; (mov r8, r8)
    1002:	46bd      	mov	sp, r7
    1004:	bd80      	pop	{r7, pc}
    1006:	46c0      	nop			; (mov r8, r8)
    1008:	e000e010 	.word	0xe000e010
    100c:	00001659 	.word	0x00001659

00001010 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
    1010:	b580      	push	{r7, lr}
    1012:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
    1014:	4b09      	ldr	r3, [pc, #36]	; (103c <TIMER_0_init+0x2c>)
    1016:	0019      	movs	r1, r3
    1018:	2001      	movs	r0, #1
    101a:	4b09      	ldr	r3, [pc, #36]	; (1040 <TIMER_0_init+0x30>)
    101c:	4798      	blx	r3
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
    101e:	2100      	movs	r1, #0
    1020:	2004      	movs	r0, #4
    1022:	4b08      	ldr	r3, [pc, #32]	; (1044 <TIMER_0_init+0x34>)
    1024:	4798      	blx	r3
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
    1026:	4b08      	ldr	r3, [pc, #32]	; (1048 <TIMER_0_init+0x38>)
    1028:	4798      	blx	r3
    102a:	0002      	movs	r2, r0
    102c:	4903      	ldr	r1, [pc, #12]	; (103c <TIMER_0_init+0x2c>)
    102e:	4b07      	ldr	r3, [pc, #28]	; (104c <TIMER_0_init+0x3c>)
    1030:	0018      	movs	r0, r3
    1032:	4b07      	ldr	r3, [pc, #28]	; (1050 <TIMER_0_init+0x40>)
    1034:	4798      	blx	r3
}
    1036:	46c0      	nop			; (mov r8, r8)
    1038:	46bd      	mov	sp, r7
    103a:	bd80      	pop	{r7, pc}
    103c:	40001400 	.word	0x40001400
    1040:	00000aa9 	.word	0x00000aa9
    1044:	00000969 	.word	0x00000969
    1048:	000040b1 	.word	0x000040b1
    104c:	200005c0 	.word	0x200005c0
    1050:	00001c99 	.word	0x00001c99

00001054 <PWM_SERVO_PORT_init>:

void PWM_SERVO_PORT_init(void)
{
    1054:	b580      	push	{r7, lr}
    1056:	af00      	add	r7, sp, #0

	gpio_set_pin_function(SERVO_PWM, PINMUX_PA07E_TCC1_WO1);
    1058:	4b03      	ldr	r3, [pc, #12]	; (1068 <PWM_SERVO_PORT_init+0x14>)
    105a:	0019      	movs	r1, r3
    105c:	2007      	movs	r0, #7
    105e:	4b03      	ldr	r3, [pc, #12]	; (106c <PWM_SERVO_PORT_init+0x18>)
    1060:	4798      	blx	r3
}
    1062:	46c0      	nop			; (mov r8, r8)
    1064:	46bd      	mov	sp, r7
    1066:	bd80      	pop	{r7, pc}
    1068:	00070004 	.word	0x00070004
    106c:	000008b1 	.word	0x000008b1

00001070 <PWM_SERVO_CLOCK_init>:

void PWM_SERVO_CLOCK_init(void)
{
    1070:	b580      	push	{r7, lr}
    1072:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, TCC1);
    1074:	4b05      	ldr	r3, [pc, #20]	; (108c <PWM_SERVO_CLOCK_init+0x1c>)
    1076:	0019      	movs	r1, r3
    1078:	2003      	movs	r0, #3
    107a:	4b05      	ldr	r3, [pc, #20]	; (1090 <PWM_SERVO_CLOCK_init+0x20>)
    107c:	4798      	blx	r3
	_gclk_enable_channel(TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC);
    107e:	2100      	movs	r1, #0
    1080:	201a      	movs	r0, #26
    1082:	4b04      	ldr	r3, [pc, #16]	; (1094 <PWM_SERVO_CLOCK_init+0x24>)
    1084:	4798      	blx	r3
}
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	46bd      	mov	sp, r7
    108a:	bd80      	pop	{r7, pc}
    108c:	42002400 	.word	0x42002400
    1090:	00000aa9 	.word	0x00000aa9
    1094:	00000969 	.word	0x00000969

00001098 <PWM_SERVO_init>:

void PWM_SERVO_init(void)
{
    1098:	b580      	push	{r7, lr}
    109a:	af00      	add	r7, sp, #0
	PWM_SERVO_CLOCK_init();
    109c:	4b07      	ldr	r3, [pc, #28]	; (10bc <PWM_SERVO_init+0x24>)
    109e:	4798      	blx	r3
	PWM_SERVO_PORT_init();
    10a0:	4b07      	ldr	r3, [pc, #28]	; (10c0 <PWM_SERVO_init+0x28>)
    10a2:	4798      	blx	r3
	pwm_init(&PWM_SERVO, TCC1, _tcc_get_pwm());
    10a4:	4b07      	ldr	r3, [pc, #28]	; (10c4 <PWM_SERVO_init+0x2c>)
    10a6:	4798      	blx	r3
    10a8:	0002      	movs	r2, r0
    10aa:	4907      	ldr	r1, [pc, #28]	; (10c8 <PWM_SERVO_init+0x30>)
    10ac:	4b07      	ldr	r3, [pc, #28]	; (10cc <PWM_SERVO_init+0x34>)
    10ae:	0018      	movs	r0, r3
    10b0:	4b07      	ldr	r3, [pc, #28]	; (10d0 <PWM_SERVO_init+0x38>)
    10b2:	4798      	blx	r3
}
    10b4:	46c0      	nop			; (mov r8, r8)
    10b6:	46bd      	mov	sp, r7
    10b8:	bd80      	pop	{r7, pc}
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	00001071 	.word	0x00001071
    10c0:	00001055 	.word	0x00001055
    10c4:	00006555 	.word	0x00006555
    10c8:	42002400 	.word	0x42002400
    10cc:	20000560 	.word	0x20000560
    10d0:	0000195d 	.word	0x0000195d

000010d4 <PWM_MOTOR1_PORT_init>:

void PWM_MOTOR1_PORT_init(void)
{
    10d4:	b580      	push	{r7, lr}
    10d6:	af00      	add	r7, sp, #0
#if 0
	gpio_set_pin_function(MOTOR_IN1, PINMUX_PA16E_TCC2_WO0);	// Set pin direction to input ???
	gpio_set_pin_function(MOTOR_IN2, PINMUX_PA17E_TCC2_WO1);
#endif
	gpio_set_pin_direction(MOTOR_IN1, GPIO_DIRECTION_OUT);
    10d8:	2102      	movs	r1, #2
    10da:	2010      	movs	r0, #16
    10dc:	4b0e      	ldr	r3, [pc, #56]	; (1118 <PWM_MOTOR1_PORT_init+0x44>)
    10de:	4798      	blx	r3

	gpio_set_pin_pull_mode(MOTOR_IN1,
    10e0:	2100      	movs	r1, #0
    10e2:	2010      	movs	r0, #16
    10e4:	4b0d      	ldr	r3, [pc, #52]	; (111c <PWM_MOTOR1_PORT_init+0x48>)
    10e6:	4798      	blx	r3
	// <GPIO_PULL_OFF"> Off
	// <GPIO_PULL_UP"> Pull-up
	// <GPIO_PULL_DOWN"> Pull-down
	GPIO_PULL_OFF);

	gpio_set_pin_function(MOTOR_IN1, GPIO_PIN_FUNCTION_OFF);
    10e8:	2301      	movs	r3, #1
    10ea:	425b      	negs	r3, r3
    10ec:	0019      	movs	r1, r3
    10ee:	2010      	movs	r0, #16
    10f0:	4b0b      	ldr	r3, [pc, #44]	; (1120 <PWM_MOTOR1_PORT_init+0x4c>)
    10f2:	4798      	blx	r3

	// GPIO on PA17

	// Set pin direction to input
	gpio_set_pin_direction(MOTOR_IN2, GPIO_DIRECTION_OUT);
    10f4:	2102      	movs	r1, #2
    10f6:	2011      	movs	r0, #17
    10f8:	4b07      	ldr	r3, [pc, #28]	; (1118 <PWM_MOTOR1_PORT_init+0x44>)
    10fa:	4798      	blx	r3

	gpio_set_pin_pull_mode(MOTOR_IN2,
    10fc:	2100      	movs	r1, #0
    10fe:	2011      	movs	r0, #17
    1100:	4b06      	ldr	r3, [pc, #24]	; (111c <PWM_MOTOR1_PORT_init+0x48>)
    1102:	4798      	blx	r3
	// <GPIO_PULL_OFF"> Off
	// <GPIO_PULL_UP"> Pull-up
	// <GPIO_PULL_DOWN"> Pull-down
	GPIO_PULL_OFF);

	gpio_set_pin_function(MOTOR_IN2, GPIO_PIN_FUNCTION_OFF);
    1104:	2301      	movs	r3, #1
    1106:	425b      	negs	r3, r3
    1108:	0019      	movs	r1, r3
    110a:	2011      	movs	r0, #17
    110c:	4b04      	ldr	r3, [pc, #16]	; (1120 <PWM_MOTOR1_PORT_init+0x4c>)
    110e:	4798      	blx	r3
}
    1110:	46c0      	nop			; (mov r8, r8)
    1112:	46bd      	mov	sp, r7
    1114:	bd80      	pop	{r7, pc}
    1116:	46c0      	nop			; (mov r8, r8)
    1118:	000008d5 	.word	0x000008d5
    111c:	00000875 	.word	0x00000875
    1120:	000008b1 	.word	0x000008b1

00001124 <PWM_MOTOR1_CLOCK_init>:

void PWM_MOTOR1_CLOCK_init(void)
{
    1124:	b580      	push	{r7, lr}
    1126:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, TCC2);
    1128:	4b05      	ldr	r3, [pc, #20]	; (1140 <PWM_MOTOR1_CLOCK_init+0x1c>)
    112a:	0019      	movs	r1, r3
    112c:	2003      	movs	r0, #3
    112e:	4b05      	ldr	r3, [pc, #20]	; (1144 <PWM_MOTOR1_CLOCK_init+0x20>)
    1130:	4798      	blx	r3
	_gclk_enable_channel(TCC2_GCLK_ID, CONF_GCLK_TCC1_SRC);
    1132:	2100      	movs	r1, #0
    1134:	201b      	movs	r0, #27
    1136:	4b04      	ldr	r3, [pc, #16]	; (1148 <PWM_MOTOR1_CLOCK_init+0x24>)
    1138:	4798      	blx	r3
}
    113a:	46c0      	nop			; (mov r8, r8)
    113c:	46bd      	mov	sp, r7
    113e:	bd80      	pop	{r7, pc}
    1140:	42002800 	.word	0x42002800
    1144:	00000aa9 	.word	0x00000aa9
    1148:	00000969 	.word	0x00000969

0000114c <PWM_MOTOR1_init>:

void PWM_MOTOR1_init(void)
{
    114c:	b580      	push	{r7, lr}
    114e:	af00      	add	r7, sp, #0
	PWM_MOTOR1_CLOCK_init();
    1150:	4b07      	ldr	r3, [pc, #28]	; (1170 <PWM_MOTOR1_init+0x24>)
    1152:	4798      	blx	r3
	PWM_MOTOR1_PORT_init();
    1154:	4b07      	ldr	r3, [pc, #28]	; (1174 <PWM_MOTOR1_init+0x28>)
    1156:	4798      	blx	r3
	pwm_init(&PWM_MOTOR1, TCC2, _tcc_get_pwm());
    1158:	4b07      	ldr	r3, [pc, #28]	; (1178 <PWM_MOTOR1_init+0x2c>)
    115a:	4798      	blx	r3
    115c:	0002      	movs	r2, r0
    115e:	4907      	ldr	r1, [pc, #28]	; (117c <PWM_MOTOR1_init+0x30>)
    1160:	4b07      	ldr	r3, [pc, #28]	; (1180 <PWM_MOTOR1_init+0x34>)
    1162:	0018      	movs	r0, r3
    1164:	4b07      	ldr	r3, [pc, #28]	; (1184 <PWM_MOTOR1_init+0x38>)
    1166:	4798      	blx	r3
}
    1168:	46c0      	nop			; (mov r8, r8)
    116a:	46bd      	mov	sp, r7
    116c:	bd80      	pop	{r7, pc}
    116e:	46c0      	nop			; (mov r8, r8)
    1170:	00001125 	.word	0x00001125
    1174:	000010d5 	.word	0x000010d5
    1178:	00006555 	.word	0x00006555
    117c:	42002800 	.word	0x42002800
    1180:	20000508 	.word	0x20000508
    1184:	0000195d 	.word	0x0000195d

00001188 <USB_0_PORT_init>:

void USB_0_PORT_init(void)
{
    1188:	b580      	push	{r7, lr}
    118a:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(USB_DM,
    118c:	2102      	movs	r1, #2
    118e:	2018      	movs	r0, #24
    1190:	4b11      	ldr	r3, [pc, #68]	; (11d8 <USB_0_PORT_init+0x50>)
    1192:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(USB_DM,
    1194:	2100      	movs	r1, #0
    1196:	2018      	movs	r0, #24
    1198:	4b10      	ldr	r3, [pc, #64]	; (11dc <USB_0_PORT_init+0x54>)
    119a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(USB_DM,
    119c:	2100      	movs	r1, #0
    119e:	2018      	movs	r0, #24
    11a0:	4b0f      	ldr	r3, [pc, #60]	; (11e0 <USB_0_PORT_init+0x58>)
    11a2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(USB_DM,
    11a4:	4b0f      	ldr	r3, [pc, #60]	; (11e4 <USB_0_PORT_init+0x5c>)
    11a6:	0019      	movs	r1, r3
    11a8:	2018      	movs	r0, #24
    11aa:	4b0f      	ldr	r3, [pc, #60]	; (11e8 <USB_0_PORT_init+0x60>)
    11ac:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA24G_USB_DM);

	gpio_set_pin_direction(USB_DP,
    11ae:	2102      	movs	r1, #2
    11b0:	2019      	movs	r0, #25
    11b2:	4b09      	ldr	r3, [pc, #36]	; (11d8 <USB_0_PORT_init+0x50>)
    11b4:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(USB_DP,
    11b6:	2100      	movs	r1, #0
    11b8:	2019      	movs	r0, #25
    11ba:	4b08      	ldr	r3, [pc, #32]	; (11dc <USB_0_PORT_init+0x54>)
    11bc:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(USB_DP,
    11be:	2100      	movs	r1, #0
    11c0:	2019      	movs	r0, #25
    11c2:	4b07      	ldr	r3, [pc, #28]	; (11e0 <USB_0_PORT_init+0x58>)
    11c4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(USB_DP,
    11c6:	4b09      	ldr	r3, [pc, #36]	; (11ec <USB_0_PORT_init+0x64>)
    11c8:	0019      	movs	r1, r3
    11ca:	2019      	movs	r0, #25
    11cc:	4b06      	ldr	r3, [pc, #24]	; (11e8 <USB_0_PORT_init+0x60>)
    11ce:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
    11d0:	46c0      	nop			; (mov r8, r8)
    11d2:	46bd      	mov	sp, r7
    11d4:	bd80      	pop	{r7, pc}
    11d6:	46c0      	nop			; (mov r8, r8)
    11d8:	000008d5 	.word	0x000008d5
    11dc:	00000915 	.word	0x00000915
    11e0:	00000875 	.word	0x00000875
    11e4:	00180006 	.word	0x00180006
    11e8:	000008b1 	.word	0x000008b1
    11ec:	00190006 	.word	0x00190006

000011f0 <USB_0_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void USB_0_CLOCK_init(void)
{
    11f0:	b580      	push	{r7, lr}
    11f2:	af00      	add	r7, sp, #0

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
    11f4:	4b08      	ldr	r3, [pc, #32]	; (1218 <USB_0_CLOCK_init+0x28>)
    11f6:	0019      	movs	r1, r3
    11f8:	2002      	movs	r0, #2
    11fa:	4b08      	ldr	r3, [pc, #32]	; (121c <USB_0_CLOCK_init+0x2c>)
    11fc:	4798      	blx	r3
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
    11fe:	4b06      	ldr	r3, [pc, #24]	; (1218 <USB_0_CLOCK_init+0x28>)
    1200:	0019      	movs	r1, r3
    1202:	2000      	movs	r0, #0
    1204:	4b05      	ldr	r3, [pc, #20]	; (121c <USB_0_CLOCK_init+0x2c>)
    1206:	4798      	blx	r3
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
    1208:	2107      	movs	r1, #7
    120a:	2006      	movs	r0, #6
    120c:	4b04      	ldr	r3, [pc, #16]	; (1220 <USB_0_CLOCK_init+0x30>)
    120e:	4798      	blx	r3
}
    1210:	46c0      	nop			; (mov r8, r8)
    1212:	46bd      	mov	sp, r7
    1214:	bd80      	pop	{r7, pc}
    1216:	46c0      	nop			; (mov r8, r8)
    1218:	41005000 	.word	0x41005000
    121c:	00000aa9 	.word	0x00000aa9
    1220:	00000969 	.word	0x00000969

00001224 <USB_0_init>:

void USB_0_init(void)
{
    1224:	b580      	push	{r7, lr}
    1226:	af00      	add	r7, sp, #0
	USB_0_CLOCK_init();
    1228:	4b04      	ldr	r3, [pc, #16]	; (123c <USB_0_init+0x18>)
    122a:	4798      	blx	r3
	usb_d_init();
    122c:	4b04      	ldr	r3, [pc, #16]	; (1240 <USB_0_init+0x1c>)
    122e:	4798      	blx	r3
	USB_0_PORT_init();
    1230:	4b04      	ldr	r3, [pc, #16]	; (1244 <USB_0_init+0x20>)
    1232:	4798      	blx	r3
}
    1234:	46c0      	nop			; (mov r8, r8)
    1236:	46bd      	mov	sp, r7
    1238:	bd80      	pop	{r7, pc}
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	000011f1 	.word	0x000011f1
    1240:	0000269d 	.word	0x0000269d
    1244:	00001189 	.word	0x00001189

00001248 <system_init>:

void system_init(void)
{
    1248:	b580      	push	{r7, lr}
    124a:	af00      	add	r7, sp, #0
	init_mcu();
    124c:	4bcb      	ldr	r3, [pc, #812]	; (157c <system_init+0x334>)
    124e:	4798      	blx	r3

	// GPIO on PA05

	// Set pin direction to input
	gpio_set_pin_direction(BUTTON, GPIO_DIRECTION_IN);
    1250:	2101      	movs	r1, #1
    1252:	2005      	movs	r0, #5
    1254:	4bca      	ldr	r3, [pc, #808]	; (1580 <system_init+0x338>)
    1256:	4798      	blx	r3

	gpio_set_pin_pull_mode(BUTTON,
    1258:	2101      	movs	r1, #1
    125a:	2005      	movs	r0, #5
    125c:	4bc9      	ldr	r3, [pc, #804]	; (1584 <system_init+0x33c>)
    125e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(BUTTON, GPIO_PIN_FUNCTION_OFF);
    1260:	2301      	movs	r3, #1
    1262:	425b      	negs	r3, r3
    1264:	0019      	movs	r1, r3
    1266:	2005      	movs	r0, #5
    1268:	4bc7      	ldr	r3, [pc, #796]	; (1588 <system_init+0x340>)
    126a:	4798      	blx	r3

	// GPIO on PA06

	gpio_set_pin_level(TAIL_LED,
    126c:	2100      	movs	r1, #0
    126e:	2006      	movs	r0, #6
    1270:	4bc6      	ldr	r3, [pc, #792]	; (158c <system_init+0x344>)
    1272:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(TAIL_LED, GPIO_DIRECTION_OUT);
    1274:	2102      	movs	r1, #2
    1276:	2006      	movs	r0, #6
    1278:	4bc1      	ldr	r3, [pc, #772]	; (1580 <system_init+0x338>)
    127a:	4798      	blx	r3

	gpio_set_pin_function(TAIL_LED, GPIO_PIN_FUNCTION_OFF);
    127c:	2301      	movs	r3, #1
    127e:	425b      	negs	r3, r3
    1280:	0019      	movs	r1, r3
    1282:	2006      	movs	r0, #6
    1284:	4bc0      	ldr	r3, [pc, #768]	; (1588 <system_init+0x340>)
    1286:	4798      	blx	r3

	// GPIO on PA13

	gpio_set_pin_level(uSD_CS,
    1288:	2101      	movs	r1, #1
    128a:	200d      	movs	r0, #13
    128c:	4bbf      	ldr	r3, [pc, #764]	; (158c <system_init+0x344>)
    128e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(uSD_CS, GPIO_DIRECTION_OUT);
    1290:	2102      	movs	r1, #2
    1292:	200d      	movs	r0, #13
    1294:	4bba      	ldr	r3, [pc, #744]	; (1580 <system_init+0x338>)
    1296:	4798      	blx	r3

	gpio_set_pin_function(uSD_CS, GPIO_PIN_FUNCTION_OFF);
    1298:	2301      	movs	r3, #1
    129a:	425b      	negs	r3, r3
    129c:	0019      	movs	r1, r3
    129e:	200d      	movs	r0, #13
    12a0:	4bb9      	ldr	r3, [pc, #740]	; (1588 <system_init+0x340>)
    12a2:	4798      	blx	r3

	// GPIO on PA14

	gpio_set_pin_level(LCD_BACKLIGHT_PWM,
    12a4:	2101      	movs	r1, #1
    12a6:	200e      	movs	r0, #14
    12a8:	4bb8      	ldr	r3, [pc, #736]	; (158c <system_init+0x344>)
    12aa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(LCD_BACKLIGHT_PWM, GPIO_DIRECTION_OUT);
    12ac:	2102      	movs	r1, #2
    12ae:	200e      	movs	r0, #14
    12b0:	4bb3      	ldr	r3, [pc, #716]	; (1580 <system_init+0x338>)
    12b2:	4798      	blx	r3

	gpio_set_pin_function(LCD_BACKLIGHT_PWM, GPIO_PIN_FUNCTION_OFF);
    12b4:	2301      	movs	r3, #1
    12b6:	425b      	negs	r3, r3
    12b8:	0019      	movs	r1, r3
    12ba:	200e      	movs	r0, #14
    12bc:	4bb2      	ldr	r3, [pc, #712]	; (1588 <system_init+0x340>)
    12be:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(LCD_CONTRAST_PWM,
    12c0:	2100      	movs	r1, #0
    12c2:	200f      	movs	r0, #15
    12c4:	4bb1      	ldr	r3, [pc, #708]	; (158c <system_init+0x344>)
    12c6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LCD_CONTRAST_PWM, GPIO_DIRECTION_OUT);
    12c8:	2102      	movs	r1, #2
    12ca:	200f      	movs	r0, #15
    12cc:	4bac      	ldr	r3, [pc, #688]	; (1580 <system_init+0x338>)
    12ce:	4798      	blx	r3

	gpio_set_pin_function(LCD_CONTRAST_PWM, GPIO_PIN_FUNCTION_OFF);
    12d0:	2301      	movs	r3, #1
    12d2:	425b      	negs	r3, r3
    12d4:	0019      	movs	r1, r3
    12d6:	200f      	movs	r0, #15
    12d8:	4bab      	ldr	r3, [pc, #684]	; (1588 <system_init+0x340>)
    12da:	4798      	blx	r3

	// GPIO on PA18

	gpio_set_pin_level(MOTOR_SLEEP,
    12dc:	2100      	movs	r1, #0
    12de:	2012      	movs	r0, #18
    12e0:	4baa      	ldr	r3, [pc, #680]	; (158c <system_init+0x344>)
    12e2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MOTOR_SLEEP, GPIO_DIRECTION_OUT);
    12e4:	2102      	movs	r1, #2
    12e6:	2012      	movs	r0, #18
    12e8:	4ba5      	ldr	r3, [pc, #660]	; (1580 <system_init+0x338>)
    12ea:	4798      	blx	r3

	gpio_set_pin_function(MOTOR_SLEEP, GPIO_PIN_FUNCTION_OFF);
    12ec:	2301      	movs	r3, #1
    12ee:	425b      	negs	r3, r3
    12f0:	0019      	movs	r1, r3
    12f2:	2012      	movs	r0, #18
    12f4:	4ba4      	ldr	r3, [pc, #656]	; (1588 <system_init+0x340>)
    12f6:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(MOTOR_MODE,
    12f8:	2100      	movs	r1, #0
    12fa:	2013      	movs	r0, #19
    12fc:	4ba3      	ldr	r3, [pc, #652]	; (158c <system_init+0x344>)
    12fe:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MOTOR_MODE, GPIO_DIRECTION_OUT);
    1300:	2102      	movs	r1, #2
    1302:	2013      	movs	r0, #19
    1304:	4b9e      	ldr	r3, [pc, #632]	; (1580 <system_init+0x338>)
    1306:	4798      	blx	r3

	gpio_set_pin_function(MOTOR_MODE, GPIO_PIN_FUNCTION_OFF);
    1308:	2301      	movs	r3, #1
    130a:	425b      	negs	r3, r3
    130c:	0019      	movs	r1, r3
    130e:	2013      	movs	r0, #19
    1310:	4b9d      	ldr	r3, [pc, #628]	; (1588 <system_init+0x340>)
    1312:	4798      	blx	r3

	// GPIO on PA20

	gpio_set_pin_level(LED_GREEN,
    1314:	2100      	movs	r1, #0
    1316:	2014      	movs	r0, #20
    1318:	4b9c      	ldr	r3, [pc, #624]	; (158c <system_init+0x344>)
    131a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED_GREEN, GPIO_DIRECTION_OUT);
    131c:	2102      	movs	r1, #2
    131e:	2014      	movs	r0, #20
    1320:	4b97      	ldr	r3, [pc, #604]	; (1580 <system_init+0x338>)
    1322:	4798      	blx	r3

	gpio_set_pin_function(LED_GREEN, GPIO_PIN_FUNCTION_OFF);
    1324:	2301      	movs	r3, #1
    1326:	425b      	negs	r3, r3
    1328:	0019      	movs	r1, r3
    132a:	2014      	movs	r0, #20
    132c:	4b96      	ldr	r3, [pc, #600]	; (1588 <system_init+0x340>)
    132e:	4798      	blx	r3

	// GPIO on PA21

	gpio_set_pin_level(uSD_CD,
    1330:	2100      	movs	r1, #0
    1332:	2015      	movs	r0, #21
    1334:	4b95      	ldr	r3, [pc, #596]	; (158c <system_init+0x344>)
    1336:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(uSD_CD, GPIO_DIRECTION_OUT);
    1338:	2102      	movs	r1, #2
    133a:	2015      	movs	r0, #21
    133c:	4b90      	ldr	r3, [pc, #576]	; (1580 <system_init+0x338>)
    133e:	4798      	blx	r3

	gpio_set_pin_function(uSD_CD, GPIO_PIN_FUNCTION_OFF);
    1340:	2301      	movs	r3, #1
    1342:	425b      	negs	r3, r3
    1344:	0019      	movs	r1, r3
    1346:	2015      	movs	r0, #21
    1348:	4b8f      	ldr	r3, [pc, #572]	; (1588 <system_init+0x340>)
    134a:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(uSD_PWREN,
    134c:	2100      	movs	r1, #0
    134e:	201b      	movs	r0, #27
    1350:	4b8e      	ldr	r3, [pc, #568]	; (158c <system_init+0x344>)
    1352:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(uSD_PWREN, GPIO_DIRECTION_OUT);
    1354:	2102      	movs	r1, #2
    1356:	201b      	movs	r0, #27
    1358:	4b89      	ldr	r3, [pc, #548]	; (1580 <system_init+0x338>)
    135a:	4798      	blx	r3

	gpio_set_pin_function(uSD_PWREN, GPIO_PIN_FUNCTION_OFF);
    135c:	2301      	movs	r3, #1
    135e:	425b      	negs	r3, r3
    1360:	0019      	movs	r1, r3
    1362:	201b      	movs	r0, #27
    1364:	4b88      	ldr	r3, [pc, #544]	; (1588 <system_init+0x340>)
    1366:	4798      	blx	r3

	// GPIO on PA28

	gpio_set_pin_level(LCD_PWREN,
    1368:	2100      	movs	r1, #0
    136a:	201c      	movs	r0, #28
    136c:	4b87      	ldr	r3, [pc, #540]	; (158c <system_init+0x344>)
    136e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LCD_PWREN, GPIO_DIRECTION_OUT);
    1370:	2102      	movs	r1, #2
    1372:	201c      	movs	r0, #28
    1374:	4b82      	ldr	r3, [pc, #520]	; (1580 <system_init+0x338>)
    1376:	4798      	blx	r3

	gpio_set_pin_function(LCD_PWREN, GPIO_PIN_FUNCTION_OFF);
    1378:	2301      	movs	r3, #1
    137a:	425b      	negs	r3, r3
    137c:	0019      	movs	r1, r3
    137e:	201c      	movs	r0, #28
    1380:	4b81      	ldr	r3, [pc, #516]	; (1588 <system_init+0x340>)
    1382:	4798      	blx	r3

	// GPIO on PB03

	gpio_set_pin_level(LED_RED,
    1384:	2100      	movs	r1, #0
    1386:	2023      	movs	r0, #35	; 0x23
    1388:	4b80      	ldr	r3, [pc, #512]	; (158c <system_init+0x344>)
    138a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED_RED, GPIO_DIRECTION_OUT);
    138c:	2102      	movs	r1, #2
    138e:	2023      	movs	r0, #35	; 0x23
    1390:	4b7b      	ldr	r3, [pc, #492]	; (1580 <system_init+0x338>)
    1392:	4798      	blx	r3

	gpio_set_pin_function(LED_RED, GPIO_PIN_FUNCTION_OFF);
    1394:	2301      	movs	r3, #1
    1396:	425b      	negs	r3, r3
    1398:	0019      	movs	r1, r3
    139a:	2023      	movs	r0, #35	; 0x23
    139c:	4b7a      	ldr	r3, [pc, #488]	; (1588 <system_init+0x340>)
    139e:	4798      	blx	r3

	// GPIO on PB04

	// Set pin direction to input
	gpio_set_pin_direction(UI_BUTTON1, GPIO_DIRECTION_IN);
    13a0:	2101      	movs	r1, #1
    13a2:	2024      	movs	r0, #36	; 0x24
    13a4:	4b76      	ldr	r3, [pc, #472]	; (1580 <system_init+0x338>)
    13a6:	4798      	blx	r3

	gpio_set_pin_pull_mode(UI_BUTTON1,
    13a8:	2101      	movs	r1, #1
    13aa:	2024      	movs	r0, #36	; 0x24
    13ac:	4b75      	ldr	r3, [pc, #468]	; (1584 <system_init+0x33c>)
    13ae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(UI_BUTTON1, GPIO_PIN_FUNCTION_OFF);
    13b0:	2301      	movs	r3, #1
    13b2:	425b      	negs	r3, r3
    13b4:	0019      	movs	r1, r3
    13b6:	2024      	movs	r0, #36	; 0x24
    13b8:	4b73      	ldr	r3, [pc, #460]	; (1588 <system_init+0x340>)
    13ba:	4798      	blx	r3

	// GPIO on PB05

	// Set pin direction to input
	gpio_set_pin_direction(UI_BUTTON2, GPIO_DIRECTION_IN);
    13bc:	2101      	movs	r1, #1
    13be:	2025      	movs	r0, #37	; 0x25
    13c0:	4b6f      	ldr	r3, [pc, #444]	; (1580 <system_init+0x338>)
    13c2:	4798      	blx	r3

	gpio_set_pin_pull_mode(UI_BUTTON2,
    13c4:	2101      	movs	r1, #1
    13c6:	2025      	movs	r0, #37	; 0x25
    13c8:	4b6e      	ldr	r3, [pc, #440]	; (1584 <system_init+0x33c>)
    13ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(UI_BUTTON2, GPIO_PIN_FUNCTION_OFF);
    13cc:	2301      	movs	r3, #1
    13ce:	425b      	negs	r3, r3
    13d0:	0019      	movs	r1, r3
    13d2:	2025      	movs	r0, #37	; 0x25
    13d4:	4b6c      	ldr	r3, [pc, #432]	; (1588 <system_init+0x340>)
    13d6:	4798      	blx	r3

	// GPIO on PB06

	// Set pin direction to input
	gpio_set_pin_direction(UI_BUTTON3, GPIO_DIRECTION_IN);
    13d8:	2101      	movs	r1, #1
    13da:	2026      	movs	r0, #38	; 0x26
    13dc:	4b68      	ldr	r3, [pc, #416]	; (1580 <system_init+0x338>)
    13de:	4798      	blx	r3

	gpio_set_pin_pull_mode(UI_BUTTON3,
    13e0:	2101      	movs	r1, #1
    13e2:	2026      	movs	r0, #38	; 0x26
    13e4:	4b67      	ldr	r3, [pc, #412]	; (1584 <system_init+0x33c>)
    13e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(UI_BUTTON3, GPIO_PIN_FUNCTION_OFF);
    13e8:	2301      	movs	r3, #1
    13ea:	425b      	negs	r3, r3
    13ec:	0019      	movs	r1, r3
    13ee:	2026      	movs	r0, #38	; 0x26
    13f0:	4b65      	ldr	r3, [pc, #404]	; (1588 <system_init+0x340>)
    13f2:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(LCD_RS,
    13f4:	2100      	movs	r1, #0
    13f6:	2027      	movs	r0, #39	; 0x27
    13f8:	4b64      	ldr	r3, [pc, #400]	; (158c <system_init+0x344>)
    13fa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LCD_RS, GPIO_DIRECTION_OUT);
    13fc:	2102      	movs	r1, #2
    13fe:	2027      	movs	r0, #39	; 0x27
    1400:	4b5f      	ldr	r3, [pc, #380]	; (1580 <system_init+0x338>)
    1402:	4798      	blx	r3

	gpio_set_pin_function(LCD_RS, GPIO_PIN_FUNCTION_OFF);
    1404:	2301      	movs	r3, #1
    1406:	425b      	negs	r3, r3
    1408:	0019      	movs	r1, r3
    140a:	2027      	movs	r0, #39	; 0x27
    140c:	4b5e      	ldr	r3, [pc, #376]	; (1588 <system_init+0x340>)
    140e:	4798      	blx	r3

	// GPIO on PB08

	gpio_set_pin_level(LCD_E,
    1410:	2100      	movs	r1, #0
    1412:	2028      	movs	r0, #40	; 0x28
    1414:	4b5d      	ldr	r3, [pc, #372]	; (158c <system_init+0x344>)
    1416:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LCD_E, GPIO_DIRECTION_OUT);
    1418:	2102      	movs	r1, #2
    141a:	2028      	movs	r0, #40	; 0x28
    141c:	4b58      	ldr	r3, [pc, #352]	; (1580 <system_init+0x338>)
    141e:	4798      	blx	r3

	gpio_set_pin_function(LCD_E, GPIO_PIN_FUNCTION_OFF);
    1420:	2301      	movs	r3, #1
    1422:	425b      	negs	r3, r3
    1424:	0019      	movs	r1, r3
    1426:	2028      	movs	r0, #40	; 0x28
    1428:	4b57      	ldr	r3, [pc, #348]	; (1588 <system_init+0x340>)
    142a:	4798      	blx	r3

	// GPIO on PB09

	gpio_set_pin_level(LCD_RW,
    142c:	2100      	movs	r1, #0
    142e:	2029      	movs	r0, #41	; 0x29
    1430:	4b56      	ldr	r3, [pc, #344]	; (158c <system_init+0x344>)
    1432:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LCD_RW, GPIO_DIRECTION_OUT);
    1434:	2102      	movs	r1, #2
    1436:	2029      	movs	r0, #41	; 0x29
    1438:	4b51      	ldr	r3, [pc, #324]	; (1580 <system_init+0x338>)
    143a:	4798      	blx	r3

	gpio_set_pin_function(LCD_RW, GPIO_PIN_FUNCTION_OFF);
    143c:	2301      	movs	r3, #1
    143e:	425b      	negs	r3, r3
    1440:	0019      	movs	r1, r3
    1442:	2029      	movs	r0, #41	; 0x29
    1444:	4b50      	ldr	r3, [pc, #320]	; (1588 <system_init+0x340>)
    1446:	4798      	blx	r3

	// GPIO on PB12

	gpio_set_pin_level(LCD_DB4,
    1448:	2100      	movs	r1, #0
    144a:	202c      	movs	r0, #44	; 0x2c
    144c:	4b4f      	ldr	r3, [pc, #316]	; (158c <system_init+0x344>)
    144e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LCD_DB4, GPIO_DIRECTION_OUT);
    1450:	2102      	movs	r1, #2
    1452:	202c      	movs	r0, #44	; 0x2c
    1454:	4b4a      	ldr	r3, [pc, #296]	; (1580 <system_init+0x338>)
    1456:	4798      	blx	r3

	gpio_set_pin_function(LCD_DB4, GPIO_PIN_FUNCTION_OFF);
    1458:	2301      	movs	r3, #1
    145a:	425b      	negs	r3, r3
    145c:	0019      	movs	r1, r3
    145e:	202c      	movs	r0, #44	; 0x2c
    1460:	4b49      	ldr	r3, [pc, #292]	; (1588 <system_init+0x340>)
    1462:	4798      	blx	r3

	// GPIO on PB13

	gpio_set_pin_level(LCD_DB5,
    1464:	2100      	movs	r1, #0
    1466:	202d      	movs	r0, #45	; 0x2d
    1468:	4b48      	ldr	r3, [pc, #288]	; (158c <system_init+0x344>)
    146a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LCD_DB5, GPIO_DIRECTION_OUT);
    146c:	2102      	movs	r1, #2
    146e:	202d      	movs	r0, #45	; 0x2d
    1470:	4b43      	ldr	r3, [pc, #268]	; (1580 <system_init+0x338>)
    1472:	4798      	blx	r3

	gpio_set_pin_function(LCD_DB5, GPIO_PIN_FUNCTION_OFF);
    1474:	2301      	movs	r3, #1
    1476:	425b      	negs	r3, r3
    1478:	0019      	movs	r1, r3
    147a:	202d      	movs	r0, #45	; 0x2d
    147c:	4b42      	ldr	r3, [pc, #264]	; (1588 <system_init+0x340>)
    147e:	4798      	blx	r3

	// GPIO on PB14

	gpio_set_pin_level(LCD_DB6,
    1480:	2100      	movs	r1, #0
    1482:	202e      	movs	r0, #46	; 0x2e
    1484:	4b41      	ldr	r3, [pc, #260]	; (158c <system_init+0x344>)
    1486:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LCD_DB6, GPIO_DIRECTION_OUT);
    1488:	2102      	movs	r1, #2
    148a:	202e      	movs	r0, #46	; 0x2e
    148c:	4b3c      	ldr	r3, [pc, #240]	; (1580 <system_init+0x338>)
    148e:	4798      	blx	r3

	gpio_set_pin_function(LCD_DB6, GPIO_PIN_FUNCTION_OFF);
    1490:	2301      	movs	r3, #1
    1492:	425b      	negs	r3, r3
    1494:	0019      	movs	r1, r3
    1496:	202e      	movs	r0, #46	; 0x2e
    1498:	4b3b      	ldr	r3, [pc, #236]	; (1588 <system_init+0x340>)
    149a:	4798      	blx	r3

	// GPIO on PB15

	gpio_set_pin_level(LCD_DB7,
    149c:	2100      	movs	r1, #0
    149e:	202f      	movs	r0, #47	; 0x2f
    14a0:	4b3a      	ldr	r3, [pc, #232]	; (158c <system_init+0x344>)
    14a2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LCD_DB7, GPIO_DIRECTION_OUT);
    14a4:	2102      	movs	r1, #2
    14a6:	202f      	movs	r0, #47	; 0x2f
    14a8:	4b35      	ldr	r3, [pc, #212]	; (1580 <system_init+0x338>)
    14aa:	4798      	blx	r3

	gpio_set_pin_function(LCD_DB7, GPIO_PIN_FUNCTION_OFF);
    14ac:	2301      	movs	r3, #1
    14ae:	425b      	negs	r3, r3
    14b0:	0019      	movs	r1, r3
    14b2:	202f      	movs	r0, #47	; 0x2f
    14b4:	4b34      	ldr	r3, [pc, #208]	; (1588 <system_init+0x340>)
    14b6:	4798      	blx	r3

	// GPIO on PB16

	// Set pin direction to input
	gpio_set_pin_direction(MOTOR_FAULT, GPIO_DIRECTION_IN);
    14b8:	2101      	movs	r1, #1
    14ba:	2030      	movs	r0, #48	; 0x30
    14bc:	4b30      	ldr	r3, [pc, #192]	; (1580 <system_init+0x338>)
    14be:	4798      	blx	r3

	gpio_set_pin_pull_mode(MOTOR_FAULT,
    14c0:	2101      	movs	r1, #1
    14c2:	2030      	movs	r0, #48	; 0x30
    14c4:	4b2f      	ldr	r3, [pc, #188]	; (1584 <system_init+0x33c>)
    14c6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(MOTOR_FAULT, GPIO_PIN_FUNCTION_OFF);
    14c8:	2301      	movs	r3, #1
    14ca:	425b      	negs	r3, r3
    14cc:	0019      	movs	r1, r3
    14ce:	2030      	movs	r0, #48	; 0x30
    14d0:	4b2d      	ldr	r3, [pc, #180]	; (1588 <system_init+0x340>)
    14d2:	4798      	blx	r3

	// GPIO on PB17

	// Set pin direction to input
	gpio_set_pin_direction(MOTOR_WDFLT, GPIO_DIRECTION_IN);
    14d4:	2101      	movs	r1, #1
    14d6:	2031      	movs	r0, #49	; 0x31
    14d8:	4b29      	ldr	r3, [pc, #164]	; (1580 <system_init+0x338>)
    14da:	4798      	blx	r3

	gpio_set_pin_pull_mode(MOTOR_WDFLT,
    14dc:	2101      	movs	r1, #1
    14de:	2031      	movs	r0, #49	; 0x31
    14e0:	4b28      	ldr	r3, [pc, #160]	; (1584 <system_init+0x33c>)
    14e2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(MOTOR_WDFLT, GPIO_PIN_FUNCTION_OFF);
    14e4:	2301      	movs	r3, #1
    14e6:	425b      	negs	r3, r3
    14e8:	0019      	movs	r1, r3
    14ea:	2031      	movs	r0, #49	; 0x31
    14ec:	4b26      	ldr	r3, [pc, #152]	; (1588 <system_init+0x340>)
    14ee:	4798      	blx	r3

	// GPIO on PB22

	gpio_set_pin_level(MOTOR_PWREN,
    14f0:	2100      	movs	r1, #0
    14f2:	2036      	movs	r0, #54	; 0x36
    14f4:	4b25      	ldr	r3, [pc, #148]	; (158c <system_init+0x344>)
    14f6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MOTOR_PWREN, GPIO_DIRECTION_OUT);
    14f8:	2102      	movs	r1, #2
    14fa:	2036      	movs	r0, #54	; 0x36
    14fc:	4b20      	ldr	r3, [pc, #128]	; (1580 <system_init+0x338>)
    14fe:	4798      	blx	r3

	gpio_set_pin_function(MOTOR_PWREN, GPIO_PIN_FUNCTION_OFF);
    1500:	2301      	movs	r3, #1
    1502:	425b      	negs	r3, r3
    1504:	0019      	movs	r1, r3
    1506:	2036      	movs	r0, #54	; 0x36
    1508:	4b1f      	ldr	r3, [pc, #124]	; (1588 <system_init+0x340>)
    150a:	4798      	blx	r3

	// GPIO on PB23

	gpio_set_pin_level(SERVO_PWREN,
    150c:	2100      	movs	r1, #0
    150e:	2037      	movs	r0, #55	; 0x37
    1510:	4b1e      	ldr	r3, [pc, #120]	; (158c <system_init+0x344>)
    1512:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(SERVO_PWREN, GPIO_DIRECTION_OUT);
    1514:	2102      	movs	r1, #2
    1516:	2037      	movs	r0, #55	; 0x37
    1518:	4b19      	ldr	r3, [pc, #100]	; (1580 <system_init+0x338>)
    151a:	4798      	blx	r3

	gpio_set_pin_function(SERVO_PWREN, GPIO_PIN_FUNCTION_OFF);
    151c:	2301      	movs	r3, #1
    151e:	425b      	negs	r3, r3
    1520:	0019      	movs	r1, r3
    1522:	2037      	movs	r0, #55	; 0x37
    1524:	4b18      	ldr	r3, [pc, #96]	; (1588 <system_init+0x340>)
    1526:	4798      	blx	r3

	// GPIO on PB31

	gpio_set_pin_level(MOTOR_CS,
    1528:	2100      	movs	r1, #0
    152a:	203f      	movs	r0, #63	; 0x3f
    152c:	4b17      	ldr	r3, [pc, #92]	; (158c <system_init+0x344>)
    152e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MOTOR_CS, GPIO_DIRECTION_OUT);
    1530:	2102      	movs	r1, #2
    1532:	203f      	movs	r0, #63	; 0x3f
    1534:	4b12      	ldr	r3, [pc, #72]	; (1580 <system_init+0x338>)
    1536:	4798      	blx	r3

	gpio_set_pin_function(MOTOR_CS, GPIO_PIN_FUNCTION_OFF);
    1538:	2301      	movs	r3, #1
    153a:	425b      	negs	r3, r3
    153c:	0019      	movs	r1, r3
    153e:	203f      	movs	r0, #63	; 0x3f
    1540:	4b11      	ldr	r3, [pc, #68]	; (1588 <system_init+0x340>)
    1542:	4798      	blx	r3

	ADC_0_init();
    1544:	4b12      	ldr	r3, [pc, #72]	; (1590 <system_init+0x348>)
    1546:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1548:	4b12      	ldr	r3, [pc, #72]	; (1594 <system_init+0x34c>)
    154a:	4798      	blx	r3

	USART_0_init();
    154c:	4b12      	ldr	r3, [pc, #72]	; (1598 <system_init+0x350>)
    154e:	4798      	blx	r3

	I2C_0_init();
    1550:	4b12      	ldr	r3, [pc, #72]	; (159c <system_init+0x354>)
    1552:	4798      	blx	r3

	I2C_1_init();
    1554:	4b12      	ldr	r3, [pc, #72]	; (15a0 <system_init+0x358>)
    1556:	4798      	blx	r3

	SPI_1_init();
    1558:	4b12      	ldr	r3, [pc, #72]	; (15a4 <system_init+0x35c>)
    155a:	4798      	blx	r3

	SPI_0_init();
    155c:	4b12      	ldr	r3, [pc, #72]	; (15a8 <system_init+0x360>)
    155e:	4798      	blx	r3

	delay_driver_init();
    1560:	4b12      	ldr	r3, [pc, #72]	; (15ac <system_init+0x364>)
    1562:	4798      	blx	r3

	TIMER_0_init();
    1564:	4b12      	ldr	r3, [pc, #72]	; (15b0 <system_init+0x368>)
    1566:	4798      	blx	r3

	PWM_SERVO_init();
    1568:	4b12      	ldr	r3, [pc, #72]	; (15b4 <system_init+0x36c>)
    156a:	4798      	blx	r3

	PWM_MOTOR1_init();
    156c:	4b12      	ldr	r3, [pc, #72]	; (15b8 <system_init+0x370>)
    156e:	4798      	blx	r3

	USB_0_init();
    1570:	4b12      	ldr	r3, [pc, #72]	; (15bc <system_init+0x374>)
    1572:	4798      	blx	r3
}
    1574:	46c0      	nop			; (mov r8, r8)
    1576:	46bd      	mov	sp, r7
    1578:	bd80      	pop	{r7, pc}
    157a:	46c0      	nop			; (mov r8, r8)
    157c:	00000955 	.word	0x00000955
    1580:	000008d5 	.word	0x000008d5
    1584:	00000875 	.word	0x00000875
    1588:	000008b1 	.word	0x000008b1
    158c:	00000915 	.word	0x00000915
    1590:	00000c09 	.word	0x00000c09
    1594:	00000c3d 	.word	0x00000c3d
    1598:	00000cd9 	.word	0x00000cd9
    159c:	00000d7d 	.word	0x00000d7d
    15a0:	00000e21 	.word	0x00000e21
    15a4:	00000ef1 	.word	0x00000ef1
    15a8:	00000fc1 	.word	0x00000fc1
    15ac:	00000ff5 	.word	0x00000ff5
    15b0:	00001011 	.word	0x00001011
    15b4:	00001099 	.word	0x00001099
    15b8:	0000114d 	.word	0x0000114d
    15bc:	00001225 	.word	0x00001225

000015c0 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    15c0:	b580      	push	{r7, lr}
    15c2:	b084      	sub	sp, #16
    15c4:	af00      	add	r7, sp, #0
    15c6:	60f8      	str	r0, [r7, #12]
    15c8:	60b9      	str	r1, [r7, #8]
    15ca:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    15cc:	68fb      	ldr	r3, [r7, #12]
    15ce:	2b00      	cmp	r3, #0
    15d0:	d004      	beq.n	15dc <adc_sync_init+0x1c>
    15d2:	68bb      	ldr	r3, [r7, #8]
    15d4:	2b00      	cmp	r3, #0
    15d6:	d001      	beq.n	15dc <adc_sync_init+0x1c>
    15d8:	2301      	movs	r3, #1
    15da:	e000      	b.n	15de <adc_sync_init+0x1e>
    15dc:	2300      	movs	r3, #0
    15de:	1c1a      	adds	r2, r3, #0
    15e0:	2301      	movs	r3, #1
    15e2:	4013      	ands	r3, r2
    15e4:	b2db      	uxtb	r3, r3
    15e6:	4908      	ldr	r1, [pc, #32]	; (1608 <adc_sync_init+0x48>)
    15e8:	2239      	movs	r2, #57	; 0x39
    15ea:	0018      	movs	r0, r3
    15ec:	4b07      	ldr	r3, [pc, #28]	; (160c <adc_sync_init+0x4c>)
    15ee:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    15f0:	68fb      	ldr	r3, [r7, #12]
    15f2:	68ba      	ldr	r2, [r7, #8]
    15f4:	0011      	movs	r1, r2
    15f6:	0018      	movs	r0, r3
    15f8:	4b05      	ldr	r3, [pc, #20]	; (1610 <adc_sync_init+0x50>)
    15fa:	4798      	blx	r3
    15fc:	0003      	movs	r3, r0
}
    15fe:	0018      	movs	r0, r3
    1600:	46bd      	mov	sp, r7
    1602:	b004      	add	sp, #16
    1604:	bd80      	pop	{r7, pc}
    1606:	46c0      	nop			; (mov r8, r8)
    1608:	0000c2dc 	.word	0x0000c2dc
    160c:	00002cd5 	.word	0x00002cd5
    1610:	000033f9 	.word	0x000033f9

00001614 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    1614:	b580      	push	{r7, lr}
    1616:	b084      	sub	sp, #16
    1618:	af00      	add	r7, sp, #0
    161a:	6078      	str	r0, [r7, #4]
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    161c:	f3ef 8310 	mrs	r3, PRIMASK
    1620:	60fb      	str	r3, [r7, #12]
  return(result);
    1622:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    1624:	687b      	ldr	r3, [r7, #4]
    1626:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1628:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    162a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	46bd      	mov	sp, r7
    1632:	b004      	add	sp, #16
    1634:	bd80      	pop	{r7, pc}

00001636 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    1636:	b580      	push	{r7, lr}
    1638:	b084      	sub	sp, #16
    163a:	af00      	add	r7, sp, #0
    163c:	6078      	str	r0, [r7, #4]
    163e:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    1642:	687b      	ldr	r3, [r7, #4]
    1644:	681b      	ldr	r3, [r3, #0]
    1646:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1648:	68fb      	ldr	r3, [r7, #12]
    164a:	f383 8810 	msr	PRIMASK, r3
}
    164e:	46c0      	nop			; (mov r8, r8)
    1650:	46bd      	mov	sp, r7
    1652:	b004      	add	sp, #16
    1654:	bd80      	pop	{r7, pc}
	...

00001658 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1658:	b580      	push	{r7, lr}
    165a:	b082      	sub	sp, #8
    165c:	af00      	add	r7, sp, #0
    165e:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
    1660:	4b05      	ldr	r3, [pc, #20]	; (1678 <delay_init+0x20>)
    1662:	687a      	ldr	r2, [r7, #4]
    1664:	601a      	str	r2, [r3, #0]
    1666:	4b04      	ldr	r3, [pc, #16]	; (1678 <delay_init+0x20>)
    1668:	681b      	ldr	r3, [r3, #0]
    166a:	0018      	movs	r0, r3
    166c:	4b03      	ldr	r3, [pc, #12]	; (167c <delay_init+0x24>)
    166e:	4798      	blx	r3
}
    1670:	46c0      	nop			; (mov r8, r8)
    1672:	46bd      	mov	sp, r7
    1674:	b002      	add	sp, #8
    1676:	bd80      	pop	{r7, pc}
    1678:	20000184 	.word	0x20000184
    167c:	00005e65 	.word	0x00005e65

00001680 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1680:	b590      	push	{r4, r7, lr}
    1682:	b083      	sub	sp, #12
    1684:	af00      	add	r7, sp, #0
    1686:	0002      	movs	r2, r0
    1688:	1dbb      	adds	r3, r7, #6
    168a:	801a      	strh	r2, [r3, #0]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    168c:	4b07      	ldr	r3, [pc, #28]	; (16ac <delay_us+0x2c>)
    168e:	681c      	ldr	r4, [r3, #0]
    1690:	1dbb      	adds	r3, r7, #6
    1692:	881b      	ldrh	r3, [r3, #0]
    1694:	0018      	movs	r0, r3
    1696:	4b06      	ldr	r3, [pc, #24]	; (16b0 <delay_us+0x30>)
    1698:	4798      	blx	r3
    169a:	0003      	movs	r3, r0
    169c:	0019      	movs	r1, r3
    169e:	0020      	movs	r0, r4
    16a0:	4b04      	ldr	r3, [pc, #16]	; (16b4 <delay_us+0x34>)
    16a2:	4798      	blx	r3
}
    16a4:	46c0      	nop			; (mov r8, r8)
    16a6:	46bd      	mov	sp, r7
    16a8:	b003      	add	sp, #12
    16aa:	bd90      	pop	{r4, r7, pc}
    16ac:	20000184 	.word	0x20000184
    16b0:	00003555 	.word	0x00003555
    16b4:	00005e81 	.word	0x00005e81

000016b8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    16b8:	b590      	push	{r4, r7, lr}
    16ba:	b083      	sub	sp, #12
    16bc:	af00      	add	r7, sp, #0
    16be:	0002      	movs	r2, r0
    16c0:	1dbb      	adds	r3, r7, #6
    16c2:	801a      	strh	r2, [r3, #0]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    16c4:	4b07      	ldr	r3, [pc, #28]	; (16e4 <delay_ms+0x2c>)
    16c6:	681c      	ldr	r4, [r3, #0]
    16c8:	1dbb      	adds	r3, r7, #6
    16ca:	881b      	ldrh	r3, [r3, #0]
    16cc:	0018      	movs	r0, r3
    16ce:	4b06      	ldr	r3, [pc, #24]	; (16e8 <delay_ms+0x30>)
    16d0:	4798      	blx	r3
    16d2:	0003      	movs	r3, r0
    16d4:	0019      	movs	r1, r3
    16d6:	0020      	movs	r0, r4
    16d8:	4b04      	ldr	r3, [pc, #16]	; (16ec <delay_ms+0x34>)
    16da:	4798      	blx	r3
}
    16dc:	46c0      	nop			; (mov r8, r8)
    16de:	46bd      	mov	sp, r7
    16e0:	b003      	add	sp, #12
    16e2:	bd90      	pop	{r4, r7, pc}
    16e4:	20000184 	.word	0x20000184
    16e8:	00003669 	.word	0x00003669
    16ec:	00005e81 	.word	0x00005e81

000016f0 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    16f0:	b580      	push	{r7, lr}
    16f2:	b082      	sub	sp, #8
    16f4:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    16f6:	1dbb      	adds	r3, r7, #6
    16f8:	2200      	movs	r2, #0
    16fa:	801a      	strh	r2, [r3, #0]
    16fc:	e013      	b.n	1726 <ext_irq_init+0x36>
		ext_irqs[i].pin = 0xFFFFFFFF;
    16fe:	1dbb      	adds	r3, r7, #6
    1700:	881b      	ldrh	r3, [r3, #0]
    1702:	4a0f      	ldr	r2, [pc, #60]	; (1740 <ext_irq_init+0x50>)
    1704:	00db      	lsls	r3, r3, #3
    1706:	18d3      	adds	r3, r2, r3
    1708:	3304      	adds	r3, #4
    170a:	2201      	movs	r2, #1
    170c:	4252      	negs	r2, r2
    170e:	601a      	str	r2, [r3, #0]
		ext_irqs[i].cb  = NULL;
    1710:	1dbb      	adds	r3, r7, #6
    1712:	881a      	ldrh	r2, [r3, #0]
    1714:	4b0a      	ldr	r3, [pc, #40]	; (1740 <ext_irq_init+0x50>)
    1716:	00d2      	lsls	r2, r2, #3
    1718:	2100      	movs	r1, #0
    171a:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    171c:	1dbb      	adds	r3, r7, #6
    171e:	881a      	ldrh	r2, [r3, #0]
    1720:	1dbb      	adds	r3, r7, #6
    1722:	3201      	adds	r2, #1
    1724:	801a      	strh	r2, [r3, #0]
    1726:	1dbb      	adds	r3, r7, #6
    1728:	881b      	ldrh	r3, [r3, #0]
    172a:	2b00      	cmp	r3, #0
    172c:	d0e7      	beq.n	16fe <ext_irq_init+0xe>
	}

	return _ext_irq_init(process_ext_irq);
    172e:	4b05      	ldr	r3, [pc, #20]	; (1744 <ext_irq_init+0x54>)
    1730:	0018      	movs	r0, r3
    1732:	4b05      	ldr	r3, [pc, #20]	; (1748 <ext_irq_init+0x58>)
    1734:	4798      	blx	r3
    1736:	0003      	movs	r3, r0
}
    1738:	0018      	movs	r0, r3
    173a:	46bd      	mov	sp, r7
    173c:	b002      	add	sp, #8
    173e:	bd80      	pop	{r7, pc}
    1740:	20000188 	.word	0x20000188
    1744:	0000174d 	.word	0x0000174d
    1748:	00003919 	.word	0x00003919

0000174c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    174c:	b580      	push	{r7, lr}
    174e:	b084      	sub	sp, #16
    1750:	af00      	add	r7, sp, #0
    1752:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1754:	230f      	movs	r3, #15
    1756:	18fb      	adds	r3, r7, r3
    1758:	2200      	movs	r2, #0
    175a:	701a      	strb	r2, [r3, #0]
    175c:	230e      	movs	r3, #14
    175e:	18fb      	adds	r3, r7, r3
    1760:	2201      	movs	r2, #1
    1762:	701a      	strb	r2, [r3, #0]

	while (upper >= lower) {
    1764:	e050      	b.n	1808 <process_ext_irq+0xbc>
		middle = (upper + lower) >> 1;
    1766:	230e      	movs	r3, #14
    1768:	18fb      	adds	r3, r7, r3
    176a:	781a      	ldrb	r2, [r3, #0]
    176c:	230f      	movs	r3, #15
    176e:	18fb      	adds	r3, r7, r3
    1770:	781b      	ldrb	r3, [r3, #0]
    1772:	18d3      	adds	r3, r2, r3
    1774:	105a      	asrs	r2, r3, #1
    1776:	230d      	movs	r3, #13
    1778:	18fb      	adds	r3, r7, r3
    177a:	701a      	strb	r2, [r3, #0]
		if (middle >= EXT_IRQ_AMOUNT) {
    177c:	230d      	movs	r3, #13
    177e:	18fb      	adds	r3, r7, r3
    1780:	781b      	ldrb	r3, [r3, #0]
    1782:	2b00      	cmp	r3, #0
    1784:	d149      	bne.n	181a <process_ext_irq+0xce>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1786:	230d      	movs	r3, #13
    1788:	18fb      	adds	r3, r7, r3
    178a:	781b      	ldrb	r3, [r3, #0]
    178c:	4a26      	ldr	r2, [pc, #152]	; (1828 <process_ext_irq+0xdc>)
    178e:	00db      	lsls	r3, r3, #3
    1790:	18d3      	adds	r3, r2, r3
    1792:	3304      	adds	r3, #4
    1794:	681a      	ldr	r2, [r3, #0]
    1796:	687b      	ldr	r3, [r7, #4]
    1798:	429a      	cmp	r2, r3
    179a:	d10f      	bne.n	17bc <process_ext_irq+0x70>
			if (ext_irqs[middle].cb) {
    179c:	230d      	movs	r3, #13
    179e:	18fb      	adds	r3, r7, r3
    17a0:	781a      	ldrb	r2, [r3, #0]
    17a2:	4b21      	ldr	r3, [pc, #132]	; (1828 <process_ext_irq+0xdc>)
    17a4:	00d2      	lsls	r2, r2, #3
    17a6:	58d3      	ldr	r3, [r2, r3]
    17a8:	2b00      	cmp	r3, #0
    17aa:	d038      	beq.n	181e <process_ext_irq+0xd2>
				ext_irqs[middle].cb();
    17ac:	230d      	movs	r3, #13
    17ae:	18fb      	adds	r3, r7, r3
    17b0:	781a      	ldrb	r2, [r3, #0]
    17b2:	4b1d      	ldr	r3, [pc, #116]	; (1828 <process_ext_irq+0xdc>)
    17b4:	00d2      	lsls	r2, r2, #3
    17b6:	58d3      	ldr	r3, [r2, r3]
    17b8:	4798      	blx	r3
			}
			return;
    17ba:	e030      	b.n	181e <process_ext_irq+0xd2>
		}

		if (ext_irqs[middle].pin < pin) {
    17bc:	230d      	movs	r3, #13
    17be:	18fb      	adds	r3, r7, r3
    17c0:	781b      	ldrb	r3, [r3, #0]
    17c2:	4a19      	ldr	r2, [pc, #100]	; (1828 <process_ext_irq+0xdc>)
    17c4:	00db      	lsls	r3, r3, #3
    17c6:	18d3      	adds	r3, r2, r3
    17c8:	3304      	adds	r3, #4
    17ca:	681a      	ldr	r2, [r3, #0]
    17cc:	687b      	ldr	r3, [r7, #4]
    17ce:	429a      	cmp	r2, r3
    17d0:	d20d      	bcs.n	17ee <process_ext_irq+0xa2>
			lower = middle + 1;
    17d2:	230f      	movs	r3, #15
    17d4:	18fb      	adds	r3, r7, r3
    17d6:	220d      	movs	r2, #13
    17d8:	18ba      	adds	r2, r7, r2
    17da:	7812      	ldrb	r2, [r2, #0]
    17dc:	3201      	adds	r2, #1
    17de:	701a      	strb	r2, [r3, #0]
    17e0:	230e      	movs	r3, #14
    17e2:	18fb      	adds	r3, r7, r3
    17e4:	220e      	movs	r2, #14
    17e6:	18ba      	adds	r2, r7, r2
    17e8:	7812      	ldrb	r2, [r2, #0]
    17ea:	701a      	strb	r2, [r3, #0]
    17ec:	e00c      	b.n	1808 <process_ext_irq+0xbc>
		} else {
			upper = middle - 1;
    17ee:	230e      	movs	r3, #14
    17f0:	18fb      	adds	r3, r7, r3
    17f2:	220d      	movs	r2, #13
    17f4:	18ba      	adds	r2, r7, r2
    17f6:	7812      	ldrb	r2, [r2, #0]
    17f8:	3a01      	subs	r2, #1
    17fa:	701a      	strb	r2, [r3, #0]
    17fc:	230f      	movs	r3, #15
    17fe:	18fb      	adds	r3, r7, r3
    1800:	220f      	movs	r2, #15
    1802:	18ba      	adds	r2, r7, r2
    1804:	7812      	ldrb	r2, [r2, #0]
    1806:	701a      	strb	r2, [r3, #0]
	while (upper >= lower) {
    1808:	230e      	movs	r3, #14
    180a:	18fa      	adds	r2, r7, r3
    180c:	230f      	movs	r3, #15
    180e:	18fb      	adds	r3, r7, r3
    1810:	7812      	ldrb	r2, [r2, #0]
    1812:	781b      	ldrb	r3, [r3, #0]
    1814:	429a      	cmp	r2, r3
    1816:	d2a6      	bcs.n	1766 <process_ext_irq+0x1a>
    1818:	e002      	b.n	1820 <process_ext_irq+0xd4>
			return;
    181a:	46c0      	nop			; (mov r8, r8)
    181c:	e000      	b.n	1820 <process_ext_irq+0xd4>
			return;
    181e:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    1820:	46bd      	mov	sp, r7
    1822:	b004      	add	sp, #16
    1824:	bd80      	pop	{r7, pc}
    1826:	46c0      	nop			; (mov r8, r8)
    1828:	20000188 	.word	0x20000188

0000182c <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    182c:	b580      	push	{r7, lr}
    182e:	b08a      	sub	sp, #40	; 0x28
    1830:	af00      	add	r7, sp, #0
    1832:	60f8      	str	r0, [r7, #12]
    1834:	60b9      	str	r1, [r7, #8]
    1836:	1dbb      	adds	r3, r7, #6
    1838:	801a      	strh	r2, [r3, #0]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    183a:	68fb      	ldr	r3, [r7, #12]
    183c:	3b14      	subs	r3, #20
    183e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    1840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1842:	8b9a      	ldrh	r2, [r3, #28]
    1844:	2314      	movs	r3, #20
    1846:	18fb      	adds	r3, r7, r3
    1848:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
    184a:	1dbb      	adds	r3, r7, #6
    184c:	881a      	ldrh	r2, [r3, #0]
    184e:	2314      	movs	r3, #20
    1850:	18fb      	adds	r3, r7, r3
    1852:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1854:	2314      	movs	r3, #20
    1856:	18fb      	adds	r3, r7, r3
    1858:	4a0c      	ldr	r2, [pc, #48]	; (188c <i2c_m_sync_read+0x60>)
    185a:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
    185c:	2314      	movs	r3, #20
    185e:	18fb      	adds	r3, r7, r3
    1860:	68ba      	ldr	r2, [r7, #8]
    1862:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1866:	2214      	movs	r2, #20
    1868:	18ba      	adds	r2, r7, r2
    186a:	0011      	movs	r1, r2
    186c:	0018      	movs	r0, r3
    186e:	4b08      	ldr	r3, [pc, #32]	; (1890 <i2c_m_sync_read+0x64>)
    1870:	4798      	blx	r3
    1872:	0003      	movs	r3, r0
    1874:	623b      	str	r3, [r7, #32]

	if (ret) {
    1876:	6a3b      	ldr	r3, [r7, #32]
    1878:	2b00      	cmp	r3, #0
    187a:	d001      	beq.n	1880 <i2c_m_sync_read+0x54>
		return ret;
    187c:	6a3b      	ldr	r3, [r7, #32]
    187e:	e001      	b.n	1884 <i2c_m_sync_read+0x58>
	}

	return n;
    1880:	1dbb      	adds	r3, r7, #6
    1882:	881b      	ldrh	r3, [r3, #0]
}
    1884:	0018      	movs	r0, r3
    1886:	46bd      	mov	sp, r7
    1888:	b00a      	add	sp, #40	; 0x28
    188a:	bd80      	pop	{r7, pc}
    188c:	ffff8001 	.word	0xffff8001
    1890:	0000512d 	.word	0x0000512d

00001894 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    1894:	b580      	push	{r7, lr}
    1896:	b08a      	sub	sp, #40	; 0x28
    1898:	af00      	add	r7, sp, #0
    189a:	60f8      	str	r0, [r7, #12]
    189c:	60b9      	str	r1, [r7, #8]
    189e:	1dbb      	adds	r3, r7, #6
    18a0:	801a      	strh	r2, [r3, #0]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    18a2:	68fb      	ldr	r3, [r7, #12]
    18a4:	3b14      	subs	r3, #20
    18a6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    18a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18aa:	8b9a      	ldrh	r2, [r3, #28]
    18ac:	2314      	movs	r3, #20
    18ae:	18fb      	adds	r3, r7, r3
    18b0:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
    18b2:	1dbb      	adds	r3, r7, #6
    18b4:	881a      	ldrh	r2, [r3, #0]
    18b6:	2314      	movs	r3, #20
    18b8:	18fb      	adds	r3, r7, r3
    18ba:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP;
    18bc:	2314      	movs	r3, #20
    18be:	18fb      	adds	r3, r7, r3
    18c0:	4a0c      	ldr	r2, [pc, #48]	; (18f4 <i2c_m_sync_write+0x60>)
    18c2:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
    18c4:	2314      	movs	r3, #20
    18c6:	18fb      	adds	r3, r7, r3
    18c8:	68ba      	ldr	r2, [r7, #8]
    18ca:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    18cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18ce:	2214      	movs	r2, #20
    18d0:	18ba      	adds	r2, r7, r2
    18d2:	0011      	movs	r1, r2
    18d4:	0018      	movs	r0, r3
    18d6:	4b08      	ldr	r3, [pc, #32]	; (18f8 <i2c_m_sync_write+0x64>)
    18d8:	4798      	blx	r3
    18da:	0003      	movs	r3, r0
    18dc:	623b      	str	r3, [r7, #32]

	if (ret) {
    18de:	6a3b      	ldr	r3, [r7, #32]
    18e0:	2b00      	cmp	r3, #0
    18e2:	d001      	beq.n	18e8 <i2c_m_sync_write+0x54>
		return ret;
    18e4:	6a3b      	ldr	r3, [r7, #32]
    18e6:	e001      	b.n	18ec <i2c_m_sync_write+0x58>
	}

	return n;
    18e8:	1dbb      	adds	r3, r7, #6
    18ea:	881b      	ldrh	r3, [r3, #0]
}
    18ec:	0018      	movs	r0, r3
    18ee:	46bd      	mov	sp, r7
    18f0:	b00a      	add	sp, #40	; 0x28
    18f2:	bd80      	pop	{r7, pc}
    18f4:	ffff8000 	.word	0xffff8000
    18f8:	0000512d 	.word	0x0000512d

000018fc <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    18fc:	b580      	push	{r7, lr}
    18fe:	b084      	sub	sp, #16
    1900:	af00      	add	r7, sp, #0
    1902:	6078      	str	r0, [r7, #4]
    1904:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    1906:	687b      	ldr	r3, [r7, #4]
    1908:	1e5a      	subs	r2, r3, #1
    190a:	4193      	sbcs	r3, r2
    190c:	b2db      	uxtb	r3, r3
    190e:	490e      	ldr	r1, [pc, #56]	; (1948 <i2c_m_sync_init+0x4c>)
    1910:	225e      	movs	r2, #94	; 0x5e
    1912:	0018      	movs	r0, r3
    1914:	4b0d      	ldr	r3, [pc, #52]	; (194c <i2c_m_sync_init+0x50>)
    1916:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    1918:	687b      	ldr	r3, [r7, #4]
    191a:	683a      	ldr	r2, [r7, #0]
    191c:	0011      	movs	r1, r2
    191e:	0018      	movs	r0, r3
    1920:	4b0b      	ldr	r3, [pc, #44]	; (1950 <i2c_m_sync_init+0x54>)
    1922:	4798      	blx	r3
    1924:	0003      	movs	r3, r0
    1926:	60fb      	str	r3, [r7, #12]
	if (init_status) {
    1928:	68fb      	ldr	r3, [r7, #12]
    192a:	2b00      	cmp	r3, #0
    192c:	d001      	beq.n	1932 <i2c_m_sync_init+0x36>
		return init_status;
    192e:	68fb      	ldr	r3, [r7, #12]
    1930:	e006      	b.n	1940 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    1932:	687b      	ldr	r3, [r7, #4]
    1934:	4a07      	ldr	r2, [pc, #28]	; (1954 <i2c_m_sync_init+0x58>)
    1936:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    1938:	687b      	ldr	r3, [r7, #4]
    193a:	4a07      	ldr	r2, [pc, #28]	; (1958 <i2c_m_sync_init+0x5c>)
    193c:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    193e:	2300      	movs	r3, #0
}
    1940:	0018      	movs	r0, r3
    1942:	46bd      	mov	sp, r7
    1944:	b004      	add	sp, #16
    1946:	bd80      	pop	{r7, pc}
    1948:	0000c2f8 	.word	0x0000c2f8
    194c:	00002cd5 	.word	0x00002cd5
    1950:	00004f49 	.word	0x00004f49
    1954:	0000182d 	.word	0x0000182d
    1958:	00001895 	.word	0x00001895

0000195c <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    195c:	b580      	push	{r7, lr}
    195e:	b084      	sub	sp, #16
    1960:	af00      	add	r7, sp, #0
    1962:	60f8      	str	r0, [r7, #12]
    1964:	60b9      	str	r1, [r7, #8]
    1966:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    1968:	68fb      	ldr	r3, [r7, #12]
    196a:	2b00      	cmp	r3, #0
    196c:	d004      	beq.n	1978 <pwm_init+0x1c>
    196e:	68bb      	ldr	r3, [r7, #8]
    1970:	2b00      	cmp	r3, #0
    1972:	d001      	beq.n	1978 <pwm_init+0x1c>
    1974:	2301      	movs	r3, #1
    1976:	e000      	b.n	197a <pwm_init+0x1e>
    1978:	2300      	movs	r3, #0
    197a:	1c1a      	adds	r2, r3, #0
    197c:	2301      	movs	r3, #1
    197e:	4013      	ands	r3, r2
    1980:	b2db      	uxtb	r3, r3
    1982:	490b      	ldr	r1, [pc, #44]	; (19b0 <pwm_init+0x54>)
    1984:	2233      	movs	r2, #51	; 0x33
    1986:	0018      	movs	r0, r3
    1988:	4b0a      	ldr	r3, [pc, #40]	; (19b4 <pwm_init+0x58>)
    198a:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    198c:	68fb      	ldr	r3, [r7, #12]
    198e:	68ba      	ldr	r2, [r7, #8]
    1990:	0011      	movs	r1, r2
    1992:	0018      	movs	r0, r3
    1994:	4b08      	ldr	r3, [pc, #32]	; (19b8 <pwm_init+0x5c>)
    1996:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1998:	68fb      	ldr	r3, [r7, #12]
    199a:	4a08      	ldr	r2, [pc, #32]	; (19bc <pwm_init+0x60>)
    199c:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    199e:	68fb      	ldr	r3, [r7, #12]
    19a0:	4a07      	ldr	r2, [pc, #28]	; (19c0 <pwm_init+0x64>)
    19a2:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    19a4:	2300      	movs	r3, #0
}
    19a6:	0018      	movs	r0, r3
    19a8:	46bd      	mov	sp, r7
    19aa:	b004      	add	sp, #16
    19ac:	bd80      	pop	{r7, pc}
    19ae:	46c0      	nop			; (mov r8, r8)
    19b0:	0000c314 	.word	0x0000c314
    19b4:	00002cd5 	.word	0x00002cd5
    19b8:	000062cd 	.word	0x000062cd
    19bc:	00001a55 	.word	0x00001a55
    19c0:	00001a7b 	.word	0x00001a7b

000019c4 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    19c4:	b580      	push	{r7, lr}
    19c6:	b082      	sub	sp, #8
    19c8:	af00      	add	r7, sp, #0
    19ca:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    19cc:	687b      	ldr	r3, [r7, #4]
    19ce:	1e5a      	subs	r2, r3, #1
    19d0:	4193      	sbcs	r3, r2
    19d2:	b2db      	uxtb	r3, r3
    19d4:	490b      	ldr	r1, [pc, #44]	; (1a04 <pwm_enable+0x40>)
    19d6:	224a      	movs	r2, #74	; 0x4a
    19d8:	0018      	movs	r0, r3
    19da:	4b0b      	ldr	r3, [pc, #44]	; (1a08 <pwm_enable+0x44>)
    19dc:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    19de:	687b      	ldr	r3, [r7, #4]
    19e0:	0018      	movs	r0, r3
    19e2:	4b0a      	ldr	r3, [pc, #40]	; (1a0c <pwm_enable+0x48>)
    19e4:	4798      	blx	r3
    19e6:	1e03      	subs	r3, r0, #0
    19e8:	d002      	beq.n	19f0 <pwm_enable+0x2c>
		return ERR_DENIED;
    19ea:	2311      	movs	r3, #17
    19ec:	425b      	negs	r3, r3
    19ee:	e004      	b.n	19fa <pwm_enable+0x36>
	}
	_pwm_enable(&descr->device);
    19f0:	687b      	ldr	r3, [r7, #4]
    19f2:	0018      	movs	r0, r3
    19f4:	4b06      	ldr	r3, [pc, #24]	; (1a10 <pwm_enable+0x4c>)
    19f6:	4798      	blx	r3

	return ERR_NONE;
    19f8:	2300      	movs	r3, #0
}
    19fa:	0018      	movs	r0, r3
    19fc:	46bd      	mov	sp, r7
    19fe:	b002      	add	sp, #8
    1a00:	bd80      	pop	{r7, pc}
    1a02:	46c0      	nop			; (mov r8, r8)
    1a04:	0000c314 	.word	0x0000c314
    1a08:	00002cd5 	.word	0x00002cd5
    1a0c:	00006535 	.word	0x00006535
    1a10:	000064c1 	.word	0x000064c1

00001a14 <pwm_set_parameters>:

/**
 * \brief Change PWM parameter
 */
int32_t pwm_set_parameters(struct pwm_descriptor *const descr, const pwm_period_t period, const pwm_period_t duty_cycle)
{
    1a14:	b580      	push	{r7, lr}
    1a16:	b084      	sub	sp, #16
    1a18:	af00      	add	r7, sp, #0
    1a1a:	60f8      	str	r0, [r7, #12]
    1a1c:	60b9      	str	r1, [r7, #8]
    1a1e:	607a      	str	r2, [r7, #4]
	ASSERT(descr);
    1a20:	68fb      	ldr	r3, [r7, #12]
    1a22:	1e5a      	subs	r2, r3, #1
    1a24:	4193      	sbcs	r3, r2
    1a26:	b2db      	uxtb	r3, r3
    1a28:	4907      	ldr	r1, [pc, #28]	; (1a48 <pwm_set_parameters+0x34>)
    1a2a:	227c      	movs	r2, #124	; 0x7c
    1a2c:	0018      	movs	r0, r3
    1a2e:	4b07      	ldr	r3, [pc, #28]	; (1a4c <pwm_set_parameters+0x38>)
    1a30:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
    1a32:	68fb      	ldr	r3, [r7, #12]
    1a34:	687a      	ldr	r2, [r7, #4]
    1a36:	68b9      	ldr	r1, [r7, #8]
    1a38:	0018      	movs	r0, r3
    1a3a:	4b05      	ldr	r3, [pc, #20]	; (1a50 <pwm_set_parameters+0x3c>)
    1a3c:	4798      	blx	r3
	return ERR_NONE;
    1a3e:	2300      	movs	r3, #0
}
    1a40:	0018      	movs	r0, r3
    1a42:	46bd      	mov	sp, r7
    1a44:	b004      	add	sp, #16
    1a46:	bd80      	pop	{r7, pc}
    1a48:	0000c314 	.word	0x0000c314
    1a4c:	00002cd5 	.word	0x00002cd5
    1a50:	000064e1 	.word	0x000064e1

00001a54 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1a54:	b580      	push	{r7, lr}
    1a56:	b084      	sub	sp, #16
    1a58:	af00      	add	r7, sp, #0
    1a5a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1a5c:	687b      	ldr	r3, [r7, #4]
    1a5e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    1a60:	68fb      	ldr	r3, [r7, #12]
    1a62:	695b      	ldr	r3, [r3, #20]
    1a64:	2b00      	cmp	r3, #0
    1a66:	d004      	beq.n	1a72 <pwm_period_expired+0x1e>
		descr->pwm_cb.period(descr);
    1a68:	68fb      	ldr	r3, [r7, #12]
    1a6a:	695b      	ldr	r3, [r3, #20]
    1a6c:	68fa      	ldr	r2, [r7, #12]
    1a6e:	0010      	movs	r0, r2
    1a70:	4798      	blx	r3
	}
}
    1a72:	46c0      	nop			; (mov r8, r8)
    1a74:	46bd      	mov	sp, r7
    1a76:	b004      	add	sp, #16
    1a78:	bd80      	pop	{r7, pc}

00001a7a <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1a7a:	b580      	push	{r7, lr}
    1a7c:	b084      	sub	sp, #16
    1a7e:	af00      	add	r7, sp, #0
    1a80:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1a82:	687b      	ldr	r3, [r7, #4]
    1a84:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    1a86:	68fb      	ldr	r3, [r7, #12]
    1a88:	699b      	ldr	r3, [r3, #24]
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	d004      	beq.n	1a98 <pwm_detect_fault+0x1e>
		descr->pwm_cb.error(descr);
    1a8e:	68fb      	ldr	r3, [r7, #12]
    1a90:	699b      	ldr	r3, [r3, #24]
    1a92:	68fa      	ldr	r2, [r7, #12]
    1a94:	0010      	movs	r0, r2
    1a96:	4798      	blx	r3
	}
}
    1a98:	46c0      	nop			; (mov r8, r8)
    1a9a:	46bd      	mov	sp, r7
    1a9c:	b004      	add	sp, #16
    1a9e:	bd80      	pop	{r7, pc}

00001aa0 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1aa0:	b580      	push	{r7, lr}
    1aa2:	b084      	sub	sp, #16
    1aa4:	af00      	add	r7, sp, #0
    1aa6:	6078      	str	r0, [r7, #4]
    1aa8:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    1aaa:	2300      	movs	r3, #0
    1aac:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    1aae:	687b      	ldr	r3, [r7, #4]
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d004      	beq.n	1abe <spi_m_sync_init+0x1e>
    1ab4:	683b      	ldr	r3, [r7, #0]
    1ab6:	2b00      	cmp	r3, #0
    1ab8:	d001      	beq.n	1abe <spi_m_sync_init+0x1e>
    1aba:	2301      	movs	r3, #1
    1abc:	e000      	b.n	1ac0 <spi_m_sync_init+0x20>
    1abe:	2300      	movs	r3, #0
    1ac0:	1c1a      	adds	r2, r3, #0
    1ac2:	2301      	movs	r3, #1
    1ac4:	4013      	ands	r3, r2
    1ac6:	b2db      	uxtb	r3, r3
    1ac8:	4911      	ldr	r1, [pc, #68]	; (1b10 <spi_m_sync_init+0x70>)
    1aca:	2240      	movs	r2, #64	; 0x40
    1acc:	0018      	movs	r0, r3
    1ace:	4b11      	ldr	r3, [pc, #68]	; (1b14 <spi_m_sync_init+0x74>)
    1ad0:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1ad2:	687b      	ldr	r3, [r7, #4]
    1ad4:	683a      	ldr	r2, [r7, #0]
    1ad6:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1ad8:	687b      	ldr	r3, [r7, #4]
    1ada:	3304      	adds	r3, #4
    1adc:	683a      	ldr	r2, [r7, #0]
    1ade:	0011      	movs	r1, r2
    1ae0:	0018      	movs	r0, r3
    1ae2:	4b0d      	ldr	r3, [pc, #52]	; (1b18 <spi_m_sync_init+0x78>)
    1ae4:	4798      	blx	r3
    1ae6:	0003      	movs	r3, r0
    1ae8:	60fb      	str	r3, [r7, #12]

	if (rc < 0) {
    1aea:	68fb      	ldr	r3, [r7, #12]
    1aec:	2b00      	cmp	r3, #0
    1aee:	da01      	bge.n	1af4 <spi_m_sync_init+0x54>
		return rc;
    1af0:	68fb      	ldr	r3, [r7, #12]
    1af2:	e009      	b.n	1b08 <spi_m_sync_init+0x68>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	4a09      	ldr	r2, [pc, #36]	; (1b1c <spi_m_sync_init+0x7c>)
    1af8:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1afa:	687b      	ldr	r3, [r7, #4]
    1afc:	4a08      	ldr	r2, [pc, #32]	; (1b20 <spi_m_sync_init+0x80>)
    1afe:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    1b00:	687b      	ldr	r3, [r7, #4]
    1b02:	4a08      	ldr	r2, [pc, #32]	; (1b24 <spi_m_sync_init+0x84>)
    1b04:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1b06:	2300      	movs	r3, #0
}
    1b08:	0018      	movs	r0, r3
    1b0a:	46bd      	mov	sp, r7
    1b0c:	b004      	add	sp, #16
    1b0e:	bd80      	pop	{r7, pc}
    1b10:	0000c32c 	.word	0x0000c32c
    1b14:	00002cd5 	.word	0x00002cd5
    1b18:	00005619 	.word	0x00005619
    1b1c:	ffff8000 	.word	0xffff8000
    1b20:	00001b29 	.word	0x00001b29
    1b24:	00001b8d 	.word	0x00001b8d

00001b28 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    1b28:	b580      	push	{r7, lr}
    1b2a:	b088      	sub	sp, #32
    1b2c:	af00      	add	r7, sp, #0
    1b2e:	60f8      	str	r0, [r7, #12]
    1b30:	60b9      	str	r1, [r7, #8]
    1b32:	1dbb      	adds	r3, r7, #6
    1b34:	801a      	strh	r2, [r3, #0]
	ASSERT(io);
    1b36:	68fb      	ldr	r3, [r7, #12]
    1b38:	1e5a      	subs	r2, r3, #1
    1b3a:	4193      	sbcs	r3, r2
    1b3c:	b2db      	uxtb	r3, r3
    1b3e:	4910      	ldr	r1, [pc, #64]	; (1b80 <_spi_m_sync_io_read+0x58>)
    1b40:	2287      	movs	r2, #135	; 0x87
    1b42:	0018      	movs	r0, r3
    1b44:	4b0f      	ldr	r3, [pc, #60]	; (1b84 <_spi_m_sync_io_read+0x5c>)
    1b46:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1b48:	68fb      	ldr	r3, [r7, #12]
    1b4a:	3b0c      	subs	r3, #12
    1b4c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    1b4e:	2310      	movs	r3, #16
    1b50:	18fb      	adds	r3, r7, r3
    1b52:	68ba      	ldr	r2, [r7, #8]
    1b54:	605a      	str	r2, [r3, #4]
	xfer.txbuf = 0;
    1b56:	2310      	movs	r3, #16
    1b58:	18fb      	adds	r3, r7, r3
    1b5a:	2200      	movs	r2, #0
    1b5c:	601a      	str	r2, [r3, #0]
	xfer.size  = length;
    1b5e:	1dbb      	adds	r3, r7, #6
    1b60:	881a      	ldrh	r2, [r3, #0]
    1b62:	2310      	movs	r3, #16
    1b64:	18fb      	adds	r3, r7, r3
    1b66:	609a      	str	r2, [r3, #8]

	return spi_m_sync_transfer(spi, &xfer);
    1b68:	2310      	movs	r3, #16
    1b6a:	18fa      	adds	r2, r7, r3
    1b6c:	69fb      	ldr	r3, [r7, #28]
    1b6e:	0011      	movs	r1, r2
    1b70:	0018      	movs	r0, r3
    1b72:	4b05      	ldr	r3, [pc, #20]	; (1b88 <_spi_m_sync_io_read+0x60>)
    1b74:	4798      	blx	r3
    1b76:	0003      	movs	r3, r0
}
    1b78:	0018      	movs	r0, r3
    1b7a:	46bd      	mov	sp, r7
    1b7c:	b008      	add	sp, #32
    1b7e:	bd80      	pop	{r7, pc}
    1b80:	0000c32c 	.word	0x0000c32c
    1b84:	00002cd5 	.word	0x00002cd5
    1b88:	00001bf1 	.word	0x00001bf1

00001b8c <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    1b8c:	b580      	push	{r7, lr}
    1b8e:	b088      	sub	sp, #32
    1b90:	af00      	add	r7, sp, #0
    1b92:	60f8      	str	r0, [r7, #12]
    1b94:	60b9      	str	r1, [r7, #8]
    1b96:	1dbb      	adds	r3, r7, #6
    1b98:	801a      	strh	r2, [r3, #0]
	ASSERT(io);
    1b9a:	68fb      	ldr	r3, [r7, #12]
    1b9c:	1e5a      	subs	r2, r3, #1
    1b9e:	4193      	sbcs	r3, r2
    1ba0:	b2db      	uxtb	r3, r3
    1ba2:	4910      	ldr	r1, [pc, #64]	; (1be4 <_spi_m_sync_io_write+0x58>)
    1ba4:	22a3      	movs	r2, #163	; 0xa3
    1ba6:	0018      	movs	r0, r3
    1ba8:	4b0f      	ldr	r3, [pc, #60]	; (1be8 <_spi_m_sync_io_write+0x5c>)
    1baa:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1bac:	68fb      	ldr	r3, [r7, #12]
    1bae:	3b0c      	subs	r3, #12
    1bb0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    1bb2:	2310      	movs	r3, #16
    1bb4:	18fb      	adds	r3, r7, r3
    1bb6:	2200      	movs	r2, #0
    1bb8:	605a      	str	r2, [r3, #4]
	xfer.txbuf = (uint8_t *)buf;
    1bba:	2310      	movs	r3, #16
    1bbc:	18fb      	adds	r3, r7, r3
    1bbe:	68ba      	ldr	r2, [r7, #8]
    1bc0:	601a      	str	r2, [r3, #0]
	xfer.size  = length;
    1bc2:	1dbb      	adds	r3, r7, #6
    1bc4:	881a      	ldrh	r2, [r3, #0]
    1bc6:	2310      	movs	r3, #16
    1bc8:	18fb      	adds	r3, r7, r3
    1bca:	609a      	str	r2, [r3, #8]

	return spi_m_sync_transfer(spi, &xfer);
    1bcc:	2310      	movs	r3, #16
    1bce:	18fa      	adds	r2, r7, r3
    1bd0:	69fb      	ldr	r3, [r7, #28]
    1bd2:	0011      	movs	r1, r2
    1bd4:	0018      	movs	r0, r3
    1bd6:	4b05      	ldr	r3, [pc, #20]	; (1bec <_spi_m_sync_io_write+0x60>)
    1bd8:	4798      	blx	r3
    1bda:	0003      	movs	r3, r0
}
    1bdc:	0018      	movs	r0, r3
    1bde:	46bd      	mov	sp, r7
    1be0:	b008      	add	sp, #32
    1be2:	bd80      	pop	{r7, pc}
    1be4:	0000c32c 	.word	0x0000c32c
    1be8:	00002cd5 	.word	0x00002cd5
    1bec:	00001bf1 	.word	0x00001bf1

00001bf0 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1bf0:	b580      	push	{r7, lr}
    1bf2:	b086      	sub	sp, #24
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	6078      	str	r0, [r7, #4]
    1bf8:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1bfa:	687b      	ldr	r3, [r7, #4]
    1bfc:	2b00      	cmp	r3, #0
    1bfe:	d004      	beq.n	1c0a <spi_m_sync_transfer+0x1a>
    1c00:	683b      	ldr	r3, [r7, #0]
    1c02:	2b00      	cmp	r3, #0
    1c04:	d001      	beq.n	1c0a <spi_m_sync_transfer+0x1a>
    1c06:	2301      	movs	r3, #1
    1c08:	e000      	b.n	1c0c <spi_m_sync_transfer+0x1c>
    1c0a:	2300      	movs	r3, #0
    1c0c:	1c1a      	adds	r2, r3, #0
    1c0e:	2301      	movs	r3, #1
    1c10:	4013      	ands	r3, r2
    1c12:	b2db      	uxtb	r3, r3
    1c14:	4910      	ldr	r1, [pc, #64]	; (1c58 <spi_m_sync_transfer+0x68>)
    1c16:	22b3      	movs	r2, #179	; 0xb3
    1c18:	0018      	movs	r0, r3
    1c1a:	4b10      	ldr	r3, [pc, #64]	; (1c5c <spi_m_sync_transfer+0x6c>)
    1c1c:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1c1e:	683b      	ldr	r3, [r7, #0]
    1c20:	681a      	ldr	r2, [r3, #0]
    1c22:	230c      	movs	r3, #12
    1c24:	18fb      	adds	r3, r7, r3
    1c26:	601a      	str	r2, [r3, #0]
	msg.rxbuf = p_xfer->rxbuf;
    1c28:	683b      	ldr	r3, [r7, #0]
    1c2a:	685a      	ldr	r2, [r3, #4]
    1c2c:	230c      	movs	r3, #12
    1c2e:	18fb      	adds	r3, r7, r3
    1c30:	605a      	str	r2, [r3, #4]
	msg.size  = p_xfer->size;
    1c32:	683b      	ldr	r3, [r7, #0]
    1c34:	689a      	ldr	r2, [r3, #8]
    1c36:	230c      	movs	r3, #12
    1c38:	18fb      	adds	r3, r7, r3
    1c3a:	609a      	str	r2, [r3, #8]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1c3c:	687b      	ldr	r3, [r7, #4]
    1c3e:	3304      	adds	r3, #4
    1c40:	220c      	movs	r2, #12
    1c42:	18ba      	adds	r2, r7, r2
    1c44:	0011      	movs	r1, r2
    1c46:	0018      	movs	r0, r3
    1c48:	4b05      	ldr	r3, [pc, #20]	; (1c60 <spi_m_sync_transfer+0x70>)
    1c4a:	4798      	blx	r3
    1c4c:	0003      	movs	r3, r0
}
    1c4e:	0018      	movs	r0, r3
    1c50:	46bd      	mov	sp, r7
    1c52:	b006      	add	sp, #24
    1c54:	bd80      	pop	{r7, pc}
    1c56:	46c0      	nop			; (mov r8, r8)
    1c58:	0000c32c 	.word	0x0000c32c
    1c5c:	00002cd5 	.word	0x00002cd5
    1c60:	000058e5 	.word	0x000058e5

00001c64 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    1c64:	b580      	push	{r7, lr}
    1c66:	b082      	sub	sp, #8
    1c68:	af00      	add	r7, sp, #0
    1c6a:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    1c6c:	687b      	ldr	r3, [r7, #4]
    1c6e:	681b      	ldr	r3, [r3, #0]
}
    1c70:	0018      	movs	r0, r3
    1c72:	46bd      	mov	sp, r7
    1c74:	b002      	add	sp, #8
    1c76:	bd80      	pop	{r7, pc}

00001c78 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    1c78:	b580      	push	{r7, lr}
    1c7a:	b082      	sub	sp, #8
    1c7c:	af00      	add	r7, sp, #0
    1c7e:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    1c80:	687b      	ldr	r3, [r7, #4]
    1c82:	2b00      	cmp	r3, #0
    1c84:	d002      	beq.n	1c8c <list_get_next_element+0x14>
    1c86:	687b      	ldr	r3, [r7, #4]
    1c88:	681b      	ldr	r3, [r3, #0]
    1c8a:	e000      	b.n	1c8e <list_get_next_element+0x16>
    1c8c:	2300      	movs	r3, #0
}
    1c8e:	0018      	movs	r0, r3
    1c90:	46bd      	mov	sp, r7
    1c92:	b002      	add	sp, #8
    1c94:	bd80      	pop	{r7, pc}
	...

00001c98 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    1c98:	b580      	push	{r7, lr}
    1c9a:	b084      	sub	sp, #16
    1c9c:	af00      	add	r7, sp, #0
    1c9e:	60f8      	str	r0, [r7, #12]
    1ca0:	60b9      	str	r1, [r7, #8]
    1ca2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    1ca4:	68fb      	ldr	r3, [r7, #12]
    1ca6:	2b00      	cmp	r3, #0
    1ca8:	d004      	beq.n	1cb4 <timer_init+0x1c>
    1caa:	68bb      	ldr	r3, [r7, #8]
    1cac:	2b00      	cmp	r3, #0
    1cae:	d001      	beq.n	1cb4 <timer_init+0x1c>
    1cb0:	2301      	movs	r3, #1
    1cb2:	e000      	b.n	1cb6 <timer_init+0x1e>
    1cb4:	2300      	movs	r3, #0
    1cb6:	1c1a      	adds	r2, r3, #0
    1cb8:	2301      	movs	r3, #1
    1cba:	4013      	ands	r3, r2
    1cbc:	b2db      	uxtb	r3, r3
    1cbe:	490b      	ldr	r1, [pc, #44]	; (1cec <timer_init+0x54>)
    1cc0:	223b      	movs	r2, #59	; 0x3b
    1cc2:	0018      	movs	r0, r3
    1cc4:	4b0a      	ldr	r3, [pc, #40]	; (1cf0 <timer_init+0x58>)
    1cc6:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1cc8:	68fb      	ldr	r3, [r7, #12]
    1cca:	68ba      	ldr	r2, [r7, #8]
    1ccc:	0011      	movs	r1, r2
    1cce:	0018      	movs	r0, r3
    1cd0:	4b08      	ldr	r3, [pc, #32]	; (1cf4 <timer_init+0x5c>)
    1cd2:	4798      	blx	r3
	descr->time                           = 0;
    1cd4:	68fb      	ldr	r3, [r7, #12]
    1cd6:	2200      	movs	r2, #0
    1cd8:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1cda:	68fb      	ldr	r3, [r7, #12]
    1cdc:	4a06      	ldr	r2, [pc, #24]	; (1cf8 <timer_init+0x60>)
    1cde:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    1ce0:	2300      	movs	r3, #0
}
    1ce2:	0018      	movs	r0, r3
    1ce4:	46bd      	mov	sp, r7
    1ce6:	b004      	add	sp, #16
    1ce8:	bd80      	pop	{r7, pc}
    1cea:	46c0      	nop			; (mov r8, r8)
    1cec:	0000c348 	.word	0x0000c348
    1cf0:	00002cd5 	.word	0x00002cd5
    1cf4:	00003efd 	.word	0x00003efd
    1cf8:	00001f0d 	.word	0x00001f0d

00001cfc <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    1cfc:	b580      	push	{r7, lr}
    1cfe:	b082      	sub	sp, #8
    1d00:	af00      	add	r7, sp, #0
    1d02:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1d04:	687b      	ldr	r3, [r7, #4]
    1d06:	1e5a      	subs	r2, r3, #1
    1d08:	4193      	sbcs	r3, r2
    1d0a:	b2db      	uxtb	r3, r3
    1d0c:	490b      	ldr	r1, [pc, #44]	; (1d3c <timer_start+0x40>)
    1d0e:	2253      	movs	r2, #83	; 0x53
    1d10:	0018      	movs	r0, r3
    1d12:	4b0b      	ldr	r3, [pc, #44]	; (1d40 <timer_start+0x44>)
    1d14:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    1d16:	687b      	ldr	r3, [r7, #4]
    1d18:	0018      	movs	r0, r3
    1d1a:	4b0a      	ldr	r3, [pc, #40]	; (1d44 <timer_start+0x48>)
    1d1c:	4798      	blx	r3
    1d1e:	1e03      	subs	r3, r0, #0
    1d20:	d002      	beq.n	1d28 <timer_start+0x2c>
		return ERR_DENIED;
    1d22:	2311      	movs	r3, #17
    1d24:	425b      	negs	r3, r3
    1d26:	e004      	b.n	1d32 <timer_start+0x36>
	}
	_timer_start(&descr->device);
    1d28:	687b      	ldr	r3, [r7, #4]
    1d2a:	0018      	movs	r0, r3
    1d2c:	4b06      	ldr	r3, [pc, #24]	; (1d48 <timer_start+0x4c>)
    1d2e:	4798      	blx	r3

	return ERR_NONE;
    1d30:	2300      	movs	r3, #0
}
    1d32:	0018      	movs	r0, r3
    1d34:	46bd      	mov	sp, r7
    1d36:	b002      	add	sp, #8
    1d38:	bd80      	pop	{r7, pc}
    1d3a:	46c0      	nop			; (mov r8, r8)
    1d3c:	0000c348 	.word	0x0000c348
    1d40:	00002cd5 	.word	0x00002cd5
    1d44:	0000402d 	.word	0x0000402d
    1d48:	00003fb9 	.word	0x00003fb9

00001d4c <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    1d4c:	b580      	push	{r7, lr}
    1d4e:	b084      	sub	sp, #16
    1d50:	af00      	add	r7, sp, #0
    1d52:	6078      	str	r0, [r7, #4]
    1d54:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    1d56:	687b      	ldr	r3, [r7, #4]
    1d58:	2b00      	cmp	r3, #0
    1d5a:	d004      	beq.n	1d66 <timer_add_task+0x1a>
    1d5c:	683b      	ldr	r3, [r7, #0]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d001      	beq.n	1d66 <timer_add_task+0x1a>
    1d62:	2301      	movs	r3, #1
    1d64:	e000      	b.n	1d68 <timer_add_task+0x1c>
    1d66:	2300      	movs	r3, #0
    1d68:	1c1a      	adds	r2, r3, #0
    1d6a:	2301      	movs	r3, #1
    1d6c:	4013      	ands	r3, r2
    1d6e:	b2db      	uxtb	r3, r3
    1d70:	492e      	ldr	r1, [pc, #184]	; (1e2c <timer_add_task+0xe0>)
    1d72:	227a      	movs	r2, #122	; 0x7a
    1d74:	0018      	movs	r0, r3
    1d76:	4b2e      	ldr	r3, [pc, #184]	; (1e30 <timer_add_task+0xe4>)
    1d78:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1d7a:	687b      	ldr	r3, [r7, #4]
    1d7c:	7e1b      	ldrb	r3, [r3, #24]
    1d7e:	b2db      	uxtb	r3, r3
    1d80:	2201      	movs	r2, #1
    1d82:	4313      	orrs	r3, r2
    1d84:	b2da      	uxtb	r2, r3
    1d86:	687b      	ldr	r3, [r7, #4]
    1d88:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    1d8a:	687b      	ldr	r3, [r7, #4]
    1d8c:	3314      	adds	r3, #20
    1d8e:	683a      	ldr	r2, [r7, #0]
    1d90:	0011      	movs	r1, r2
    1d92:	0018      	movs	r0, r3
    1d94:	4b27      	ldr	r3, [pc, #156]	; (1e34 <timer_add_task+0xe8>)
    1d96:	4798      	blx	r3
    1d98:	1e03      	subs	r3, r0, #0
    1d9a:	d010      	beq.n	1dbe <timer_add_task+0x72>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1d9c:	687b      	ldr	r3, [r7, #4]
    1d9e:	7e1b      	ldrb	r3, [r3, #24]
    1da0:	b2db      	uxtb	r3, r3
    1da2:	2201      	movs	r2, #1
    1da4:	4393      	bics	r3, r2
    1da6:	b2da      	uxtb	r2, r3
    1da8:	687b      	ldr	r3, [r7, #4]
    1daa:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    1dac:	4b1f      	ldr	r3, [pc, #124]	; (1e2c <timer_add_task+0xe0>)
    1dae:	227f      	movs	r2, #127	; 0x7f
    1db0:	0019      	movs	r1, r3
    1db2:	2000      	movs	r0, #0
    1db4:	4b1e      	ldr	r3, [pc, #120]	; (1e30 <timer_add_task+0xe4>)
    1db6:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    1db8:	2312      	movs	r3, #18
    1dba:	425b      	negs	r3, r3
    1dbc:	e032      	b.n	1e24 <timer_add_task+0xd8>
	}
	task->time_label = descr->time;
    1dbe:	687b      	ldr	r3, [r7, #4]
    1dc0:	691a      	ldr	r2, [r3, #16]
    1dc2:	683b      	ldr	r3, [r7, #0]
    1dc4:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1dc6:	687b      	ldr	r3, [r7, #4]
    1dc8:	3314      	adds	r3, #20
    1dca:	0018      	movs	r0, r3
    1dcc:	687b      	ldr	r3, [r7, #4]
    1dce:	691a      	ldr	r2, [r3, #16]
    1dd0:	683b      	ldr	r3, [r7, #0]
    1dd2:	0019      	movs	r1, r3
    1dd4:	4b18      	ldr	r3, [pc, #96]	; (1e38 <timer_add_task+0xec>)
    1dd6:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1dd8:	687b      	ldr	r3, [r7, #4]
    1dda:	7e1b      	ldrb	r3, [r3, #24]
    1ddc:	b2db      	uxtb	r3, r3
    1dde:	2201      	movs	r2, #1
    1de0:	4393      	bics	r3, r2
    1de2:	b2da      	uxtb	r2, r3
    1de4:	687b      	ldr	r3, [r7, #4]
    1de6:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1de8:	687b      	ldr	r3, [r7, #4]
    1dea:	7e1b      	ldrb	r3, [r3, #24]
    1dec:	b2db      	uxtb	r3, r3
    1dee:	001a      	movs	r2, r3
    1df0:	2302      	movs	r3, #2
    1df2:	4013      	ands	r3, r2
    1df4:	d015      	beq.n	1e22 <timer_add_task+0xd6>
		CRITICAL_SECTION_ENTER()
    1df6:	230c      	movs	r3, #12
    1df8:	18fb      	adds	r3, r7, r3
    1dfa:	0018      	movs	r0, r3
    1dfc:	4b0f      	ldr	r3, [pc, #60]	; (1e3c <timer_add_task+0xf0>)
    1dfe:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1e00:	687b      	ldr	r3, [r7, #4]
    1e02:	7e1b      	ldrb	r3, [r3, #24]
    1e04:	b2db      	uxtb	r3, r3
    1e06:	2202      	movs	r2, #2
    1e08:	4393      	bics	r3, r2
    1e0a:	b2da      	uxtb	r2, r3
    1e0c:	687b      	ldr	r3, [r7, #4]
    1e0e:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    1e10:	687b      	ldr	r3, [r7, #4]
    1e12:	0018      	movs	r0, r3
    1e14:	4b0a      	ldr	r3, [pc, #40]	; (1e40 <timer_add_task+0xf4>)
    1e16:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1e18:	230c      	movs	r3, #12
    1e1a:	18fb      	adds	r3, r7, r3
    1e1c:	0018      	movs	r0, r3
    1e1e:	4b09      	ldr	r3, [pc, #36]	; (1e44 <timer_add_task+0xf8>)
    1e20:	4798      	blx	r3
	}

	return ERR_NONE;
    1e22:	2300      	movs	r3, #0
}
    1e24:	0018      	movs	r0, r3
    1e26:	46bd      	mov	sp, r7
    1e28:	b004      	add	sp, #16
    1e2a:	bd80      	pop	{r7, pc}
    1e2c:	0000c348 	.word	0x0000c348
    1e30:	00002cd5 	.word	0x00002cd5
    1e34:	00002d01 	.word	0x00002d01
    1e38:	00001e49 	.word	0x00001e49
    1e3c:	00001615 	.word	0x00001615
    1e40:	0000404d 	.word	0x0000404d
    1e44:	00001637 	.word	0x00001637

00001e48 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1e48:	b580      	push	{r7, lr}
    1e4a:	b088      	sub	sp, #32
    1e4c:	af00      	add	r7, sp, #0
    1e4e:	60f8      	str	r0, [r7, #12]
    1e50:	60b9      	str	r1, [r7, #8]
    1e52:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    1e54:	2300      	movs	r3, #0
    1e56:	61bb      	str	r3, [r7, #24]
    1e58:	68fb      	ldr	r3, [r7, #12]
    1e5a:	0018      	movs	r0, r3
    1e5c:	4b27      	ldr	r3, [pc, #156]	; (1efc <timer_add_timer_task+0xb4>)
    1e5e:	4798      	blx	r3
    1e60:	0003      	movs	r3, r0
    1e62:	613b      	str	r3, [r7, #16]

	if (!head) {
    1e64:	693b      	ldr	r3, [r7, #16]
    1e66:	2b00      	cmp	r3, #0
    1e68:	d106      	bne.n	1e78 <timer_add_timer_task+0x30>
		list_insert_as_head(list, new_task);
    1e6a:	68ba      	ldr	r2, [r7, #8]
    1e6c:	68fb      	ldr	r3, [r7, #12]
    1e6e:	0011      	movs	r1, r2
    1e70:	0018      	movs	r0, r3
    1e72:	4b23      	ldr	r3, [pc, #140]	; (1f00 <timer_add_timer_task+0xb8>)
    1e74:	4798      	blx	r3
		return;
    1e76:	e03d      	b.n	1ef4 <timer_add_timer_task+0xac>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1e78:	693b      	ldr	r3, [r7, #16]
    1e7a:	61fb      	str	r3, [r7, #28]
    1e7c:	e024      	b.n	1ec8 <timer_add_timer_task+0x80>
		uint32_t time_left;

		if (it->time_label <= time) {
    1e7e:	69fb      	ldr	r3, [r7, #28]
    1e80:	685a      	ldr	r2, [r3, #4]
    1e82:	687b      	ldr	r3, [r7, #4]
    1e84:	429a      	cmp	r2, r3
    1e86:	d808      	bhi.n	1e9a <timer_add_timer_task+0x52>
			time_left = it->interval - (time - it->time_label);
    1e88:	69fb      	ldr	r3, [r7, #28]
    1e8a:	689a      	ldr	r2, [r3, #8]
    1e8c:	69fb      	ldr	r3, [r7, #28]
    1e8e:	6859      	ldr	r1, [r3, #4]
    1e90:	687b      	ldr	r3, [r7, #4]
    1e92:	1acb      	subs	r3, r1, r3
    1e94:	18d3      	adds	r3, r2, r3
    1e96:	617b      	str	r3, [r7, #20]
    1e98:	e009      	b.n	1eae <timer_add_timer_task+0x66>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1e9a:	69fb      	ldr	r3, [r7, #28]
    1e9c:	689a      	ldr	r2, [r3, #8]
    1e9e:	69fb      	ldr	r3, [r7, #28]
    1ea0:	685b      	ldr	r3, [r3, #4]
    1ea2:	18d2      	adds	r2, r2, r3
    1ea4:	687b      	ldr	r3, [r7, #4]
    1ea6:	425b      	negs	r3, r3
    1ea8:	18d3      	adds	r3, r2, r3
    1eaa:	3301      	adds	r3, #1
    1eac:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    1eae:	68bb      	ldr	r3, [r7, #8]
    1eb0:	689a      	ldr	r2, [r3, #8]
    1eb2:	697b      	ldr	r3, [r7, #20]
    1eb4:	429a      	cmp	r2, r3
    1eb6:	d90b      	bls.n	1ed0 <timer_add_timer_task+0x88>
			break;
		prev = it;
    1eb8:	69fb      	ldr	r3, [r7, #28]
    1eba:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1ebc:	69fb      	ldr	r3, [r7, #28]
    1ebe:	0018      	movs	r0, r3
    1ec0:	4b10      	ldr	r3, [pc, #64]	; (1f04 <timer_add_timer_task+0xbc>)
    1ec2:	4798      	blx	r3
    1ec4:	0003      	movs	r3, r0
    1ec6:	61fb      	str	r3, [r7, #28]
    1ec8:	69fb      	ldr	r3, [r7, #28]
    1eca:	2b00      	cmp	r3, #0
    1ecc:	d1d7      	bne.n	1e7e <timer_add_timer_task+0x36>
    1ece:	e000      	b.n	1ed2 <timer_add_timer_task+0x8a>
			break;
    1ed0:	46c0      	nop			; (mov r8, r8)
	}

	if (it == head) {
    1ed2:	69fa      	ldr	r2, [r7, #28]
    1ed4:	693b      	ldr	r3, [r7, #16]
    1ed6:	429a      	cmp	r2, r3
    1ed8:	d106      	bne.n	1ee8 <timer_add_timer_task+0xa0>
		list_insert_as_head(list, new_task);
    1eda:	68ba      	ldr	r2, [r7, #8]
    1edc:	68fb      	ldr	r3, [r7, #12]
    1ede:	0011      	movs	r1, r2
    1ee0:	0018      	movs	r0, r3
    1ee2:	4b07      	ldr	r3, [pc, #28]	; (1f00 <timer_add_timer_task+0xb8>)
    1ee4:	4798      	blx	r3
    1ee6:	e005      	b.n	1ef4 <timer_add_timer_task+0xac>
	} else {
		list_insert_after(prev, new_task);
    1ee8:	68ba      	ldr	r2, [r7, #8]
    1eea:	69bb      	ldr	r3, [r7, #24]
    1eec:	0011      	movs	r1, r2
    1eee:	0018      	movs	r0, r3
    1ef0:	4b05      	ldr	r3, [pc, #20]	; (1f08 <timer_add_timer_task+0xc0>)
    1ef2:	4798      	blx	r3
	}
}
    1ef4:	46bd      	mov	sp, r7
    1ef6:	b008      	add	sp, #32
    1ef8:	bd80      	pop	{r7, pc}
    1efa:	46c0      	nop			; (mov r8, r8)
    1efc:	00001c65 	.word	0x00001c65
    1f00:	00002d35 	.word	0x00002d35
    1f04:	00001c79 	.word	0x00001c79
    1f08:	00002d8d 	.word	0x00002d8d

00001f0c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1f0c:	b580      	push	{r7, lr}
    1f0e:	b086      	sub	sp, #24
    1f10:	af00      	add	r7, sp, #0
    1f12:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    1f14:	687b      	ldr	r3, [r7, #4]
    1f16:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    1f18:	693b      	ldr	r3, [r7, #16]
    1f1a:	3314      	adds	r3, #20
    1f1c:	0018      	movs	r0, r3
    1f1e:	4b29      	ldr	r3, [pc, #164]	; (1fc4 <timer_process_counted+0xb8>)
    1f20:	4798      	blx	r3
    1f22:	0003      	movs	r3, r0
    1f24:	617b      	str	r3, [r7, #20]
	uint32_t                 time  = ++timer->time;
    1f26:	693b      	ldr	r3, [r7, #16]
    1f28:	691b      	ldr	r3, [r3, #16]
    1f2a:	1c5a      	adds	r2, r3, #1
    1f2c:	693b      	ldr	r3, [r7, #16]
    1f2e:	611a      	str	r2, [r3, #16]
    1f30:	693b      	ldr	r3, [r7, #16]
    1f32:	691b      	ldr	r3, [r3, #16]
    1f34:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1f36:	693b      	ldr	r3, [r7, #16]
    1f38:	7e1b      	ldrb	r3, [r3, #24]
    1f3a:	b2db      	uxtb	r3, r3
    1f3c:	001a      	movs	r2, r3
    1f3e:	2301      	movs	r3, #1
    1f40:	4013      	ands	r3, r2
    1f42:	d106      	bne.n	1f52 <timer_process_counted+0x46>
    1f44:	693b      	ldr	r3, [r7, #16]
    1f46:	7e1b      	ldrb	r3, [r3, #24]
    1f48:	b2db      	uxtb	r3, r3
    1f4a:	001a      	movs	r2, r3
    1f4c:	2302      	movs	r3, #2
    1f4e:	4013      	ands	r3, r2
    1f50:	d029      	beq.n	1fa6 <timer_process_counted+0x9a>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1f52:	693b      	ldr	r3, [r7, #16]
    1f54:	7e1b      	ldrb	r3, [r3, #24]
    1f56:	b2db      	uxtb	r3, r3
    1f58:	2202      	movs	r2, #2
    1f5a:	4313      	orrs	r3, r2
    1f5c:	b2da      	uxtb	r2, r3
    1f5e:	693b      	ldr	r3, [r7, #16]
    1f60:	761a      	strb	r2, [r3, #24]
		return;
    1f62:	e02b      	b.n	1fbc <timer_process_counted+0xb0>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    1f64:	697b      	ldr	r3, [r7, #20]
    1f66:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    1f68:	693b      	ldr	r3, [r7, #16]
    1f6a:	3314      	adds	r3, #20
    1f6c:	0018      	movs	r0, r3
    1f6e:	4b16      	ldr	r3, [pc, #88]	; (1fc8 <timer_process_counted+0xbc>)
    1f70:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1f72:	68bb      	ldr	r3, [r7, #8]
    1f74:	7c1b      	ldrb	r3, [r3, #16]
    1f76:	2b01      	cmp	r3, #1
    1f78:	d109      	bne.n	1f8e <timer_process_counted+0x82>
			tmp->time_label = time;
    1f7a:	68bb      	ldr	r3, [r7, #8]
    1f7c:	68fa      	ldr	r2, [r7, #12]
    1f7e:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1f80:	693b      	ldr	r3, [r7, #16]
    1f82:	3314      	adds	r3, #20
    1f84:	68fa      	ldr	r2, [r7, #12]
    1f86:	68b9      	ldr	r1, [r7, #8]
    1f88:	0018      	movs	r0, r3
    1f8a:	4b10      	ldr	r3, [pc, #64]	; (1fcc <timer_process_counted+0xc0>)
    1f8c:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1f8e:	693b      	ldr	r3, [r7, #16]
    1f90:	3314      	adds	r3, #20
    1f92:	0018      	movs	r0, r3
    1f94:	4b0b      	ldr	r3, [pc, #44]	; (1fc4 <timer_process_counted+0xb8>)
    1f96:	4798      	blx	r3
    1f98:	0003      	movs	r3, r0
    1f9a:	617b      	str	r3, [r7, #20]

		tmp->cb(tmp);
    1f9c:	68bb      	ldr	r3, [r7, #8]
    1f9e:	68db      	ldr	r3, [r3, #12]
    1fa0:	68ba      	ldr	r2, [r7, #8]
    1fa2:	0010      	movs	r0, r2
    1fa4:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1fa6:	697b      	ldr	r3, [r7, #20]
    1fa8:	2b00      	cmp	r3, #0
    1faa:	d007      	beq.n	1fbc <timer_process_counted+0xb0>
    1fac:	697b      	ldr	r3, [r7, #20]
    1fae:	685b      	ldr	r3, [r3, #4]
    1fb0:	68fa      	ldr	r2, [r7, #12]
    1fb2:	1ad2      	subs	r2, r2, r3
    1fb4:	697b      	ldr	r3, [r7, #20]
    1fb6:	689b      	ldr	r3, [r3, #8]
    1fb8:	429a      	cmp	r2, r3
    1fba:	d2d3      	bcs.n	1f64 <timer_process_counted+0x58>
	}
}
    1fbc:	46bd      	mov	sp, r7
    1fbe:	b006      	add	sp, #24
    1fc0:	bd80      	pop	{r7, pc}
    1fc2:	46c0      	nop			; (mov r8, r8)
    1fc4:	00001c65 	.word	0x00001c65
    1fc8:	00002e2d 	.word	0x00002e2d
    1fcc:	00001e49 	.word	0x00001e49

00001fd0 <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
    1fd0:	b580      	push	{r7, lr}
    1fd2:	b086      	sub	sp, #24
    1fd4:	af00      	add	r7, sp, #0
    1fd6:	60f8      	str	r0, [r7, #12]
    1fd8:	60b9      	str	r1, [r7, #8]
    1fda:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
    1fdc:	68fb      	ldr	r3, [r7, #12]
    1fde:	2b00      	cmp	r3, #0
    1fe0:	d004      	beq.n	1fec <usart_sync_init+0x1c>
    1fe2:	68bb      	ldr	r3, [r7, #8]
    1fe4:	2b00      	cmp	r3, #0
    1fe6:	d001      	beq.n	1fec <usart_sync_init+0x1c>
    1fe8:	2301      	movs	r3, #1
    1fea:	e000      	b.n	1fee <usart_sync_init+0x1e>
    1fec:	2300      	movs	r3, #0
    1fee:	1c1a      	adds	r2, r3, #0
    1ff0:	2301      	movs	r3, #1
    1ff2:	4013      	ands	r3, r2
    1ff4:	b2db      	uxtb	r3, r3
    1ff6:	490f      	ldr	r1, [pc, #60]	; (2034 <STACK_SIZE+0x34>)
    1ff8:	2234      	movs	r2, #52	; 0x34
    1ffa:	0018      	movs	r0, r3
    1ffc:	4b0e      	ldr	r3, [pc, #56]	; (2038 <STACK_SIZE+0x38>)
    1ffe:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    2000:	68fb      	ldr	r3, [r7, #12]
    2002:	3308      	adds	r3, #8
    2004:	68ba      	ldr	r2, [r7, #8]
    2006:	0011      	movs	r1, r2
    2008:	0018      	movs	r0, r3
    200a:	4b0c      	ldr	r3, [pc, #48]	; (203c <STACK_SIZE+0x3c>)
    200c:	4798      	blx	r3
    200e:	0003      	movs	r3, r0
    2010:	617b      	str	r3, [r7, #20]
	if (init_status) {
    2012:	697b      	ldr	r3, [r7, #20]
    2014:	2b00      	cmp	r3, #0
    2016:	d001      	beq.n	201c <STACK_SIZE+0x1c>
		return init_status;
    2018:	697b      	ldr	r3, [r7, #20]
    201a:	e006      	b.n	202a <STACK_SIZE+0x2a>
	}

	descr->io.read  = usart_sync_read;
    201c:	68fb      	ldr	r3, [r7, #12]
    201e:	4a08      	ldr	r2, [pc, #32]	; (2040 <STACK_SIZE+0x40>)
    2020:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
    2022:	68fb      	ldr	r3, [r7, #12]
    2024:	4a07      	ldr	r2, [pc, #28]	; (2044 <STACK_SIZE+0x44>)
    2026:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    2028:	2300      	movs	r3, #0
}
    202a:	0018      	movs	r0, r3
    202c:	46bd      	mov	sp, r7
    202e:	b006      	add	sp, #24
    2030:	bd80      	pop	{r7, pc}
    2032:	46c0      	nop			; (mov r8, r8)
    2034:	0000c360 	.word	0x0000c360
    2038:	00002cd5 	.word	0x00002cd5
    203c:	00004885 	.word	0x00004885
    2040:	000021a1 	.word	0x000021a1
    2044:	000020cd 	.word	0x000020cd

00002048 <usart_sync_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_sync_enable(struct usart_sync_descriptor *const descr)
{
    2048:	b580      	push	{r7, lr}
    204a:	b082      	sub	sp, #8
    204c:	af00      	add	r7, sp, #0
    204e:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2050:	687b      	ldr	r3, [r7, #4]
    2052:	1e5a      	subs	r2, r3, #1
    2054:	4193      	sbcs	r3, r2
    2056:	b2db      	uxtb	r3, r3
    2058:	4907      	ldr	r1, [pc, #28]	; (2078 <usart_sync_enable+0x30>)
    205a:	2253      	movs	r2, #83	; 0x53
    205c:	0018      	movs	r0, r3
    205e:	4b07      	ldr	r3, [pc, #28]	; (207c <usart_sync_enable+0x34>)
    2060:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    2062:	687b      	ldr	r3, [r7, #4]
    2064:	3308      	adds	r3, #8
    2066:	0018      	movs	r0, r3
    2068:	4b05      	ldr	r3, [pc, #20]	; (2080 <usart_sync_enable+0x38>)
    206a:	4798      	blx	r3

	return ERR_NONE;
    206c:	2300      	movs	r3, #0
}
    206e:	0018      	movs	r0, r3
    2070:	46bd      	mov	sp, r7
    2072:	b002      	add	sp, #8
    2074:	bd80      	pop	{r7, pc}
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	0000c360 	.word	0x0000c360
    207c:	00002cd5 	.word	0x00002cd5
    2080:	000048c5 	.word	0x000048c5

00002084 <usart_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t usart_sync_get_io_descriptor(struct usart_sync_descriptor *const descr, struct io_descriptor **io)
{
    2084:	b580      	push	{r7, lr}
    2086:	b082      	sub	sp, #8
    2088:	af00      	add	r7, sp, #0
    208a:	6078      	str	r0, [r7, #4]
    208c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && io);
    208e:	687b      	ldr	r3, [r7, #4]
    2090:	2b00      	cmp	r3, #0
    2092:	d004      	beq.n	209e <usart_sync_get_io_descriptor+0x1a>
    2094:	683b      	ldr	r3, [r7, #0]
    2096:	2b00      	cmp	r3, #0
    2098:	d001      	beq.n	209e <usart_sync_get_io_descriptor+0x1a>
    209a:	2301      	movs	r3, #1
    209c:	e000      	b.n	20a0 <usart_sync_get_io_descriptor+0x1c>
    209e:	2300      	movs	r3, #0
    20a0:	1c1a      	adds	r2, r3, #0
    20a2:	2301      	movs	r3, #1
    20a4:	4013      	ands	r3, r2
    20a6:	b2db      	uxtb	r3, r3
    20a8:	4906      	ldr	r1, [pc, #24]	; (20c4 <usart_sync_get_io_descriptor+0x40>)
    20aa:	2269      	movs	r2, #105	; 0x69
    20ac:	0018      	movs	r0, r3
    20ae:	4b06      	ldr	r3, [pc, #24]	; (20c8 <usart_sync_get_io_descriptor+0x44>)
    20b0:	4798      	blx	r3

	*io = &descr->io;
    20b2:	687a      	ldr	r2, [r7, #4]
    20b4:	683b      	ldr	r3, [r7, #0]
    20b6:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    20b8:	2300      	movs	r3, #0
}
    20ba:	0018      	movs	r0, r3
    20bc:	46bd      	mov	sp, r7
    20be:	b002      	add	sp, #8
    20c0:	bd80      	pop	{r7, pc}
    20c2:	46c0      	nop			; (mov r8, r8)
    20c4:	0000c360 	.word	0x0000c360
    20c8:	00002cd5 	.word	0x00002cd5

000020cc <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    20cc:	b580      	push	{r7, lr}
    20ce:	b086      	sub	sp, #24
    20d0:	af00      	add	r7, sp, #0
    20d2:	60f8      	str	r0, [r7, #12]
    20d4:	60b9      	str	r1, [r7, #8]
    20d6:	1dbb      	adds	r3, r7, #6
    20d8:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
    20da:	2300      	movs	r3, #0
    20dc:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    20de:	68fb      	ldr	r3, [r7, #12]
    20e0:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    20e2:	68fb      	ldr	r3, [r7, #12]
    20e4:	2b00      	cmp	r3, #0
    20e6:	d008      	beq.n	20fa <usart_sync_write+0x2e>
    20e8:	68bb      	ldr	r3, [r7, #8]
    20ea:	2b00      	cmp	r3, #0
    20ec:	d005      	beq.n	20fa <usart_sync_write+0x2e>
    20ee:	1dbb      	adds	r3, r7, #6
    20f0:	881b      	ldrh	r3, [r3, #0]
    20f2:	2b00      	cmp	r3, #0
    20f4:	d001      	beq.n	20fa <usart_sync_write+0x2e>
    20f6:	2301      	movs	r3, #1
    20f8:	e000      	b.n	20fc <usart_sync_write+0x30>
    20fa:	2300      	movs	r3, #0
    20fc:	1c1a      	adds	r2, r3, #0
    20fe:	2301      	movs	r3, #1
    2100:	4013      	ands	r3, r2
    2102:	b2db      	uxtb	r3, r3
    2104:	4921      	ldr	r1, [pc, #132]	; (218c <usart_sync_write+0xc0>)
    2106:	22f1      	movs	r2, #241	; 0xf1
    2108:	0018      	movs	r0, r3
    210a:	4b21      	ldr	r3, [pc, #132]	; (2190 <usart_sync_write+0xc4>)
    210c:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	693b      	ldr	r3, [r7, #16]
    2112:	3308      	adds	r3, #8
    2114:	0018      	movs	r0, r3
    2116:	4b1f      	ldr	r3, [pc, #124]	; (2194 <usart_sync_write+0xc8>)
    2118:	4798      	blx	r3
    211a:	0003      	movs	r3, r0
    211c:	001a      	movs	r2, r3
    211e:	2301      	movs	r3, #1
    2120:	4053      	eors	r3, r2
    2122:	b2db      	uxtb	r3, r3
    2124:	2b00      	cmp	r3, #0
    2126:	d1f3      	bne.n	2110 <usart_sync_write+0x44>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    2128:	693b      	ldr	r3, [r7, #16]
    212a:	3308      	adds	r3, #8
    212c:	0018      	movs	r0, r3
    212e:	68ba      	ldr	r2, [r7, #8]
    2130:	697b      	ldr	r3, [r7, #20]
    2132:	18d3      	adds	r3, r2, r3
    2134:	781b      	ldrb	r3, [r3, #0]
    2136:	0019      	movs	r1, r3
    2138:	4b17      	ldr	r3, [pc, #92]	; (2198 <usart_sync_write+0xcc>)
    213a:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    213c:	46c0      	nop			; (mov r8, r8)
    213e:	693b      	ldr	r3, [r7, #16]
    2140:	3308      	adds	r3, #8
    2142:	0018      	movs	r0, r3
    2144:	4b13      	ldr	r3, [pc, #76]	; (2194 <usart_sync_write+0xc8>)
    2146:	4798      	blx	r3
    2148:	0003      	movs	r3, r0
    214a:	001a      	movs	r2, r3
    214c:	2301      	movs	r3, #1
    214e:	4053      	eors	r3, r2
    2150:	b2db      	uxtb	r3, r3
    2152:	2b00      	cmp	r3, #0
    2154:	d1f3      	bne.n	213e <usart_sync_write+0x72>
			;
	} while (++offset < length);
    2156:	697b      	ldr	r3, [r7, #20]
    2158:	3301      	adds	r3, #1
    215a:	617b      	str	r3, [r7, #20]
    215c:	1dbb      	adds	r3, r7, #6
    215e:	881b      	ldrh	r3, [r3, #0]
    2160:	697a      	ldr	r2, [r7, #20]
    2162:	429a      	cmp	r2, r3
    2164:	d3e0      	bcc.n	2128 <usart_sync_write+0x5c>
	while (!_usart_sync_is_transmit_done(&descr->device))
    2166:	46c0      	nop			; (mov r8, r8)
    2168:	693b      	ldr	r3, [r7, #16]
    216a:	3308      	adds	r3, #8
    216c:	0018      	movs	r0, r3
    216e:	4b0b      	ldr	r3, [pc, #44]	; (219c <usart_sync_write+0xd0>)
    2170:	4798      	blx	r3
    2172:	0003      	movs	r3, r0
    2174:	001a      	movs	r2, r3
    2176:	2301      	movs	r3, #1
    2178:	4053      	eors	r3, r2
    217a:	b2db      	uxtb	r3, r3
    217c:	2b00      	cmp	r3, #0
    217e:	d1f3      	bne.n	2168 <usart_sync_write+0x9c>
		;
	return (int32_t)offset;
    2180:	697b      	ldr	r3, [r7, #20]
}
    2182:	0018      	movs	r0, r3
    2184:	46bd      	mov	sp, r7
    2186:	b006      	add	sp, #24
    2188:	bd80      	pop	{r7, pc}
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	0000c360 	.word	0x0000c360
    2190:	00002cd5 	.word	0x00002cd5
    2194:	00004935 	.word	0x00004935
    2198:	000048e5 	.word	0x000048e5
    219c:	00004955 	.word	0x00004955

000021a0 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    21a0:	b590      	push	{r4, r7, lr}
    21a2:	b087      	sub	sp, #28
    21a4:	af00      	add	r7, sp, #0
    21a6:	60f8      	str	r0, [r7, #12]
    21a8:	60b9      	str	r1, [r7, #8]
    21aa:	1dbb      	adds	r3, r7, #6
    21ac:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
    21ae:	2300      	movs	r3, #0
    21b0:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    21b2:	68fb      	ldr	r3, [r7, #12]
    21b4:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    21b6:	68fb      	ldr	r3, [r7, #12]
    21b8:	2b00      	cmp	r3, #0
    21ba:	d008      	beq.n	21ce <usart_sync_read+0x2e>
    21bc:	68bb      	ldr	r3, [r7, #8]
    21be:	2b00      	cmp	r3, #0
    21c0:	d005      	beq.n	21ce <usart_sync_read+0x2e>
    21c2:	1dbb      	adds	r3, r7, #6
    21c4:	881b      	ldrh	r3, [r3, #0]
    21c6:	2b00      	cmp	r3, #0
    21c8:	d001      	beq.n	21ce <usart_sync_read+0x2e>
    21ca:	2301      	movs	r3, #1
    21cc:	e000      	b.n	21d0 <usart_sync_read+0x30>
    21ce:	2300      	movs	r3, #0
    21d0:	1c1a      	adds	r2, r3, #0
    21d2:	2301      	movs	r3, #1
    21d4:	4013      	ands	r3, r2
    21d6:	b2d8      	uxtb	r0, r3
    21d8:	2386      	movs	r3, #134	; 0x86
    21da:	005a      	lsls	r2, r3, #1
    21dc:	4b13      	ldr	r3, [pc, #76]	; (222c <usart_sync_read+0x8c>)
    21de:	0019      	movs	r1, r3
    21e0:	4b13      	ldr	r3, [pc, #76]	; (2230 <usart_sync_read+0x90>)
    21e2:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    21e4:	46c0      	nop			; (mov r8, r8)
    21e6:	693b      	ldr	r3, [r7, #16]
    21e8:	3308      	adds	r3, #8
    21ea:	0018      	movs	r0, r3
    21ec:	4b11      	ldr	r3, [pc, #68]	; (2234 <usart_sync_read+0x94>)
    21ee:	4798      	blx	r3
    21f0:	0003      	movs	r3, r0
    21f2:	001a      	movs	r2, r3
    21f4:	2301      	movs	r3, #1
    21f6:	4053      	eors	r3, r2
    21f8:	b2db      	uxtb	r3, r3
    21fa:	2b00      	cmp	r3, #0
    21fc:	d1f3      	bne.n	21e6 <usart_sync_read+0x46>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    21fe:	68ba      	ldr	r2, [r7, #8]
    2200:	697b      	ldr	r3, [r7, #20]
    2202:	18d4      	adds	r4, r2, r3
    2204:	693b      	ldr	r3, [r7, #16]
    2206:	3308      	adds	r3, #8
    2208:	0018      	movs	r0, r3
    220a:	4b0b      	ldr	r3, [pc, #44]	; (2238 <usart_sync_read+0x98>)
    220c:	4798      	blx	r3
    220e:	0003      	movs	r3, r0
    2210:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
    2212:	697b      	ldr	r3, [r7, #20]
    2214:	3301      	adds	r3, #1
    2216:	617b      	str	r3, [r7, #20]
    2218:	1dbb      	adds	r3, r7, #6
    221a:	881b      	ldrh	r3, [r3, #0]
    221c:	697a      	ldr	r2, [r7, #20]
    221e:	429a      	cmp	r2, r3
    2220:	d3e0      	bcc.n	21e4 <usart_sync_read+0x44>

	return (int32_t)offset;
    2222:	697b      	ldr	r3, [r7, #20]
}
    2224:	0018      	movs	r0, r3
    2226:	46bd      	mov	sp, r7
    2228:	b007      	add	sp, #28
    222a:	bd90      	pop	{r4, r7, pc}
    222c:	0000c360 	.word	0x0000c360
    2230:	00002cd5 	.word	0x00002cd5
    2234:	00004975 	.word	0x00004975
    2238:	00004911 	.word	0x00004911

0000223c <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    223c:	b580      	push	{r7, lr}
    223e:	b084      	sub	sp, #16
    2240:	af00      	add	r7, sp, #0
    2242:	0002      	movs	r2, r0
    2244:	1dfb      	adds	r3, r7, #7
    2246:	701a      	strb	r2, [r3, #0]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2248:	230f      	movs	r3, #15
    224a:	18fb      	adds	r3, r7, r3
    224c:	2200      	movs	r2, #0
    224e:	701a      	strb	r2, [r3, #0]
    2250:	e038      	b.n	22c4 <_usb_d_find_ep+0x88>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2252:	230f      	movs	r3, #15
    2254:	18fb      	adds	r3, r7, r3
    2256:	781b      	ldrb	r3, [r3, #0]
    2258:	b25b      	sxtb	r3, r3
    225a:	4a20      	ldr	r2, [pc, #128]	; (22dc <_usb_d_find_ep+0xa0>)
    225c:	015b      	lsls	r3, r3, #5
    225e:	18d3      	adds	r3, r2, r3
    2260:	3301      	adds	r3, #1
    2262:	781b      	ldrb	r3, [r3, #0]
    2264:	1dfa      	adds	r2, r7, #7
    2266:	7812      	ldrb	r2, [r2, #0]
    2268:	429a      	cmp	r2, r3
    226a:	d104      	bne.n	2276 <_usb_d_find_ep+0x3a>
			return i;
    226c:	230f      	movs	r3, #15
    226e:	18fb      	adds	r3, r7, r3
    2270:	781b      	ldrb	r3, [r3, #0]
    2272:	b25b      	sxtb	r3, r3
    2274:	e02e      	b.n	22d4 <_usb_d_find_ep+0x98>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2276:	230f      	movs	r3, #15
    2278:	18fb      	adds	r3, r7, r3
    227a:	2200      	movs	r2, #0
    227c:	569a      	ldrsb	r2, [r3, r2]
    227e:	4b17      	ldr	r3, [pc, #92]	; (22dc <_usb_d_find_ep+0xa0>)
    2280:	0152      	lsls	r2, r2, #5
    2282:	5cd3      	ldrb	r3, [r2, r3]
    2284:	2b00      	cmp	r3, #0
    2286:	d113      	bne.n	22b0 <_usb_d_find_ep+0x74>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2288:	1dfb      	adds	r3, r7, #7
    228a:	781b      	ldrb	r3, [r3, #0]
    228c:	220f      	movs	r2, #15
    228e:	4013      	ands	r3, r2
    2290:	220f      	movs	r2, #15
    2292:	18ba      	adds	r2, r7, r2
    2294:	7812      	ldrb	r2, [r2, #0]
    2296:	b252      	sxtb	r2, r2
    2298:	4910      	ldr	r1, [pc, #64]	; (22dc <_usb_d_find_ep+0xa0>)
    229a:	0152      	lsls	r2, r2, #5
    229c:	188a      	adds	r2, r1, r2
    229e:	3201      	adds	r2, #1
    22a0:	7812      	ldrb	r2, [r2, #0]
    22a2:	4293      	cmp	r3, r2
    22a4:	d104      	bne.n	22b0 <_usb_d_find_ep+0x74>
			return i;
    22a6:	230f      	movs	r3, #15
    22a8:	18fb      	adds	r3, r7, r3
    22aa:	781b      	ldrb	r3, [r3, #0]
    22ac:	b25b      	sxtb	r3, r3
    22ae:	e011      	b.n	22d4 <_usb_d_find_ep+0x98>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    22b0:	230f      	movs	r3, #15
    22b2:	18fb      	adds	r3, r7, r3
    22b4:	781b      	ldrb	r3, [r3, #0]
    22b6:	b25b      	sxtb	r3, r3
    22b8:	b2db      	uxtb	r3, r3
    22ba:	3301      	adds	r3, #1
    22bc:	b2da      	uxtb	r2, r3
    22be:	230f      	movs	r3, #15
    22c0:	18fb      	adds	r3, r7, r3
    22c2:	701a      	strb	r2, [r3, #0]
    22c4:	230f      	movs	r3, #15
    22c6:	18fb      	adds	r3, r7, r3
    22c8:	781b      	ldrb	r3, [r3, #0]
    22ca:	b25b      	sxtb	r3, r3
    22cc:	2b03      	cmp	r3, #3
    22ce:	ddc0      	ble.n	2252 <_usb_d_find_ep+0x16>
		}
	}
	return -1;
    22d0:	2301      	movs	r3, #1
    22d2:	425b      	negs	r3, r3
}
    22d4:	0018      	movs	r0, r3
    22d6:	46bd      	mov	sp, r7
    22d8:	b004      	add	sp, #16
    22da:	bd80      	pop	{r7, pc}
    22dc:	20000190 	.word	0x20000190

000022e0 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    22e0:	b580      	push	{r7, lr}
    22e2:	b088      	sub	sp, #32
    22e4:	af00      	add	r7, sp, #0
    22e6:	60ba      	str	r2, [r7, #8]
    22e8:	607b      	str	r3, [r7, #4]
    22ea:	230f      	movs	r3, #15
    22ec:	18fb      	adds	r3, r7, r3
    22ee:	1c02      	adds	r2, r0, #0
    22f0:	701a      	strb	r2, [r3, #0]
    22f2:	230e      	movs	r3, #14
    22f4:	18fb      	adds	r3, r7, r3
    22f6:	1c0a      	adds	r2, r1, #0
    22f8:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer trans
    22fa:	2314      	movs	r3, #20
    22fc:	18fb      	adds	r3, r7, r3
    22fe:	68ba      	ldr	r2, [r7, #8]
    2300:	601a      	str	r2, [r3, #0]
    2302:	2314      	movs	r3, #20
    2304:	18fb      	adds	r3, r7, r3
    2306:	687a      	ldr	r2, [r7, #4]
    2308:	605a      	str	r2, [r3, #4]
    230a:	230e      	movs	r3, #14
    230c:	18fb      	adds	r3, r7, r3
    230e:	781b      	ldrb	r3, [r3, #0]
    2310:	2b00      	cmp	r3, #0
    2312:	d007      	beq.n	2324 <_usb_d_trans+0x44>
    2314:	230f      	movs	r3, #15
    2316:	18fb      	adds	r3, r7, r3
    2318:	781b      	ldrb	r3, [r3, #0]
    231a:	2280      	movs	r2, #128	; 0x80
    231c:	4252      	negs	r2, r2
    231e:	4313      	orrs	r3, r2
    2320:	b2db      	uxtb	r3, r3
    2322:	e005      	b.n	2330 <_usb_d_trans+0x50>
    2324:	230f      	movs	r3, #15
    2326:	18fb      	adds	r3, r7, r3
    2328:	781b      	ldrb	r3, [r3, #0]
    232a:	220f      	movs	r2, #15
    232c:	4013      	ands	r3, r2
    232e:	b2db      	uxtb	r3, r3
    2330:	2214      	movs	r2, #20
    2332:	18ba      	adds	r2, r7, r2
    2334:	7213      	strb	r3, [r2, #8]
    2336:	2314      	movs	r3, #20
    2338:	18fb      	adds	r3, r7, r3
    233a:	2228      	movs	r2, #40	; 0x28
    233c:	18ba      	adds	r2, r7, r2
    233e:	7812      	ldrb	r2, [r2, #0]
    2340:	725a      	strb	r2, [r3, #9]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2342:	2314      	movs	r3, #20
    2344:	18fb      	adds	r3, r7, r3
    2346:	0018      	movs	r0, r3
    2348:	4b03      	ldr	r3, [pc, #12]	; (2358 <_usb_d_trans+0x78>)
    234a:	4798      	blx	r3
    234c:	0003      	movs	r3, r0
}
    234e:	0018      	movs	r0, r3
    2350:	46bd      	mov	sp, r7
    2352:	b008      	add	sp, #32
    2354:	bd80      	pop	{r7, pc}
    2356:	46c0      	nop			; (mov r8, r8)
    2358:	0000918d 	.word	0x0000918d

0000235c <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    235c:	b580      	push	{r7, lr}
    235e:	b084      	sub	sp, #16
    2360:	af00      	add	r7, sp, #0
    2362:	60f8      	str	r0, [r7, #12]
    2364:	60b9      	str	r1, [r7, #8]
    2366:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    2368:	2300      	movs	r3, #0
}
    236a:	0018      	movs	r0, r3
    236c:	46bd      	mov	sp, r7
    236e:	b004      	add	sp, #16
    2370:	bd80      	pop	{r7, pc}
	...

00002374 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    2374:	b590      	push	{r4, r7, lr}
    2376:	b087      	sub	sp, #28
    2378:	af00      	add	r7, sp, #0
    237a:	0002      	movs	r2, r0
    237c:	1dfb      	adds	r3, r7, #7
    237e:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2380:	2317      	movs	r3, #23
    2382:	18fc      	adds	r4, r7, r3
    2384:	1dfb      	adds	r3, r7, #7
    2386:	781b      	ldrb	r3, [r3, #0]
    2388:	0018      	movs	r0, r3
    238a:	4b33      	ldr	r3, [pc, #204]	; (2458 <usb_d_cb_trans_setup+0xe4>)
    238c:	4798      	blx	r3
    238e:	0003      	movs	r3, r0
    2390:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2392:	2317      	movs	r3, #23
    2394:	18fb      	adds	r3, r7, r3
    2396:	781b      	ldrb	r3, [r3, #0]
    2398:	b25b      	sxtb	r3, r3
    239a:	015a      	lsls	r2, r3, #5
    239c:	4b2f      	ldr	r3, [pc, #188]	; (245c <usb_d_cb_trans_setup+0xe8>)
    239e:	18d3      	adds	r3, r2, r3
    23a0:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    23a2:	693b      	ldr	r3, [r7, #16]
    23a4:	330c      	adds	r3, #12
    23a6:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    23a8:	68fa      	ldr	r2, [r7, #12]
    23aa:	1dfb      	adds	r3, r7, #7
    23ac:	781b      	ldrb	r3, [r3, #0]
    23ae:	0011      	movs	r1, r2
    23b0:	0018      	movs	r0, r3
    23b2:	4b2b      	ldr	r3, [pc, #172]	; (2460 <usb_d_cb_trans_setup+0xec>)
    23b4:	4798      	blx	r3
    23b6:	0002      	movs	r2, r0
    23b8:	230b      	movs	r3, #11
    23ba:	18fb      	adds	r3, r7, r3
    23bc:	701a      	strb	r2, [r3, #0]
	if (n != 8) {
    23be:	230b      	movs	r3, #11
    23c0:	18fb      	adds	r3, r7, r3
    23c2:	781b      	ldrb	r3, [r3, #0]
    23c4:	2b08      	cmp	r3, #8
    23c6:	d010      	beq.n	23ea <usb_d_cb_trans_setup+0x76>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    23c8:	1dfb      	adds	r3, r7, #7
    23ca:	781b      	ldrb	r3, [r3, #0]
    23cc:	2101      	movs	r1, #1
    23ce:	0018      	movs	r0, r3
    23d0:	4b24      	ldr	r3, [pc, #144]	; (2464 <usb_d_cb_trans_setup+0xf0>)
    23d2:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    23d4:	1dfb      	adds	r3, r7, #7
    23d6:	781b      	ldrb	r3, [r3, #0]
    23d8:	2280      	movs	r2, #128	; 0x80
    23da:	4252      	negs	r2, r2
    23dc:	4313      	orrs	r3, r2
    23de:	b2db      	uxtb	r3, r3
    23e0:	2101      	movs	r1, #1
    23e2:	0018      	movs	r0, r3
    23e4:	4b1f      	ldr	r3, [pc, #124]	; (2464 <usb_d_cb_trans_setup+0xf0>)
    23e6:	4798      	blx	r3
		return;
    23e8:	e033      	b.n	2452 <usb_d_cb_trans_setup+0xde>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    23ea:	1dfb      	adds	r3, r7, #7
    23ec:	781b      	ldrb	r3, [r3, #0]
    23ee:	2100      	movs	r1, #0
    23f0:	0018      	movs	r0, r3
    23f2:	4b1c      	ldr	r3, [pc, #112]	; (2464 <usb_d_cb_trans_setup+0xf0>)
    23f4:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    23f6:	1dfb      	adds	r3, r7, #7
    23f8:	781b      	ldrb	r3, [r3, #0]
    23fa:	2280      	movs	r2, #128	; 0x80
    23fc:	4252      	negs	r2, r2
    23fe:	4313      	orrs	r3, r2
    2400:	b2db      	uxtb	r3, r3
    2402:	2100      	movs	r1, #0
    2404:	0018      	movs	r0, r3
    2406:	4b17      	ldr	r3, [pc, #92]	; (2464 <usb_d_cb_trans_setup+0xf0>)
    2408:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    240a:	693b      	ldr	r3, [r7, #16]
    240c:	2201      	movs	r2, #1
    240e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2410:	693b      	ldr	r3, [r7, #16]
    2412:	695b      	ldr	r3, [r3, #20]
    2414:	68f9      	ldr	r1, [r7, #12]
    2416:	1dfa      	adds	r2, r7, #7
    2418:	7812      	ldrb	r2, [r2, #0]
    241a:	0010      	movs	r0, r2
    241c:	4798      	blx	r3
    241e:	0003      	movs	r3, r0
    2420:	001a      	movs	r2, r3
    2422:	2301      	movs	r3, #1
    2424:	4053      	eors	r3, r2
    2426:	b2db      	uxtb	r3, r3
    2428:	2b00      	cmp	r3, #0
    242a:	d012      	beq.n	2452 <usb_d_cb_trans_setup+0xde>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    242c:	693b      	ldr	r3, [r7, #16]
    242e:	2205      	movs	r2, #5
    2430:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2432:	1dfb      	adds	r3, r7, #7
    2434:	781b      	ldrb	r3, [r3, #0]
    2436:	2101      	movs	r1, #1
    2438:	0018      	movs	r0, r3
    243a:	4b0a      	ldr	r3, [pc, #40]	; (2464 <usb_d_cb_trans_setup+0xf0>)
    243c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    243e:	1dfb      	adds	r3, r7, #7
    2440:	781b      	ldrb	r3, [r3, #0]
    2442:	2280      	movs	r2, #128	; 0x80
    2444:	4252      	negs	r2, r2
    2446:	4313      	orrs	r3, r2
    2448:	b2db      	uxtb	r3, r3
    244a:	2101      	movs	r1, #1
    244c:	0018      	movs	r0, r3
    244e:	4b05      	ldr	r3, [pc, #20]	; (2464 <usb_d_cb_trans_setup+0xf0>)
    2450:	4798      	blx	r3
	}
}
    2452:	46bd      	mov	sp, r7
    2454:	b007      	add	sp, #28
    2456:	bd90      	pop	{r4, r7, pc}
    2458:	0000223d 	.word	0x0000223d
    245c:	20000190 	.word	0x20000190
    2460:	000090bd 	.word	0x000090bd
    2464:	00008ed9 	.word	0x00008ed9

00002468 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2468:	b590      	push	{r4, r7, lr}
    246a:	b085      	sub	sp, #20
    246c:	af00      	add	r7, sp, #0
    246e:	0002      	movs	r2, r0
    2470:	6039      	str	r1, [r7, #0]
    2472:	1dfb      	adds	r3, r7, #7
    2474:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2476:	230f      	movs	r3, #15
    2478:	18fc      	adds	r4, r7, r3
    247a:	1dfb      	adds	r3, r7, #7
    247c:	781b      	ldrb	r3, [r3, #0]
    247e:	0018      	movs	r0, r3
    2480:	4b0e      	ldr	r3, [pc, #56]	; (24bc <usb_d_cb_trans_more+0x54>)
    2482:	4798      	blx	r3
    2484:	0003      	movs	r3, r0
    2486:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2488:	230f      	movs	r3, #15
    248a:	18fb      	adds	r3, r7, r3
    248c:	781b      	ldrb	r3, [r3, #0]
    248e:	b25b      	sxtb	r3, r3
    2490:	015a      	lsls	r2, r3, #5
    2492:	4b0b      	ldr	r3, [pc, #44]	; (24c0 <usb_d_cb_trans_more+0x58>)
    2494:	18d3      	adds	r3, r2, r3
    2496:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2498:	68bb      	ldr	r3, [r7, #8]
    249a:	789b      	ldrb	r3, [r3, #2]
    249c:	2b03      	cmp	r3, #3
    249e:	d108      	bne.n	24b2 <usb_d_cb_trans_more+0x4a>
		return ept->callbacks.more(ep, transfered);
    24a0:	68bb      	ldr	r3, [r7, #8]
    24a2:	699b      	ldr	r3, [r3, #24]
    24a4:	6839      	ldr	r1, [r7, #0]
    24a6:	1dfa      	adds	r2, r7, #7
    24a8:	7812      	ldrb	r2, [r2, #0]
    24aa:	0010      	movs	r0, r2
    24ac:	4798      	blx	r3
    24ae:	0003      	movs	r3, r0
    24b0:	e000      	b.n	24b4 <usb_d_cb_trans_more+0x4c>
	}
	return false;
    24b2:	2300      	movs	r3, #0
}
    24b4:	0018      	movs	r0, r3
    24b6:	46bd      	mov	sp, r7
    24b8:	b005      	add	sp, #20
    24ba:	bd90      	pop	{r4, r7, pc}
    24bc:	0000223d 	.word	0x0000223d
    24c0:	20000190 	.word	0x20000190

000024c4 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    24c4:	b590      	push	{r4, r7, lr}
    24c6:	b087      	sub	sp, #28
    24c8:	af02      	add	r7, sp, #8
    24ca:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    24cc:	230f      	movs	r3, #15
    24ce:	18fb      	adds	r3, r7, r3
    24d0:	687a      	ldr	r2, [r7, #4]
    24d2:	7892      	ldrb	r2, [r2, #2]
    24d4:	701a      	strb	r2, [r3, #0]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    24d6:	687b      	ldr	r3, [r7, #4]
    24d8:	7b1b      	ldrb	r3, [r3, #12]
    24da:	001a      	movs	r2, r3
    24dc:	2380      	movs	r3, #128	; 0x80
    24de:	401a      	ands	r2, r3
    24e0:	230e      	movs	r3, #14
    24e2:	18fb      	adds	r3, r7, r3
    24e4:	1e51      	subs	r1, r2, #1
    24e6:	418a      	sbcs	r2, r1
    24e8:	701a      	strb	r2, [r3, #0]

	if (state == USB_EP_S_X_DATA) {
    24ea:	230f      	movs	r3, #15
    24ec:	18fb      	adds	r3, r7, r3
    24ee:	781b      	ldrb	r3, [r3, #0]
    24f0:	2b03      	cmp	r3, #3
    24f2:	d142      	bne.n	257a <usb_d_ctrl_trans_done+0xb6>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    24f4:	687b      	ldr	r3, [r7, #4]
    24f6:	69db      	ldr	r3, [r3, #28]
    24f8:	687a      	ldr	r2, [r7, #4]
    24fa:	7850      	ldrb	r0, [r2, #1]
    24fc:	687a      	ldr	r2, [r7, #4]
    24fe:	320c      	adds	r2, #12
    2500:	210d      	movs	r1, #13
    2502:	187c      	adds	r4, r7, r1
    2504:	2101      	movs	r1, #1
    2506:	4798      	blx	r3
    2508:	0003      	movs	r3, r0
    250a:	7023      	strb	r3, [r4, #0]
		if (err) {
    250c:	230d      	movs	r3, #13
    250e:	18fb      	adds	r3, r7, r3
    2510:	781b      	ldrb	r3, [r3, #0]
    2512:	2b00      	cmp	r3, #0
    2514:	d018      	beq.n	2548 <usb_d_ctrl_trans_done+0x84>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2516:	687b      	ldr	r3, [r7, #4]
    2518:	2205      	movs	r2, #5
    251a:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    251c:	687b      	ldr	r3, [r7, #4]
    251e:	2202      	movs	r2, #2
    2520:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2522:	230e      	movs	r3, #14
    2524:	18fb      	adds	r3, r7, r3
    2526:	781b      	ldrb	r3, [r3, #0]
    2528:	2b00      	cmp	r3, #0
    252a:	d002      	beq.n	2532 <usb_d_ctrl_trans_done+0x6e>
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	785b      	ldrb	r3, [r3, #1]
    2530:	e005      	b.n	253e <usb_d_ctrl_trans_done+0x7a>
    2532:	687b      	ldr	r3, [r7, #4]
    2534:	785b      	ldrb	r3, [r3, #1]
    2536:	2280      	movs	r2, #128	; 0x80
    2538:	4252      	negs	r2, r2
    253a:	4313      	orrs	r3, r2
    253c:	b2db      	uxtb	r3, r3
    253e:	2101      	movs	r1, #1
    2540:	0018      	movs	r0, r3
    2542:	4b15      	ldr	r3, [pc, #84]	; (2598 <usb_d_ctrl_trans_done+0xd4>)
    2544:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    2546:	e023      	b.n	2590 <usb_d_ctrl_trans_done+0xcc>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2548:	687b      	ldr	r3, [r7, #4]
    254a:	2204      	movs	r2, #4
    254c:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    254e:	687b      	ldr	r3, [r7, #4]
    2550:	7858      	ldrb	r0, [r3, #1]
    2552:	230e      	movs	r3, #14
    2554:	18fb      	adds	r3, r7, r3
    2556:	781b      	ldrb	r3, [r3, #0]
    2558:	1e5a      	subs	r2, r3, #1
    255a:	4193      	sbcs	r3, r2
    255c:	b2db      	uxtb	r3, r3
    255e:	2201      	movs	r2, #1
    2560:	4053      	eors	r3, r2
    2562:	b2db      	uxtb	r3, r3
    2564:	1c1a      	adds	r2, r3, #0
    2566:	2301      	movs	r3, #1
    2568:	4013      	ands	r3, r2
    256a:	b2d9      	uxtb	r1, r3
    256c:	2301      	movs	r3, #1
    256e:	9300      	str	r3, [sp, #0]
    2570:	2300      	movs	r3, #0
    2572:	2200      	movs	r2, #0
    2574:	4c09      	ldr	r4, [pc, #36]	; (259c <usb_d_ctrl_trans_done+0xd8>)
    2576:	47a0      	blx	r4
}
    2578:	e00a      	b.n	2590 <usb_d_ctrl_trans_done+0xcc>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    257a:	687b      	ldr	r3, [r7, #4]
    257c:	69db      	ldr	r3, [r3, #28]
    257e:	687a      	ldr	r2, [r7, #4]
    2580:	7850      	ldrb	r0, [r2, #1]
    2582:	687a      	ldr	r2, [r7, #4]
    2584:	320c      	adds	r2, #12
    2586:	2100      	movs	r1, #0
    2588:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    258a:	687b      	ldr	r3, [r7, #4]
    258c:	2202      	movs	r2, #2
    258e:	709a      	strb	r2, [r3, #2]
}
    2590:	46c0      	nop			; (mov r8, r8)
    2592:	46bd      	mov	sp, r7
    2594:	b005      	add	sp, #20
    2596:	bd90      	pop	{r4, r7, pc}
    2598:	00008ed9 	.word	0x00008ed9
    259c:	000022e1 	.word	0x000022e1

000025a0 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    25a0:	b590      	push	{r4, r7, lr}
    25a2:	b087      	sub	sp, #28
    25a4:	af00      	add	r7, sp, #0
    25a6:	60b9      	str	r1, [r7, #8]
    25a8:	607a      	str	r2, [r7, #4]
    25aa:	230f      	movs	r3, #15
    25ac:	18fb      	adds	r3, r7, r3
    25ae:	1c02      	adds	r2, r0, #0
    25b0:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    25b2:	2317      	movs	r3, #23
    25b4:	18fc      	adds	r4, r7, r3
    25b6:	230f      	movs	r3, #15
    25b8:	18fb      	adds	r3, r7, r3
    25ba:	781b      	ldrb	r3, [r3, #0]
    25bc:	0018      	movs	r0, r3
    25be:	4b33      	ldr	r3, [pc, #204]	; (268c <_usb_d_cb_trans_done+0xec>)
    25c0:	4798      	blx	r3
    25c2:	0003      	movs	r3, r0
    25c4:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    25c6:	2317      	movs	r3, #23
    25c8:	18fb      	adds	r3, r7, r3
    25ca:	781b      	ldrb	r3, [r3, #0]
    25cc:	b25b      	sxtb	r3, r3
    25ce:	015a      	lsls	r2, r3, #5
    25d0:	4b2f      	ldr	r3, [pc, #188]	; (2690 <_usb_d_cb_trans_done+0xf0>)
    25d2:	18d3      	adds	r3, r2, r3
    25d4:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    25d6:	68bb      	ldr	r3, [r7, #8]
    25d8:	2b00      	cmp	r3, #0
    25da:	d10f      	bne.n	25fc <_usb_d_cb_trans_done+0x5c>
		ept->xfer.hdr.status = USB_XFER_DONE;
    25dc:	693b      	ldr	r3, [r7, #16]
    25de:	2200      	movs	r2, #0
    25e0:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    25e2:	693b      	ldr	r3, [r7, #16]
    25e4:	781b      	ldrb	r3, [r3, #0]
    25e6:	2b00      	cmp	r3, #0
    25e8:	d104      	bne.n	25f4 <_usb_d_cb_trans_done+0x54>
			usb_d_ctrl_trans_done(ept);
    25ea:	693b      	ldr	r3, [r7, #16]
    25ec:	0018      	movs	r0, r3
    25ee:	4b29      	ldr	r3, [pc, #164]	; (2694 <_usb_d_cb_trans_done+0xf4>)
    25f0:	4798      	blx	r3
			return;
    25f2:	e048      	b.n	2686 <_usb_d_cb_trans_done+0xe6>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    25f4:	693b      	ldr	r3, [r7, #16]
    25f6:	2201      	movs	r2, #1
    25f8:	709a      	strb	r2, [r3, #2]
    25fa:	e03a      	b.n	2672 <_usb_d_cb_trans_done+0xd2>
	} else if (code == USB_TRANS_STALL) {
    25fc:	68bb      	ldr	r3, [r7, #8]
    25fe:	2b01      	cmp	r3, #1
    2600:	d115      	bne.n	262e <_usb_d_cb_trans_done+0x8e>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2602:	693b      	ldr	r3, [r7, #16]
    2604:	2202      	movs	r2, #2
    2606:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2608:	693b      	ldr	r3, [r7, #16]
    260a:	781b      	ldrb	r3, [r3, #0]
    260c:	2b00      	cmp	r3, #0
    260e:	d10a      	bne.n	2626 <_usb_d_cb_trans_done+0x86>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2610:	693b      	ldr	r3, [r7, #16]
    2612:	2202      	movs	r2, #2
    2614:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2616:	230f      	movs	r3, #15
    2618:	18fb      	adds	r3, r7, r3
    261a:	781b      	ldrb	r3, [r3, #0]
    261c:	2100      	movs	r1, #0
    261e:	0018      	movs	r0, r3
    2620:	4b1d      	ldr	r3, [pc, #116]	; (2698 <_usb_d_cb_trans_done+0xf8>)
    2622:	4798      	blx	r3
    2624:	e025      	b.n	2672 <_usb_d_cb_trans_done+0xd2>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2626:	693b      	ldr	r3, [r7, #16]
    2628:	2205      	movs	r2, #5
    262a:	709a      	strb	r2, [r3, #2]
    262c:	e021      	b.n	2672 <_usb_d_cb_trans_done+0xd2>
		}
	} else if (code == USB_TRANS_ABORT) {
    262e:	68bb      	ldr	r3, [r7, #8]
    2630:	2b02      	cmp	r3, #2
    2632:	d10e      	bne.n	2652 <_usb_d_cb_trans_done+0xb2>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2634:	693b      	ldr	r3, [r7, #16]
    2636:	2204      	movs	r2, #4
    2638:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    263a:	693b      	ldr	r3, [r7, #16]
    263c:	781b      	ldrb	r3, [r3, #0]
    263e:	2b00      	cmp	r3, #0
    2640:	d103      	bne.n	264a <_usb_d_cb_trans_done+0xaa>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2642:	693b      	ldr	r3, [r7, #16]
    2644:	2202      	movs	r2, #2
    2646:	709a      	strb	r2, [r3, #2]
			return;
    2648:	e01d      	b.n	2686 <_usb_d_cb_trans_done+0xe6>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    264a:	693b      	ldr	r3, [r7, #16]
    264c:	2201      	movs	r2, #1
    264e:	709a      	strb	r2, [r3, #2]
    2650:	e00f      	b.n	2672 <_usb_d_cb_trans_done+0xd2>
	} else if (code == USB_TRANS_RESET) {
    2652:	68bb      	ldr	r3, [r7, #8]
    2654:	2b03      	cmp	r3, #3
    2656:	d106      	bne.n	2666 <_usb_d_cb_trans_done+0xc6>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2658:	693b      	ldr	r3, [r7, #16]
    265a:	2200      	movs	r2, #0
    265c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    265e:	693b      	ldr	r3, [r7, #16]
    2660:	2205      	movs	r2, #5
    2662:	70da      	strb	r2, [r3, #3]
    2664:	e005      	b.n	2672 <_usb_d_cb_trans_done+0xd2>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2666:	693b      	ldr	r3, [r7, #16]
    2668:	2206      	movs	r2, #6
    266a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    266c:	693b      	ldr	r3, [r7, #16]
    266e:	2206      	movs	r2, #6
    2670:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2672:	693b      	ldr	r3, [r7, #16]
    2674:	69db      	ldr	r3, [r3, #28]
    2676:	693a      	ldr	r2, [r7, #16]
    2678:	78d1      	ldrb	r1, [r2, #3]
    267a:	687c      	ldr	r4, [r7, #4]
    267c:	220f      	movs	r2, #15
    267e:	18ba      	adds	r2, r7, r2
    2680:	7810      	ldrb	r0, [r2, #0]
    2682:	0022      	movs	r2, r4
    2684:	4798      	blx	r3
}
    2686:	46bd      	mov	sp, r7
    2688:	b007      	add	sp, #28
    268a:	bd90      	pop	{r4, r7, pc}
    268c:	0000223d 	.word	0x0000223d
    2690:	20000190 	.word	0x20000190
    2694:	000024c5 	.word	0x000024c5
    2698:	00008ed9 	.word	0x00008ed9

0000269c <usb_d_init>:

int32_t usb_d_init(void)
{
    269c:	b580      	push	{r7, lr}
    269e:	b082      	sub	sp, #8
    26a0:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    26a2:	4b28      	ldr	r3, [pc, #160]	; (2744 <usb_d_init+0xa8>)
    26a4:	4798      	blx	r3
    26a6:	0003      	movs	r3, r0
    26a8:	603b      	str	r3, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    26aa:	683b      	ldr	r3, [r7, #0]
    26ac:	2b00      	cmp	r3, #0
    26ae:	da01      	bge.n	26b4 <usb_d_init+0x18>
		return rc;
    26b0:	683b      	ldr	r3, [r7, #0]
    26b2:	e042      	b.n	273a <usb_d_init+0x9e>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    26b4:	4b24      	ldr	r3, [pc, #144]	; (2748 <usb_d_init+0xac>)
    26b6:	2280      	movs	r2, #128	; 0x80
    26b8:	2100      	movs	r1, #0
    26ba:	0018      	movs	r0, r3
    26bc:	4b23      	ldr	r3, [pc, #140]	; (274c <usb_d_init+0xb0>)
    26be:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    26c0:	1dfb      	adds	r3, r7, #7
    26c2:	2200      	movs	r2, #0
    26c4:	701a      	strb	r2, [r3, #0]
    26c6:	e024      	b.n	2712 <usb_d_init+0x76>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    26c8:	1dfb      	adds	r3, r7, #7
    26ca:	781b      	ldrb	r3, [r3, #0]
    26cc:	4a1e      	ldr	r2, [pc, #120]	; (2748 <usb_d_init+0xac>)
    26ce:	015b      	lsls	r3, r3, #5
    26d0:	18d3      	adds	r3, r2, r3
    26d2:	3301      	adds	r3, #1
    26d4:	22ff      	movs	r2, #255	; 0xff
    26d6:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    26d8:	1dfb      	adds	r3, r7, #7
    26da:	781b      	ldrb	r3, [r3, #0]
    26dc:	4a1a      	ldr	r2, [pc, #104]	; (2748 <usb_d_init+0xac>)
    26de:	015b      	lsls	r3, r3, #5
    26e0:	18d3      	adds	r3, r2, r3
    26e2:	3314      	adds	r3, #20
    26e4:	4a1a      	ldr	r2, [pc, #104]	; (2750 <usb_d_init+0xb4>)
    26e6:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    26e8:	1dfb      	adds	r3, r7, #7
    26ea:	781b      	ldrb	r3, [r3, #0]
    26ec:	4a16      	ldr	r2, [pc, #88]	; (2748 <usb_d_init+0xac>)
    26ee:	015b      	lsls	r3, r3, #5
    26f0:	18d3      	adds	r3, r2, r3
    26f2:	3318      	adds	r3, #24
    26f4:	4a16      	ldr	r2, [pc, #88]	; (2750 <usb_d_init+0xb4>)
    26f6:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    26f8:	1dfb      	adds	r3, r7, #7
    26fa:	781b      	ldrb	r3, [r3, #0]
    26fc:	4a12      	ldr	r2, [pc, #72]	; (2748 <usb_d_init+0xac>)
    26fe:	015b      	lsls	r3, r3, #5
    2700:	18d3      	adds	r3, r2, r3
    2702:	331c      	adds	r3, #28
    2704:	4a12      	ldr	r2, [pc, #72]	; (2750 <usb_d_init+0xb4>)
    2706:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2708:	1dfb      	adds	r3, r7, #7
    270a:	781a      	ldrb	r2, [r3, #0]
    270c:	1dfb      	adds	r3, r7, #7
    270e:	3201      	adds	r2, #1
    2710:	701a      	strb	r2, [r3, #0]
    2712:	1dfb      	adds	r3, r7, #7
    2714:	781b      	ldrb	r3, [r3, #0]
    2716:	2b03      	cmp	r3, #3
    2718:	d9d6      	bls.n	26c8 <usb_d_init+0x2c>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    271a:	4b0e      	ldr	r3, [pc, #56]	; (2754 <usb_d_init+0xb8>)
    271c:	0019      	movs	r1, r3
    271e:	2000      	movs	r0, #0
    2720:	4b0d      	ldr	r3, [pc, #52]	; (2758 <usb_d_init+0xbc>)
    2722:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2724:	4b0d      	ldr	r3, [pc, #52]	; (275c <usb_d_init+0xc0>)
    2726:	0019      	movs	r1, r3
    2728:	2001      	movs	r0, #1
    272a:	4b0b      	ldr	r3, [pc, #44]	; (2758 <usb_d_init+0xbc>)
    272c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    272e:	4b0c      	ldr	r3, [pc, #48]	; (2760 <usb_d_init+0xc4>)
    2730:	0019      	movs	r1, r3
    2732:	2002      	movs	r0, #2
    2734:	4b08      	ldr	r3, [pc, #32]	; (2758 <usb_d_init+0xbc>)
    2736:	4798      	blx	r3
	return ERR_NONE;
    2738:	2300      	movs	r3, #0
}
    273a:	0018      	movs	r0, r3
    273c:	46bd      	mov	sp, r7
    273e:	b002      	add	sp, #8
    2740:	bd80      	pop	{r7, pc}
    2742:	46c0      	nop			; (mov r8, r8)
    2744:	0000858d 	.word	0x0000858d
    2748:	20000190 	.word	0x20000190
    274c:	0000ba57 	.word	0x0000ba57
    2750:	0000235d 	.word	0x0000235d
    2754:	00002375 	.word	0x00002375
    2758:	00009409 	.word	0x00009409
    275c:	00002469 	.word	0x00002469
    2760:	000025a1 	.word	0x000025a1

00002764 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2764:	b580      	push	{r7, lr}
    2766:	b082      	sub	sp, #8
    2768:	af00      	add	r7, sp, #0
    276a:	0002      	movs	r2, r0
    276c:	6039      	str	r1, [r7, #0]
    276e:	1dfb      	adds	r3, r7, #7
    2770:	701a      	strb	r2, [r3, #0]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    2772:	683a      	ldr	r2, [r7, #0]
    2774:	1dfb      	adds	r3, r7, #7
    2776:	781b      	ldrb	r3, [r3, #0]
    2778:	0011      	movs	r1, r2
    277a:	0018      	movs	r0, r3
    277c:	4b02      	ldr	r3, [pc, #8]	; (2788 <usb_d_register_callback+0x24>)
    277e:	4798      	blx	r3
}
    2780:	46c0      	nop			; (mov r8, r8)
    2782:	46bd      	mov	sp, r7
    2784:	b002      	add	sp, #8
    2786:	bd80      	pop	{r7, pc}
    2788:	000093bd 	.word	0x000093bd

0000278c <usb_d_enable>:

int32_t usb_d_enable(void)
{
    278c:	b580      	push	{r7, lr}
    278e:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    2790:	4b02      	ldr	r3, [pc, #8]	; (279c <usb_d_enable+0x10>)
    2792:	4798      	blx	r3
    2794:	0003      	movs	r3, r0
}
    2796:	0018      	movs	r0, r3
    2798:	46bd      	mov	sp, r7
    279a:	bd80      	pop	{r7, pc}
    279c:	00008699 	.word	0x00008699

000027a0 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    27a0:	b580      	push	{r7, lr}
    27a2:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    27a4:	4b02      	ldr	r3, [pc, #8]	; (27b0 <usb_d_attach+0x10>)
    27a6:	4798      	blx	r3
}
    27a8:	46c0      	nop			; (mov r8, r8)
    27aa:	46bd      	mov	sp, r7
    27ac:	bd80      	pop	{r7, pc}
    27ae:	46c0      	nop			; (mov r8, r8)
    27b0:	0000871d 	.word	0x0000871d

000027b4 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    27b4:	b580      	push	{r7, lr}
    27b6:	b082      	sub	sp, #8
    27b8:	af00      	add	r7, sp, #0
    27ba:	0002      	movs	r2, r0
    27bc:	1dfb      	adds	r3, r7, #7
    27be:	701a      	strb	r2, [r3, #0]
	_usb_d_dev_set_address(addr);
    27c0:	1dfb      	adds	r3, r7, #7
    27c2:	781b      	ldrb	r3, [r3, #0]
    27c4:	0018      	movs	r0, r3
    27c6:	4b03      	ldr	r3, [pc, #12]	; (27d4 <usb_d_set_address+0x20>)
    27c8:	4798      	blx	r3
}
    27ca:	46c0      	nop			; (mov r8, r8)
    27cc:	46bd      	mov	sp, r7
    27ce:	b002      	add	sp, #8
    27d0:	bd80      	pop	{r7, pc}
    27d2:	46c0      	nop			; (mov r8, r8)
    27d4:	00008739 	.word	0x00008739

000027d8 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    27d8:	b580      	push	{r7, lr}
    27da:	b082      	sub	sp, #8
    27dc:	af00      	add	r7, sp, #0
    27de:	0002      	movs	r2, r0
    27e0:	1dfb      	adds	r3, r7, #7
    27e2:	701a      	strb	r2, [r3, #0]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    27e4:	1dfb      	adds	r3, r7, #7
    27e6:	781b      	ldrb	r3, [r3, #0]
    27e8:	b29b      	uxth	r3, r3
    27ea:	001a      	movs	r2, r3
    27ec:	2100      	movs	r1, #0
    27ee:	2000      	movs	r0, #0
    27f0:	4b03      	ldr	r3, [pc, #12]	; (2800 <usb_d_ep0_init+0x28>)
    27f2:	4798      	blx	r3
    27f4:	0003      	movs	r3, r0
}
    27f6:	0018      	movs	r0, r3
    27f8:	46bd      	mov	sp, r7
    27fa:	b002      	add	sp, #8
    27fc:	bd80      	pop	{r7, pc}
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	00002805 	.word	0x00002805

00002804 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2804:	b590      	push	{r4, r7, lr}
    2806:	b087      	sub	sp, #28
    2808:	af00      	add	r7, sp, #0
    280a:	0004      	movs	r4, r0
    280c:	0008      	movs	r0, r1
    280e:	0011      	movs	r1, r2
    2810:	1dfb      	adds	r3, r7, #7
    2812:	1c22      	adds	r2, r4, #0
    2814:	701a      	strb	r2, [r3, #0]
    2816:	1dbb      	adds	r3, r7, #6
    2818:	1c02      	adds	r2, r0, #0
    281a:	701a      	strb	r2, [r3, #0]
    281c:	1d3b      	adds	r3, r7, #4
    281e:	1c0a      	adds	r2, r1, #0
    2820:	801a      	strh	r2, [r3, #0]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2822:	2317      	movs	r3, #23
    2824:	18fc      	adds	r4, r7, r3
    2826:	1dfb      	adds	r3, r7, #7
    2828:	781b      	ldrb	r3, [r3, #0]
    282a:	0018      	movs	r0, r3
    282c:	4b25      	ldr	r3, [pc, #148]	; (28c4 <usb_d_ep_init+0xc0>)
    282e:	4798      	blx	r3
    2830:	0003      	movs	r3, r0
    2832:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2834:	2317      	movs	r3, #23
    2836:	18fb      	adds	r3, r7, r3
    2838:	781b      	ldrb	r3, [r3, #0]
    283a:	b25b      	sxtb	r3, r3
    283c:	015a      	lsls	r2, r3, #5
    283e:	4b22      	ldr	r3, [pc, #136]	; (28c8 <usb_d_ep_init+0xc4>)
    2840:	18d3      	adds	r3, r2, r3
    2842:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    2844:	2317      	movs	r3, #23
    2846:	18fb      	adds	r3, r7, r3
    2848:	781b      	ldrb	r3, [r3, #0]
    284a:	2b7f      	cmp	r3, #127	; 0x7f
    284c:	d802      	bhi.n	2854 <usb_d_ep_init+0x50>
		return -USB_ERR_REDO;
    284e:	2314      	movs	r3, #20
    2850:	425b      	negs	r3, r3
    2852:	e032      	b.n	28ba <usb_d_ep_init+0xb6>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2854:	2317      	movs	r3, #23
    2856:	18fc      	adds	r4, r7, r3
    2858:	20ff      	movs	r0, #255	; 0xff
    285a:	4b1a      	ldr	r3, [pc, #104]	; (28c4 <usb_d_ep_init+0xc0>)
    285c:	4798      	blx	r3
    285e:	0003      	movs	r3, r0
    2860:	7023      	strb	r3, [r4, #0]
		if (ep_index < 0) {
    2862:	2317      	movs	r3, #23
    2864:	18fb      	adds	r3, r7, r3
    2866:	781b      	ldrb	r3, [r3, #0]
    2868:	2b7f      	cmp	r3, #127	; 0x7f
    286a:	d902      	bls.n	2872 <usb_d_ep_init+0x6e>
			return -USB_ERR_ALLOC_FAIL;
    286c:	2315      	movs	r3, #21
    286e:	425b      	negs	r3, r3
    2870:	e023      	b.n	28ba <usb_d_ep_init+0xb6>
		}
		ept = &usb_d_inst.ep[ep_index];
    2872:	2317      	movs	r3, #23
    2874:	18fb      	adds	r3, r7, r3
    2876:	781b      	ldrb	r3, [r3, #0]
    2878:	b25b      	sxtb	r3, r3
    287a:	015a      	lsls	r2, r3, #5
    287c:	4b12      	ldr	r3, [pc, #72]	; (28c8 <usb_d_ep_init+0xc4>)
    287e:	18d3      	adds	r3, r2, r3
    2880:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2882:	1d3b      	adds	r3, r7, #4
    2884:	881a      	ldrh	r2, [r3, #0]
    2886:	1dbb      	adds	r3, r7, #6
    2888:	7819      	ldrb	r1, [r3, #0]
    288a:	1dfb      	adds	r3, r7, #7
    288c:	781b      	ldrb	r3, [r3, #0]
    288e:	0018      	movs	r0, r3
    2890:	4b0e      	ldr	r3, [pc, #56]	; (28cc <usb_d_ep_init+0xc8>)
    2892:	4798      	blx	r3
    2894:	0003      	movs	r3, r0
    2896:	60fb      	str	r3, [r7, #12]
	if (rc < 0) {
    2898:	68fb      	ldr	r3, [r7, #12]
    289a:	2b00      	cmp	r3, #0
    289c:	da01      	bge.n	28a2 <usb_d_ep_init+0x9e>
		return rc;
    289e:	68fb      	ldr	r3, [r7, #12]
    28a0:	e00b      	b.n	28ba <usb_d_ep_init+0xb6>
	}
	ept->xfer.hdr.ep   = ep;
    28a2:	693b      	ldr	r3, [r7, #16]
    28a4:	1dfa      	adds	r2, r7, #7
    28a6:	7812      	ldrb	r2, [r2, #0]
    28a8:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    28aa:	1dbb      	adds	r3, r7, #6
    28ac:	781b      	ldrb	r3, [r3, #0]
    28ae:	2203      	movs	r2, #3
    28b0:	4013      	ands	r3, r2
    28b2:	b2da      	uxtb	r2, r3
    28b4:	693b      	ldr	r3, [r7, #16]
    28b6:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    28b8:	2300      	movs	r3, #0
}
    28ba:	0018      	movs	r0, r3
    28bc:	46bd      	mov	sp, r7
    28be:	b007      	add	sp, #28
    28c0:	bd90      	pop	{r4, r7, pc}
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	0000223d 	.word	0x0000223d
    28c8:	20000190 	.word	0x20000190
    28cc:	00008801 	.word	0x00008801

000028d0 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    28d0:	b590      	push	{r4, r7, lr}
    28d2:	b085      	sub	sp, #20
    28d4:	af00      	add	r7, sp, #0
    28d6:	0002      	movs	r2, r0
    28d8:	1dfb      	adds	r3, r7, #7
    28da:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    28dc:	230f      	movs	r3, #15
    28de:	18fc      	adds	r4, r7, r3
    28e0:	1dfb      	adds	r3, r7, #7
    28e2:	781b      	ldrb	r3, [r3, #0]
    28e4:	0018      	movs	r0, r3
    28e6:	4b0f      	ldr	r3, [pc, #60]	; (2924 <usb_d_ep_deinit+0x54>)
    28e8:	4798      	blx	r3
    28ea:	0003      	movs	r3, r0
    28ec:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    28ee:	230f      	movs	r3, #15
    28f0:	18fb      	adds	r3, r7, r3
    28f2:	781b      	ldrb	r3, [r3, #0]
    28f4:	b25b      	sxtb	r3, r3
    28f6:	015a      	lsls	r2, r3, #5
    28f8:	4b0b      	ldr	r3, [pc, #44]	; (2928 <usb_d_ep_deinit+0x58>)
    28fa:	18d3      	adds	r3, r2, r3
    28fc:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    28fe:	230f      	movs	r3, #15
    2900:	18fb      	adds	r3, r7, r3
    2902:	781b      	ldrb	r3, [r3, #0]
    2904:	2b7f      	cmp	r3, #127	; 0x7f
    2906:	d808      	bhi.n	291a <usb_d_ep_deinit+0x4a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2908:	1dfb      	adds	r3, r7, #7
    290a:	781b      	ldrb	r3, [r3, #0]
    290c:	0018      	movs	r0, r3
    290e:	4b07      	ldr	r3, [pc, #28]	; (292c <usb_d_ep_deinit+0x5c>)
    2910:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2912:	68bb      	ldr	r3, [r7, #8]
    2914:	22ff      	movs	r2, #255	; 0xff
    2916:	705a      	strb	r2, [r3, #1]
    2918:	e000      	b.n	291c <usb_d_ep_deinit+0x4c>
		return;
    291a:	46c0      	nop			; (mov r8, r8)
}
    291c:	46bd      	mov	sp, r7
    291e:	b005      	add	sp, #20
    2920:	bd90      	pop	{r4, r7, pc}
    2922:	46c0      	nop			; (mov r8, r8)
    2924:	0000223d 	.word	0x0000223d
    2928:	20000190 	.word	0x20000190
    292c:	0000897d 	.word	0x0000897d

00002930 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2930:	b590      	push	{r4, r7, lr}
    2932:	b087      	sub	sp, #28
    2934:	af00      	add	r7, sp, #0
    2936:	0002      	movs	r2, r0
    2938:	1dfb      	adds	r3, r7, #7
    293a:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    293c:	2317      	movs	r3, #23
    293e:	18fc      	adds	r4, r7, r3
    2940:	1dfb      	adds	r3, r7, #7
    2942:	781b      	ldrb	r3, [r3, #0]
    2944:	0018      	movs	r0, r3
    2946:	4b17      	ldr	r3, [pc, #92]	; (29a4 <usb_d_ep_enable+0x74>)
    2948:	4798      	blx	r3
    294a:	0003      	movs	r3, r0
    294c:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    294e:	2317      	movs	r3, #23
    2950:	18fb      	adds	r3, r7, r3
    2952:	781b      	ldrb	r3, [r3, #0]
    2954:	b25b      	sxtb	r3, r3
    2956:	015a      	lsls	r2, r3, #5
    2958:	4b13      	ldr	r3, [pc, #76]	; (29a8 <usb_d_ep_enable+0x78>)
    295a:	18d3      	adds	r3, r2, r3
    295c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    295e:	2317      	movs	r3, #23
    2960:	18fb      	adds	r3, r7, r3
    2962:	781b      	ldrb	r3, [r3, #0]
    2964:	2b7f      	cmp	r3, #127	; 0x7f
    2966:	d902      	bls.n	296e <usb_d_ep_enable+0x3e>
		return -USB_ERR_PARAM;
    2968:	2312      	movs	r3, #18
    296a:	425b      	negs	r3, r3
    296c:	e016      	b.n	299c <usb_d_ep_enable+0x6c>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    296e:	693b      	ldr	r3, [r7, #16]
    2970:	781b      	ldrb	r3, [r3, #0]
    2972:	2b00      	cmp	r3, #0
    2974:	d101      	bne.n	297a <usb_d_ep_enable+0x4a>
    2976:	2202      	movs	r2, #2
    2978:	e000      	b.n	297c <usb_d_ep_enable+0x4c>
    297a:	2201      	movs	r2, #1
    297c:	693b      	ldr	r3, [r7, #16]
    297e:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    2980:	1dfb      	adds	r3, r7, #7
    2982:	781b      	ldrb	r3, [r3, #0]
    2984:	0018      	movs	r0, r3
    2986:	4b09      	ldr	r3, [pc, #36]	; (29ac <usb_d_ep_enable+0x7c>)
    2988:	4798      	blx	r3
    298a:	0003      	movs	r3, r0
    298c:	60fb      	str	r3, [r7, #12]
	if (rc < 0) {
    298e:	68fb      	ldr	r3, [r7, #12]
    2990:	2b00      	cmp	r3, #0
    2992:	da02      	bge.n	299a <usb_d_ep_enable+0x6a>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    2994:	693b      	ldr	r3, [r7, #16]
    2996:	2200      	movs	r2, #0
    2998:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    299a:	68fb      	ldr	r3, [r7, #12]
}
    299c:	0018      	movs	r0, r3
    299e:	46bd      	mov	sp, r7
    29a0:	b007      	add	sp, #28
    29a2:	bd90      	pop	{r4, r7, pc}
    29a4:	0000223d 	.word	0x0000223d
    29a8:	20000190 	.word	0x20000190
    29ac:	00008a7d 	.word	0x00008a7d

000029b0 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    29b0:	b5b0      	push	{r4, r5, r7, lr}
    29b2:	b08c      	sub	sp, #48	; 0x30
    29b4:	af02      	add	r7, sp, #8
    29b6:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	7a1b      	ldrb	r3, [r3, #8]
    29bc:	221f      	movs	r2, #31
    29be:	18bc      	adds	r4, r7, r2
    29c0:	0018      	movs	r0, r3
    29c2:	4b5e      	ldr	r3, [pc, #376]	; (2b3c <usb_d_ep_transfer+0x18c>)
    29c4:	4798      	blx	r3
    29c6:	0003      	movs	r3, r0
    29c8:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    29ca:	231f      	movs	r3, #31
    29cc:	18fb      	adds	r3, r7, r3
    29ce:	781b      	ldrb	r3, [r3, #0]
    29d0:	b25b      	sxtb	r3, r3
    29d2:	015a      	lsls	r2, r3, #5
    29d4:	4b5a      	ldr	r3, [pc, #360]	; (2b40 <usb_d_ep_transfer+0x190>)
    29d6:	18d3      	adds	r3, r2, r3
    29d8:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    29da:	687b      	ldr	r3, [r7, #4]
    29dc:	7a1b      	ldrb	r3, [r3, #8]
    29de:	001a      	movs	r2, r3
    29e0:	2380      	movs	r3, #128	; 0x80
    29e2:	401a      	ands	r2, r3
    29e4:	2327      	movs	r3, #39	; 0x27
    29e6:	18fb      	adds	r3, r7, r3
    29e8:	1e51      	subs	r1, r2, #1
    29ea:	418a      	sbcs	r2, r1
    29ec:	701a      	strb	r2, [r3, #0]
    29ee:	687b      	ldr	r3, [r7, #4]
    29f0:	7a5a      	ldrb	r2, [r3, #9]
    29f2:	2326      	movs	r3, #38	; 0x26
    29f4:	18fb      	adds	r3, r7, r3
    29f6:	1e51      	subs	r1, r2, #1
    29f8:	418a      	sbcs	r2, r1
    29fa:	701a      	strb	r2, [r3, #0]
	uint32_t              len = xfer->size;
    29fc:	687b      	ldr	r3, [r7, #4]
    29fe:	685b      	ldr	r3, [r3, #4]
    2a00:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    2a02:	231f      	movs	r3, #31
    2a04:	18fb      	adds	r3, r7, r3
    2a06:	781b      	ldrb	r3, [r3, #0]
    2a08:	2b7f      	cmp	r3, #127	; 0x7f
    2a0a:	d902      	bls.n	2a12 <usb_d_ep_transfer+0x62>
		return -USB_ERR_PARAM;
    2a0c:	2312      	movs	r3, #18
    2a0e:	425b      	negs	r3, r3
    2a10:	e090      	b.n	2b34 <usb_d_ep_transfer+0x184>
	}

	atomic_enter_critical(&flags);
    2a12:	2308      	movs	r3, #8
    2a14:	18fb      	adds	r3, r7, r3
    2a16:	0018      	movs	r0, r3
    2a18:	4b4a      	ldr	r3, [pc, #296]	; (2b44 <usb_d_ep_transfer+0x194>)
    2a1a:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2a1c:	69bb      	ldr	r3, [r7, #24]
    2a1e:	789a      	ldrb	r2, [r3, #2]
    2a20:	230f      	movs	r3, #15
    2a22:	18fb      	adds	r3, r7, r3
    2a24:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    2a26:	230f      	movs	r3, #15
    2a28:	18fb      	adds	r3, r7, r3
    2a2a:	781b      	ldrb	r3, [r3, #0]
    2a2c:	b2db      	uxtb	r3, r3
    2a2e:	2b01      	cmp	r3, #1
    2a30:	d10c      	bne.n	2a4c <usb_d_ep_transfer+0x9c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2a32:	69bb      	ldr	r3, [r7, #24]
    2a34:	2203      	movs	r2, #3
    2a36:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2a38:	2308      	movs	r3, #8
    2a3a:	18fb      	adds	r3, r7, r3
    2a3c:	0018      	movs	r0, r3
    2a3e:	4b42      	ldr	r3, [pc, #264]	; (2b48 <usb_d_ep_transfer+0x198>)
    2a40:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2a42:	69bb      	ldr	r3, [r7, #24]
    2a44:	781b      	ldrb	r3, [r3, #0]
    2a46:	2b00      	cmp	r3, #0
    2a48:	d161      	bne.n	2b0e <usb_d_ep_transfer+0x15e>
    2a4a:	e019      	b.n	2a80 <usb_d_ep_transfer+0xd0>
		atomic_leave_critical(&flags);
    2a4c:	2308      	movs	r3, #8
    2a4e:	18fb      	adds	r3, r7, r3
    2a50:	0018      	movs	r0, r3
    2a52:	4b3d      	ldr	r3, [pc, #244]	; (2b48 <usb_d_ep_transfer+0x198>)
    2a54:	4798      	blx	r3
		switch (state) {
    2a56:	230f      	movs	r3, #15
    2a58:	18fb      	adds	r3, r7, r3
    2a5a:	781b      	ldrb	r3, [r3, #0]
    2a5c:	b2db      	uxtb	r3, r3
    2a5e:	2b05      	cmp	r3, #5
    2a60:	d004      	beq.n	2a6c <usb_d_ep_transfer+0xbc>
    2a62:	2b06      	cmp	r3, #6
    2a64:	d004      	beq.n	2a70 <usb_d_ep_transfer+0xc0>
    2a66:	2b00      	cmp	r3, #0
    2a68:	d005      	beq.n	2a76 <usb_d_ep_transfer+0xc6>
    2a6a:	e007      	b.n	2a7c <usb_d_ep_transfer+0xcc>
			return USB_HALTED;
    2a6c:	2302      	movs	r3, #2
    2a6e:	e061      	b.n	2b34 <usb_d_ep_transfer+0x184>
			return -USB_ERROR;
    2a70:	2310      	movs	r3, #16
    2a72:	425b      	negs	r3, r3
    2a74:	e05e      	b.n	2b34 <usb_d_ep_transfer+0x184>
			return -USB_ERR_FUNC;
    2a76:	2313      	movs	r3, #19
    2a78:	425b      	negs	r3, r3
    2a7a:	e05b      	b.n	2b34 <usb_d_ep_transfer+0x184>
			return USB_BUSY;
    2a7c:	2301      	movs	r3, #1
    2a7e:	e059      	b.n	2b34 <usb_d_ep_transfer+0x184>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2a80:	69bb      	ldr	r3, [r7, #24]
    2a82:	7c9b      	ldrb	r3, [r3, #18]
    2a84:	b299      	uxth	r1, r3
    2a86:	69bb      	ldr	r3, [r7, #24]
    2a88:	7cdb      	ldrb	r3, [r3, #19]
    2a8a:	b29b      	uxth	r3, r3
    2a8c:	021b      	lsls	r3, r3, #8
    2a8e:	b29a      	uxth	r2, r3
    2a90:	2316      	movs	r3, #22
    2a92:	18fb      	adds	r3, r7, r3
    2a94:	188a      	adds	r2, r1, r2
    2a96:	801a      	strh	r2, [r3, #0]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    2a98:	2316      	movs	r3, #22
    2a9a:	18fb      	adds	r3, r7, r3
    2a9c:	881b      	ldrh	r3, [r3, #0]
    2a9e:	2b00      	cmp	r3, #0
    2aa0:	d10d      	bne.n	2abe <usb_d_ep_transfer+0x10e>
			dir                 = true;
    2aa2:	2327      	movs	r3, #39	; 0x27
    2aa4:	18fb      	adds	r3, r7, r3
    2aa6:	2201      	movs	r2, #1
    2aa8:	701a      	strb	r2, [r3, #0]
			len                 = 0;
    2aaa:	2300      	movs	r3, #0
    2aac:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    2aae:	2326      	movs	r3, #38	; 0x26
    2ab0:	18fb      	adds	r3, r7, r3
    2ab2:	2201      	movs	r2, #1
    2ab4:	701a      	strb	r2, [r3, #0]
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2ab6:	69bb      	ldr	r3, [r7, #24]
    2ab8:	2204      	movs	r2, #4
    2aba:	709a      	strb	r2, [r3, #2]
    2abc:	e027      	b.n	2b0e <usb_d_ep_transfer+0x15e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    2abe:	69bb      	ldr	r3, [r7, #24]
    2ac0:	7b1b      	ldrb	r3, [r3, #12]
    2ac2:	001a      	movs	r2, r3
    2ac4:	2380      	movs	r3, #128	; 0x80
    2ac6:	401a      	ands	r2, r3
    2ac8:	2327      	movs	r3, #39	; 0x27
    2aca:	18fb      	adds	r3, r7, r3
    2acc:	1e51      	subs	r1, r2, #1
    2ace:	418a      	sbcs	r2, r1
    2ad0:	701a      	strb	r2, [r3, #0]
			/* Data length not exceed requested. */
			if (len > req_len) {
    2ad2:	2316      	movs	r3, #22
    2ad4:	18fb      	adds	r3, r7, r3
    2ad6:	881a      	ldrh	r2, [r3, #0]
    2ad8:	6a3b      	ldr	r3, [r7, #32]
    2ada:	429a      	cmp	r2, r3
    2adc:	d203      	bcs.n	2ae6 <usb_d_ep_transfer+0x136>
				len = req_len;
    2ade:	2316      	movs	r3, #22
    2ae0:	18fb      	adds	r3, r7, r3
    2ae2:	881b      	ldrh	r3, [r3, #0]
    2ae4:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    2ae6:	2327      	movs	r3, #39	; 0x27
    2ae8:	18fb      	adds	r3, r7, r3
    2aea:	781b      	ldrb	r3, [r3, #0]
    2aec:	2b00      	cmp	r3, #0
    2aee:	d00a      	beq.n	2b06 <usb_d_ep_transfer+0x156>
				/* Setup -> In */
				zlp = (req_len > len);
    2af0:	2316      	movs	r3, #22
    2af2:	18fb      	adds	r3, r7, r3
    2af4:	881a      	ldrh	r2, [r3, #0]
    2af6:	2326      	movs	r3, #38	; 0x26
    2af8:	18fb      	adds	r3, r7, r3
    2afa:	6a39      	ldr	r1, [r7, #32]
    2afc:	4291      	cmp	r1, r2
    2afe:	4192      	sbcs	r2, r2
    2b00:	4252      	negs	r2, r2
    2b02:	701a      	strb	r2, [r3, #0]
    2b04:	e003      	b.n	2b0e <usb_d_ep_transfer+0x15e>
			} else {
				zlp = false;
    2b06:	2326      	movs	r3, #38	; 0x26
    2b08:	18fb      	adds	r3, r7, r3
    2b0a:	2200      	movs	r2, #0
    2b0c:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2b0e:	687b      	ldr	r3, [r7, #4]
    2b10:	7a18      	ldrb	r0, [r3, #8]
    2b12:	687b      	ldr	r3, [r7, #4]
    2b14:	681c      	ldr	r4, [r3, #0]
    2b16:	2326      	movs	r3, #38	; 0x26
    2b18:	18fb      	adds	r3, r7, r3
    2b1a:	781b      	ldrb	r3, [r3, #0]
    2b1c:	6a3d      	ldr	r5, [r7, #32]
    2b1e:	2227      	movs	r2, #39	; 0x27
    2b20:	18ba      	adds	r2, r7, r2
    2b22:	7811      	ldrb	r1, [r2, #0]
    2b24:	9300      	str	r3, [sp, #0]
    2b26:	002b      	movs	r3, r5
    2b28:	0022      	movs	r2, r4
    2b2a:	4c08      	ldr	r4, [pc, #32]	; (2b4c <usb_d_ep_transfer+0x19c>)
    2b2c:	47a0      	blx	r4
    2b2e:	0003      	movs	r3, r0
    2b30:	613b      	str	r3, [r7, #16]
	return rc;
    2b32:	693b      	ldr	r3, [r7, #16]
}
    2b34:	0018      	movs	r0, r3
    2b36:	46bd      	mov	sp, r7
    2b38:	b00a      	add	sp, #40	; 0x28
    2b3a:	bdb0      	pop	{r4, r5, r7, pc}
    2b3c:	0000223d 	.word	0x0000223d
    2b40:	20000190 	.word	0x20000190
    2b44:	00001615 	.word	0x00001615
    2b48:	00001637 	.word	0x00001637
    2b4c:	000022e1 	.word	0x000022e1

00002b50 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    2b50:	b590      	push	{r4, r7, lr}
    2b52:	b087      	sub	sp, #28
    2b54:	af00      	add	r7, sp, #0
    2b56:	0002      	movs	r2, r0
    2b58:	1dfb      	adds	r3, r7, #7
    2b5a:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2b5c:	2317      	movs	r3, #23
    2b5e:	18fc      	adds	r4, r7, r3
    2b60:	1dfb      	adds	r3, r7, #7
    2b62:	781b      	ldrb	r3, [r3, #0]
    2b64:	0018      	movs	r0, r3
    2b66:	4b1d      	ldr	r3, [pc, #116]	; (2bdc <_usb_d_ep_halt_clr+0x8c>)
    2b68:	4798      	blx	r3
    2b6a:	0003      	movs	r3, r0
    2b6c:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2b6e:	2317      	movs	r3, #23
    2b70:	18fb      	adds	r3, r7, r3
    2b72:	781b      	ldrb	r3, [r3, #0]
    2b74:	b25b      	sxtb	r3, r3
    2b76:	015a      	lsls	r2, r3, #5
    2b78:	4b19      	ldr	r3, [pc, #100]	; (2be0 <_usb_d_ep_halt_clr+0x90>)
    2b7a:	18d3      	adds	r3, r2, r3
    2b7c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2b7e:	2317      	movs	r3, #23
    2b80:	18fb      	adds	r3, r7, r3
    2b82:	781b      	ldrb	r3, [r3, #0]
    2b84:	2b7f      	cmp	r3, #127	; 0x7f
    2b86:	d902      	bls.n	2b8e <_usb_d_ep_halt_clr+0x3e>
		return -USB_ERR_PARAM;
    2b88:	2312      	movs	r3, #18
    2b8a:	425b      	negs	r3, r3
    2b8c:	e022      	b.n	2bd4 <_usb_d_ep_halt_clr+0x84>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2b8e:	1dfb      	adds	r3, r7, #7
    2b90:	781b      	ldrb	r3, [r3, #0]
    2b92:	2102      	movs	r1, #2
    2b94:	0018      	movs	r0, r3
    2b96:	4b13      	ldr	r3, [pc, #76]	; (2be4 <_usb_d_ep_halt_clr+0x94>)
    2b98:	4798      	blx	r3
    2b9a:	1e03      	subs	r3, r0, #0
    2b9c:	d019      	beq.n	2bd2 <_usb_d_ep_halt_clr+0x82>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2b9e:	1dfb      	adds	r3, r7, #7
    2ba0:	781b      	ldrb	r3, [r3, #0]
    2ba2:	2100      	movs	r1, #0
    2ba4:	0018      	movs	r0, r3
    2ba6:	4b0f      	ldr	r3, [pc, #60]	; (2be4 <_usb_d_ep_halt_clr+0x94>)
    2ba8:	4798      	blx	r3
    2baa:	0003      	movs	r3, r0
    2bac:	60fb      	str	r3, [r7, #12]
		if (rc < 0) {
    2bae:	68fb      	ldr	r3, [r7, #12]
    2bb0:	2b00      	cmp	r3, #0
    2bb2:	da01      	bge.n	2bb8 <_usb_d_ep_halt_clr+0x68>
			return rc;
    2bb4:	68fb      	ldr	r3, [r7, #12]
    2bb6:	e00d      	b.n	2bd4 <_usb_d_ep_halt_clr+0x84>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2bb8:	693b      	ldr	r3, [r7, #16]
    2bba:	2201      	movs	r2, #1
    2bbc:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2bbe:	693b      	ldr	r3, [r7, #16]
    2bc0:	2203      	movs	r2, #3
    2bc2:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2bc4:	693b      	ldr	r3, [r7, #16]
    2bc6:	69db      	ldr	r3, [r3, #28]
    2bc8:	1dfa      	adds	r2, r7, #7
    2bca:	7810      	ldrb	r0, [r2, #0]
    2bcc:	2200      	movs	r2, #0
    2bce:	2103      	movs	r1, #3
    2bd0:	4798      	blx	r3
	}
	return ERR_NONE;
    2bd2:	2300      	movs	r3, #0
}
    2bd4:	0018      	movs	r0, r3
    2bd6:	46bd      	mov	sp, r7
    2bd8:	b007      	add	sp, #28
    2bda:	bd90      	pop	{r4, r7, pc}
    2bdc:	0000223d 	.word	0x0000223d
    2be0:	20000190 	.word	0x20000190
    2be4:	00008ed9 	.word	0x00008ed9

00002be8 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2be8:	b580      	push	{r7, lr}
    2bea:	b082      	sub	sp, #8
    2bec:	af00      	add	r7, sp, #0
    2bee:	0002      	movs	r2, r0
    2bf0:	1dfb      	adds	r3, r7, #7
    2bf2:	701a      	strb	r2, [r3, #0]
    2bf4:	1dbb      	adds	r3, r7, #6
    2bf6:	1c0a      	adds	r2, r1, #0
    2bf8:	701a      	strb	r2, [r3, #0]
	if (ctrl == USB_EP_HALT_CLR) {
    2bfa:	1dbb      	adds	r3, r7, #6
    2bfc:	781b      	ldrb	r3, [r3, #0]
    2bfe:	2b00      	cmp	r3, #0
    2c00:	d106      	bne.n	2c10 <usb_d_ep_halt+0x28>
		return _usb_d_ep_halt_clr(ep);
    2c02:	1dfb      	adds	r3, r7, #7
    2c04:	781b      	ldrb	r3, [r3, #0]
    2c06:	0018      	movs	r0, r3
    2c08:	4b0d      	ldr	r3, [pc, #52]	; (2c40 <usb_d_ep_halt+0x58>)
    2c0a:	4798      	blx	r3
    2c0c:	0003      	movs	r3, r0
    2c0e:	e012      	b.n	2c36 <usb_d_ep_halt+0x4e>
	} else if (ctrl == USB_EP_HALT_SET) {
    2c10:	1dbb      	adds	r3, r7, #6
    2c12:	781b      	ldrb	r3, [r3, #0]
    2c14:	2b01      	cmp	r3, #1
    2c16:	d107      	bne.n	2c28 <usb_d_ep_halt+0x40>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2c18:	1dfb      	adds	r3, r7, #7
    2c1a:	781b      	ldrb	r3, [r3, #0]
    2c1c:	2101      	movs	r1, #1
    2c1e:	0018      	movs	r0, r3
    2c20:	4b08      	ldr	r3, [pc, #32]	; (2c44 <usb_d_ep_halt+0x5c>)
    2c22:	4798      	blx	r3
    2c24:	0003      	movs	r3, r0
    2c26:	e006      	b.n	2c36 <usb_d_ep_halt+0x4e>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2c28:	1dfb      	adds	r3, r7, #7
    2c2a:	781b      	ldrb	r3, [r3, #0]
    2c2c:	2102      	movs	r1, #2
    2c2e:	0018      	movs	r0, r3
    2c30:	4b04      	ldr	r3, [pc, #16]	; (2c44 <usb_d_ep_halt+0x5c>)
    2c32:	4798      	blx	r3
    2c34:	0003      	movs	r3, r0
	}
}
    2c36:	0018      	movs	r0, r3
    2c38:	46bd      	mov	sp, r7
    2c3a:	b002      	add	sp, #8
    2c3c:	bd80      	pop	{r7, pc}
    2c3e:	46c0      	nop			; (mov r8, r8)
    2c40:	00002b51 	.word	0x00002b51
    2c44:	00008ed9 	.word	0x00008ed9

00002c48 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2c48:	b590      	push	{r4, r7, lr}
    2c4a:	b087      	sub	sp, #28
    2c4c:	af00      	add	r7, sp, #0
    2c4e:	603a      	str	r2, [r7, #0]
    2c50:	1dfb      	adds	r3, r7, #7
    2c52:	1c02      	adds	r2, r0, #0
    2c54:	701a      	strb	r2, [r3, #0]
    2c56:	1dbb      	adds	r3, r7, #6
    2c58:	1c0a      	adds	r2, r1, #0
    2c5a:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2c5c:	2317      	movs	r3, #23
    2c5e:	18fc      	adds	r4, r7, r3
    2c60:	1dfb      	adds	r3, r7, #7
    2c62:	781b      	ldrb	r3, [r3, #0]
    2c64:	0018      	movs	r0, r3
    2c66:	4b18      	ldr	r3, [pc, #96]	; (2cc8 <usb_d_ep_register_callback+0x80>)
    2c68:	4798      	blx	r3
    2c6a:	0003      	movs	r3, r0
    2c6c:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2c6e:	2317      	movs	r3, #23
    2c70:	18fb      	adds	r3, r7, r3
    2c72:	781b      	ldrb	r3, [r3, #0]
    2c74:	b25b      	sxtb	r3, r3
    2c76:	015a      	lsls	r2, r3, #5
    2c78:	4b14      	ldr	r3, [pc, #80]	; (2ccc <usb_d_ep_register_callback+0x84>)
    2c7a:	18d3      	adds	r3, r2, r3
    2c7c:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2c7e:	683b      	ldr	r3, [r7, #0]
    2c80:	2b00      	cmp	r3, #0
    2c82:	d001      	beq.n	2c88 <usb_d_ep_register_callback+0x40>
    2c84:	683b      	ldr	r3, [r7, #0]
    2c86:	e000      	b.n	2c8a <usb_d_ep_register_callback+0x42>
    2c88:	4b11      	ldr	r3, [pc, #68]	; (2cd0 <usb_d_ep_register_callback+0x88>)
    2c8a:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    2c8c:	2317      	movs	r3, #23
    2c8e:	18fb      	adds	r3, r7, r3
    2c90:	781b      	ldrb	r3, [r3, #0]
    2c92:	2b7f      	cmp	r3, #127	; 0x7f
    2c94:	d814      	bhi.n	2cc0 <usb_d_ep_register_callback+0x78>
		return;
	}
	switch (type) {
    2c96:	1dbb      	adds	r3, r7, #6
    2c98:	781b      	ldrb	r3, [r3, #0]
    2c9a:	2b01      	cmp	r3, #1
    2c9c:	d008      	beq.n	2cb0 <usb_d_ep_register_callback+0x68>
    2c9e:	2b02      	cmp	r3, #2
    2ca0:	d00a      	beq.n	2cb8 <usb_d_ep_register_callback+0x70>
    2ca2:	2b00      	cmp	r3, #0
    2ca4:	d000      	beq.n	2ca8 <usb_d_ep_register_callback+0x60>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    2ca6:	e00c      	b.n	2cc2 <usb_d_ep_register_callback+0x7a>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2ca8:	693b      	ldr	r3, [r7, #16]
    2caa:	68fa      	ldr	r2, [r7, #12]
    2cac:	615a      	str	r2, [r3, #20]
		break;
    2cae:	e008      	b.n	2cc2 <usb_d_ep_register_callback+0x7a>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2cb0:	693b      	ldr	r3, [r7, #16]
    2cb2:	68fa      	ldr	r2, [r7, #12]
    2cb4:	619a      	str	r2, [r3, #24]
		break;
    2cb6:	e004      	b.n	2cc2 <usb_d_ep_register_callback+0x7a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    2cb8:	693b      	ldr	r3, [r7, #16]
    2cba:	68fa      	ldr	r2, [r7, #12]
    2cbc:	61da      	str	r2, [r3, #28]
		break;
    2cbe:	e000      	b.n	2cc2 <usb_d_ep_register_callback+0x7a>
		return;
    2cc0:	46c0      	nop			; (mov r8, r8)
	}
}
    2cc2:	46bd      	mov	sp, r7
    2cc4:	b007      	add	sp, #28
    2cc6:	bd90      	pop	{r4, r7, pc}
    2cc8:	0000223d 	.word	0x0000223d
    2ccc:	20000190 	.word	0x20000190
    2cd0:	0000235d 	.word	0x0000235d

00002cd4 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    2cd4:	b580      	push	{r7, lr}
    2cd6:	b084      	sub	sp, #16
    2cd8:	af00      	add	r7, sp, #0
    2cda:	60b9      	str	r1, [r7, #8]
    2cdc:	607a      	str	r2, [r7, #4]
    2cde:	230f      	movs	r3, #15
    2ce0:	18fb      	adds	r3, r7, r3
    2ce2:	1c02      	adds	r2, r0, #0
    2ce4:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
    2ce6:	230f      	movs	r3, #15
    2ce8:	18fb      	adds	r3, r7, r3
    2cea:	781b      	ldrb	r3, [r3, #0]
    2cec:	2201      	movs	r2, #1
    2cee:	4053      	eors	r3, r2
    2cf0:	b2db      	uxtb	r3, r3
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d000      	beq.n	2cf8 <assert+0x24>
		__asm("BKPT #0");
    2cf6:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2cf8:	46c0      	nop			; (mov r8, r8)
    2cfa:	46bd      	mov	sp, r7
    2cfc:	b004      	add	sp, #16
    2cfe:	bd80      	pop	{r7, pc}

00002d00 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    2d00:	b580      	push	{r7, lr}
    2d02:	b084      	sub	sp, #16
    2d04:	af00      	add	r7, sp, #0
    2d06:	6078      	str	r0, [r7, #4]
    2d08:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2d0a:	687b      	ldr	r3, [r7, #4]
    2d0c:	681b      	ldr	r3, [r3, #0]
    2d0e:	60fb      	str	r3, [r7, #12]
    2d10:	e008      	b.n	2d24 <is_list_element+0x24>
		if (it == element) {
    2d12:	68fa      	ldr	r2, [r7, #12]
    2d14:	683b      	ldr	r3, [r7, #0]
    2d16:	429a      	cmp	r2, r3
    2d18:	d101      	bne.n	2d1e <is_list_element+0x1e>
			return true;
    2d1a:	2301      	movs	r3, #1
    2d1c:	e006      	b.n	2d2c <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    2d1e:	68fb      	ldr	r3, [r7, #12]
    2d20:	681b      	ldr	r3, [r3, #0]
    2d22:	60fb      	str	r3, [r7, #12]
    2d24:	68fb      	ldr	r3, [r7, #12]
    2d26:	2b00      	cmp	r3, #0
    2d28:	d1f3      	bne.n	2d12 <is_list_element+0x12>
		}
	}

	return false;
    2d2a:	2300      	movs	r3, #0
}
    2d2c:	0018      	movs	r0, r3
    2d2e:	46bd      	mov	sp, r7
    2d30:	b004      	add	sp, #16
    2d32:	bd80      	pop	{r7, pc}

00002d34 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2d34:	b580      	push	{r7, lr}
    2d36:	b082      	sub	sp, #8
    2d38:	af00      	add	r7, sp, #0
    2d3a:	6078      	str	r0, [r7, #4]
    2d3c:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    2d3e:	683a      	ldr	r2, [r7, #0]
    2d40:	687b      	ldr	r3, [r7, #4]
    2d42:	0011      	movs	r1, r2
    2d44:	0018      	movs	r0, r3
    2d46:	4b0e      	ldr	r3, [pc, #56]	; (2d80 <list_insert_as_head+0x4c>)
    2d48:	4798      	blx	r3
    2d4a:	0003      	movs	r3, r0
    2d4c:	1e5a      	subs	r2, r3, #1
    2d4e:	4193      	sbcs	r3, r2
    2d50:	b2db      	uxtb	r3, r3
    2d52:	2201      	movs	r2, #1
    2d54:	4053      	eors	r3, r2
    2d56:	b2db      	uxtb	r3, r3
    2d58:	1c1a      	adds	r2, r3, #0
    2d5a:	2301      	movs	r3, #1
    2d5c:	4013      	ands	r3, r2
    2d5e:	b2db      	uxtb	r3, r3
    2d60:	4908      	ldr	r1, [pc, #32]	; (2d84 <list_insert_as_head+0x50>)
    2d62:	2239      	movs	r2, #57	; 0x39
    2d64:	0018      	movs	r0, r3
    2d66:	4b08      	ldr	r3, [pc, #32]	; (2d88 <list_insert_as_head+0x54>)
    2d68:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2d6a:	687b      	ldr	r3, [r7, #4]
    2d6c:	681a      	ldr	r2, [r3, #0]
    2d6e:	683b      	ldr	r3, [r7, #0]
    2d70:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    2d72:	687b      	ldr	r3, [r7, #4]
    2d74:	683a      	ldr	r2, [r7, #0]
    2d76:	601a      	str	r2, [r3, #0]
}
    2d78:	46c0      	nop			; (mov r8, r8)
    2d7a:	46bd      	mov	sp, r7
    2d7c:	b002      	add	sp, #8
    2d7e:	bd80      	pop	{r7, pc}
    2d80:	00002d01 	.word	0x00002d01
    2d84:	0000c37c 	.word	0x0000c37c
    2d88:	00002cd5 	.word	0x00002cd5

00002d8c <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    2d8c:	b580      	push	{r7, lr}
    2d8e:	b082      	sub	sp, #8
    2d90:	af00      	add	r7, sp, #0
    2d92:	6078      	str	r0, [r7, #4]
    2d94:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2d96:	687b      	ldr	r3, [r7, #4]
    2d98:	681a      	ldr	r2, [r3, #0]
    2d9a:	683b      	ldr	r3, [r7, #0]
    2d9c:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2d9e:	687b      	ldr	r3, [r7, #4]
    2da0:	683a      	ldr	r2, [r7, #0]
    2da2:	601a      	str	r2, [r3, #0]
}
    2da4:	46c0      	nop			; (mov r8, r8)
    2da6:	46bd      	mov	sp, r7
    2da8:	b002      	add	sp, #8
    2daa:	bd80      	pop	{r7, pc}

00002dac <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2dac:	b580      	push	{r7, lr}
    2dae:	b084      	sub	sp, #16
    2db0:	af00      	add	r7, sp, #0
    2db2:	6078      	str	r0, [r7, #4]
    2db4:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    2db6:	687b      	ldr	r3, [r7, #4]
    2db8:	681b      	ldr	r3, [r3, #0]
    2dba:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    2dbc:	683a      	ldr	r2, [r7, #0]
    2dbe:	687b      	ldr	r3, [r7, #4]
    2dc0:	0011      	movs	r1, r2
    2dc2:	0018      	movs	r0, r3
    2dc4:	4b16      	ldr	r3, [pc, #88]	; (2e20 <list_insert_at_end+0x74>)
    2dc6:	4798      	blx	r3
    2dc8:	0003      	movs	r3, r0
    2dca:	1e5a      	subs	r2, r3, #1
    2dcc:	4193      	sbcs	r3, r2
    2dce:	b2db      	uxtb	r3, r3
    2dd0:	2201      	movs	r2, #1
    2dd2:	4053      	eors	r3, r2
    2dd4:	b2db      	uxtb	r3, r3
    2dd6:	1c1a      	adds	r2, r3, #0
    2dd8:	2301      	movs	r3, #1
    2dda:	4013      	ands	r3, r2
    2ddc:	b2db      	uxtb	r3, r3
    2dde:	4911      	ldr	r1, [pc, #68]	; (2e24 <list_insert_at_end+0x78>)
    2de0:	224f      	movs	r2, #79	; 0x4f
    2de2:	0018      	movs	r0, r3
    2de4:	4b10      	ldr	r3, [pc, #64]	; (2e28 <list_insert_at_end+0x7c>)
    2de6:	4798      	blx	r3

	if (!list->head) {
    2de8:	687b      	ldr	r3, [r7, #4]
    2dea:	681b      	ldr	r3, [r3, #0]
    2dec:	2b00      	cmp	r3, #0
    2dee:	d109      	bne.n	2e04 <list_insert_at_end+0x58>
		list->head                             = (struct list_element *)element;
    2df0:	687b      	ldr	r3, [r7, #4]
    2df2:	683a      	ldr	r2, [r7, #0]
    2df4:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    2df6:	683b      	ldr	r3, [r7, #0]
    2df8:	2200      	movs	r2, #0
    2dfa:	601a      	str	r2, [r3, #0]
		return;
    2dfc:	e00c      	b.n	2e18 <list_insert_at_end+0x6c>
	}

	while (it->next) {
		it = it->next;
    2dfe:	68fb      	ldr	r3, [r7, #12]
    2e00:	681b      	ldr	r3, [r3, #0]
    2e02:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    2e04:	68fb      	ldr	r3, [r7, #12]
    2e06:	681b      	ldr	r3, [r3, #0]
    2e08:	2b00      	cmp	r3, #0
    2e0a:	d1f8      	bne.n	2dfe <list_insert_at_end+0x52>
	}
	it->next                               = (struct list_element *)element;
    2e0c:	68fb      	ldr	r3, [r7, #12]
    2e0e:	683a      	ldr	r2, [r7, #0]
    2e10:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    2e12:	683b      	ldr	r3, [r7, #0]
    2e14:	2200      	movs	r2, #0
    2e16:	601a      	str	r2, [r3, #0]
}
    2e18:	46bd      	mov	sp, r7
    2e1a:	b004      	add	sp, #16
    2e1c:	bd80      	pop	{r7, pc}
    2e1e:	46c0      	nop			; (mov r8, r8)
    2e20:	00002d01 	.word	0x00002d01
    2e24:	0000c37c 	.word	0x0000c37c
    2e28:	00002cd5 	.word	0x00002cd5

00002e2c <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    2e2c:	b580      	push	{r7, lr}
    2e2e:	b084      	sub	sp, #16
    2e30:	af00      	add	r7, sp, #0
    2e32:	6078      	str	r0, [r7, #4]
	if (list->head) {
    2e34:	687b      	ldr	r3, [r7, #4]
    2e36:	681b      	ldr	r3, [r3, #0]
    2e38:	2b00      	cmp	r3, #0
    2e3a:	d009      	beq.n	2e50 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    2e3c:	687b      	ldr	r3, [r7, #4]
    2e3e:	681b      	ldr	r3, [r3, #0]
    2e40:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    2e42:	687b      	ldr	r3, [r7, #4]
    2e44:	681b      	ldr	r3, [r3, #0]
    2e46:	681a      	ldr	r2, [r3, #0]
    2e48:	687b      	ldr	r3, [r7, #4]
    2e4a:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    2e4c:	68fb      	ldr	r3, [r7, #12]
    2e4e:	e000      	b.n	2e52 <list_remove_head+0x26>
	}

	return NULL;
    2e50:	2300      	movs	r3, #0
}
    2e52:	0018      	movs	r0, r3
    2e54:	46bd      	mov	sp, r7
    2e56:	b004      	add	sp, #16
    2e58:	bd80      	pop	{r7, pc}
	...

00002e5c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    2e5c:	b580      	push	{r7, lr}
    2e5e:	b084      	sub	sp, #16
    2e60:	af00      	add	r7, sp, #0
    2e62:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    2e64:	4b0a      	ldr	r3, [pc, #40]	; (2e90 <_sbrk+0x34>)
    2e66:	681b      	ldr	r3, [r3, #0]
    2e68:	2b00      	cmp	r3, #0
    2e6a:	d102      	bne.n	2e72 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    2e6c:	4b08      	ldr	r3, [pc, #32]	; (2e90 <_sbrk+0x34>)
    2e6e:	4a09      	ldr	r2, [pc, #36]	; (2e94 <_sbrk+0x38>)
    2e70:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    2e72:	4b07      	ldr	r3, [pc, #28]	; (2e90 <_sbrk+0x34>)
    2e74:	681b      	ldr	r3, [r3, #0]
    2e76:	60fb      	str	r3, [r7, #12]

	heap += incr;
    2e78:	4b05      	ldr	r3, [pc, #20]	; (2e90 <_sbrk+0x34>)
    2e7a:	681a      	ldr	r2, [r3, #0]
    2e7c:	687b      	ldr	r3, [r7, #4]
    2e7e:	18d2      	adds	r2, r2, r3
    2e80:	4b03      	ldr	r3, [pc, #12]	; (2e90 <_sbrk+0x34>)
    2e82:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap;
    2e84:	68fb      	ldr	r3, [r7, #12]
}
    2e86:	0018      	movs	r0, r3
    2e88:	46bd      	mov	sp, r7
    2e8a:	b004      	add	sp, #16
    2e8c:	bd80      	pop	{r7, pc}
    2e8e:	46c0      	nop			; (mov r8, r8)
    2e90:	20000210 	.word	0x20000210
    2e94:	20002670 	.word	0x20002670

00002e98 <hri_adc_wait_for_sync>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;
typedef uint8_t  hri_adc_winctrl_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw)
{
    2e98:	b580      	push	{r7, lr}
    2e9a:	b082      	sub	sp, #8
    2e9c:	af00      	add	r7, sp, #0
    2e9e:	6078      	str	r0, [r7, #4]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    2ea0:	46c0      	nop			; (mov r8, r8)
    2ea2:	687b      	ldr	r3, [r7, #4]
    2ea4:	7e5b      	ldrb	r3, [r3, #25]
    2ea6:	061b      	lsls	r3, r3, #24
    2ea8:	0fdb      	lsrs	r3, r3, #31
    2eaa:	b2db      	uxtb	r3, r3
    2eac:	2b00      	cmp	r3, #0
    2eae:	d1f8      	bne.n	2ea2 <hri_adc_wait_for_sync+0xa>
		;
}
    2eb0:	46c0      	nop			; (mov r8, r8)
    2eb2:	46bd      	mov	sp, r7
    2eb4:	b002      	add	sp, #8
    2eb6:	bd80      	pop	{r7, pc}

00002eb8 <hri_adc_get_CTRLA_reg>:
	((Adc *)hw)->CTRLA.reg |= mask;
	ADC_CRITICAL_SECTION_LEAVE();
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
    2eb8:	b580      	push	{r7, lr}
    2eba:	b084      	sub	sp, #16
    2ebc:	af00      	add	r7, sp, #0
    2ebe:	6078      	str	r0, [r7, #4]
    2ec0:	000a      	movs	r2, r1
    2ec2:	1cfb      	adds	r3, r7, #3
    2ec4:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Adc *)hw)->CTRLA.reg;
    2ec6:	230f      	movs	r3, #15
    2ec8:	18fb      	adds	r3, r7, r3
    2eca:	687a      	ldr	r2, [r7, #4]
    2ecc:	7812      	ldrb	r2, [r2, #0]
    2ece:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    2ed0:	230f      	movs	r3, #15
    2ed2:	18fb      	adds	r3, r7, r3
    2ed4:	220f      	movs	r2, #15
    2ed6:	18ba      	adds	r2, r7, r2
    2ed8:	1cf9      	adds	r1, r7, #3
    2eda:	7812      	ldrb	r2, [r2, #0]
    2edc:	7809      	ldrb	r1, [r1, #0]
    2ede:	400a      	ands	r2, r1
    2ee0:	701a      	strb	r2, [r3, #0]
	return tmp;
    2ee2:	230f      	movs	r3, #15
    2ee4:	18fb      	adds	r3, r7, r3
    2ee6:	781b      	ldrb	r3, [r3, #0]
}
    2ee8:	0018      	movs	r0, r3
    2eea:	46bd      	mov	sp, r7
    2eec:	b004      	add	sp, #16
    2eee:	bd80      	pop	{r7, pc}

00002ef0 <hri_adc_write_CTRLA_reg>:

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
    2ef0:	b580      	push	{r7, lr}
    2ef2:	b082      	sub	sp, #8
    2ef4:	af00      	add	r7, sp, #0
    2ef6:	6078      	str	r0, [r7, #4]
    2ef8:	000a      	movs	r2, r1
    2efa:	1cfb      	adds	r3, r7, #3
    2efc:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    2efe:	687b      	ldr	r3, [r7, #4]
    2f00:	1cfa      	adds	r2, r7, #3
    2f02:	7812      	ldrb	r2, [r2, #0]
    2f04:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_LEAVE();
}
    2f06:	46c0      	nop			; (mov r8, r8)
    2f08:	46bd      	mov	sp, r7
    2f0a:	b002      	add	sp, #8
    2f0c:	bd80      	pop	{r7, pc}

00002f0e <hri_adc_write_REFCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
    2f0e:	b580      	push	{r7, lr}
    2f10:	b082      	sub	sp, #8
    2f12:	af00      	add	r7, sp, #0
    2f14:	6078      	str	r0, [r7, #4]
    2f16:	000a      	movs	r2, r1
    2f18:	1cfb      	adds	r3, r7, #3
    2f1a:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    2f1c:	687b      	ldr	r3, [r7, #4]
    2f1e:	1cfa      	adds	r2, r7, #3
    2f20:	7812      	ldrb	r2, [r2, #0]
    2f22:	705a      	strb	r2, [r3, #1]
	ADC_CRITICAL_SECTION_LEAVE();
}
    2f24:	46c0      	nop			; (mov r8, r8)
    2f26:	46bd      	mov	sp, r7
    2f28:	b002      	add	sp, #8
    2f2a:	bd80      	pop	{r7, pc}

00002f2c <hri_adc_write_AVGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
    2f2c:	b580      	push	{r7, lr}
    2f2e:	b082      	sub	sp, #8
    2f30:	af00      	add	r7, sp, #0
    2f32:	6078      	str	r0, [r7, #4]
    2f34:	000a      	movs	r2, r1
    2f36:	1cfb      	adds	r3, r7, #3
    2f38:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    2f3a:	687b      	ldr	r3, [r7, #4]
    2f3c:	1cfa      	adds	r2, r7, #3
    2f3e:	7812      	ldrb	r2, [r2, #0]
    2f40:	709a      	strb	r2, [r3, #2]
	ADC_CRITICAL_SECTION_LEAVE();
}
    2f42:	46c0      	nop			; (mov r8, r8)
    2f44:	46bd      	mov	sp, r7
    2f46:	b002      	add	sp, #8
    2f48:	bd80      	pop	{r7, pc}

00002f4a <hri_adc_write_SAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
    2f4a:	b580      	push	{r7, lr}
    2f4c:	b082      	sub	sp, #8
    2f4e:	af00      	add	r7, sp, #0
    2f50:	6078      	str	r0, [r7, #4]
    2f52:	000a      	movs	r2, r1
    2f54:	1cfb      	adds	r3, r7, #3
    2f56:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    2f58:	687b      	ldr	r3, [r7, #4]
    2f5a:	1cfa      	adds	r2, r7, #3
    2f5c:	7812      	ldrb	r2, [r2, #0]
    2f5e:	70da      	strb	r2, [r3, #3]
	ADC_CRITICAL_SECTION_LEAVE();
}
    2f60:	46c0      	nop			; (mov r8, r8)
    2f62:	46bd      	mov	sp, r7
    2f64:	b002      	add	sp, #8
    2f66:	bd80      	pop	{r7, pc}

00002f68 <hri_adc_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
    2f68:	b580      	push	{r7, lr}
    2f6a:	b082      	sub	sp, #8
    2f6c:	af00      	add	r7, sp, #0
    2f6e:	6078      	str	r0, [r7, #4]
    2f70:	000a      	movs	r2, r1
    2f72:	1cbb      	adds	r3, r7, #2
    2f74:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    2f76:	687b      	ldr	r3, [r7, #4]
    2f78:	1cba      	adds	r2, r7, #2
    2f7a:	8812      	ldrh	r2, [r2, #0]
    2f7c:	809a      	strh	r2, [r3, #4]
	hri_adc_wait_for_sync(hw);
    2f7e:	687b      	ldr	r3, [r7, #4]
    2f80:	0018      	movs	r0, r3
    2f82:	4b03      	ldr	r3, [pc, #12]	; (2f90 <hri_adc_write_CTRLB_reg+0x28>)
    2f84:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	46bd      	mov	sp, r7
    2f8a:	b002      	add	sp, #8
    2f8c:	bd80      	pop	{r7, pc}
    2f8e:	46c0      	nop			; (mov r8, r8)
    2f90:	00002e99 	.word	0x00002e99

00002f94 <hri_adc_write_WINCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_WINCTRL_reg(const void *const hw, hri_adc_winctrl_reg_t data)
{
    2f94:	b580      	push	{r7, lr}
    2f96:	b082      	sub	sp, #8
    2f98:	af00      	add	r7, sp, #0
    2f9a:	6078      	str	r0, [r7, #4]
    2f9c:	000a      	movs	r2, r1
    2f9e:	1cfb      	adds	r3, r7, #3
    2fa0:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINCTRL.reg = data;
    2fa2:	687b      	ldr	r3, [r7, #4]
    2fa4:	1cfa      	adds	r2, r7, #3
    2fa6:	7812      	ldrb	r2, [r2, #0]
    2fa8:	721a      	strb	r2, [r3, #8]
	hri_adc_wait_for_sync(hw);
    2faa:	687b      	ldr	r3, [r7, #4]
    2fac:	0018      	movs	r0, r3
    2fae:	4b03      	ldr	r3, [pc, #12]	; (2fbc <hri_adc_write_WINCTRL_reg+0x28>)
    2fb0:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	46bd      	mov	sp, r7
    2fb6:	b002      	add	sp, #8
    2fb8:	bd80      	pop	{r7, pc}
    2fba:	46c0      	nop			; (mov r8, r8)
    2fbc:	00002e99 	.word	0x00002e99

00002fc0 <hri_adc_write_INPUTCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_INPUTCTRL_reg(const void *const hw, hri_adc_inputctrl_reg_t data)
{
    2fc0:	b580      	push	{r7, lr}
    2fc2:	b082      	sub	sp, #8
    2fc4:	af00      	add	r7, sp, #0
    2fc6:	6078      	str	r0, [r7, #4]
    2fc8:	6039      	str	r1, [r7, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->INPUTCTRL.reg = data;
    2fca:	687b      	ldr	r3, [r7, #4]
    2fcc:	683a      	ldr	r2, [r7, #0]
    2fce:	611a      	str	r2, [r3, #16]
	hri_adc_wait_for_sync(hw);
    2fd0:	687b      	ldr	r3, [r7, #4]
    2fd2:	0018      	movs	r0, r3
    2fd4:	4b02      	ldr	r3, [pc, #8]	; (2fe0 <hri_adc_write_INPUTCTRL_reg+0x20>)
    2fd6:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    2fd8:	46c0      	nop			; (mov r8, r8)
    2fda:	46bd      	mov	sp, r7
    2fdc:	b002      	add	sp, #8
    2fde:	bd80      	pop	{r7, pc}
    2fe0:	00002e99 	.word	0x00002e99

00002fe4 <hri_adc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_EVCTRL_reg(const void *const hw, hri_adc_evctrl_reg_t data)
{
    2fe4:	b580      	push	{r7, lr}
    2fe6:	b082      	sub	sp, #8
    2fe8:	af00      	add	r7, sp, #0
    2fea:	6078      	str	r0, [r7, #4]
    2fec:	000a      	movs	r2, r1
    2fee:	1cfb      	adds	r3, r7, #3
    2ff0:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->EVCTRL.reg = data;
    2ff2:	687b      	ldr	r3, [r7, #4]
    2ff4:	1cfa      	adds	r2, r7, #3
    2ff6:	7812      	ldrb	r2, [r2, #0]
    2ff8:	751a      	strb	r2, [r3, #20]
	ADC_CRITICAL_SECTION_LEAVE();
}
    2ffa:	46c0      	nop			; (mov r8, r8)
    2ffc:	46bd      	mov	sp, r7
    2ffe:	b002      	add	sp, #8
    3000:	bd80      	pop	{r7, pc}
	...

00003004 <hri_adc_write_WINLT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
    3004:	b580      	push	{r7, lr}
    3006:	b082      	sub	sp, #8
    3008:	af00      	add	r7, sp, #0
    300a:	6078      	str	r0, [r7, #4]
    300c:	000a      	movs	r2, r1
    300e:	1cbb      	adds	r3, r7, #2
    3010:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    3012:	687b      	ldr	r3, [r7, #4]
    3014:	1cba      	adds	r2, r7, #2
    3016:	8812      	ldrh	r2, [r2, #0]
    3018:	839a      	strh	r2, [r3, #28]
	hri_adc_wait_for_sync(hw);
    301a:	687b      	ldr	r3, [r7, #4]
    301c:	0018      	movs	r0, r3
    301e:	4b03      	ldr	r3, [pc, #12]	; (302c <hri_adc_write_WINLT_reg+0x28>)
    3020:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    3022:	46c0      	nop			; (mov r8, r8)
    3024:	46bd      	mov	sp, r7
    3026:	b002      	add	sp, #8
    3028:	bd80      	pop	{r7, pc}
    302a:	46c0      	nop			; (mov r8, r8)
    302c:	00002e99 	.word	0x00002e99

00003030 <hri_adc_write_WINUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
    3030:	b580      	push	{r7, lr}
    3032:	b082      	sub	sp, #8
    3034:	af00      	add	r7, sp, #0
    3036:	6078      	str	r0, [r7, #4]
    3038:	000a      	movs	r2, r1
    303a:	1cbb      	adds	r3, r7, #2
    303c:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    303e:	687b      	ldr	r3, [r7, #4]
    3040:	1cba      	adds	r2, r7, #2
    3042:	8812      	ldrh	r2, [r2, #0]
    3044:	841a      	strh	r2, [r3, #32]
	hri_adc_wait_for_sync(hw);
    3046:	687b      	ldr	r3, [r7, #4]
    3048:	0018      	movs	r0, r3
    304a:	4b03      	ldr	r3, [pc, #12]	; (3058 <hri_adc_write_WINUT_reg+0x28>)
    304c:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    304e:	46c0      	nop			; (mov r8, r8)
    3050:	46bd      	mov	sp, r7
    3052:	b002      	add	sp, #8
    3054:	bd80      	pop	{r7, pc}
    3056:	46c0      	nop			; (mov r8, r8)
    3058:	00002e99 	.word	0x00002e99

0000305c <hri_adc_write_GAINCORR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
    305c:	b580      	push	{r7, lr}
    305e:	b082      	sub	sp, #8
    3060:	af00      	add	r7, sp, #0
    3062:	6078      	str	r0, [r7, #4]
    3064:	000a      	movs	r2, r1
    3066:	1cbb      	adds	r3, r7, #2
    3068:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    306a:	687b      	ldr	r3, [r7, #4]
    306c:	1cba      	adds	r2, r7, #2
    306e:	8812      	ldrh	r2, [r2, #0]
    3070:	849a      	strh	r2, [r3, #36]	; 0x24
	ADC_CRITICAL_SECTION_LEAVE();
}
    3072:	46c0      	nop			; (mov r8, r8)
    3074:	46bd      	mov	sp, r7
    3076:	b002      	add	sp, #8
    3078:	bd80      	pop	{r7, pc}

0000307a <hri_adc_write_OFFSETCORR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
    307a:	b580      	push	{r7, lr}
    307c:	b082      	sub	sp, #8
    307e:	af00      	add	r7, sp, #0
    3080:	6078      	str	r0, [r7, #4]
    3082:	000a      	movs	r2, r1
    3084:	1cbb      	adds	r3, r7, #2
    3086:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    3088:	687b      	ldr	r3, [r7, #4]
    308a:	1cba      	adds	r2, r7, #2
    308c:	8812      	ldrh	r2, [r2, #0]
    308e:	84da      	strh	r2, [r3, #38]	; 0x26
	ADC_CRITICAL_SECTION_LEAVE();
}
    3090:	46c0      	nop			; (mov r8, r8)
    3092:	46bd      	mov	sp, r7
    3094:	b002      	add	sp, #8
    3096:	bd80      	pop	{r7, pc}

00003098 <hri_adc_write_CALIB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
    3098:	b580      	push	{r7, lr}
    309a:	b082      	sub	sp, #8
    309c:	af00      	add	r7, sp, #0
    309e:	6078      	str	r0, [r7, #4]
    30a0:	000a      	movs	r2, r1
    30a2:	1cbb      	adds	r3, r7, #2
    30a4:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    30a6:	687b      	ldr	r3, [r7, #4]
    30a8:	1cba      	adds	r2, r7, #2
    30aa:	8812      	ldrh	r2, [r2, #0]
    30ac:	851a      	strh	r2, [r3, #40]	; 0x28
	ADC_CRITICAL_SECTION_LEAVE();
}
    30ae:	46c0      	nop			; (mov r8, r8)
    30b0:	46bd      	mov	sp, r7
    30b2:	b002      	add	sp, #8
    30b4:	bd80      	pop	{r7, pc}

000030b6 <hri_adc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
    30b6:	b580      	push	{r7, lr}
    30b8:	b082      	sub	sp, #8
    30ba:	af00      	add	r7, sp, #0
    30bc:	6078      	str	r0, [r7, #4]
    30be:	000a      	movs	r2, r1
    30c0:	1cfb      	adds	r3, r7, #3
    30c2:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
    30c4:	687b      	ldr	r3, [r7, #4]
    30c6:	1cfa      	adds	r2, r7, #3
    30c8:	212a      	movs	r1, #42	; 0x2a
    30ca:	7812      	ldrb	r2, [r2, #0]
    30cc:	545a      	strb	r2, [r3, r1]
	ADC_CRITICAL_SECTION_LEAVE();
}
    30ce:	46c0      	nop			; (mov r8, r8)
    30d0:	46bd      	mov	sp, r7
    30d2:	b002      	add	sp, #8
    30d4:	bd80      	pop	{r7, pc}

000030d6 <_adc_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
    30d6:	b580      	push	{r7, lr}
    30d8:	b082      	sub	sp, #8
    30da:	af00      	add	r7, sp, #0
    30dc:	6078      	str	r0, [r7, #4]
	(void)hw;
	return 0;
    30de:	2300      	movs	r3, #0
}
    30e0:	0018      	movs	r0, r3
    30e2:	46bd      	mov	sp, r7
    30e4:	b002      	add	sp, #8
    30e6:	bd80      	pop	{r7, pc}

000030e8 <_adc_get_regs>:
/** \brief Return the pointer to register settings of specific ADC
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific ADC.
 */
static uint8_t _adc_get_regs(const uint32_t hw_addr)
{
    30e8:	b590      	push	{r4, r7, lr}
    30ea:	b085      	sub	sp, #20
    30ec:	af00      	add	r7, sp, #0
    30ee:	6078      	str	r0, [r7, #4]
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    30f0:	687b      	ldr	r3, [r7, #4]
    30f2:	220e      	movs	r2, #14
    30f4:	18bc      	adds	r4, r7, r2
    30f6:	0018      	movs	r0, r3
    30f8:	4b18      	ldr	r3, [pc, #96]	; (315c <_adc_get_regs+0x74>)
    30fa:	4798      	blx	r3
    30fc:	0003      	movs	r3, r0
    30fe:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    3100:	230f      	movs	r3, #15
    3102:	18fb      	adds	r3, r7, r3
    3104:	2200      	movs	r2, #0
    3106:	701a      	strb	r2, [r3, #0]
    3108:	e018      	b.n	313c <_adc_get_regs+0x54>
		if (_adcs[i].number == n) {
    310a:	230f      	movs	r3, #15
    310c:	18fb      	adds	r3, r7, r3
    310e:	781a      	ldrb	r2, [r3, #0]
    3110:	4913      	ldr	r1, [pc, #76]	; (3160 <_adc_get_regs+0x78>)
    3112:	0013      	movs	r3, r2
    3114:	00db      	lsls	r3, r3, #3
    3116:	1a9b      	subs	r3, r3, r2
    3118:	009b      	lsls	r3, r3, #2
    311a:	5c5b      	ldrb	r3, [r3, r1]
    311c:	220e      	movs	r2, #14
    311e:	18ba      	adds	r2, r7, r2
    3120:	7812      	ldrb	r2, [r2, #0]
    3122:	429a      	cmp	r2, r3
    3124:	d103      	bne.n	312e <_adc_get_regs+0x46>
			return i;
    3126:	230f      	movs	r3, #15
    3128:	18fb      	adds	r3, r7, r3
    312a:	781b      	ldrb	r3, [r3, #0]
    312c:	e012      	b.n	3154 <_adc_get_regs+0x6c>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    312e:	230f      	movs	r3, #15
    3130:	18fb      	adds	r3, r7, r3
    3132:	781a      	ldrb	r2, [r3, #0]
    3134:	230f      	movs	r3, #15
    3136:	18fb      	adds	r3, r7, r3
    3138:	3201      	adds	r2, #1
    313a:	701a      	strb	r2, [r3, #0]
    313c:	230f      	movs	r3, #15
    313e:	18fb      	adds	r3, r7, r3
    3140:	781b      	ldrb	r3, [r3, #0]
    3142:	2b00      	cmp	r3, #0
    3144:	d0e1      	beq.n	310a <_adc_get_regs+0x22>
		}
	}

	ASSERT(false);
    3146:	4b07      	ldr	r3, [pc, #28]	; (3164 <_adc_get_regs+0x7c>)
    3148:	227f      	movs	r2, #127	; 0x7f
    314a:	0019      	movs	r1, r3
    314c:	2000      	movs	r0, #0
    314e:	4b06      	ldr	r3, [pc, #24]	; (3168 <_adc_get_regs+0x80>)
    3150:	4798      	blx	r3
	return 0;
    3152:	2300      	movs	r3, #0
}
    3154:	0018      	movs	r0, r3
    3156:	46bd      	mov	sp, r7
    3158:	b005      	add	sp, #20
    315a:	bd90      	pop	{r4, r7, pc}
    315c:	000030d7 	.word	0x000030d7
    3160:	20000000 	.word	0x20000000
    3164:	0000c39c 	.word	0x0000c39c
    3168:	00002cd5 	.word	0x00002cd5

0000316c <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i  The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    316c:	b5f0      	push	{r4, r5, r6, r7, lr}
    316e:	b085      	sub	sp, #20
    3170:	af00      	add	r7, sp, #0
    3172:	6078      	str	r0, [r7, #4]
    3174:	000a      	movs	r2, r1
    3176:	1cfb      	adds	r3, r7, #3
    3178:	701a      	strb	r2, [r3, #0]
	ASSERT(hw == ADC);
    317a:	687b      	ldr	r3, [r7, #4]
    317c:	4a88      	ldr	r2, [pc, #544]	; (33a0 <_adc_init+0x234>)
    317e:	4694      	mov	ip, r2
    3180:	4463      	add	r3, ip
    3182:	425a      	negs	r2, r3
    3184:	4153      	adcs	r3, r2
    3186:	b2db      	uxtb	r3, r3
    3188:	4986      	ldr	r1, [pc, #536]	; (33a4 <_adc_init+0x238>)
    318a:	2294      	movs	r2, #148	; 0x94
    318c:	0018      	movs	r0, r3
    318e:	4b86      	ldr	r3, [pc, #536]	; (33a8 <_adc_init+0x23c>)
    3190:	4798      	blx	r3

	uint16_t calib_reg;

	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
    3192:	4b86      	ldr	r3, [pc, #536]	; (33ac <_adc_init+0x240>)
    3194:	681b      	ldr	r3, [r3, #0]
    3196:	08db      	lsrs	r3, r3, #3
    3198:	b29b      	uxth	r3, r3
    319a:	021b      	lsls	r3, r3, #8
    319c:	b29a      	uxth	r2, r3
    319e:	23e0      	movs	r3, #224	; 0xe0
    31a0:	00db      	lsls	r3, r3, #3
    31a2:	4013      	ands	r3, r2
    31a4:	b299      	uxth	r1, r3
	            | ADC_CALIB_LINEARITY_CAL((*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos));
    31a6:	4b82      	ldr	r3, [pc, #520]	; (33b0 <_adc_init+0x244>)
    31a8:	685c      	ldr	r4, [r3, #4]
    31aa:	681b      	ldr	r3, [r3, #0]
    31ac:	0162      	lsls	r2, r4, #5
    31ae:	0edd      	lsrs	r5, r3, #27
    31b0:	4315      	orrs	r5, r2
    31b2:	0ee6      	lsrs	r6, r4, #27
    31b4:	b2ab      	uxth	r3, r5
    31b6:	22ff      	movs	r2, #255	; 0xff
    31b8:	4013      	ands	r3, r2
    31ba:	b29a      	uxth	r2, r3
	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
    31bc:	230e      	movs	r3, #14
    31be:	18fb      	adds	r3, r7, r3
    31c0:	430a      	orrs	r2, r1
    31c2:	801a      	strh	r2, [r3, #0]

	hri_adc_wait_for_sync(hw);
    31c4:	687b      	ldr	r3, [r7, #4]
    31c6:	0018      	movs	r0, r3
    31c8:	4b7a      	ldr	r3, [pc, #488]	; (33b4 <_adc_init+0x248>)
    31ca:	4798      	blx	r3
	if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    31cc:	687b      	ldr	r3, [r7, #4]
    31ce:	2102      	movs	r1, #2
    31d0:	0018      	movs	r0, r3
    31d2:	4b79      	ldr	r3, [pc, #484]	; (33b8 <_adc_init+0x24c>)
    31d4:	4798      	blx	r3
    31d6:	1e03      	subs	r3, r0, #0
    31d8:	d008      	beq.n	31ec <_adc_init+0x80>
		hri_adc_write_CTRLA_reg(hw, 0);
    31da:	687b      	ldr	r3, [r7, #4]
    31dc:	2100      	movs	r1, #0
    31de:	0018      	movs	r0, r3
    31e0:	4b76      	ldr	r3, [pc, #472]	; (33bc <_adc_init+0x250>)
    31e2:	4798      	blx	r3
		hri_adc_wait_for_sync(hw);
    31e4:	687b      	ldr	r3, [r7, #4]
    31e6:	0018      	movs	r0, r3
    31e8:	4b72      	ldr	r3, [pc, #456]	; (33b4 <_adc_init+0x248>)
    31ea:	4798      	blx	r3
	}
	hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
    31ec:	687b      	ldr	r3, [r7, #4]
    31ee:	2101      	movs	r1, #1
    31f0:	0018      	movs	r0, r3
    31f2:	4b72      	ldr	r3, [pc, #456]	; (33bc <_adc_init+0x250>)
    31f4:	4798      	blx	r3
	hri_adc_wait_for_sync(hw);
    31f6:	687b      	ldr	r3, [r7, #4]
    31f8:	0018      	movs	r0, r3
    31fa:	4b6e      	ldr	r3, [pc, #440]	; (33b4 <_adc_init+0x248>)
    31fc:	4798      	blx	r3

	hri_adc_write_CALIB_reg(hw, calib_reg);
    31fe:	230e      	movs	r3, #14
    3200:	18fb      	adds	r3, r7, r3
    3202:	881a      	ldrh	r2, [r3, #0]
    3204:	687b      	ldr	r3, [r7, #4]
    3206:	0011      	movs	r1, r2
    3208:	0018      	movs	r0, r3
    320a:	4b6d      	ldr	r3, [pc, #436]	; (33c0 <_adc_init+0x254>)
    320c:	4798      	blx	r3
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    320e:	1cfb      	adds	r3, r7, #3
    3210:	781a      	ldrb	r2, [r3, #0]
    3212:	496c      	ldr	r1, [pc, #432]	; (33c4 <_adc_init+0x258>)
    3214:	0013      	movs	r3, r2
    3216:	00db      	lsls	r3, r3, #3
    3218:	1a9b      	subs	r3, r3, r2
    321a:	009b      	lsls	r3, r3, #2
    321c:	18cb      	adds	r3, r1, r3
    321e:	3302      	adds	r3, #2
    3220:	781a      	ldrb	r2, [r3, #0]
    3222:	687b      	ldr	r3, [r7, #4]
    3224:	0011      	movs	r1, r2
    3226:	0018      	movs	r0, r3
    3228:	4b67      	ldr	r3, [pc, #412]	; (33c8 <_adc_init+0x25c>)
    322a:	4798      	blx	r3
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    322c:	1cfb      	adds	r3, r7, #3
    322e:	781a      	ldrb	r2, [r3, #0]
    3230:	4964      	ldr	r1, [pc, #400]	; (33c4 <_adc_init+0x258>)
    3232:	0013      	movs	r3, r2
    3234:	00db      	lsls	r3, r3, #3
    3236:	1a9b      	subs	r3, r3, r2
    3238:	009b      	lsls	r3, r3, #2
    323a:	18cb      	adds	r3, r1, r3
    323c:	3303      	adds	r3, #3
    323e:	781a      	ldrb	r2, [r3, #0]
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	0011      	movs	r1, r2
    3244:	0018      	movs	r0, r3
    3246:	4b61      	ldr	r3, [pc, #388]	; (33cc <_adc_init+0x260>)
    3248:	4798      	blx	r3
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    324a:	1cfb      	adds	r3, r7, #3
    324c:	781a      	ldrb	r2, [r3, #0]
    324e:	495d      	ldr	r1, [pc, #372]	; (33c4 <_adc_init+0x258>)
    3250:	0013      	movs	r3, r2
    3252:	00db      	lsls	r3, r3, #3
    3254:	1a9b      	subs	r3, r3, r2
    3256:	009b      	lsls	r3, r3, #2
    3258:	18cb      	adds	r3, r1, r3
    325a:	3304      	adds	r3, #4
    325c:	781a      	ldrb	r2, [r3, #0]
    325e:	687b      	ldr	r3, [r7, #4]
    3260:	0011      	movs	r1, r2
    3262:	0018      	movs	r0, r3
    3264:	4b5a      	ldr	r3, [pc, #360]	; (33d0 <_adc_init+0x264>)
    3266:	4798      	blx	r3
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    3268:	1cfb      	adds	r3, r7, #3
    326a:	781a      	ldrb	r2, [r3, #0]
    326c:	4955      	ldr	r1, [pc, #340]	; (33c4 <_adc_init+0x258>)
    326e:	0013      	movs	r3, r2
    3270:	00db      	lsls	r3, r3, #3
    3272:	1a9b      	subs	r3, r3, r2
    3274:	009b      	lsls	r3, r3, #2
    3276:	18cb      	adds	r3, r1, r3
    3278:	3310      	adds	r3, #16
    327a:	781a      	ldrb	r2, [r3, #0]
    327c:	687b      	ldr	r3, [r7, #4]
    327e:	0011      	movs	r1, r2
    3280:	0018      	movs	r0, r3
    3282:	4b54      	ldr	r3, [pc, #336]	; (33d4 <_adc_init+0x268>)
    3284:	4798      	blx	r3
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    3286:	1cfb      	adds	r3, r7, #3
    3288:	781a      	ldrb	r2, [r3, #0]
    328a:	494e      	ldr	r1, [pc, #312]	; (33c4 <_adc_init+0x258>)
    328c:	0013      	movs	r3, r2
    328e:	00db      	lsls	r3, r3, #3
    3290:	1a9b      	subs	r3, r3, r2
    3292:	009b      	lsls	r3, r3, #2
    3294:	18cb      	adds	r3, r1, r3
    3296:	3316      	adds	r3, #22
    3298:	881a      	ldrh	r2, [r3, #0]
    329a:	687b      	ldr	r3, [r7, #4]
    329c:	0011      	movs	r1, r2
    329e:	0018      	movs	r0, r3
    32a0:	4b4d      	ldr	r3, [pc, #308]	; (33d8 <_adc_init+0x26c>)
    32a2:	4798      	blx	r3
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    32a4:	1cfb      	adds	r3, r7, #3
    32a6:	781a      	ldrb	r2, [r3, #0]
    32a8:	4946      	ldr	r1, [pc, #280]	; (33c4 <_adc_init+0x258>)
    32aa:	0013      	movs	r3, r2
    32ac:	00db      	lsls	r3, r3, #3
    32ae:	1a9b      	subs	r3, r3, r2
    32b0:	009b      	lsls	r3, r3, #2
    32b2:	18cb      	adds	r3, r1, r3
    32b4:	3318      	adds	r3, #24
    32b6:	881a      	ldrh	r2, [r3, #0]
    32b8:	687b      	ldr	r3, [r7, #4]
    32ba:	0011      	movs	r1, r2
    32bc:	0018      	movs	r0, r3
    32be:	4b47      	ldr	r3, [pc, #284]	; (33dc <_adc_init+0x270>)
    32c0:	4798      	blx	r3
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    32c2:	1cfb      	adds	r3, r7, #3
    32c4:	781a      	ldrb	r2, [r3, #0]
    32c6:	493f      	ldr	r1, [pc, #252]	; (33c4 <_adc_init+0x258>)
    32c8:	0013      	movs	r3, r2
    32ca:	00db      	lsls	r3, r3, #3
    32cc:	1a9b      	subs	r3, r3, r2
    32ce:	009b      	lsls	r3, r3, #2
    32d0:	18cb      	adds	r3, r1, r3
    32d2:	331a      	adds	r3, #26
    32d4:	781a      	ldrb	r2, [r3, #0]
    32d6:	687b      	ldr	r3, [r7, #4]
    32d8:	0011      	movs	r1, r2
    32da:	0018      	movs	r0, r3
    32dc:	4b40      	ldr	r3, [pc, #256]	; (33e0 <_adc_init+0x274>)
    32de:	4798      	blx	r3
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    32e0:	1cfb      	adds	r3, r7, #3
    32e2:	781a      	ldrb	r2, [r3, #0]
    32e4:	4937      	ldr	r1, [pc, #220]	; (33c4 <_adc_init+0x258>)
    32e6:	0013      	movs	r3, r2
    32e8:	00db      	lsls	r3, r3, #3
    32ea:	1a9b      	subs	r3, r3, r2
    32ec:	009b      	lsls	r3, r3, #2
    32ee:	18cb      	adds	r3, r1, r3
    32f0:	3306      	adds	r3, #6
    32f2:	881a      	ldrh	r2, [r3, #0]
    32f4:	687b      	ldr	r3, [r7, #4]
    32f6:	0011      	movs	r1, r2
    32f8:	0018      	movs	r0, r3
    32fa:	4b3a      	ldr	r3, [pc, #232]	; (33e4 <_adc_init+0x278>)
    32fc:	4798      	blx	r3
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    32fe:	1cfb      	adds	r3, r7, #3
    3300:	781a      	ldrb	r2, [r3, #0]
    3302:	4930      	ldr	r1, [pc, #192]	; (33c4 <_adc_init+0x258>)
    3304:	0013      	movs	r3, r2
    3306:	00db      	lsls	r3, r3, #3
    3308:	1a9b      	subs	r3, r3, r2
    330a:	009b      	lsls	r3, r3, #2
    330c:	18cb      	adds	r3, r1, r3
    330e:	330c      	adds	r3, #12
    3310:	681a      	ldr	r2, [r3, #0]
    3312:	687b      	ldr	r3, [r7, #4]
    3314:	0011      	movs	r1, r2
    3316:	0018      	movs	r0, r3
    3318:	4b33      	ldr	r3, [pc, #204]	; (33e8 <_adc_init+0x27c>)
    331a:	4798      	blx	r3
	hri_adc_write_WINCTRL_reg(hw, _adcs[i].win_ctrl);
    331c:	1cfb      	adds	r3, r7, #3
    331e:	781a      	ldrb	r2, [r3, #0]
    3320:	4928      	ldr	r1, [pc, #160]	; (33c4 <_adc_init+0x258>)
    3322:	0013      	movs	r3, r2
    3324:	00db      	lsls	r3, r3, #3
    3326:	1a9b      	subs	r3, r3, r2
    3328:	009b      	lsls	r3, r3, #2
    332a:	18cb      	adds	r3, r1, r3
    332c:	3308      	adds	r3, #8
    332e:	781a      	ldrb	r2, [r3, #0]
    3330:	687b      	ldr	r3, [r7, #4]
    3332:	0011      	movs	r1, r2
    3334:	0018      	movs	r0, r3
    3336:	4b2d      	ldr	r3, [pc, #180]	; (33ec <_adc_init+0x280>)
    3338:	4798      	blx	r3
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    333a:	1cfb      	adds	r3, r7, #3
    333c:	781a      	ldrb	r2, [r3, #0]
    333e:	4921      	ldr	r1, [pc, #132]	; (33c4 <_adc_init+0x258>)
    3340:	0013      	movs	r3, r2
    3342:	00db      	lsls	r3, r3, #3
    3344:	1a9b      	subs	r3, r3, r2
    3346:	009b      	lsls	r3, r3, #2
    3348:	18cb      	adds	r3, r1, r3
    334a:	3312      	adds	r3, #18
    334c:	881a      	ldrh	r2, [r3, #0]
    334e:	687b      	ldr	r3, [r7, #4]
    3350:	0011      	movs	r1, r2
    3352:	0018      	movs	r0, r3
    3354:	4b26      	ldr	r3, [pc, #152]	; (33f0 <_adc_init+0x284>)
    3356:	4798      	blx	r3
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    3358:	1cfb      	adds	r3, r7, #3
    335a:	781a      	ldrb	r2, [r3, #0]
    335c:	4919      	ldr	r1, [pc, #100]	; (33c4 <_adc_init+0x258>)
    335e:	0013      	movs	r3, r2
    3360:	00db      	lsls	r3, r3, #3
    3362:	1a9b      	subs	r3, r3, r2
    3364:	009b      	lsls	r3, r3, #2
    3366:	18cb      	adds	r3, r1, r3
    3368:	3314      	adds	r3, #20
    336a:	881a      	ldrh	r2, [r3, #0]
    336c:	687b      	ldr	r3, [r7, #4]
    336e:	0011      	movs	r1, r2
    3370:	0018      	movs	r0, r3
    3372:	4b20      	ldr	r3, [pc, #128]	; (33f4 <_adc_init+0x288>)
    3374:	4798      	blx	r3
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    3376:	1cfb      	adds	r3, r7, #3
    3378:	781a      	ldrb	r2, [r3, #0]
    337a:	4912      	ldr	r1, [pc, #72]	; (33c4 <_adc_init+0x258>)
    337c:	0013      	movs	r3, r2
    337e:	00db      	lsls	r3, r3, #3
    3380:	1a9b      	subs	r3, r3, r2
    3382:	009b      	lsls	r3, r3, #2
    3384:	18cb      	adds	r3, r1, r3
    3386:	3301      	adds	r3, #1
    3388:	781a      	ldrb	r2, [r3, #0]
    338a:	687b      	ldr	r3, [r7, #4]
    338c:	0011      	movs	r1, r2
    338e:	0018      	movs	r0, r3
    3390:	4b0a      	ldr	r3, [pc, #40]	; (33bc <_adc_init+0x250>)
    3392:	4798      	blx	r3

	return ERR_NONE;
    3394:	2300      	movs	r3, #0
}
    3396:	0018      	movs	r0, r3
    3398:	46bd      	mov	sp, r7
    339a:	b005      	add	sp, #20
    339c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	bdffc000 	.word	0xbdffc000
    33a4:	0000c39c 	.word	0x0000c39c
    33a8:	00002cd5 	.word	0x00002cd5
    33ac:	00806024 	.word	0x00806024
    33b0:	00806020 	.word	0x00806020
    33b4:	00002e99 	.word	0x00002e99
    33b8:	00002eb9 	.word	0x00002eb9
    33bc:	00002ef1 	.word	0x00002ef1
    33c0:	00003099 	.word	0x00003099
    33c4:	20000000 	.word	0x20000000
    33c8:	00002f0f 	.word	0x00002f0f
    33cc:	00002f2d 	.word	0x00002f2d
    33d0:	00002f4b 	.word	0x00002f4b
    33d4:	00002fe5 	.word	0x00002fe5
    33d8:	0000305d 	.word	0x0000305d
    33dc:	0000307b 	.word	0x0000307b
    33e0:	000030b7 	.word	0x000030b7
    33e4:	00002f69 	.word	0x00002f69
    33e8:	00002fc1 	.word	0x00002fc1
    33ec:	00002f95 	.word	0x00002f95
    33f0:	00003005 	.word	0x00003005
    33f4:	00003031 	.word	0x00003031

000033f8 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    33f8:	b580      	push	{r7, lr}
    33fa:	b082      	sub	sp, #8
    33fc:	af00      	add	r7, sp, #0
    33fe:	6078      	str	r0, [r7, #4]
    3400:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    3402:	687b      	ldr	r3, [r7, #4]
    3404:	1e5a      	subs	r2, r3, #1
    3406:	4193      	sbcs	r3, r2
    3408:	b2db      	uxtb	r3, r3
    340a:	490c      	ldr	r1, [pc, #48]	; (343c <_adc_sync_init+0x44>)
    340c:	22c5      	movs	r2, #197	; 0xc5
    340e:	0018      	movs	r0, r3
    3410:	4b0b      	ldr	r3, [pc, #44]	; (3440 <_adc_sync_init+0x48>)
    3412:	4798      	blx	r3

	device->hw = hw;
    3414:	687b      	ldr	r3, [r7, #4]
    3416:	683a      	ldr	r2, [r7, #0]
    3418:	601a      	str	r2, [r3, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    341a:	683b      	ldr	r3, [r7, #0]
    341c:	0018      	movs	r0, r3
    341e:	4b09      	ldr	r3, [pc, #36]	; (3444 <_adc_sync_init+0x4c>)
    3420:	4798      	blx	r3
    3422:	0003      	movs	r3, r0
    3424:	001a      	movs	r2, r3
    3426:	683b      	ldr	r3, [r7, #0]
    3428:	0011      	movs	r1, r2
    342a:	0018      	movs	r0, r3
    342c:	4b06      	ldr	r3, [pc, #24]	; (3448 <_adc_sync_init+0x50>)
    342e:	4798      	blx	r3
    3430:	0003      	movs	r3, r0
}
    3432:	0018      	movs	r0, r3
    3434:	46bd      	mov	sp, r7
    3436:	b002      	add	sp, #8
    3438:	bd80      	pop	{r7, pc}
    343a:	46c0      	nop			; (mov r8, r8)
    343c:	0000c39c 	.word	0x0000c39c
    3440:	00002cd5 	.word	0x00002cd5
    3444:	000030e9 	.word	0x000030e9
    3448:	0000316d 	.word	0x0000316d

0000344c <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    344c:	b590      	push	{r4, r7, lr}
    344e:	b083      	sub	sp, #12
    3450:	af00      	add	r7, sp, #0
    3452:	6039      	str	r1, [r7, #0]
    3454:	0011      	movs	r1, r2
    3456:	1dbb      	adds	r3, r7, #6
    3458:	1c02      	adds	r2, r0, #0
    345a:	801a      	strh	r2, [r3, #0]
    345c:	1d7b      	adds	r3, r7, #5
    345e:	1c0a      	adds	r2, r1, #0
    3460:	701a      	strb	r2, [r3, #0]
	switch (power) {
    3462:	1d7b      	adds	r3, r7, #5
    3464:	781b      	ldrb	r3, [r3, #0]
    3466:	3b04      	subs	r3, #4
    3468:	2b04      	cmp	r3, #4
    346a:	d859      	bhi.n	3520 <_get_cycles_for_us_internal+0xd4>
    346c:	009a      	lsls	r2, r3, #2
    346e:	4b34      	ldr	r3, [pc, #208]	; (3540 <_get_cycles_for_us_internal+0xf4>)
    3470:	18d3      	adds	r3, r2, r3
    3472:	681b      	ldr	r3, [r3, #0]
    3474:	469f      	mov	pc, r3
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    3476:	1dbb      	adds	r3, r7, #6
    3478:	881c      	ldrh	r4, [r3, #0]
    347a:	683a      	ldr	r2, [r7, #0]
    347c:	4b31      	ldr	r3, [pc, #196]	; (3544 <_get_cycles_for_us_internal+0xf8>)
    347e:	4932      	ldr	r1, [pc, #200]	; (3548 <_get_cycles_for_us_internal+0xfc>)
    3480:	0010      	movs	r0, r2
    3482:	4798      	blx	r3
    3484:	0003      	movs	r3, r0
    3486:	4363      	muls	r3, r4
    3488:	1e5a      	subs	r2, r3, #1
    348a:	4b2e      	ldr	r3, [pc, #184]	; (3544 <_get_cycles_for_us_internal+0xf8>)
    348c:	210a      	movs	r1, #10
    348e:	0010      	movs	r0, r2
    3490:	4798      	blx	r3
    3492:	0003      	movs	r3, r0
    3494:	3301      	adds	r3, #1
    3496:	e04e      	b.n	3536 <_get_cycles_for_us_internal+0xea>
	case 7:
		return (us * (freq / 10000) - 1) / 100 + 1;
    3498:	1dbb      	adds	r3, r7, #6
    349a:	881c      	ldrh	r4, [r3, #0]
    349c:	683a      	ldr	r2, [r7, #0]
    349e:	4b29      	ldr	r3, [pc, #164]	; (3544 <_get_cycles_for_us_internal+0xf8>)
    34a0:	492a      	ldr	r1, [pc, #168]	; (354c <_get_cycles_for_us_internal+0x100>)
    34a2:	0010      	movs	r0, r2
    34a4:	4798      	blx	r3
    34a6:	0003      	movs	r3, r0
    34a8:	4363      	muls	r3, r4
    34aa:	1e5a      	subs	r2, r3, #1
    34ac:	4b25      	ldr	r3, [pc, #148]	; (3544 <_get_cycles_for_us_internal+0xf8>)
    34ae:	2164      	movs	r1, #100	; 0x64
    34b0:	0010      	movs	r0, r2
    34b2:	4798      	blx	r3
    34b4:	0003      	movs	r3, r0
    34b6:	3301      	adds	r3, #1
    34b8:	e03d      	b.n	3536 <_get_cycles_for_us_internal+0xea>
	case 6:
		return (us * (freq / 1000) - 1) / 1000 + 1;
    34ba:	1dbb      	adds	r3, r7, #6
    34bc:	881c      	ldrh	r4, [r3, #0]
    34be:	6838      	ldr	r0, [r7, #0]
    34c0:	4b20      	ldr	r3, [pc, #128]	; (3544 <_get_cycles_for_us_internal+0xf8>)
    34c2:	22fa      	movs	r2, #250	; 0xfa
    34c4:	0091      	lsls	r1, r2, #2
    34c6:	4798      	blx	r3
    34c8:	0003      	movs	r3, r0
    34ca:	4363      	muls	r3, r4
    34cc:	1e58      	subs	r0, r3, #1
    34ce:	4b1d      	ldr	r3, [pc, #116]	; (3544 <_get_cycles_for_us_internal+0xf8>)
    34d0:	22fa      	movs	r2, #250	; 0xfa
    34d2:	0091      	lsls	r1, r2, #2
    34d4:	4798      	blx	r3
    34d6:	0003      	movs	r3, r0
    34d8:	3301      	adds	r3, #1
    34da:	e02c      	b.n	3536 <_get_cycles_for_us_internal+0xea>
	case 5:
		return (us * (freq / 100) - 1) / 10000 + 1;
    34dc:	1dbb      	adds	r3, r7, #6
    34de:	881c      	ldrh	r4, [r3, #0]
    34e0:	683a      	ldr	r2, [r7, #0]
    34e2:	4b18      	ldr	r3, [pc, #96]	; (3544 <_get_cycles_for_us_internal+0xf8>)
    34e4:	2164      	movs	r1, #100	; 0x64
    34e6:	0010      	movs	r0, r2
    34e8:	4798      	blx	r3
    34ea:	0003      	movs	r3, r0
    34ec:	4363      	muls	r3, r4
    34ee:	1e5a      	subs	r2, r3, #1
    34f0:	4b14      	ldr	r3, [pc, #80]	; (3544 <_get_cycles_for_us_internal+0xf8>)
    34f2:	4916      	ldr	r1, [pc, #88]	; (354c <_get_cycles_for_us_internal+0x100>)
    34f4:	0010      	movs	r0, r2
    34f6:	4798      	blx	r3
    34f8:	0003      	movs	r3, r0
    34fa:	3301      	adds	r3, #1
    34fc:	e01b      	b.n	3536 <_get_cycles_for_us_internal+0xea>
	case 4:
		return (us * (freq / 10) - 1) / 100000 + 1;
    34fe:	1dbb      	adds	r3, r7, #6
    3500:	881c      	ldrh	r4, [r3, #0]
    3502:	683a      	ldr	r2, [r7, #0]
    3504:	4b0f      	ldr	r3, [pc, #60]	; (3544 <_get_cycles_for_us_internal+0xf8>)
    3506:	210a      	movs	r1, #10
    3508:	0010      	movs	r0, r2
    350a:	4798      	blx	r3
    350c:	0003      	movs	r3, r0
    350e:	4363      	muls	r3, r4
    3510:	1e5a      	subs	r2, r3, #1
    3512:	4b0c      	ldr	r3, [pc, #48]	; (3544 <_get_cycles_for_us_internal+0xf8>)
    3514:	490c      	ldr	r1, [pc, #48]	; (3548 <_get_cycles_for_us_internal+0xfc>)
    3516:	0010      	movs	r0, r2
    3518:	4798      	blx	r3
    351a:	0003      	movs	r3, r0
    351c:	3301      	adds	r3, #1
    351e:	e00a      	b.n	3536 <_get_cycles_for_us_internal+0xea>
	default:
		return (us * freq - 1) / 1000000 + 1;
    3520:	1dbb      	adds	r3, r7, #6
    3522:	881b      	ldrh	r3, [r3, #0]
    3524:	683a      	ldr	r2, [r7, #0]
    3526:	4353      	muls	r3, r2
    3528:	1e5a      	subs	r2, r3, #1
    352a:	4b06      	ldr	r3, [pc, #24]	; (3544 <_get_cycles_for_us_internal+0xf8>)
    352c:	4908      	ldr	r1, [pc, #32]	; (3550 <_get_cycles_for_us_internal+0x104>)
    352e:	0010      	movs	r0, r2
    3530:	4798      	blx	r3
    3532:	0003      	movs	r3, r0
    3534:	3301      	adds	r3, #1
	}
}
    3536:	0018      	movs	r0, r3
    3538:	46bd      	mov	sp, r7
    353a:	b003      	add	sp, #12
    353c:	bd90      	pop	{r4, r7, pc}
    353e:	46c0      	nop			; (mov r8, r8)
    3540:	0000c3d8 	.word	0x0000c3d8
    3544:	0000b8c9 	.word	0x0000b8c9
    3548:	000186a0 	.word	0x000186a0
    354c:	00002710 	.word	0x00002710
    3550:	000f4240 	.word	0x000f4240

00003554 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    3554:	b580      	push	{r7, lr}
    3556:	b082      	sub	sp, #8
    3558:	af00      	add	r7, sp, #0
    355a:	0002      	movs	r2, r0
    355c:	1dbb      	adds	r3, r7, #6
    355e:	801a      	strh	r2, [r3, #0]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3560:	4905      	ldr	r1, [pc, #20]	; (3578 <_get_cycles_for_us+0x24>)
    3562:	1dbb      	adds	r3, r7, #6
    3564:	881b      	ldrh	r3, [r3, #0]
    3566:	2207      	movs	r2, #7
    3568:	0018      	movs	r0, r3
    356a:	4b04      	ldr	r3, [pc, #16]	; (357c <_get_cycles_for_us+0x28>)
    356c:	4798      	blx	r3
    356e:	0003      	movs	r3, r0
}
    3570:	0018      	movs	r0, r3
    3572:	46bd      	mov	sp, r7
    3574:	b002      	add	sp, #8
    3576:	bd80      	pop	{r7, pc}
    3578:	007a1200 	.word	0x007a1200
    357c:	0000344d 	.word	0x0000344d

00003580 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    3580:	b590      	push	{r4, r7, lr}
    3582:	b083      	sub	sp, #12
    3584:	af00      	add	r7, sp, #0
    3586:	6039      	str	r1, [r7, #0]
    3588:	0011      	movs	r1, r2
    358a:	1dbb      	adds	r3, r7, #6
    358c:	1c02      	adds	r2, r0, #0
    358e:	801a      	strh	r2, [r3, #0]
    3590:	1d7b      	adds	r3, r7, #5
    3592:	1c0a      	adds	r2, r1, #0
    3594:	701a      	strb	r2, [r3, #0]
	switch (power) {
    3596:	1d7b      	adds	r3, r7, #5
    3598:	781b      	ldrb	r3, [r3, #0]
    359a:	3b04      	subs	r3, #4
    359c:	2b04      	cmp	r3, #4
    359e:	d84b      	bhi.n	3638 <_get_cycles_for_ms_internal+0xb8>
    35a0:	009a      	lsls	r2, r3, #2
    35a2:	4b2d      	ldr	r3, [pc, #180]	; (3658 <_get_cycles_for_ms_internal+0xd8>)
    35a4:	18d3      	adds	r3, r2, r3
    35a6:	681b      	ldr	r3, [r3, #0]
    35a8:	469f      	mov	pc, r3
	case 8:
		return (ms * (freq / 100000)) * 100;
    35aa:	1dbb      	adds	r3, r7, #6
    35ac:	881c      	ldrh	r4, [r3, #0]
    35ae:	683a      	ldr	r2, [r7, #0]
    35b0:	4b2a      	ldr	r3, [pc, #168]	; (365c <_get_cycles_for_ms_internal+0xdc>)
    35b2:	492b      	ldr	r1, [pc, #172]	; (3660 <_get_cycles_for_ms_internal+0xe0>)
    35b4:	0010      	movs	r0, r2
    35b6:	4798      	blx	r3
    35b8:	0003      	movs	r3, r0
    35ba:	4363      	muls	r3, r4
    35bc:	2264      	movs	r2, #100	; 0x64
    35be:	4353      	muls	r3, r2
    35c0:	e045      	b.n	364e <_get_cycles_for_ms_internal+0xce>
	case 7:
		return (ms * (freq / 10000)) * 10;
    35c2:	1dbb      	adds	r3, r7, #6
    35c4:	881c      	ldrh	r4, [r3, #0]
    35c6:	683a      	ldr	r2, [r7, #0]
    35c8:	4b24      	ldr	r3, [pc, #144]	; (365c <_get_cycles_for_ms_internal+0xdc>)
    35ca:	4926      	ldr	r1, [pc, #152]	; (3664 <_get_cycles_for_ms_internal+0xe4>)
    35cc:	0010      	movs	r0, r2
    35ce:	4798      	blx	r3
    35d0:	0003      	movs	r3, r0
    35d2:	4363      	muls	r3, r4
    35d4:	001a      	movs	r2, r3
    35d6:	0013      	movs	r3, r2
    35d8:	009b      	lsls	r3, r3, #2
    35da:	189b      	adds	r3, r3, r2
    35dc:	005b      	lsls	r3, r3, #1
    35de:	e036      	b.n	364e <_get_cycles_for_ms_internal+0xce>
	case 6:
		return (ms * (freq / 1000));
    35e0:	1dbb      	adds	r3, r7, #6
    35e2:	881c      	ldrh	r4, [r3, #0]
    35e4:	6838      	ldr	r0, [r7, #0]
    35e6:	4b1d      	ldr	r3, [pc, #116]	; (365c <_get_cycles_for_ms_internal+0xdc>)
    35e8:	22fa      	movs	r2, #250	; 0xfa
    35ea:	0091      	lsls	r1, r2, #2
    35ec:	4798      	blx	r3
    35ee:	0003      	movs	r3, r0
    35f0:	4363      	muls	r3, r4
    35f2:	e02c      	b.n	364e <_get_cycles_for_ms_internal+0xce>
	case 5:
		return (ms * (freq / 100) - 1) / 10 + 1;
    35f4:	1dbb      	adds	r3, r7, #6
    35f6:	881c      	ldrh	r4, [r3, #0]
    35f8:	683a      	ldr	r2, [r7, #0]
    35fa:	4b18      	ldr	r3, [pc, #96]	; (365c <_get_cycles_for_ms_internal+0xdc>)
    35fc:	2164      	movs	r1, #100	; 0x64
    35fe:	0010      	movs	r0, r2
    3600:	4798      	blx	r3
    3602:	0003      	movs	r3, r0
    3604:	4363      	muls	r3, r4
    3606:	1e5a      	subs	r2, r3, #1
    3608:	4b14      	ldr	r3, [pc, #80]	; (365c <_get_cycles_for_ms_internal+0xdc>)
    360a:	210a      	movs	r1, #10
    360c:	0010      	movs	r0, r2
    360e:	4798      	blx	r3
    3610:	0003      	movs	r3, r0
    3612:	3301      	adds	r3, #1
    3614:	e01b      	b.n	364e <_get_cycles_for_ms_internal+0xce>
	case 4:
		return (ms * (freq / 10) - 1) / 100 + 1;
    3616:	1dbb      	adds	r3, r7, #6
    3618:	881c      	ldrh	r4, [r3, #0]
    361a:	683a      	ldr	r2, [r7, #0]
    361c:	4b0f      	ldr	r3, [pc, #60]	; (365c <_get_cycles_for_ms_internal+0xdc>)
    361e:	210a      	movs	r1, #10
    3620:	0010      	movs	r0, r2
    3622:	4798      	blx	r3
    3624:	0003      	movs	r3, r0
    3626:	4363      	muls	r3, r4
    3628:	1e5a      	subs	r2, r3, #1
    362a:	4b0c      	ldr	r3, [pc, #48]	; (365c <_get_cycles_for_ms_internal+0xdc>)
    362c:	2164      	movs	r1, #100	; 0x64
    362e:	0010      	movs	r0, r2
    3630:	4798      	blx	r3
    3632:	0003      	movs	r3, r0
    3634:	3301      	adds	r3, #1
    3636:	e00a      	b.n	364e <_get_cycles_for_ms_internal+0xce>
	default:
		return (ms * freq - 1) / 1000 + 1;
    3638:	1dbb      	adds	r3, r7, #6
    363a:	881b      	ldrh	r3, [r3, #0]
    363c:	683a      	ldr	r2, [r7, #0]
    363e:	4353      	muls	r3, r2
    3640:	1e58      	subs	r0, r3, #1
    3642:	4b06      	ldr	r3, [pc, #24]	; (365c <_get_cycles_for_ms_internal+0xdc>)
    3644:	22fa      	movs	r2, #250	; 0xfa
    3646:	0091      	lsls	r1, r2, #2
    3648:	4798      	blx	r3
    364a:	0003      	movs	r3, r0
    364c:	3301      	adds	r3, #1
	}
}
    364e:	0018      	movs	r0, r3
    3650:	46bd      	mov	sp, r7
    3652:	b003      	add	sp, #12
    3654:	bd90      	pop	{r4, r7, pc}
    3656:	46c0      	nop			; (mov r8, r8)
    3658:	0000c3ec 	.word	0x0000c3ec
    365c:	0000b8c9 	.word	0x0000b8c9
    3660:	000186a0 	.word	0x000186a0
    3664:	00002710 	.word	0x00002710

00003668 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    3668:	b580      	push	{r7, lr}
    366a:	b082      	sub	sp, #8
    366c:	af00      	add	r7, sp, #0
    366e:	0002      	movs	r2, r0
    3670:	1dbb      	adds	r3, r7, #6
    3672:	801a      	strh	r2, [r3, #0]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3674:	4905      	ldr	r1, [pc, #20]	; (368c <_get_cycles_for_ms+0x24>)
    3676:	1dbb      	adds	r3, r7, #6
    3678:	881b      	ldrh	r3, [r3, #0]
    367a:	2207      	movs	r2, #7
    367c:	0018      	movs	r0, r3
    367e:	4b04      	ldr	r3, [pc, #16]	; (3690 <_get_cycles_for_ms+0x28>)
    3680:	4798      	blx	r3
    3682:	0003      	movs	r3, r0
}
    3684:	0018      	movs	r0, r3
    3686:	46bd      	mov	sp, r7
    3688:	b002      	add	sp, #8
    368a:	bd80      	pop	{r7, pc}
    368c:	007a1200 	.word	0x007a1200
    3690:	00003581 	.word	0x00003581

00003694 <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_CACHEDIS;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
    3694:	b580      	push	{r7, lr}
    3696:	b082      	sub	sp, #8
    3698:	af00      	add	r7, sp, #0
    369a:	6078      	str	r0, [r7, #4]
    369c:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    369e:	687b      	ldr	r3, [r7, #4]
    36a0:	685a      	ldr	r2, [r3, #4]
    36a2:	683b      	ldr	r3, [r7, #0]
    36a4:	005b      	lsls	r3, r3, #1
    36a6:	211e      	movs	r1, #30
    36a8:	400b      	ands	r3, r1
    36aa:	431a      	orrs	r2, r3
    36ac:	687b      	ldr	r3, [r7, #4]
    36ae:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    36b0:	46c0      	nop			; (mov r8, r8)
    36b2:	46bd      	mov	sp, r7
    36b4:	b002      	add	sp, #8
    36b6:	bd80      	pop	{r7, pc}

000036b8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    36b8:	b580      	push	{r7, lr}
    36ba:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    36bc:	4b08      	ldr	r3, [pc, #32]	; (36e0 <_init_chip+0x28>)
    36be:	2100      	movs	r1, #0
    36c0:	0018      	movs	r0, r3
    36c2:	4b08      	ldr	r3, [pc, #32]	; (36e4 <_init_chip+0x2c>)
    36c4:	4798      	blx	r3

	_pm_init();
    36c6:	4b08      	ldr	r3, [pc, #32]	; (36e8 <_init_chip+0x30>)
    36c8:	4798      	blx	r3
	_sysctrl_init_sources();
    36ca:	4b08      	ldr	r3, [pc, #32]	; (36ec <_init_chip+0x34>)
    36cc:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    36ce:	4b08      	ldr	r3, [pc, #32]	; (36f0 <_init_chip+0x38>)
    36d0:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    36d2:	20ff      	movs	r0, #255	; 0xff
    36d4:	4b07      	ldr	r3, [pc, #28]	; (36f4 <_init_chip+0x3c>)
    36d6:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    36d8:	46c0      	nop			; (mov r8, r8)
    36da:	46bd      	mov	sp, r7
    36dc:	bd80      	pop	{r7, pc}
    36de:	46c0      	nop			; (mov r8, r8)
    36e0:	41004000 	.word	0x41004000
    36e4:	00003695 	.word	0x00003695
    36e8:	00003cf1 	.word	0x00003cf1
    36ec:	00005c65 	.word	0x00005c65
    36f0:	00005d25 	.word	0x00005d25
    36f4:	00003bd1 	.word	0x00003bd1

000036f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    36f8:	b580      	push	{r7, lr}
    36fa:	b082      	sub	sp, #8
    36fc:	af00      	add	r7, sp, #0
    36fe:	0002      	movs	r2, r0
    3700:	1dfb      	adds	r3, r7, #7
    3702:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    3704:	1dfb      	adds	r3, r7, #7
    3706:	781b      	ldrb	r3, [r3, #0]
    3708:	2b7f      	cmp	r3, #127	; 0x7f
    370a:	d809      	bhi.n	3720 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    370c:	4b06      	ldr	r3, [pc, #24]	; (3728 <__NVIC_EnableIRQ+0x30>)
    370e:	1dfa      	adds	r2, r7, #7
    3710:	7812      	ldrb	r2, [r2, #0]
    3712:	0011      	movs	r1, r2
    3714:	221f      	movs	r2, #31
    3716:	400a      	ands	r2, r1
    3718:	2101      	movs	r1, #1
    371a:	4091      	lsls	r1, r2
    371c:	000a      	movs	r2, r1
    371e:	601a      	str	r2, [r3, #0]
  }
}
    3720:	46c0      	nop			; (mov r8, r8)
    3722:	46bd      	mov	sp, r7
    3724:	b002      	add	sp, #8
    3726:	bd80      	pop	{r7, pc}
    3728:	e000e100 	.word	0xe000e100

0000372c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    372c:	b580      	push	{r7, lr}
    372e:	b082      	sub	sp, #8
    3730:	af00      	add	r7, sp, #0
    3732:	0002      	movs	r2, r0
    3734:	1dfb      	adds	r3, r7, #7
    3736:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    3738:	1dfb      	adds	r3, r7, #7
    373a:	781b      	ldrb	r3, [r3, #0]
    373c:	2b7f      	cmp	r3, #127	; 0x7f
    373e:	d80e      	bhi.n	375e <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3740:	4909      	ldr	r1, [pc, #36]	; (3768 <__NVIC_DisableIRQ+0x3c>)
    3742:	1dfb      	adds	r3, r7, #7
    3744:	781b      	ldrb	r3, [r3, #0]
    3746:	001a      	movs	r2, r3
    3748:	231f      	movs	r3, #31
    374a:	4013      	ands	r3, r2
    374c:	2201      	movs	r2, #1
    374e:	409a      	lsls	r2, r3
    3750:	0013      	movs	r3, r2
    3752:	2280      	movs	r2, #128	; 0x80
    3754:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    3756:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    375a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    375e:	46c0      	nop			; (mov r8, r8)
    3760:	46bd      	mov	sp, r7
    3762:	b002      	add	sp, #8
    3764:	bd80      	pop	{r7, pc}
    3766:	46c0      	nop			; (mov r8, r8)
    3768:	e000e100 	.word	0xe000e100

0000376c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    376c:	b580      	push	{r7, lr}
    376e:	b082      	sub	sp, #8
    3770:	af00      	add	r7, sp, #0
    3772:	0002      	movs	r2, r0
    3774:	1dfb      	adds	r3, r7, #7
    3776:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    3778:	1dfb      	adds	r3, r7, #7
    377a:	781b      	ldrb	r3, [r3, #0]
    377c:	2b7f      	cmp	r3, #127	; 0x7f
    377e:	d80a      	bhi.n	3796 <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3780:	4907      	ldr	r1, [pc, #28]	; (37a0 <__NVIC_ClearPendingIRQ+0x34>)
    3782:	1dfb      	adds	r3, r7, #7
    3784:	781b      	ldrb	r3, [r3, #0]
    3786:	001a      	movs	r2, r3
    3788:	231f      	movs	r3, #31
    378a:	4013      	ands	r3, r2
    378c:	2201      	movs	r2, #1
    378e:	409a      	lsls	r2, r3
    3790:	23c0      	movs	r3, #192	; 0xc0
    3792:	005b      	lsls	r3, r3, #1
    3794:	50ca      	str	r2, [r1, r3]
  }
}
    3796:	46c0      	nop			; (mov r8, r8)
    3798:	46bd      	mov	sp, r7
    379a:	b002      	add	sp, #8
    379c:	bd80      	pop	{r7, pc}
    379e:	46c0      	nop			; (mov r8, r8)
    37a0:	e000e100 	.word	0xe000e100

000037a4 <hri_eic_wait_for_sync>:
typedef uint8_t  hri_eic_nmictrl_reg_t;
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
    37a4:	b580      	push	{r7, lr}
    37a6:	b082      	sub	sp, #8
    37a8:	af00      	add	r7, sp, #0
    37aa:	6078      	str	r0, [r7, #4]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    37ac:	46c0      	nop			; (mov r8, r8)
    37ae:	687b      	ldr	r3, [r7, #4]
    37b0:	785b      	ldrb	r3, [r3, #1]
    37b2:	061b      	lsls	r3, r3, #24
    37b4:	0fdb      	lsrs	r3, r3, #31
    37b6:	b2db      	uxtb	r3, r3
    37b8:	2b00      	cmp	r3, #0
    37ba:	d1f8      	bne.n	37ae <hri_eic_wait_for_sync+0xa>
		;
}
    37bc:	46c0      	nop			; (mov r8, r8)
    37be:	46bd      	mov	sp, r7
    37c0:	b002      	add	sp, #8
    37c2:	bd80      	pop	{r7, pc}

000037c4 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    37c4:	b580      	push	{r7, lr}
    37c6:	b082      	sub	sp, #8
    37c8:	af00      	add	r7, sp, #0
    37ca:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    37cc:	687b      	ldr	r3, [r7, #4]
    37ce:	691b      	ldr	r3, [r3, #16]
}
    37d0:	0018      	movs	r0, r3
    37d2:	46bd      	mov	sp, r7
    37d4:	b002      	add	sp, #8
    37d6:	bd80      	pop	{r7, pc}

000037d8 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    37d8:	b580      	push	{r7, lr}
    37da:	b082      	sub	sp, #8
    37dc:	af00      	add	r7, sp, #0
    37de:	6078      	str	r0, [r7, #4]
    37e0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    37e2:	687b      	ldr	r3, [r7, #4]
    37e4:	683a      	ldr	r2, [r7, #0]
    37e6:	611a      	str	r2, [r3, #16]
}
    37e8:	46c0      	nop			; (mov r8, r8)
    37ea:	46bd      	mov	sp, r7
    37ec:	b002      	add	sp, #8
    37ee:	bd80      	pop	{r7, pc}

000037f0 <hri_eic_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intenset_reg_t hri_eic_read_INTEN_reg(const void *const hw)
{
    37f0:	b580      	push	{r7, lr}
    37f2:	b082      	sub	sp, #8
    37f4:	af00      	add	r7, sp, #0
    37f6:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTENSET.reg;
    37f8:	687b      	ldr	r3, [r7, #4]
    37fa:	68db      	ldr	r3, [r3, #12]
}
    37fc:	0018      	movs	r0, r3
    37fe:	46bd      	mov	sp, r7
    3800:	b002      	add	sp, #8
    3802:	bd80      	pop	{r7, pc}

00003804 <hri_eic_set_CTRL_ENABLE_bit>:
	tmp = (tmp & EIC_CTRL_SWRST) >> EIC_CTRL_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRL_ENABLE_bit(const void *const hw)
{
    3804:	b580      	push	{r7, lr}
    3806:	b082      	sub	sp, #8
    3808:	af00      	add	r7, sp, #0
    380a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    380c:	687b      	ldr	r3, [r7, #4]
    380e:	781b      	ldrb	r3, [r3, #0]
    3810:	b2db      	uxtb	r3, r3
    3812:	2202      	movs	r2, #2
    3814:	4313      	orrs	r3, r2
    3816:	b2da      	uxtb	r2, r3
    3818:	687b      	ldr	r3, [r7, #4]
    381a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw);
    381c:	687b      	ldr	r3, [r7, #4]
    381e:	0018      	movs	r0, r3
    3820:	4b02      	ldr	r3, [pc, #8]	; (382c <hri_eic_set_CTRL_ENABLE_bit+0x28>)
    3822:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3824:	46c0      	nop			; (mov r8, r8)
    3826:	46bd      	mov	sp, r7
    3828:	b002      	add	sp, #8
    382a:	bd80      	pop	{r7, pc}
    382c:	000037a5 	.word	0x000037a5

00003830 <hri_eic_get_CTRL_reg>:
	hri_eic_wait_for_sync(hw);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
    3830:	b580      	push	{r7, lr}
    3832:	b084      	sub	sp, #16
    3834:	af00      	add	r7, sp, #0
    3836:	6078      	str	r0, [r7, #4]
    3838:	000a      	movs	r2, r1
    383a:	1cfb      	adds	r3, r7, #3
    383c:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
    383e:	687b      	ldr	r3, [r7, #4]
    3840:	0018      	movs	r0, r3
    3842:	4b0b      	ldr	r3, [pc, #44]	; (3870 <hri_eic_get_CTRL_reg+0x40>)
    3844:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRL.reg;
    3846:	230f      	movs	r3, #15
    3848:	18fb      	adds	r3, r7, r3
    384a:	687a      	ldr	r2, [r7, #4]
    384c:	7812      	ldrb	r2, [r2, #0]
    384e:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    3850:	230f      	movs	r3, #15
    3852:	18fb      	adds	r3, r7, r3
    3854:	220f      	movs	r2, #15
    3856:	18ba      	adds	r2, r7, r2
    3858:	1cf9      	adds	r1, r7, #3
    385a:	7812      	ldrb	r2, [r2, #0]
    385c:	7809      	ldrb	r1, [r1, #0]
    385e:	400a      	ands	r2, r1
    3860:	701a      	strb	r2, [r3, #0]
	return tmp;
    3862:	230f      	movs	r3, #15
    3864:	18fb      	adds	r3, r7, r3
    3866:	781b      	ldrb	r3, [r3, #0]
}
    3868:	0018      	movs	r0, r3
    386a:	46bd      	mov	sp, r7
    386c:	b004      	add	sp, #16
    386e:	bd80      	pop	{r7, pc}
    3870:	000037a5 	.word	0x000037a5

00003874 <hri_eic_write_CTRL_reg>:

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
    3874:	b580      	push	{r7, lr}
    3876:	b082      	sub	sp, #8
    3878:	af00      	add	r7, sp, #0
    387a:	6078      	str	r0, [r7, #4]
    387c:	000a      	movs	r2, r1
    387e:	1cfb      	adds	r3, r7, #3
    3880:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    3882:	687b      	ldr	r3, [r7, #4]
    3884:	1cfa      	adds	r2, r7, #3
    3886:	7812      	ldrb	r2, [r2, #0]
    3888:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw);
    388a:	687b      	ldr	r3, [r7, #4]
    388c:	0018      	movs	r0, r3
    388e:	4b03      	ldr	r3, [pc, #12]	; (389c <hri_eic_write_CTRL_reg+0x28>)
    3890:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3892:	46c0      	nop			; (mov r8, r8)
    3894:	46bd      	mov	sp, r7
    3896:	b002      	add	sp, #8
    3898:	bd80      	pop	{r7, pc}
    389a:	46c0      	nop			; (mov r8, r8)
    389c:	000037a5 	.word	0x000037a5

000038a0 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    38a0:	b580      	push	{r7, lr}
    38a2:	b082      	sub	sp, #8
    38a4:	af00      	add	r7, sp, #0
    38a6:	6078      	str	r0, [r7, #4]
    38a8:	000a      	movs	r2, r1
    38aa:	1cfb      	adds	r3, r7, #3
    38ac:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    38ae:	687b      	ldr	r3, [r7, #4]
    38b0:	1cfa      	adds	r2, r7, #3
    38b2:	7812      	ldrb	r2, [r2, #0]
    38b4:	709a      	strb	r2, [r3, #2]
	EIC_CRITICAL_SECTION_LEAVE();
}
    38b6:	46c0      	nop			; (mov r8, r8)
    38b8:	46bd      	mov	sp, r7
    38ba:	b002      	add	sp, #8
    38bc:	bd80      	pop	{r7, pc}

000038be <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    38be:	b580      	push	{r7, lr}
    38c0:	b082      	sub	sp, #8
    38c2:	af00      	add	r7, sp, #0
    38c4:	6078      	str	r0, [r7, #4]
    38c6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    38c8:	687b      	ldr	r3, [r7, #4]
    38ca:	683a      	ldr	r2, [r7, #0]
    38cc:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    38ce:	46c0      	nop			; (mov r8, r8)
    38d0:	46bd      	mov	sp, r7
    38d2:	b002      	add	sp, #8
    38d4:	bd80      	pop	{r7, pc}

000038d6 <hri_eic_write_WAKEUP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
    38d6:	b580      	push	{r7, lr}
    38d8:	b082      	sub	sp, #8
    38da:	af00      	add	r7, sp, #0
    38dc:	6078      	str	r0, [r7, #4]
    38de:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    38e0:	687b      	ldr	r3, [r7, #4]
    38e2:	683a      	ldr	r2, [r7, #0]
    38e4:	615a      	str	r2, [r3, #20]
	EIC_CRITICAL_SECTION_LEAVE();
}
    38e6:	46c0      	nop			; (mov r8, r8)
    38e8:	46bd      	mov	sp, r7
    38ea:	b002      	add	sp, #8
    38ec:	bd80      	pop	{r7, pc}

000038ee <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    38ee:	b580      	push	{r7, lr}
    38f0:	b084      	sub	sp, #16
    38f2:	af00      	add	r7, sp, #0
    38f4:	60f8      	str	r0, [r7, #12]
    38f6:	607a      	str	r2, [r7, #4]
    38f8:	230b      	movs	r3, #11
    38fa:	18fb      	adds	r3, r7, r3
    38fc:	1c0a      	adds	r2, r1, #0
    38fe:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    3900:	230b      	movs	r3, #11
    3902:	18fb      	adds	r3, r7, r3
    3904:	781a      	ldrb	r2, [r3, #0]
    3906:	68fb      	ldr	r3, [r7, #12]
    3908:	3206      	adds	r2, #6
    390a:	0092      	lsls	r2, r2, #2
    390c:	6879      	ldr	r1, [r7, #4]
    390e:	50d1      	str	r1, [r2, r3]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3910:	46c0      	nop			; (mov r8, r8)
    3912:	46bd      	mov	sp, r7
    3914:	b004      	add	sp, #16
    3916:	bd80      	pop	{r7, pc}

00003918 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    3918:	b580      	push	{r7, lr}
    391a:	b082      	sub	sp, #8
    391c:	af00      	add	r7, sp, #0
    391e:	6078      	str	r0, [r7, #4]
	hri_eic_wait_for_sync(EIC);
    3920:	4b26      	ldr	r3, [pc, #152]	; (39bc <_ext_irq_init+0xa4>)
    3922:	0018      	movs	r0, r3
    3924:	4b26      	ldr	r3, [pc, #152]	; (39c0 <_ext_irq_init+0xa8>)
    3926:	4798      	blx	r3
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    3928:	4b24      	ldr	r3, [pc, #144]	; (39bc <_ext_irq_init+0xa4>)
    392a:	2102      	movs	r1, #2
    392c:	0018      	movs	r0, r3
    392e:	4b25      	ldr	r3, [pc, #148]	; (39c4 <_ext_irq_init+0xac>)
    3930:	4798      	blx	r3
    3932:	1e03      	subs	r3, r0, #0
    3934:	d008      	beq.n	3948 <_ext_irq_init+0x30>
		hri_eic_write_CTRL_reg(EIC, 0);
    3936:	4b21      	ldr	r3, [pc, #132]	; (39bc <_ext_irq_init+0xa4>)
    3938:	2100      	movs	r1, #0
    393a:	0018      	movs	r0, r3
    393c:	4b22      	ldr	r3, [pc, #136]	; (39c8 <_ext_irq_init+0xb0>)
    393e:	4798      	blx	r3
		hri_eic_wait_for_sync(EIC);
    3940:	4b1e      	ldr	r3, [pc, #120]	; (39bc <_ext_irq_init+0xa4>)
    3942:	0018      	movs	r0, r3
    3944:	4b1e      	ldr	r3, [pc, #120]	; (39c0 <_ext_irq_init+0xa8>)
    3946:	4798      	blx	r3
	}
	hri_eic_write_CTRL_reg(EIC, EIC_CTRL_SWRST);
    3948:	4b1c      	ldr	r3, [pc, #112]	; (39bc <_ext_irq_init+0xa4>)
    394a:	2101      	movs	r1, #1
    394c:	0018      	movs	r0, r3
    394e:	4b1e      	ldr	r3, [pc, #120]	; (39c8 <_ext_irq_init+0xb0>)
    3950:	4798      	blx	r3
	hri_eic_wait_for_sync(EIC);
    3952:	4b1a      	ldr	r3, [pc, #104]	; (39bc <_ext_irq_init+0xa4>)
    3954:	0018      	movs	r0, r3
    3956:	4b1a      	ldr	r3, [pc, #104]	; (39c0 <_ext_irq_init+0xa8>)
    3958:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(
    395a:	4b18      	ldr	r3, [pc, #96]	; (39bc <_ext_irq_init+0xa4>)
    395c:	2100      	movs	r1, #0
    395e:	0018      	movs	r0, r3
    3960:	4b1a      	ldr	r3, [pc, #104]	; (39cc <_ext_irq_init+0xb4>)
    3962:	4798      	blx	r3
	    EIC, (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos) | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE));
	hri_eic_write_EVCTRL_reg(EIC,
    3964:	4b15      	ldr	r3, [pc, #84]	; (39bc <_ext_irq_init+0xa4>)
    3966:	2100      	movs	r1, #0
    3968:	0018      	movs	r0, r3
    396a:	4b19      	ldr	r3, [pc, #100]	; (39d0 <_ext_irq_init+0xb8>)
    396c:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);

	hri_eic_write_WAKEUP_reg(EIC,
    396e:	4b13      	ldr	r3, [pc, #76]	; (39bc <_ext_irq_init+0xa4>)
    3970:	2100      	movs	r1, #0
    3972:	0018      	movs	r0, r3
    3974:	4b17      	ldr	r3, [pc, #92]	; (39d4 <_ext_irq_init+0xbc>)
    3976:	4798      	blx	r3
	                             | (CONF_EIC_WAKEUPEN3 << 3) | (CONF_EIC_WAKEUPEN4 << 4) | (CONF_EIC_WAKEUPEN5 << 5)
	                             | (CONF_EIC_WAKEUPEN6 << 6) | (CONF_EIC_WAKEUPEN7 << 7) | (CONF_EIC_WAKEUPEN8 << 8)
	                             | (CONF_EIC_WAKEUPEN9 << 9) | (CONF_EIC_WAKEUPEN10 << 10) | (CONF_EIC_WAKEUPEN11 << 11)
	                             | (CONF_EIC_WAKEUPEN12 << 12) | (CONF_EIC_WAKEUPEN13 << 13)
	                             | (CONF_EIC_WAKEUPEN14 << 14) | (CONF_EIC_WAKEUPEN15 << 15) | 0);
	hri_eic_write_CONFIG_reg(EIC,
    3978:	4b10      	ldr	r3, [pc, #64]	; (39bc <_ext_irq_init+0xa4>)
    397a:	2200      	movs	r2, #0
    397c:	2100      	movs	r1, #0
    397e:	0018      	movs	r0, r3
    3980:	4b15      	ldr	r3, [pc, #84]	; (39d8 <_ext_irq_init+0xc0>)
    3982:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    3984:	4b0d      	ldr	r3, [pc, #52]	; (39bc <_ext_irq_init+0xa4>)
    3986:	2200      	movs	r2, #0
    3988:	2101      	movs	r1, #1
    398a:	0018      	movs	r0, r3
    398c:	4b12      	ldr	r3, [pc, #72]	; (39d8 <_ext_irq_init+0xc0>)
    398e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRL_ENABLE_bit(EIC);
    3990:	4b0a      	ldr	r3, [pc, #40]	; (39bc <_ext_irq_init+0xa4>)
    3992:	0018      	movs	r0, r3
    3994:	4b11      	ldr	r3, [pc, #68]	; (39dc <_ext_irq_init+0xc4>)
    3996:	4798      	blx	r3

	NVIC_DisableIRQ(EIC_IRQn);
    3998:	2004      	movs	r0, #4
    399a:	4b11      	ldr	r3, [pc, #68]	; (39e0 <_ext_irq_init+0xc8>)
    399c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_IRQn);
    399e:	2004      	movs	r0, #4
    39a0:	4b10      	ldr	r3, [pc, #64]	; (39e4 <_ext_irq_init+0xcc>)
    39a2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_IRQn);
    39a4:	2004      	movs	r0, #4
    39a6:	4b10      	ldr	r3, [pc, #64]	; (39e8 <_ext_irq_init+0xd0>)
    39a8:	4798      	blx	r3

	callback = cb;
    39aa:	4b10      	ldr	r3, [pc, #64]	; (39ec <_ext_irq_init+0xd4>)
    39ac:	687a      	ldr	r2, [r7, #4]
    39ae:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    39b0:	2300      	movs	r3, #0
}
    39b2:	0018      	movs	r0, r3
    39b4:	46bd      	mov	sp, r7
    39b6:	b002      	add	sp, #8
    39b8:	bd80      	pop	{r7, pc}
    39ba:	46c0      	nop			; (mov r8, r8)
    39bc:	40001800 	.word	0x40001800
    39c0:	000037a5 	.word	0x000037a5
    39c4:	00003831 	.word	0x00003831
    39c8:	00003875 	.word	0x00003875
    39cc:	000038a1 	.word	0x000038a1
    39d0:	000038bf 	.word	0x000038bf
    39d4:	000038d7 	.word	0x000038d7
    39d8:	000038ef 	.word	0x000038ef
    39dc:	00003805 	.word	0x00003805
    39e0:	0000372d 	.word	0x0000372d
    39e4:	0000376d 	.word	0x0000376d
    39e8:	000036f9 	.word	0x000036f9
    39ec:	20000214 	.word	0x20000214

000039f0 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    39f0:	b590      	push	{r4, r7, lr}
    39f2:	b085      	sub	sp, #20
    39f4:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    39f6:	4b56      	ldr	r3, [pc, #344]	; (3b50 <EIC_Handler+0x160>)
    39f8:	0018      	movs	r0, r3
    39fa:	4b56      	ldr	r3, [pc, #344]	; (3b54 <EIC_Handler+0x164>)
    39fc:	4798      	blx	r3
    39fe:	0004      	movs	r4, r0
    3a00:	4b53      	ldr	r3, [pc, #332]	; (3b50 <EIC_Handler+0x160>)
    3a02:	0018      	movs	r0, r3
    3a04:	4b54      	ldr	r3, [pc, #336]	; (3b58 <EIC_Handler+0x168>)
    3a06:	4798      	blx	r3
    3a08:	0003      	movs	r3, r0
    3a0a:	4023      	ands	r3, r4
    3a0c:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    3a0e:	2301      	movs	r3, #1
    3a10:	425b      	negs	r3, r3
    3a12:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    3a14:	683b      	ldr	r3, [r7, #0]
    3a16:	4a4e      	ldr	r2, [pc, #312]	; (3b50 <EIC_Handler+0x160>)
    3a18:	0019      	movs	r1, r3
    3a1a:	0010      	movs	r0, r2
    3a1c:	4b4f      	ldr	r3, [pc, #316]	; (3b5c <EIC_Handler+0x16c>)
    3a1e:	4798      	blx	r3

	ASSERT(callback);
    3a20:	4b4f      	ldr	r3, [pc, #316]	; (3b60 <EIC_Handler+0x170>)
    3a22:	681b      	ldr	r3, [r3, #0]
    3a24:	1e5a      	subs	r2, r3, #1
    3a26:	4193      	sbcs	r3, r2
    3a28:	b2db      	uxtb	r3, r3
    3a2a:	494e      	ldr	r1, [pc, #312]	; (3b64 <EIC_Handler+0x174>)
    3a2c:	22d2      	movs	r2, #210	; 0xd2
    3a2e:	0018      	movs	r0, r3
    3a30:	4b4d      	ldr	r3, [pc, #308]	; (3b68 <EIC_Handler+0x178>)
    3a32:	4798      	blx	r3

	while (flags) {
    3a34:	e084      	b.n	3b40 <EIC_Handler+0x150>
		pos = ffs(flags) - 1;
    3a36:	683b      	ldr	r3, [r7, #0]
    3a38:	0018      	movs	r0, r3
    3a3a:	4b4c      	ldr	r3, [pc, #304]	; (3b6c <EIC_Handler+0x17c>)
    3a3c:	4798      	blx	r3
    3a3e:	0003      	movs	r3, r0
    3a40:	b2db      	uxtb	r3, r3
    3a42:	3b01      	subs	r3, #1
    3a44:	b2da      	uxtb	r2, r3
    3a46:	230f      	movs	r3, #15
    3a48:	18fb      	adds	r3, r7, r3
    3a4a:	701a      	strb	r2, [r3, #0]
		while (-1 != pos) {
    3a4c:	e060      	b.n	3b10 <EIC_Handler+0x120>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    3a4e:	1dfb      	adds	r3, r7, #7
    3a50:	2200      	movs	r2, #0
    3a52:	701a      	strb	r2, [r3, #0]
    3a54:	1dbb      	adds	r3, r7, #6
    3a56:	2201      	movs	r2, #1
    3a58:	701a      	strb	r2, [r3, #0]

			while (upper >= lower) {
    3a5a:	e035      	b.n	3ac8 <EIC_Handler+0xd8>
				middle = (upper + lower) >> 1;
    3a5c:	1dbb      	adds	r3, r7, #6
    3a5e:	781a      	ldrb	r2, [r3, #0]
    3a60:	1dfb      	adds	r3, r7, #7
    3a62:	781b      	ldrb	r3, [r3, #0]
    3a64:	18d3      	adds	r3, r2, r3
    3a66:	105a      	asrs	r2, r3, #1
    3a68:	1d7b      	adds	r3, r7, #5
    3a6a:	701a      	strb	r2, [r3, #0]
				if (_map[middle].extint == pos) {
    3a6c:	1d7b      	adds	r3, r7, #5
    3a6e:	781a      	ldrb	r2, [r3, #0]
    3a70:	4b3f      	ldr	r3, [pc, #252]	; (3b70 <EIC_Handler+0x180>)
    3a72:	00d2      	lsls	r2, r2, #3
    3a74:	5cd3      	ldrb	r3, [r2, r3]
    3a76:	001a      	movs	r2, r3
    3a78:	230f      	movs	r3, #15
    3a7a:	18fb      	adds	r3, r7, r3
    3a7c:	781b      	ldrb	r3, [r3, #0]
    3a7e:	b25b      	sxtb	r3, r3
    3a80:	429a      	cmp	r2, r3
    3a82:	d102      	bne.n	3a8a <EIC_Handler+0x9a>
					pin = _map[middle].pin;
    3a84:	2322      	movs	r3, #34	; 0x22
    3a86:	60bb      	str	r3, [r7, #8]
					break;
    3a88:	e024      	b.n	3ad4 <EIC_Handler+0xe4>
				}
				if (_map[middle].extint < pos) {
    3a8a:	1d7b      	adds	r3, r7, #5
    3a8c:	781a      	ldrb	r2, [r3, #0]
    3a8e:	4b38      	ldr	r3, [pc, #224]	; (3b70 <EIC_Handler+0x180>)
    3a90:	00d2      	lsls	r2, r2, #3
    3a92:	5cd3      	ldrb	r3, [r2, r3]
    3a94:	001a      	movs	r2, r3
    3a96:	230f      	movs	r3, #15
    3a98:	18fb      	adds	r3, r7, r3
    3a9a:	781b      	ldrb	r3, [r3, #0]
    3a9c:	b25b      	sxtb	r3, r3
    3a9e:	429a      	cmp	r2, r3
    3aa0:	da09      	bge.n	3ab6 <EIC_Handler+0xc6>
					lower = middle + 1;
    3aa2:	1dfb      	adds	r3, r7, #7
    3aa4:	1d7a      	adds	r2, r7, #5
    3aa6:	7812      	ldrb	r2, [r2, #0]
    3aa8:	3201      	adds	r2, #1
    3aaa:	701a      	strb	r2, [r3, #0]
    3aac:	1dbb      	adds	r3, r7, #6
    3aae:	1dba      	adds	r2, r7, #6
    3ab0:	7812      	ldrb	r2, [r2, #0]
    3ab2:	701a      	strb	r2, [r3, #0]
    3ab4:	e008      	b.n	3ac8 <EIC_Handler+0xd8>
				} else {
					upper = middle - 1;
    3ab6:	1dbb      	adds	r3, r7, #6
    3ab8:	1d7a      	adds	r2, r7, #5
    3aba:	7812      	ldrb	r2, [r2, #0]
    3abc:	3a01      	subs	r2, #1
    3abe:	701a      	strb	r2, [r3, #0]
    3ac0:	1dfb      	adds	r3, r7, #7
    3ac2:	1dfa      	adds	r2, r7, #7
    3ac4:	7812      	ldrb	r2, [r2, #0]
    3ac6:	701a      	strb	r2, [r3, #0]
			while (upper >= lower) {
    3ac8:	1dba      	adds	r2, r7, #6
    3aca:	1dfb      	adds	r3, r7, #7
    3acc:	7812      	ldrb	r2, [r2, #0]
    3ace:	781b      	ldrb	r3, [r3, #0]
    3ad0:	429a      	cmp	r2, r3
    3ad2:	d2c3      	bcs.n	3a5c <EIC_Handler+0x6c>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    3ad4:	68bb      	ldr	r3, [r7, #8]
    3ad6:	3301      	adds	r3, #1
    3ad8:	d004      	beq.n	3ae4 <EIC_Handler+0xf4>
				callback(pin);
    3ada:	4b21      	ldr	r3, [pc, #132]	; (3b60 <EIC_Handler+0x170>)
    3adc:	681b      	ldr	r3, [r3, #0]
    3ade:	68ba      	ldr	r2, [r7, #8]
    3ae0:	0010      	movs	r0, r2
    3ae2:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    3ae4:	230f      	movs	r3, #15
    3ae6:	18fb      	adds	r3, r7, r3
    3ae8:	781b      	ldrb	r3, [r3, #0]
    3aea:	b25b      	sxtb	r3, r3
    3aec:	2201      	movs	r2, #1
    3aee:	409a      	lsls	r2, r3
    3af0:	0013      	movs	r3, r2
    3af2:	43db      	mvns	r3, r3
    3af4:	683a      	ldr	r2, [r7, #0]
    3af6:	4013      	ands	r3, r2
    3af8:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    3afa:	683b      	ldr	r3, [r7, #0]
    3afc:	0018      	movs	r0, r3
    3afe:	4b1b      	ldr	r3, [pc, #108]	; (3b6c <EIC_Handler+0x17c>)
    3b00:	4798      	blx	r3
    3b02:	0003      	movs	r3, r0
    3b04:	b2db      	uxtb	r3, r3
    3b06:	3b01      	subs	r3, #1
    3b08:	b2da      	uxtb	r2, r3
    3b0a:	230f      	movs	r3, #15
    3b0c:	18fb      	adds	r3, r7, r3
    3b0e:	701a      	strb	r2, [r3, #0]
		while (-1 != pos) {
    3b10:	230f      	movs	r3, #15
    3b12:	18fb      	adds	r3, r7, r3
    3b14:	781b      	ldrb	r3, [r3, #0]
    3b16:	b25b      	sxtb	r3, r3
    3b18:	3301      	adds	r3, #1
    3b1a:	d198      	bne.n	3a4e <EIC_Handler+0x5e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    3b1c:	4b0c      	ldr	r3, [pc, #48]	; (3b50 <EIC_Handler+0x160>)
    3b1e:	0018      	movs	r0, r3
    3b20:	4b0c      	ldr	r3, [pc, #48]	; (3b54 <EIC_Handler+0x164>)
    3b22:	4798      	blx	r3
    3b24:	0004      	movs	r4, r0
    3b26:	4b0a      	ldr	r3, [pc, #40]	; (3b50 <EIC_Handler+0x160>)
    3b28:	0018      	movs	r0, r3
    3b2a:	4b0b      	ldr	r3, [pc, #44]	; (3b58 <EIC_Handler+0x168>)
    3b2c:	4798      	blx	r3
    3b2e:	0003      	movs	r3, r0
    3b30:	4023      	ands	r3, r4
    3b32:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    3b34:	683b      	ldr	r3, [r7, #0]
    3b36:	4a06      	ldr	r2, [pc, #24]	; (3b50 <EIC_Handler+0x160>)
    3b38:	0019      	movs	r1, r3
    3b3a:	0010      	movs	r0, r2
    3b3c:	4b07      	ldr	r3, [pc, #28]	; (3b5c <EIC_Handler+0x16c>)
    3b3e:	4798      	blx	r3
	while (flags) {
    3b40:	683b      	ldr	r3, [r7, #0]
    3b42:	2b00      	cmp	r3, #0
    3b44:	d000      	beq.n	3b48 <EIC_Handler+0x158>
    3b46:	e776      	b.n	3a36 <EIC_Handler+0x46>
	}
}
    3b48:	46c0      	nop			; (mov r8, r8)
    3b4a:	46bd      	mov	sp, r7
    3b4c:	b005      	add	sp, #20
    3b4e:	bd90      	pop	{r4, r7, pc}
    3b50:	40001800 	.word	0x40001800
    3b54:	000037c5 	.word	0x000037c5
    3b58:	000037f1 	.word	0x000037f1
    3b5c:	000037d9 	.word	0x000037d9
    3b60:	20000214 	.word	0x20000214
    3b64:	0000c408 	.word	0x0000c408
    3b68:	00002cd5 	.word	0x00002cd5
    3b6c:	0000b9e1 	.word	0x0000b9e1
    3b70:	0000c400 	.word	0x0000c400

00003b74 <hri_gclk_wait_for_sync>:
{
    3b74:	b580      	push	{r7, lr}
    3b76:	b082      	sub	sp, #8
    3b78:	af00      	add	r7, sp, #0
    3b7a:	6078      	str	r0, [r7, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    3b7c:	46c0      	nop			; (mov r8, r8)
    3b7e:	687b      	ldr	r3, [r7, #4]
    3b80:	785b      	ldrb	r3, [r3, #1]
    3b82:	061b      	lsls	r3, r3, #24
    3b84:	0fdb      	lsrs	r3, r3, #31
    3b86:	b2db      	uxtb	r3, r3
    3b88:	2b00      	cmp	r3, #0
    3b8a:	d1f8      	bne.n	3b7e <hri_gclk_wait_for_sync+0xa>
}
    3b8c:	46c0      	nop			; (mov r8, r8)
    3b8e:	46bd      	mov	sp, r7
    3b90:	b002      	add	sp, #8
    3b92:	bd80      	pop	{r7, pc}

00003b94 <hri_gclk_write_GENCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, hri_gclk_genctrl_reg_t data)
{
    3b94:	b580      	push	{r7, lr}
    3b96:	b082      	sub	sp, #8
    3b98:	af00      	add	r7, sp, #0
    3b9a:	6078      	str	r0, [r7, #4]
    3b9c:	6039      	str	r1, [r7, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL.reg = data;
    3b9e:	687b      	ldr	r3, [r7, #4]
    3ba0:	683a      	ldr	r2, [r7, #0]
    3ba2:	605a      	str	r2, [r3, #4]
	hri_gclk_wait_for_sync(hw);
    3ba4:	687b      	ldr	r3, [r7, #4]
    3ba6:	0018      	movs	r0, r3
    3ba8:	4b02      	ldr	r3, [pc, #8]	; (3bb4 <hri_gclk_write_GENCTRL_reg+0x20>)
    3baa:	4798      	blx	r3
	GCLK_CRITICAL_SECTION_LEAVE();
}
    3bac:	46c0      	nop			; (mov r8, r8)
    3bae:	46bd      	mov	sp, r7
    3bb0:	b002      	add	sp, #8
    3bb2:	bd80      	pop	{r7, pc}
    3bb4:	00003b75 	.word	0x00003b75

00003bb8 <hri_gclk_write_GENDIV_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
    3bb8:	b580      	push	{r7, lr}
    3bba:	b082      	sub	sp, #8
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	6078      	str	r0, [r7, #4]
    3bc0:	6039      	str	r1, [r7, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    3bc2:	687b      	ldr	r3, [r7, #4]
    3bc4:	683a      	ldr	r2, [r7, #0]
    3bc6:	609a      	str	r2, [r3, #8]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    3bc8:	46c0      	nop			; (mov r8, r8)
    3bca:	46bd      	mov	sp, r7
    3bcc:	b002      	add	sp, #8
    3bce:	bd80      	pop	{r7, pc}

00003bd0 <_gclk_init_generators_by_fref>:
	        | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    3bd0:	b580      	push	{r7, lr}
    3bd2:	b082      	sub	sp, #8
    3bd4:	af00      	add	r7, sp, #0
    3bd6:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    3bd8:	687b      	ldr	r3, [r7, #4]
    3bda:	2201      	movs	r2, #1
    3bdc:	4013      	ands	r3, r2
    3bde:	d00d      	beq.n	3bfc <_gclk_init_generators_by_fref+0x2c>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_0_DIV) | GCLK_GENDIV_ID(0));
    3be0:	2380      	movs	r3, #128	; 0x80
    3be2:	005b      	lsls	r3, r3, #1
    3be4:	4a10      	ldr	r2, [pc, #64]	; (3c28 <_gclk_init_generators_by_fref+0x58>)
    3be6:	0019      	movs	r1, r3
    3be8:	0010      	movs	r0, r2
    3bea:	4b10      	ldr	r3, [pc, #64]	; (3c2c <_gclk_init_generators_by_fref+0x5c>)
    3bec:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    3bee:	2383      	movs	r3, #131	; 0x83
    3bf0:	025b      	lsls	r3, r3, #9
    3bf2:	4a0d      	ldr	r2, [pc, #52]	; (3c28 <_gclk_init_generators_by_fref+0x58>)
    3bf4:	0019      	movs	r1, r3
    3bf6:	0010      	movs	r0, r2
    3bf8:	4b0d      	ldr	r3, [pc, #52]	; (3c30 <_gclk_init_generators_by_fref+0x60>)
    3bfa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SRC | GCLK_GENCTRL_ID(6));
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    3bfc:	687b      	ldr	r3, [r7, #4]
    3bfe:	2280      	movs	r2, #128	; 0x80
    3c00:	4013      	ands	r3, r2
    3c02:	d00c      	beq.n	3c1e <_gclk_init_generators_by_fref+0x4e>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_7_DIV) | GCLK_GENDIV_ID(7));
    3c04:	2308      	movs	r3, #8
    3c06:	33ff      	adds	r3, #255	; 0xff
    3c08:	4a07      	ldr	r2, [pc, #28]	; (3c28 <_gclk_init_generators_by_fref+0x58>)
    3c0a:	0019      	movs	r1, r3
    3c0c:	0010      	movs	r0, r2
    3c0e:	4b07      	ldr	r3, [pc, #28]	; (3c2c <_gclk_init_generators_by_fref+0x5c>)
    3c10:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    3c12:	4a08      	ldr	r2, [pc, #32]	; (3c34 <_gclk_init_generators_by_fref+0x64>)
    3c14:	4b04      	ldr	r3, [pc, #16]	; (3c28 <_gclk_init_generators_by_fref+0x58>)
    3c16:	0011      	movs	r1, r2
    3c18:	0018      	movs	r0, r3
    3c1a:	4b05      	ldr	r3, [pc, #20]	; (3c30 <_gclk_init_generators_by_fref+0x60>)
    3c1c:	4798      	blx	r3
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    3c1e:	46c0      	nop			; (mov r8, r8)
    3c20:	46bd      	mov	sp, r7
    3c22:	b002      	add	sp, #8
    3c24:	bd80      	pop	{r7, pc}
    3c26:	46c0      	nop			; (mov r8, r8)
    3c28:	40000c00 	.word	0x40000c00
    3c2c:	00003bb9 	.word	0x00003bb9
    3c30:	00003b95 	.word	0x00003b95
    3c34:	00010707 	.word	0x00010707

00003c38 <hri_pm_set_CPUSEL_CPUDIV_bf>:
{
	return ((Pm *)hw)->SLEEP.reg;
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
    3c38:	b580      	push	{r7, lr}
    3c3a:	b082      	sub	sp, #8
    3c3c:	af00      	add	r7, sp, #0
    3c3e:	6078      	str	r0, [r7, #4]
    3c40:	000a      	movs	r2, r1
    3c42:	1cfb      	adds	r3, r7, #3
    3c44:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    3c46:	687b      	ldr	r3, [r7, #4]
    3c48:	7a1b      	ldrb	r3, [r3, #8]
    3c4a:	b2da      	uxtb	r2, r3
    3c4c:	1cfb      	adds	r3, r7, #3
    3c4e:	781b      	ldrb	r3, [r3, #0]
    3c50:	2107      	movs	r1, #7
    3c52:	400b      	ands	r3, r1
    3c54:	b2db      	uxtb	r3, r3
    3c56:	4313      	orrs	r3, r2
    3c58:	b2da      	uxtb	r2, r3
    3c5a:	687b      	ldr	r3, [r7, #4]
    3c5c:	721a      	strb	r2, [r3, #8]
	PM_CRITICAL_SECTION_LEAVE();
}
    3c5e:	46c0      	nop			; (mov r8, r8)
    3c60:	46bd      	mov	sp, r7
    3c62:	b002      	add	sp, #8
    3c64:	bd80      	pop	{r7, pc}

00003c66 <hri_pm_set_APBASEL_APBADIV_bf>:
{
	return ((Pm *)hw)->CPUSEL.reg;
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
    3c66:	b580      	push	{r7, lr}
    3c68:	b082      	sub	sp, #8
    3c6a:	af00      	add	r7, sp, #0
    3c6c:	6078      	str	r0, [r7, #4]
    3c6e:	000a      	movs	r2, r1
    3c70:	1cfb      	adds	r3, r7, #3
    3c72:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    3c74:	687b      	ldr	r3, [r7, #4]
    3c76:	7a5b      	ldrb	r3, [r3, #9]
    3c78:	b2da      	uxtb	r2, r3
    3c7a:	1cfb      	adds	r3, r7, #3
    3c7c:	781b      	ldrb	r3, [r3, #0]
    3c7e:	2107      	movs	r1, #7
    3c80:	400b      	ands	r3, r1
    3c82:	b2db      	uxtb	r3, r3
    3c84:	4313      	orrs	r3, r2
    3c86:	b2da      	uxtb	r2, r3
    3c88:	687b      	ldr	r3, [r7, #4]
    3c8a:	725a      	strb	r2, [r3, #9]
	PM_CRITICAL_SECTION_LEAVE();
}
    3c8c:	46c0      	nop			; (mov r8, r8)
    3c8e:	46bd      	mov	sp, r7
    3c90:	b002      	add	sp, #8
    3c92:	bd80      	pop	{r7, pc}

00003c94 <hri_pm_set_APBBSEL_APBBDIV_bf>:
{
	return ((Pm *)hw)->APBASEL.reg;
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
    3c94:	b580      	push	{r7, lr}
    3c96:	b082      	sub	sp, #8
    3c98:	af00      	add	r7, sp, #0
    3c9a:	6078      	str	r0, [r7, #4]
    3c9c:	000a      	movs	r2, r1
    3c9e:	1cfb      	adds	r3, r7, #3
    3ca0:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    3ca2:	687b      	ldr	r3, [r7, #4]
    3ca4:	7a9b      	ldrb	r3, [r3, #10]
    3ca6:	b2da      	uxtb	r2, r3
    3ca8:	1cfb      	adds	r3, r7, #3
    3caa:	781b      	ldrb	r3, [r3, #0]
    3cac:	2107      	movs	r1, #7
    3cae:	400b      	ands	r3, r1
    3cb0:	b2db      	uxtb	r3, r3
    3cb2:	4313      	orrs	r3, r2
    3cb4:	b2da      	uxtb	r2, r3
    3cb6:	687b      	ldr	r3, [r7, #4]
    3cb8:	729a      	strb	r2, [r3, #10]
	PM_CRITICAL_SECTION_LEAVE();
}
    3cba:	46c0      	nop			; (mov r8, r8)
    3cbc:	46bd      	mov	sp, r7
    3cbe:	b002      	add	sp, #8
    3cc0:	bd80      	pop	{r7, pc}

00003cc2 <hri_pm_set_APBCSEL_APBCDIV_bf>:
{
	return ((Pm *)hw)->APBBSEL.reg;
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
    3cc2:	b580      	push	{r7, lr}
    3cc4:	b082      	sub	sp, #8
    3cc6:	af00      	add	r7, sp, #0
    3cc8:	6078      	str	r0, [r7, #4]
    3cca:	000a      	movs	r2, r1
    3ccc:	1cfb      	adds	r3, r7, #3
    3cce:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    3cd0:	687b      	ldr	r3, [r7, #4]
    3cd2:	7adb      	ldrb	r3, [r3, #11]
    3cd4:	b2da      	uxtb	r2, r3
    3cd6:	1cfb      	adds	r3, r7, #3
    3cd8:	781b      	ldrb	r3, [r3, #0]
    3cda:	2107      	movs	r1, #7
    3cdc:	400b      	ands	r3, r1
    3cde:	b2db      	uxtb	r3, r3
    3ce0:	4313      	orrs	r3, r2
    3ce2:	b2da      	uxtb	r2, r3
    3ce4:	687b      	ldr	r3, [r7, #4]
    3ce6:	72da      	strb	r2, [r3, #11]
	PM_CRITICAL_SECTION_LEAVE();
}
    3ce8:	46c0      	nop			; (mov r8, r8)
    3cea:	46bd      	mov	sp, r7
    3cec:	b002      	add	sp, #8
    3cee:	bd80      	pop	{r7, pc}

00003cf0 <_pm_init>:

/**
 * \brief Power Manager Init
 */
void _pm_init(void)
{
    3cf0:	b580      	push	{r7, lr}
    3cf2:	af00      	add	r7, sp, #0
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
    3cf4:	4b0b      	ldr	r3, [pc, #44]	; (3d24 <_pm_init+0x34>)
    3cf6:	2100      	movs	r1, #0
    3cf8:	0018      	movs	r0, r3
    3cfa:	4b0b      	ldr	r3, [pc, #44]	; (3d28 <_pm_init+0x38>)
    3cfc:	4798      	blx	r3
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
    3cfe:	4b09      	ldr	r3, [pc, #36]	; (3d24 <_pm_init+0x34>)
    3d00:	2100      	movs	r1, #0
    3d02:	0018      	movs	r0, r3
    3d04:	4b09      	ldr	r3, [pc, #36]	; (3d2c <_pm_init+0x3c>)
    3d06:	4798      	blx	r3
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
    3d08:	4b06      	ldr	r3, [pc, #24]	; (3d24 <_pm_init+0x34>)
    3d0a:	2100      	movs	r1, #0
    3d0c:	0018      	movs	r0, r3
    3d0e:	4b08      	ldr	r3, [pc, #32]	; (3d30 <_pm_init+0x40>)
    3d10:	4798      	blx	r3
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
    3d12:	4b04      	ldr	r3, [pc, #16]	; (3d24 <_pm_init+0x34>)
    3d14:	2100      	movs	r1, #0
    3d16:	0018      	movs	r0, r3
    3d18:	4b06      	ldr	r3, [pc, #24]	; (3d34 <_pm_init+0x44>)
    3d1a:	4798      	blx	r3
}
    3d1c:	46c0      	nop			; (mov r8, r8)
    3d1e:	46bd      	mov	sp, r7
    3d20:	bd80      	pop	{r7, pc}
    3d22:	46c0      	nop			; (mov r8, r8)
    3d24:	40000400 	.word	0x40000400
    3d28:	00003c39 	.word	0x00003c39
    3d2c:	00003c67 	.word	0x00003c67
    3d30:	00003c95 	.word	0x00003c95
    3d34:	00003cc3 	.word	0x00003cc3

00003d38 <__NVIC_EnableIRQ>:
{
    3d38:	b580      	push	{r7, lr}
    3d3a:	b082      	sub	sp, #8
    3d3c:	af00      	add	r7, sp, #0
    3d3e:	0002      	movs	r2, r0
    3d40:	1dfb      	adds	r3, r7, #7
    3d42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    3d44:	1dfb      	adds	r3, r7, #7
    3d46:	781b      	ldrb	r3, [r3, #0]
    3d48:	2b7f      	cmp	r3, #127	; 0x7f
    3d4a:	d809      	bhi.n	3d60 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3d4c:	4b06      	ldr	r3, [pc, #24]	; (3d68 <__NVIC_EnableIRQ+0x30>)
    3d4e:	1dfa      	adds	r2, r7, #7
    3d50:	7812      	ldrb	r2, [r2, #0]
    3d52:	0011      	movs	r1, r2
    3d54:	221f      	movs	r2, #31
    3d56:	400a      	ands	r2, r1
    3d58:	2101      	movs	r1, #1
    3d5a:	4091      	lsls	r1, r2
    3d5c:	000a      	movs	r2, r1
    3d5e:	601a      	str	r2, [r3, #0]
}
    3d60:	46c0      	nop			; (mov r8, r8)
    3d62:	46bd      	mov	sp, r7
    3d64:	b002      	add	sp, #8
    3d66:	bd80      	pop	{r7, pc}
    3d68:	e000e100 	.word	0xe000e100

00003d6c <hri_rtc_wait_for_sync>:
typedef uint8_t  hri_rtcmode2_intenset_reg_t;
typedef uint8_t  hri_rtcmode2_intflag_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtc_wait_for_sync(const void *const hw)
{
    3d6c:	b580      	push	{r7, lr}
    3d6e:	b082      	sub	sp, #8
    3d70:	af00      	add	r7, sp, #0
    3d72:	6078      	str	r0, [r7, #4]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    3d74:	46c0      	nop			; (mov r8, r8)
    3d76:	687b      	ldr	r3, [r7, #4]
    3d78:	7a9b      	ldrb	r3, [r3, #10]
    3d7a:	061b      	lsls	r3, r3, #24
    3d7c:	0fdb      	lsrs	r3, r3, #31
    3d7e:	b2db      	uxtb	r3, r3
    3d80:	2b00      	cmp	r3, #0
    3d82:	d1f8      	bne.n	3d76 <hri_rtc_wait_for_sync+0xa>
		;
}
    3d84:	46c0      	nop			; (mov r8, r8)
    3d86:	46bd      	mov	sp, r7
    3d88:	b002      	add	sp, #8
    3d8a:	bd80      	pop	{r7, pc}

00003d8c <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    3d8c:	b580      	push	{r7, lr}
    3d8e:	b082      	sub	sp, #8
    3d90:	af00      	add	r7, sp, #0
    3d92:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    3d94:	687b      	ldr	r3, [r7, #4]
    3d96:	2201      	movs	r2, #1
    3d98:	721a      	strb	r2, [r3, #8]
}
    3d9a:	46c0      	nop			; (mov r8, r8)
    3d9c:	46bd      	mov	sp, r7
    3d9e:	b002      	add	sp, #8
    3da0:	bd80      	pop	{r7, pc}

00003da2 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    3da2:	b580      	push	{r7, lr}
    3da4:	b082      	sub	sp, #8
    3da6:	af00      	add	r7, sp, #0
    3da8:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    3daa:	687b      	ldr	r3, [r7, #4]
    3dac:	7a1b      	ldrb	r3, [r3, #8]
    3dae:	b2db      	uxtb	r3, r3
}
    3db0:	0018      	movs	r0, r3
    3db2:	46bd      	mov	sp, r7
    3db4:	b002      	add	sp, #8
    3db6:	bd80      	pop	{r7, pc}

00003db8 <hri_rtcmode0_set_INTEN_CMP0_bit>:
{
	((Rtc *)hw)->MODE2.INTFLAG.reg = mask;
}

static inline void hri_rtcmode0_set_INTEN_CMP0_bit(const void *const hw)
{
    3db8:	b580      	push	{r7, lr}
    3dba:	b082      	sub	sp, #8
    3dbc:	af00      	add	r7, sp, #0
    3dbe:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    3dc0:	687b      	ldr	r3, [r7, #4]
    3dc2:	2201      	movs	r2, #1
    3dc4:	71da      	strb	r2, [r3, #7]
}
    3dc6:	46c0      	nop			; (mov r8, r8)
    3dc8:	46bd      	mov	sp, r7
    3dca:	b002      	add	sp, #8
    3dcc:	bd80      	pop	{r7, pc}
	...

00003dd0 <hri_rtcmode0_set_CTRL_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRL_SWRST) >> RTC_MODE0_CTRL_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRL_ENABLE_bit(const void *const hw)
{
    3dd0:	b580      	push	{r7, lr}
    3dd2:	b082      	sub	sp, #8
    3dd4:	af00      	add	r7, sp, #0
    3dd6:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    3dd8:	687b      	ldr	r3, [r7, #4]
    3dda:	881b      	ldrh	r3, [r3, #0]
    3ddc:	b29b      	uxth	r3, r3
    3dde:	2202      	movs	r2, #2
    3de0:	4313      	orrs	r3, r2
    3de2:	b29a      	uxth	r2, r3
    3de4:	687b      	ldr	r3, [r7, #4]
    3de6:	801a      	strh	r2, [r3, #0]
	hri_rtc_wait_for_sync(hw);
    3de8:	687b      	ldr	r3, [r7, #4]
    3dea:	0018      	movs	r0, r3
    3dec:	4b02      	ldr	r3, [pc, #8]	; (3df8 <hri_rtcmode0_set_CTRL_ENABLE_bit+0x28>)
    3dee:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    3df0:	46c0      	nop			; (mov r8, r8)
    3df2:	46bd      	mov	sp, r7
    3df4:	b002      	add	sp, #8
    3df6:	bd80      	pop	{r7, pc}
    3df8:	00003d6d 	.word	0x00003d6d

00003dfc <hri_rtcmode0_get_CTRL_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRL_ENABLE_bit(const void *const hw)
{
    3dfc:	b580      	push	{r7, lr}
    3dfe:	b084      	sub	sp, #16
    3e00:	af00      	add	r7, sp, #0
    3e02:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtc_wait_for_sync(hw);
    3e04:	687b      	ldr	r3, [r7, #4]
    3e06:	0018      	movs	r0, r3
    3e08:	4b0d      	ldr	r3, [pc, #52]	; (3e40 <hri_rtcmode0_get_CTRL_ENABLE_bit+0x44>)
    3e0a:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
    3e0c:	230e      	movs	r3, #14
    3e0e:	18fb      	adds	r3, r7, r3
    3e10:	687a      	ldr	r2, [r7, #4]
    3e12:	8812      	ldrh	r2, [r2, #0]
    3e14:	801a      	strh	r2, [r3, #0]
	tmp = (tmp & RTC_MODE0_CTRL_ENABLE) >> RTC_MODE0_CTRL_ENABLE_Pos;
    3e16:	230e      	movs	r3, #14
    3e18:	18fb      	adds	r3, r7, r3
    3e1a:	881b      	ldrh	r3, [r3, #0]
    3e1c:	085b      	lsrs	r3, r3, #1
    3e1e:	b29a      	uxth	r2, r3
    3e20:	230e      	movs	r3, #14
    3e22:	18fb      	adds	r3, r7, r3
    3e24:	2101      	movs	r1, #1
    3e26:	400a      	ands	r2, r1
    3e28:	801a      	strh	r2, [r3, #0]
	return (bool)tmp;
    3e2a:	230e      	movs	r3, #14
    3e2c:	18fb      	adds	r3, r7, r3
    3e2e:	881b      	ldrh	r3, [r3, #0]
    3e30:	1e5a      	subs	r2, r3, #1
    3e32:	4193      	sbcs	r3, r2
    3e34:	b2db      	uxtb	r3, r3
}
    3e36:	0018      	movs	r0, r3
    3e38:	46bd      	mov	sp, r7
    3e3a:	b004      	add	sp, #16
    3e3c:	bd80      	pop	{r7, pc}
    3e3e:	46c0      	nop			; (mov r8, r8)
    3e40:	00003d6d 	.word	0x00003d6d

00003e44 <hri_rtcmode0_write_CTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
    3e44:	b580      	push	{r7, lr}
    3e46:	b082      	sub	sp, #8
    3e48:	af00      	add	r7, sp, #0
    3e4a:	6078      	str	r0, [r7, #4]
    3e4c:	000a      	movs	r2, r1
    3e4e:	1cbb      	adds	r3, r7, #2
    3e50:	801a      	strh	r2, [r3, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    3e52:	687b      	ldr	r3, [r7, #4]
    3e54:	1cba      	adds	r2, r7, #2
    3e56:	8812      	ldrh	r2, [r2, #0]
    3e58:	801a      	strh	r2, [r3, #0]
	hri_rtc_wait_for_sync(hw);
    3e5a:	687b      	ldr	r3, [r7, #4]
    3e5c:	0018      	movs	r0, r3
    3e5e:	4b03      	ldr	r3, [pc, #12]	; (3e6c <hri_rtcmode0_write_CTRL_reg+0x28>)
    3e60:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    3e62:	46c0      	nop			; (mov r8, r8)
    3e64:	46bd      	mov	sp, r7
    3e66:	b002      	add	sp, #8
    3e68:	bd80      	pop	{r7, pc}
    3e6a:	46c0      	nop			; (mov r8, r8)
    3e6c:	00003d6d 	.word	0x00003d6d

00003e70 <hri_rtcmode0_write_COUNT_COUNT_bf>:
	tmp = (tmp & RTC_MODE0_COUNT_COUNT(mask)) >> RTC_MODE0_COUNT_COUNT_Pos;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_COUNT_bf(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    3e70:	b580      	push	{r7, lr}
    3e72:	b084      	sub	sp, #16
    3e74:	af00      	add	r7, sp, #0
    3e76:	6078      	str	r0, [r7, #4]
    3e78:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
    3e7a:	687b      	ldr	r3, [r7, #4]
    3e7c:	691b      	ldr	r3, [r3, #16]
    3e7e:	60fb      	str	r3, [r7, #12]
	tmp &= ~RTC_MODE0_COUNT_COUNT_Msk;
    3e80:	2300      	movs	r3, #0
    3e82:	60fb      	str	r3, [r7, #12]
	tmp |= RTC_MODE0_COUNT_COUNT(data);
    3e84:	68fa      	ldr	r2, [r7, #12]
    3e86:	683b      	ldr	r3, [r7, #0]
    3e88:	4313      	orrs	r3, r2
    3e8a:	60fb      	str	r3, [r7, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = tmp;
    3e8c:	687b      	ldr	r3, [r7, #4]
    3e8e:	68fa      	ldr	r2, [r7, #12]
    3e90:	611a      	str	r2, [r3, #16]
	hri_rtc_wait_for_sync(hw);
    3e92:	687b      	ldr	r3, [r7, #4]
    3e94:	0018      	movs	r0, r3
    3e96:	4b03      	ldr	r3, [pc, #12]	; (3ea4 <hri_rtcmode0_write_COUNT_COUNT_bf+0x34>)
    3e98:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    3e9a:	46c0      	nop			; (mov r8, r8)
    3e9c:	46bd      	mov	sp, r7
    3e9e:	b004      	add	sp, #16
    3ea0:	bd80      	pop	{r7, pc}
    3ea2:	46c0      	nop			; (mov r8, r8)
    3ea4:	00003d6d 	.word	0x00003d6d

00003ea8 <hri_rtcmode0_write_COMP_COMP_bf>:
	tmp = (tmp & RTC_MODE0_COMP_COMP(mask)) >> RTC_MODE0_COMP_COMP_Pos;
	return tmp;
}

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
    3ea8:	b580      	push	{r7, lr}
    3eaa:	b086      	sub	sp, #24
    3eac:	af00      	add	r7, sp, #0
    3eae:	60f8      	str	r0, [r7, #12]
    3eb0:	607a      	str	r2, [r7, #4]
    3eb2:	230b      	movs	r3, #11
    3eb4:	18fb      	adds	r3, r7, r3
    3eb6:	1c0a      	adds	r2, r1, #0
    3eb8:	701a      	strb	r2, [r3, #0]
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
    3eba:	230b      	movs	r3, #11
    3ebc:	18fb      	adds	r3, r7, r3
    3ebe:	781a      	ldrb	r2, [r3, #0]
    3ec0:	68fb      	ldr	r3, [r7, #12]
    3ec2:	3206      	adds	r2, #6
    3ec4:	0092      	lsls	r2, r2, #2
    3ec6:	58d3      	ldr	r3, [r2, r3]
    3ec8:	617b      	str	r3, [r7, #20]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
    3eca:	2300      	movs	r3, #0
    3ecc:	617b      	str	r3, [r7, #20]
	tmp |= RTC_MODE0_COMP_COMP(data);
    3ece:	697a      	ldr	r2, [r7, #20]
    3ed0:	687b      	ldr	r3, [r7, #4]
    3ed2:	4313      	orrs	r3, r2
    3ed4:	617b      	str	r3, [r7, #20]
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
    3ed6:	230b      	movs	r3, #11
    3ed8:	18fb      	adds	r3, r7, r3
    3eda:	781a      	ldrb	r2, [r3, #0]
    3edc:	68fb      	ldr	r3, [r7, #12]
    3ede:	3206      	adds	r2, #6
    3ee0:	0092      	lsls	r2, r2, #2
    3ee2:	6979      	ldr	r1, [r7, #20]
    3ee4:	50d1      	str	r1, [r2, r3]
	hri_rtc_wait_for_sync(hw);
    3ee6:	68fb      	ldr	r3, [r7, #12]
    3ee8:	0018      	movs	r0, r3
    3eea:	4b03      	ldr	r3, [pc, #12]	; (3ef8 <hri_rtcmode0_write_COMP_COMP_bf+0x50>)
    3eec:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    3eee:	46c0      	nop			; (mov r8, r8)
    3ef0:	46bd      	mov	sp, r7
    3ef2:	b006      	add	sp, #24
    3ef4:	bd80      	pop	{r7, pc}
    3ef6:	46c0      	nop			; (mov r8, r8)
    3ef8:	00003d6d 	.word	0x00003d6d

00003efc <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    3efc:	b580      	push	{r7, lr}
    3efe:	b084      	sub	sp, #16
    3f00:	af00      	add	r7, sp, #0
    3f02:	6078      	str	r0, [r7, #4]
    3f04:	6039      	str	r1, [r7, #0]
	ASSERT(dev);
    3f06:	687b      	ldr	r3, [r7, #4]
    3f08:	1e5a      	subs	r2, r3, #1
    3f0a:	4193      	sbcs	r3, r2
    3f0c:	b2db      	uxtb	r3, r3
    3f0e:	4923      	ldr	r1, [pc, #140]	; (3f9c <_timer_init+0xa0>)
    3f10:	2233      	movs	r2, #51	; 0x33
    3f12:	0018      	movs	r0, r3
    3f14:	4b22      	ldr	r3, [pc, #136]	; (3fa0 <_timer_init+0xa4>)
    3f16:	4798      	blx	r3

	uint16_t register_value;
	dev->hw = hw;
    3f18:	687b      	ldr	r3, [r7, #4]
    3f1a:	683a      	ldr	r2, [r7, #0]
    3f1c:	60da      	str	r2, [r3, #12]

	hri_rtcmode0_write_CTRL_reg(dev->hw, RTC_MODE0_CTRL_SWRST);
    3f1e:	687b      	ldr	r3, [r7, #4]
    3f20:	68db      	ldr	r3, [r3, #12]
    3f22:	2101      	movs	r1, #1
    3f24:	0018      	movs	r0, r3
    3f26:	4b1f      	ldr	r3, [pc, #124]	; (3fa4 <_timer_init+0xa8>)
    3f28:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw);
    3f2a:	687b      	ldr	r3, [r7, #4]
    3f2c:	68db      	ldr	r3, [r3, #12]
    3f2e:	0018      	movs	r0, r3
    3f30:	4b1d      	ldr	r3, [pc, #116]	; (3fa8 <_timer_init+0xac>)
    3f32:	4798      	blx	r3

	/* Set mode 0 */
	register_value = RTC_MODE0_CTRL_MODE(0);
    3f34:	230e      	movs	r3, #14
    3f36:	18fb      	adds	r3, r7, r3
    3f38:	2200      	movs	r2, #0
    3f3a:	801a      	strh	r2, [r3, #0]

	/* Set prescaler */
	register_value |= RTC_MODE0_CTRL_PRESCALER(CONF_RTC_PRESCALER);
    3f3c:	230e      	movs	r3, #14
    3f3e:	18fb      	adds	r3, r7, r3
    3f40:	220e      	movs	r2, #14
    3f42:	18ba      	adds	r2, r7, r2
    3f44:	8812      	ldrh	r2, [r2, #0]
    3f46:	21c0      	movs	r1, #192	; 0xc0
    3f48:	0089      	lsls	r1, r1, #2
    3f4a:	430a      	orrs	r2, r1
    3f4c:	801a      	strh	r2, [r3, #0]

	/* clear counter on compare/timer match */
	register_value |= RTC_MODE0_CTRL_MATCHCLR;
    3f4e:	230e      	movs	r3, #14
    3f50:	18fb      	adds	r3, r7, r3
    3f52:	220e      	movs	r2, #14
    3f54:	18ba      	adds	r2, r7, r2
    3f56:	8812      	ldrh	r2, [r2, #0]
    3f58:	2180      	movs	r1, #128	; 0x80
    3f5a:	430a      	orrs	r2, r1
    3f5c:	801a      	strh	r2, [r3, #0]

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);
    3f5e:	687b      	ldr	r3, [r7, #4]
    3f60:	68da      	ldr	r2, [r3, #12]
    3f62:	230e      	movs	r3, #14
    3f64:	18fb      	adds	r3, r7, r3
    3f66:	881b      	ldrh	r3, [r3, #0]
    3f68:	0019      	movs	r1, r3
    3f6a:	0010      	movs	r0, r2
    3f6c:	4b0d      	ldr	r3, [pc, #52]	; (3fa4 <_timer_init+0xa8>)
    3f6e:	4798      	blx	r3

	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, CONF_RTC_COMP_VAL);
    3f70:	687b      	ldr	r3, [r7, #4]
    3f72:	68d8      	ldr	r0, [r3, #12]
    3f74:	23fa      	movs	r3, #250	; 0xfa
    3f76:	009b      	lsls	r3, r3, #2
    3f78:	001a      	movs	r2, r3
    3f7a:	2100      	movs	r1, #0
    3f7c:	4b0b      	ldr	r3, [pc, #44]	; (3fac <_timer_init+0xb0>)
    3f7e:	4798      	blx	r3
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    3f80:	687b      	ldr	r3, [r7, #4]
    3f82:	68db      	ldr	r3, [r3, #12]
    3f84:	0018      	movs	r0, r3
    3f86:	4b0a      	ldr	r3, [pc, #40]	; (3fb0 <_timer_init+0xb4>)
    3f88:	4798      	blx	r3
	        | (CONF_RTC_PEREO4 << RTC_MODE0_EVCTRL_PEREO4_Pos) | (CONF_RTC_PEREO5 << RTC_MODE0_EVCTRL_PEREO5_Pos)
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	_rtc_dev = dev;
    3f8a:	4b0a      	ldr	r3, [pc, #40]	; (3fb4 <_timer_init+0xb8>)
    3f8c:	687a      	ldr	r2, [r7, #4]
    3f8e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    3f90:	2300      	movs	r3, #0
}
    3f92:	0018      	movs	r0, r3
    3f94:	46bd      	mov	sp, r7
    3f96:	b004      	add	sp, #16
    3f98:	bd80      	pop	{r7, pc}
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	0000c420 	.word	0x0000c420
    3fa0:	00002cd5 	.word	0x00002cd5
    3fa4:	00003e45 	.word	0x00003e45
    3fa8:	00003d6d 	.word	0x00003d6d
    3fac:	00003ea9 	.word	0x00003ea9
    3fb0:	00003db9 	.word	0x00003db9
    3fb4:	20000218 	.word	0x20000218

00003fb8 <_timer_start>:

/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const dev)
{
    3fb8:	b580      	push	{r7, lr}
    3fba:	b082      	sub	sp, #8
    3fbc:	af00      	add	r7, sp, #0
    3fbe:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    3fc0:	687b      	ldr	r3, [r7, #4]
    3fc2:	2b00      	cmp	r3, #0
    3fc4:	d005      	beq.n	3fd2 <_timer_start+0x1a>
    3fc6:	687b      	ldr	r3, [r7, #4]
    3fc8:	68db      	ldr	r3, [r3, #12]
    3fca:	2b00      	cmp	r3, #0
    3fcc:	d001      	beq.n	3fd2 <_timer_start+0x1a>
    3fce:	2301      	movs	r3, #1
    3fd0:	e000      	b.n	3fd4 <_timer_start+0x1c>
    3fd2:	2300      	movs	r3, #0
    3fd4:	1c1a      	adds	r2, r3, #0
    3fd6:	2301      	movs	r3, #1
    3fd8:	4013      	ands	r3, r2
    3fda:	b2db      	uxtb	r3, r3
    3fdc:	490d      	ldr	r1, [pc, #52]	; (4014 <_timer_start+0x5c>)
    3fde:	226a      	movs	r2, #106	; 0x6a
    3fe0:	0018      	movs	r0, r3
    3fe2:	4b0d      	ldr	r3, [pc, #52]	; (4018 <_timer_start+0x60>)
    3fe4:	4798      	blx	r3

	NVIC_EnableIRQ(RTC_IRQn);
    3fe6:	2003      	movs	r0, #3
    3fe8:	4b0c      	ldr	r3, [pc, #48]	; (401c <_timer_start+0x64>)
    3fea:	4798      	blx	r3
	hri_rtcmode0_write_COUNT_COUNT_bf(dev->hw, 0);
    3fec:	687b      	ldr	r3, [r7, #4]
    3fee:	68db      	ldr	r3, [r3, #12]
    3ff0:	2100      	movs	r1, #0
    3ff2:	0018      	movs	r0, r3
    3ff4:	4b0a      	ldr	r3, [pc, #40]	; (4020 <_timer_start+0x68>)
    3ff6:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw);
    3ff8:	687b      	ldr	r3, [r7, #4]
    3ffa:	68db      	ldr	r3, [r3, #12]
    3ffc:	0018      	movs	r0, r3
    3ffe:	4b09      	ldr	r3, [pc, #36]	; (4024 <_timer_start+0x6c>)
    4000:	4798      	blx	r3
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
    4002:	687b      	ldr	r3, [r7, #4]
    4004:	68db      	ldr	r3, [r3, #12]
    4006:	0018      	movs	r0, r3
    4008:	4b07      	ldr	r3, [pc, #28]	; (4028 <_timer_start+0x70>)
    400a:	4798      	blx	r3
}
    400c:	46c0      	nop			; (mov r8, r8)
    400e:	46bd      	mov	sp, r7
    4010:	b002      	add	sp, #8
    4012:	bd80      	pop	{r7, pc}
    4014:	0000c420 	.word	0x0000c420
    4018:	00002cd5 	.word	0x00002cd5
    401c:	00003d39 	.word	0x00003d39
    4020:	00003e71 	.word	0x00003e71
    4024:	00003d6d 	.word	0x00003d6d
    4028:	00003dd1 	.word	0x00003dd1

0000402c <_timer_is_started>:

/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const dev)
{
    402c:	b580      	push	{r7, lr}
    402e:	b082      	sub	sp, #8
    4030:	af00      	add	r7, sp, #0
    4032:	6078      	str	r0, [r7, #4]
	return hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw);
    4034:	687b      	ldr	r3, [r7, #4]
    4036:	68db      	ldr	r3, [r3, #12]
    4038:	0018      	movs	r0, r3
    403a:	4b03      	ldr	r3, [pc, #12]	; (4048 <_timer_is_started+0x1c>)
    403c:	4798      	blx	r3
    403e:	0003      	movs	r3, r0
}
    4040:	0018      	movs	r0, r3
    4042:	46bd      	mov	sp, r7
    4044:	b002      	add	sp, #8
    4046:	bd80      	pop	{r7, pc}
    4048:	00003dfd 	.word	0x00003dfd

0000404c <_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _timer_set_irq(struct _timer_device *const dev)
{
    404c:	b580      	push	{r7, lr}
    404e:	b082      	sub	sp, #8
    4050:	af00      	add	r7, sp, #0
    4052:	6078      	str	r0, [r7, #4]
	(void)dev;
}
    4054:	46c0      	nop			; (mov r8, r8)
    4056:	46bd      	mov	sp, r7
    4058:	b002      	add	sp, #8
    405a:	bd80      	pop	{r7, pc}

0000405c <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
    405c:	b580      	push	{r7, lr}
    405e:	b084      	sub	sp, #16
    4060:	af00      	add	r7, sp, #0
    4062:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    4064:	687b      	ldr	r3, [r7, #4]
    4066:	68db      	ldr	r3, [r3, #12]
    4068:	0018      	movs	r0, r3
    406a:	4b0f      	ldr	r3, [pc, #60]	; (40a8 <_rtc_timer_interrupt_handler+0x4c>)
    406c:	4798      	blx	r3
    406e:	0003      	movs	r3, r0
    4070:	001a      	movs	r2, r3
    4072:	230e      	movs	r3, #14
    4074:	18fb      	adds	r3, r7, r3
    4076:	801a      	strh	r2, [r3, #0]

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    4078:	230e      	movs	r3, #14
    407a:	18fb      	adds	r3, r7, r3
    407c:	881b      	ldrh	r3, [r3, #0]
    407e:	2201      	movs	r2, #1
    4080:	4013      	ands	r3, r2
    4082:	d00d      	beq.n	40a0 <_rtc_timer_interrupt_handler+0x44>
		if (dev->timer_cb.period_expired) {
    4084:	687b      	ldr	r3, [r7, #4]
    4086:	681b      	ldr	r3, [r3, #0]
    4088:	2b00      	cmp	r3, #0
    408a:	d004      	beq.n	4096 <_rtc_timer_interrupt_handler+0x3a>
			dev->timer_cb.period_expired(dev);
    408c:	687b      	ldr	r3, [r7, #4]
    408e:	681b      	ldr	r3, [r3, #0]
    4090:	687a      	ldr	r2, [r7, #4]
    4092:	0010      	movs	r0, r2
    4094:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    4096:	687b      	ldr	r3, [r7, #4]
    4098:	68db      	ldr	r3, [r3, #12]
    409a:	0018      	movs	r0, r3
    409c:	4b03      	ldr	r3, [pc, #12]	; (40ac <_rtc_timer_interrupt_handler+0x50>)
    409e:	4798      	blx	r3
	}
}
    40a0:	46c0      	nop			; (mov r8, r8)
    40a2:	46bd      	mov	sp, r7
    40a4:	b004      	add	sp, #16
    40a6:	bd80      	pop	{r7, pc}
    40a8:	00003da3 	.word	0x00003da3
    40ac:	00003d8d 	.word	0x00003d8d

000040b0 <_rtc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
    40b0:	b580      	push	{r7, lr}
    40b2:	af00      	add	r7, sp, #0
	return NULL;
    40b4:	2300      	movs	r3, #0
}
    40b6:	0018      	movs	r0, r3
    40b8:	46bd      	mov	sp, r7
    40ba:	bd80      	pop	{r7, pc}

000040bc <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    40bc:	b580      	push	{r7, lr}
    40be:	af00      	add	r7, sp, #0
	_rtc_timer_interrupt_handler(_rtc_dev);
    40c0:	4b03      	ldr	r3, [pc, #12]	; (40d0 <RTC_Handler+0x14>)
    40c2:	681b      	ldr	r3, [r3, #0]
    40c4:	0018      	movs	r0, r3
    40c6:	4b03      	ldr	r3, [pc, #12]	; (40d4 <RTC_Handler+0x18>)
    40c8:	4798      	blx	r3
}
    40ca:	46c0      	nop			; (mov r8, r8)
    40cc:	46bd      	mov	sp, r7
    40ce:	bd80      	pop	{r7, pc}
    40d0:	20000218 	.word	0x20000218
    40d4:	0000405d 	.word	0x0000405d

000040d8 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intenset_reg_t;
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    40d8:	b580      	push	{r7, lr}
    40da:	b082      	sub	sp, #8
    40dc:	af00      	add	r7, sp, #0
    40de:	6078      	str	r0, [r7, #4]
    40e0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    40e2:	46c0      	nop			; (mov r8, r8)
    40e4:	687b      	ldr	r3, [r7, #4]
    40e6:	69db      	ldr	r3, [r3, #28]
    40e8:	683a      	ldr	r2, [r7, #0]
    40ea:	4013      	ands	r3, r2
    40ec:	d1fa      	bne.n	40e4 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    40ee:	46c0      	nop			; (mov r8, r8)
    40f0:	46bd      	mov	sp, r7
    40f2:	b002      	add	sp, #8
    40f4:	bd80      	pop	{r7, pc}

000040f6 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    40f6:	b580      	push	{r7, lr}
    40f8:	b082      	sub	sp, #8
    40fa:	af00      	add	r7, sp, #0
    40fc:	6078      	str	r0, [r7, #4]
    40fe:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    4100:	687b      	ldr	r3, [r7, #4]
    4102:	69db      	ldr	r3, [r3, #28]
    4104:	683a      	ldr	r2, [r7, #0]
    4106:	4013      	ands	r3, r2
    4108:	1e5a      	subs	r2, r3, #1
    410a:	4193      	sbcs	r3, r2
    410c:	b2db      	uxtb	r3, r3
}
    410e:	0018      	movs	r0, r3
    4110:	46bd      	mov	sp, r7
    4112:	b002      	add	sp, #8
    4114:	bd80      	pop	{r7, pc}

00004116 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    4116:	b580      	push	{r7, lr}
    4118:	b082      	sub	sp, #8
    411a:	af00      	add	r7, sp, #0
    411c:	6078      	str	r0, [r7, #4]
    411e:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4120:	46c0      	nop			; (mov r8, r8)
    4122:	687b      	ldr	r3, [r7, #4]
    4124:	69db      	ldr	r3, [r3, #28]
    4126:	683a      	ldr	r2, [r7, #0]
    4128:	4013      	ands	r3, r2
    412a:	d1fa      	bne.n	4122 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    412c:	46c0      	nop			; (mov r8, r8)
    412e:	46bd      	mov	sp, r7
    4130:	b002      	add	sp, #8
    4132:	bd80      	pop	{r7, pc}

00004134 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    4134:	b580      	push	{r7, lr}
    4136:	b082      	sub	sp, #8
    4138:	af00      	add	r7, sp, #0
    413a:	6078      	str	r0, [r7, #4]
    413c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    413e:	687b      	ldr	r3, [r7, #4]
    4140:	69db      	ldr	r3, [r3, #28]
    4142:	683a      	ldr	r2, [r7, #0]
    4144:	4013      	ands	r3, r2
    4146:	1e5a      	subs	r2, r3, #1
    4148:	4193      	sbcs	r3, r2
    414a:	b2db      	uxtb	r3, r3
}
    414c:	0018      	movs	r0, r3
    414e:	46bd      	mov	sp, r7
    4150:	b002      	add	sp, #8
    4152:	bd80      	pop	{r7, pc}

00004154 <hri_sercomusart_wait_for_sync>:

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    4154:	b580      	push	{r7, lr}
    4156:	b082      	sub	sp, #8
    4158:	af00      	add	r7, sp, #0
    415a:	6078      	str	r0, [r7, #4]
    415c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    415e:	46c0      	nop			; (mov r8, r8)
    4160:	687b      	ldr	r3, [r7, #4]
    4162:	69db      	ldr	r3, [r3, #28]
    4164:	683a      	ldr	r2, [r7, #0]
    4166:	4013      	ands	r3, r2
    4168:	d1fa      	bne.n	4160 <hri_sercomusart_wait_for_sync+0xc>
	};
}
    416a:	46c0      	nop			; (mov r8, r8)
    416c:	46bd      	mov	sp, r7
    416e:	b002      	add	sp, #8
    4170:	bd80      	pop	{r7, pc}

00004172 <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    4172:	b580      	push	{r7, lr}
    4174:	b082      	sub	sp, #8
    4176:	af00      	add	r7, sp, #0
    4178:	6078      	str	r0, [r7, #4]
    417a:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    417c:	687b      	ldr	r3, [r7, #4]
    417e:	69db      	ldr	r3, [r3, #28]
    4180:	683a      	ldr	r2, [r7, #0]
    4182:	4013      	ands	r3, r2
    4184:	1e5a      	subs	r2, r3, #1
    4186:	4193      	sbcs	r3, r2
    4188:	b2db      	uxtb	r3, r3
}
    418a:	0018      	movs	r0, r3
    418c:	46bd      	mov	sp, r7
    418e:	b002      	add	sp, #8
    4190:	bd80      	pop	{r7, pc}

00004192 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    4192:	b580      	push	{r7, lr}
    4194:	b082      	sub	sp, #8
    4196:	af00      	add	r7, sp, #0
    4198:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    419a:	687b      	ldr	r3, [r7, #4]
    419c:	2201      	movs	r2, #1
    419e:	761a      	strb	r2, [r3, #24]
}
    41a0:	46c0      	nop			; (mov r8, r8)
    41a2:	46bd      	mov	sp, r7
    41a4:	b002      	add	sp, #8
    41a6:	bd80      	pop	{r7, pc}

000041a8 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    41a8:	b580      	push	{r7, lr}
    41aa:	b082      	sub	sp, #8
    41ac:	af00      	add	r7, sp, #0
    41ae:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    41b0:	687b      	ldr	r3, [r7, #4]
    41b2:	2202      	movs	r2, #2
    41b4:	761a      	strb	r2, [r3, #24]
}
    41b6:	46c0      	nop			; (mov r8, r8)
    41b8:	46bd      	mov	sp, r7
    41ba:	b002      	add	sp, #8
    41bc:	bd80      	pop	{r7, pc}

000041be <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    41be:	b580      	push	{r7, lr}
    41c0:	b082      	sub	sp, #8
    41c2:	af00      	add	r7, sp, #0
    41c4:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    41c6:	687b      	ldr	r3, [r7, #4]
    41c8:	7e1b      	ldrb	r3, [r3, #24]
    41ca:	b2db      	uxtb	r3, r3
}
    41cc:	0018      	movs	r0, r3
    41ce:	46bd      	mov	sp, r7
    41d0:	b002      	add	sp, #8
    41d2:	bd80      	pop	{r7, pc}

000041d4 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    41d4:	b580      	push	{r7, lr}
    41d6:	b084      	sub	sp, #16
    41d8:	af00      	add	r7, sp, #0
    41da:	6078      	str	r0, [r7, #4]
    41dc:	000a      	movs	r2, r1
    41de:	1cfb      	adds	r3, r7, #3
    41e0:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    41e2:	230f      	movs	r3, #15
    41e4:	18fb      	adds	r3, r7, r3
    41e6:	687a      	ldr	r2, [r7, #4]
    41e8:	7e12      	ldrb	r2, [r2, #24]
    41ea:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    41ec:	230f      	movs	r3, #15
    41ee:	18fb      	adds	r3, r7, r3
    41f0:	220f      	movs	r2, #15
    41f2:	18ba      	adds	r2, r7, r2
    41f4:	1cf9      	adds	r1, r7, #3
    41f6:	7812      	ldrb	r2, [r2, #0]
    41f8:	7809      	ldrb	r1, [r1, #0]
    41fa:	400a      	ands	r2, r1
    41fc:	701a      	strb	r2, [r3, #0]
	return tmp;
    41fe:	230f      	movs	r3, #15
    4200:	18fb      	adds	r3, r7, r3
    4202:	781b      	ldrb	r3, [r3, #0]
}
    4204:	0018      	movs	r0, r3
    4206:	46bd      	mov	sp, r7
    4208:	b004      	add	sp, #16
    420a:	bd80      	pop	{r7, pc}

0000420c <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    420c:	b580      	push	{r7, lr}
    420e:	b082      	sub	sp, #8
    4210:	af00      	add	r7, sp, #0
    4212:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    4214:	687b      	ldr	r3, [r7, #4]
    4216:	7e1b      	ldrb	r3, [r3, #24]
    4218:	b2db      	uxtb	r3, r3
}
    421a:	0018      	movs	r0, r3
    421c:	46bd      	mov	sp, r7
    421e:	b002      	add	sp, #8
    4220:	bd80      	pop	{r7, pc}

00004222 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    4222:	b580      	push	{r7, lr}
    4224:	b082      	sub	sp, #8
    4226:	af00      	add	r7, sp, #0
    4228:	6078      	str	r0, [r7, #4]
    422a:	000a      	movs	r2, r1
    422c:	1cfb      	adds	r3, r7, #3
    422e:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	1cfa      	adds	r2, r7, #3
    4234:	7812      	ldrb	r2, [r2, #0]
    4236:	761a      	strb	r2, [r3, #24]
}
    4238:	46c0      	nop			; (mov r8, r8)
    423a:	46bd      	mov	sp, r7
    423c:	b002      	add	sp, #8
    423e:	bd80      	pop	{r7, pc}

00004240 <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    4240:	b580      	push	{r7, lr}
    4242:	b082      	sub	sp, #8
    4244:	af00      	add	r7, sp, #0
    4246:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    4248:	687b      	ldr	r3, [r7, #4]
    424a:	7e1b      	ldrb	r3, [r3, #24]
    424c:	b2db      	uxtb	r3, r3
    424e:	001a      	movs	r2, r3
    4250:	2301      	movs	r3, #1
    4252:	4013      	ands	r3, r2
    4254:	1e5a      	subs	r2, r3, #1
    4256:	4193      	sbcs	r3, r2
    4258:	b2db      	uxtb	r3, r3
}
    425a:	0018      	movs	r0, r3
    425c:	46bd      	mov	sp, r7
    425e:	b002      	add	sp, #8
    4260:	bd80      	pop	{r7, pc}

00004262 <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    4262:	b580      	push	{r7, lr}
    4264:	b082      	sub	sp, #8
    4266:	af00      	add	r7, sp, #0
    4268:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    426a:	687b      	ldr	r3, [r7, #4]
    426c:	7e1b      	ldrb	r3, [r3, #24]
    426e:	b2db      	uxtb	r3, r3
    4270:	085b      	lsrs	r3, r3, #1
    4272:	2201      	movs	r2, #1
    4274:	4013      	ands	r3, r2
    4276:	1e5a      	subs	r2, r3, #1
    4278:	4193      	sbcs	r3, r2
    427a:	b2db      	uxtb	r3, r3
}
    427c:	0018      	movs	r0, r3
    427e:	46bd      	mov	sp, r7
    4280:	b002      	add	sp, #8
    4282:	bd80      	pop	{r7, pc}

00004284 <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    4284:	b580      	push	{r7, lr}
    4286:	b082      	sub	sp, #8
    4288:	af00      	add	r7, sp, #0
    428a:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    428c:	687b      	ldr	r3, [r7, #4]
    428e:	7e1b      	ldrb	r3, [r3, #24]
    4290:	b2db      	uxtb	r3, r3
    4292:	089b      	lsrs	r3, r3, #2
    4294:	2201      	movs	r2, #1
    4296:	4013      	ands	r3, r2
    4298:	1e5a      	subs	r2, r3, #1
    429a:	4193      	sbcs	r3, r2
    429c:	b2db      	uxtb	r3, r3
}
    429e:	0018      	movs	r0, r3
    42a0:	46bd      	mov	sp, r7
    42a2:	b002      	add	sp, #8
    42a4:	bd80      	pop	{r7, pc}
	...

000042a8 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    42a8:	b580      	push	{r7, lr}
    42aa:	b082      	sub	sp, #8
    42ac:	af00      	add	r7, sp, #0
    42ae:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    42b0:	687b      	ldr	r3, [r7, #4]
    42b2:	681b      	ldr	r3, [r3, #0]
    42b4:	2202      	movs	r2, #2
    42b6:	4393      	bics	r3, r2
    42b8:	001a      	movs	r2, r3
    42ba:	687b      	ldr	r3, [r7, #4]
    42bc:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    42be:	687b      	ldr	r3, [r7, #4]
    42c0:	2103      	movs	r1, #3
    42c2:	0018      	movs	r0, r3
    42c4:	4b02      	ldr	r3, [pc, #8]	; (42d0 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x28>)
    42c6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    42c8:	46c0      	nop			; (mov r8, r8)
    42ca:	46bd      	mov	sp, r7
    42cc:	b002      	add	sp, #8
    42ce:	bd80      	pop	{r7, pc}
    42d0:	000040d9 	.word	0x000040d9

000042d4 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    42d4:	b580      	push	{r7, lr}
    42d6:	b084      	sub	sp, #16
    42d8:	af00      	add	r7, sp, #0
    42da:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    42dc:	687b      	ldr	r3, [r7, #4]
    42de:	681b      	ldr	r3, [r3, #0]
    42e0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    42e2:	68fb      	ldr	r3, [r7, #12]
    42e4:	0edb      	lsrs	r3, r3, #27
    42e6:	2201      	movs	r2, #1
    42e8:	4013      	ands	r3, r2
    42ea:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    42ec:	68fb      	ldr	r3, [r7, #12]
    42ee:	1e5a      	subs	r2, r3, #1
    42f0:	4193      	sbcs	r3, r2
    42f2:	b2db      	uxtb	r3, r3
}
    42f4:	0018      	movs	r0, r3
    42f6:	46bd      	mov	sp, r7
    42f8:	b004      	add	sp, #16
    42fa:	bd80      	pop	{r7, pc}

000042fc <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    42fc:	b580      	push	{r7, lr}
    42fe:	b084      	sub	sp, #16
    4300:	af00      	add	r7, sp, #0
    4302:	6078      	str	r0, [r7, #4]
    4304:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    4306:	687b      	ldr	r3, [r7, #4]
    4308:	2103      	movs	r1, #3
    430a:	0018      	movs	r0, r3
    430c:	4b06      	ldr	r3, [pc, #24]	; (4328 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    430e:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    4310:	687b      	ldr	r3, [r7, #4]
    4312:	681b      	ldr	r3, [r3, #0]
    4314:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4316:	68fb      	ldr	r3, [r7, #12]
    4318:	683a      	ldr	r2, [r7, #0]
    431a:	4013      	ands	r3, r2
    431c:	60fb      	str	r3, [r7, #12]
	return tmp;
    431e:	68fb      	ldr	r3, [r7, #12]
}
    4320:	0018      	movs	r0, r3
    4322:	46bd      	mov	sp, r7
    4324:	b004      	add	sp, #16
    4326:	bd80      	pop	{r7, pc}
    4328:	000040d9 	.word	0x000040d9

0000432c <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    432c:	b580      	push	{r7, lr}
    432e:	b082      	sub	sp, #8
    4330:	af00      	add	r7, sp, #0
    4332:	6078      	str	r0, [r7, #4]
    4334:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    4336:	687b      	ldr	r3, [r7, #4]
    4338:	683a      	ldr	r2, [r7, #0]
    433a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    433c:	687b      	ldr	r3, [r7, #4]
    433e:	2103      	movs	r1, #3
    4340:	0018      	movs	r0, r3
    4342:	4b03      	ldr	r3, [pc, #12]	; (4350 <hri_sercomi2cm_write_CTRLA_reg+0x24>)
    4344:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    4346:	46c0      	nop			; (mov r8, r8)
    4348:	46bd      	mov	sp, r7
    434a:	b002      	add	sp, #8
    434c:	bd80      	pop	{r7, pc}
    434e:	46c0      	nop			; (mov r8, r8)
    4350:	000040d9 	.word	0x000040d9

00004354 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    4354:	b580      	push	{r7, lr}
    4356:	b084      	sub	sp, #16
    4358:	af00      	add	r7, sp, #0
    435a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    435c:	687b      	ldr	r3, [r7, #4]
    435e:	2103      	movs	r1, #3
    4360:	0018      	movs	r0, r3
    4362:	4b09      	ldr	r3, [pc, #36]	; (4388 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    4364:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    4366:	687b      	ldr	r3, [r7, #4]
    4368:	681b      	ldr	r3, [r3, #0]
    436a:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    436c:	68fb      	ldr	r3, [r7, #12]
    436e:	085b      	lsrs	r3, r3, #1
    4370:	2201      	movs	r2, #1
    4372:	4013      	ands	r3, r2
    4374:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    4376:	68fb      	ldr	r3, [r7, #12]
    4378:	1e5a      	subs	r2, r3, #1
    437a:	4193      	sbcs	r3, r2
    437c:	b2db      	uxtb	r3, r3
}
    437e:	0018      	movs	r0, r3
    4380:	46bd      	mov	sp, r7
    4382:	b004      	add	sp, #16
    4384:	bd80      	pop	{r7, pc}
    4386:	46c0      	nop			; (mov r8, r8)
    4388:	00004117 	.word	0x00004117

0000438c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    438c:	b580      	push	{r7, lr}
    438e:	b082      	sub	sp, #8
    4390:	af00      	add	r7, sp, #0
    4392:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	681b      	ldr	r3, [r3, #0]
    4398:	2202      	movs	r2, #2
    439a:	4393      	bics	r3, r2
    439c:	001a      	movs	r2, r3
    439e:	687b      	ldr	r3, [r7, #4]
    43a0:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    43a2:	687b      	ldr	r3, [r7, #4]
    43a4:	2103      	movs	r1, #3
    43a6:	0018      	movs	r0, r3
    43a8:	4b02      	ldr	r3, [pc, #8]	; (43b4 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x28>)
    43aa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    43ac:	46c0      	nop			; (mov r8, r8)
    43ae:	46bd      	mov	sp, r7
    43b0:	b002      	add	sp, #8
    43b2:	bd80      	pop	{r7, pc}
    43b4:	00004117 	.word	0x00004117

000043b8 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    43b8:	b580      	push	{r7, lr}
    43ba:	b084      	sub	sp, #16
    43bc:	af00      	add	r7, sp, #0
    43be:	6078      	str	r0, [r7, #4]
    43c0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    43c2:	687b      	ldr	r3, [r7, #4]
    43c4:	2103      	movs	r1, #3
    43c6:	0018      	movs	r0, r3
    43c8:	4b06      	ldr	r3, [pc, #24]	; (43e4 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    43ca:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    43cc:	687b      	ldr	r3, [r7, #4]
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    43d2:	68fb      	ldr	r3, [r7, #12]
    43d4:	683a      	ldr	r2, [r7, #0]
    43d6:	4013      	ands	r3, r2
    43d8:	60fb      	str	r3, [r7, #12]
	return tmp;
    43da:	68fb      	ldr	r3, [r7, #12]
}
    43dc:	0018      	movs	r0, r3
    43de:	46bd      	mov	sp, r7
    43e0:	b004      	add	sp, #16
    43e2:	bd80      	pop	{r7, pc}
    43e4:	00004117 	.word	0x00004117

000043e8 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    43e8:	b580      	push	{r7, lr}
    43ea:	b082      	sub	sp, #8
    43ec:	af00      	add	r7, sp, #0
    43ee:	6078      	str	r0, [r7, #4]
    43f0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    43f2:	687b      	ldr	r3, [r7, #4]
    43f4:	683a      	ldr	r2, [r7, #0]
    43f6:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    43f8:	687b      	ldr	r3, [r7, #4]
    43fa:	2103      	movs	r1, #3
    43fc:	0018      	movs	r0, r3
    43fe:	4b03      	ldr	r3, [pc, #12]	; (440c <hri_sercomspi_write_CTRLA_reg+0x24>)
    4400:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    4402:	46c0      	nop			; (mov r8, r8)
    4404:	46bd      	mov	sp, r7
    4406:	b002      	add	sp, #8
    4408:	bd80      	pop	{r7, pc}
    440a:	46c0      	nop			; (mov r8, r8)
    440c:	00004117 	.word	0x00004117

00004410 <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4410:	b580      	push	{r7, lr}
    4412:	b082      	sub	sp, #8
    4414:	af00      	add	r7, sp, #0
    4416:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4418:	687b      	ldr	r3, [r7, #4]
    441a:	681b      	ldr	r3, [r3, #0]
    441c:	2202      	movs	r2, #2
    441e:	431a      	orrs	r2, r3
    4420:	687b      	ldr	r3, [r7, #4]
    4422:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    4424:	687b      	ldr	r3, [r7, #4]
    4426:	2103      	movs	r1, #3
    4428:	0018      	movs	r0, r3
    442a:	4b03      	ldr	r3, [pc, #12]	; (4438 <hri_sercomusart_set_CTRLA_ENABLE_bit+0x28>)
    442c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    442e:	46c0      	nop			; (mov r8, r8)
    4430:	46bd      	mov	sp, r7
    4432:	b002      	add	sp, #8
    4434:	bd80      	pop	{r7, pc}
    4436:	46c0      	nop			; (mov r8, r8)
    4438:	00004155 	.word	0x00004155

0000443c <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    443c:	b580      	push	{r7, lr}
    443e:	b082      	sub	sp, #8
    4440:	af00      	add	r7, sp, #0
    4442:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    4444:	687b      	ldr	r3, [r7, #4]
    4446:	681b      	ldr	r3, [r3, #0]
    4448:	2202      	movs	r2, #2
    444a:	4393      	bics	r3, r2
    444c:	001a      	movs	r2, r3
    444e:	687b      	ldr	r3, [r7, #4]
    4450:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    4452:	687b      	ldr	r3, [r7, #4]
    4454:	2103      	movs	r1, #3
    4456:	0018      	movs	r0, r3
    4458:	4b02      	ldr	r3, [pc, #8]	; (4464 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x28>)
    445a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    445c:	46c0      	nop			; (mov r8, r8)
    445e:	46bd      	mov	sp, r7
    4460:	b002      	add	sp, #8
    4462:	bd80      	pop	{r7, pc}
    4464:	00004155 	.word	0x00004155

00004468 <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    4468:	b580      	push	{r7, lr}
    446a:	b084      	sub	sp, #16
    446c:	af00      	add	r7, sp, #0
    446e:	6078      	str	r0, [r7, #4]
    4470:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    4472:	687b      	ldr	r3, [r7, #4]
    4474:	2103      	movs	r1, #3
    4476:	0018      	movs	r0, r3
    4478:	4b06      	ldr	r3, [pc, #24]	; (4494 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    447a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    447c:	687b      	ldr	r3, [r7, #4]
    447e:	681b      	ldr	r3, [r3, #0]
    4480:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4482:	68fb      	ldr	r3, [r7, #12]
    4484:	683a      	ldr	r2, [r7, #0]
    4486:	4013      	ands	r3, r2
    4488:	60fb      	str	r3, [r7, #12]
	return tmp;
    448a:	68fb      	ldr	r3, [r7, #12]
}
    448c:	0018      	movs	r0, r3
    448e:	46bd      	mov	sp, r7
    4490:	b004      	add	sp, #16
    4492:	bd80      	pop	{r7, pc}
    4494:	00004155 	.word	0x00004155

00004498 <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    4498:	b580      	push	{r7, lr}
    449a:	b082      	sub	sp, #8
    449c:	af00      	add	r7, sp, #0
    449e:	6078      	str	r0, [r7, #4]
    44a0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    44a2:	687b      	ldr	r3, [r7, #4]
    44a4:	683a      	ldr	r2, [r7, #0]
    44a6:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	2103      	movs	r1, #3
    44ac:	0018      	movs	r0, r3
    44ae:	4b03      	ldr	r3, [pc, #12]	; (44bc <hri_sercomusart_write_CTRLA_reg+0x24>)
    44b0:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    44b2:	46c0      	nop			; (mov r8, r8)
    44b4:	46bd      	mov	sp, r7
    44b6:	b002      	add	sp, #8
    44b8:	bd80      	pop	{r7, pc}
    44ba:	46c0      	nop			; (mov r8, r8)
    44bc:	00004155 	.word	0x00004155

000044c0 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    44c0:	b580      	push	{r7, lr}
    44c2:	b082      	sub	sp, #8
    44c4:	af00      	add	r7, sp, #0
    44c6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    44c8:	687b      	ldr	r3, [r7, #4]
    44ca:	685b      	ldr	r3, [r3, #4]
    44cc:	2280      	movs	r2, #128	; 0x80
    44ce:	0052      	lsls	r2, r2, #1
    44d0:	431a      	orrs	r2, r3
    44d2:	687b      	ldr	r3, [r7, #4]
    44d4:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    44d6:	687b      	ldr	r3, [r7, #4]
    44d8:	2104      	movs	r1, #4
    44da:	0018      	movs	r0, r3
    44dc:	4b02      	ldr	r3, [pc, #8]	; (44e8 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x28>)
    44de:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    44e0:	46c0      	nop			; (mov r8, r8)
    44e2:	46bd      	mov	sp, r7
    44e4:	b002      	add	sp, #8
    44e6:	bd80      	pop	{r7, pc}
    44e8:	000040d9 	.word	0x000040d9

000044ec <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    44ec:	b580      	push	{r7, lr}
    44ee:	b082      	sub	sp, #8
    44f0:	af00      	add	r7, sp, #0
    44f2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    44f4:	687b      	ldr	r3, [r7, #4]
    44f6:	685b      	ldr	r3, [r3, #4]
    44f8:	4a06      	ldr	r2, [pc, #24]	; (4514 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x28>)
    44fa:	401a      	ands	r2, r3
    44fc:	687b      	ldr	r3, [r7, #4]
    44fe:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    4500:	687b      	ldr	r3, [r7, #4]
    4502:	2104      	movs	r1, #4
    4504:	0018      	movs	r0, r3
    4506:	4b04      	ldr	r3, [pc, #16]	; (4518 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x2c>)
    4508:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    450a:	46c0      	nop			; (mov r8, r8)
    450c:	46bd      	mov	sp, r7
    450e:	b002      	add	sp, #8
    4510:	bd80      	pop	{r7, pc}
    4512:	46c0      	nop			; (mov r8, r8)
    4514:	fffffeff 	.word	0xfffffeff
    4518:	000040d9 	.word	0x000040d9

0000451c <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    451c:	b580      	push	{r7, lr}
    451e:	b082      	sub	sp, #8
    4520:	af00      	add	r7, sp, #0
    4522:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    4524:	687b      	ldr	r3, [r7, #4]
    4526:	685b      	ldr	r3, [r3, #4]
    4528:	2280      	movs	r2, #128	; 0x80
    452a:	02d2      	lsls	r2, r2, #11
    452c:	431a      	orrs	r2, r3
    452e:	687b      	ldr	r3, [r7, #4]
    4530:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    4532:	687b      	ldr	r3, [r7, #4]
    4534:	2104      	movs	r1, #4
    4536:	0018      	movs	r0, r3
    4538:	4b02      	ldr	r3, [pc, #8]	; (4544 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x28>)
    453a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    453c:	46c0      	nop			; (mov r8, r8)
    453e:	46bd      	mov	sp, r7
    4540:	b002      	add	sp, #8
    4542:	bd80      	pop	{r7, pc}
    4544:	000040d9 	.word	0x000040d9

00004548 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    4548:	b580      	push	{r7, lr}
    454a:	b082      	sub	sp, #8
    454c:	af00      	add	r7, sp, #0
    454e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    4550:	687b      	ldr	r3, [r7, #4]
    4552:	685b      	ldr	r3, [r3, #4]
    4554:	4a06      	ldr	r2, [pc, #24]	; (4570 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x28>)
    4556:	401a      	ands	r2, r3
    4558:	687b      	ldr	r3, [r7, #4]
    455a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    455c:	687b      	ldr	r3, [r7, #4]
    455e:	2104      	movs	r1, #4
    4560:	0018      	movs	r0, r3
    4562:	4b04      	ldr	r3, [pc, #16]	; (4574 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x2c>)
    4564:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    4566:	46c0      	nop			; (mov r8, r8)
    4568:	46bd      	mov	sp, r7
    456a:	b002      	add	sp, #8
    456c:	bd80      	pop	{r7, pc}
    456e:	46c0      	nop			; (mov r8, r8)
    4570:	fffbffff 	.word	0xfffbffff
    4574:	000040d9 	.word	0x000040d9

00004578 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    4578:	b580      	push	{r7, lr}
    457a:	b082      	sub	sp, #8
    457c:	af00      	add	r7, sp, #0
    457e:	6078      	str	r0, [r7, #4]
    4580:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    4582:	687b      	ldr	r3, [r7, #4]
    4584:	685a      	ldr	r2, [r3, #4]
    4586:	683b      	ldr	r3, [r7, #0]
    4588:	0419      	lsls	r1, r3, #16
    458a:	23c0      	movs	r3, #192	; 0xc0
    458c:	029b      	lsls	r3, r3, #10
    458e:	400b      	ands	r3, r1
    4590:	431a      	orrs	r2, r3
    4592:	687b      	ldr	r3, [r7, #4]
    4594:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    4596:	687b      	ldr	r3, [r7, #4]
    4598:	2104      	movs	r1, #4
    459a:	0018      	movs	r0, r3
    459c:	4b02      	ldr	r3, [pc, #8]	; (45a8 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x30>)
    459e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    45a0:	46c0      	nop			; (mov r8, r8)
    45a2:	46bd      	mov	sp, r7
    45a4:	b002      	add	sp, #8
    45a6:	bd80      	pop	{r7, pc}
    45a8:	000040d9 	.word	0x000040d9

000045ac <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    45ac:	b580      	push	{r7, lr}
    45ae:	b082      	sub	sp, #8
    45b0:	af00      	add	r7, sp, #0
    45b2:	6078      	str	r0, [r7, #4]
    45b4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    45b6:	687b      	ldr	r3, [r7, #4]
    45b8:	683a      	ldr	r2, [r7, #0]
    45ba:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    45bc:	687b      	ldr	r3, [r7, #4]
    45be:	2104      	movs	r1, #4
    45c0:	0018      	movs	r0, r3
    45c2:	4b03      	ldr	r3, [pc, #12]	; (45d0 <hri_sercomi2cm_write_CTRLB_reg+0x24>)
    45c4:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    45c6:	46c0      	nop			; (mov r8, r8)
    45c8:	46bd      	mov	sp, r7
    45ca:	b002      	add	sp, #8
    45cc:	bd80      	pop	{r7, pc}
    45ce:	46c0      	nop			; (mov r8, r8)
    45d0:	000040d9 	.word	0x000040d9

000045d4 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    45d4:	b580      	push	{r7, lr}
    45d6:	b082      	sub	sp, #8
    45d8:	af00      	add	r7, sp, #0
    45da:	6078      	str	r0, [r7, #4]
    45dc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    45de:	687b      	ldr	r3, [r7, #4]
    45e0:	683a      	ldr	r2, [r7, #0]
    45e2:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    45e4:	687b      	ldr	r3, [r7, #4]
    45e6:	2107      	movs	r1, #7
    45e8:	0018      	movs	r0, r3
    45ea:	4b03      	ldr	r3, [pc, #12]	; (45f8 <hri_sercomspi_write_CTRLB_reg+0x24>)
    45ec:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    45ee:	46c0      	nop			; (mov r8, r8)
    45f0:	46bd      	mov	sp, r7
    45f2:	b002      	add	sp, #8
    45f4:	bd80      	pop	{r7, pc}
    45f6:	46c0      	nop			; (mov r8, r8)
    45f8:	00004117 	.word	0x00004117

000045fc <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    45fc:	b580      	push	{r7, lr}
    45fe:	b082      	sub	sp, #8
    4600:	af00      	add	r7, sp, #0
    4602:	6078      	str	r0, [r7, #4]
    4604:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    4606:	687b      	ldr	r3, [r7, #4]
    4608:	683a      	ldr	r2, [r7, #0]
    460a:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    460c:	687b      	ldr	r3, [r7, #4]
    460e:	2107      	movs	r1, #7
    4610:	0018      	movs	r0, r3
    4612:	4b03      	ldr	r3, [pc, #12]	; (4620 <hri_sercomusart_write_CTRLB_reg+0x24>)
    4614:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    4616:	46c0      	nop			; (mov r8, r8)
    4618:	46bd      	mov	sp, r7
    461a:	b002      	add	sp, #8
    461c:	bd80      	pop	{r7, pc}
    461e:	46c0      	nop			; (mov r8, r8)
    4620:	00004155 	.word	0x00004155

00004624 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    4624:	b580      	push	{r7, lr}
    4626:	b082      	sub	sp, #8
    4628:	af00      	add	r7, sp, #0
    462a:	6078      	str	r0, [r7, #4]
    462c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    462e:	687b      	ldr	r3, [r7, #4]
    4630:	683a      	ldr	r2, [r7, #0]
    4632:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    4634:	46c0      	nop			; (mov r8, r8)
    4636:	46bd      	mov	sp, r7
    4638:	b002      	add	sp, #8
    463a:	bd80      	pop	{r7, pc}

0000463c <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    463c:	b580      	push	{r7, lr}
    463e:	b082      	sub	sp, #8
    4640:	af00      	add	r7, sp, #0
    4642:	6078      	str	r0, [r7, #4]
    4644:	000a      	movs	r2, r1
    4646:	1cfb      	adds	r3, r7, #3
    4648:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    464a:	687b      	ldr	r3, [r7, #4]
    464c:	1cfa      	adds	r2, r7, #3
    464e:	7812      	ldrb	r2, [r2, #0]
    4650:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    4652:	46c0      	nop			; (mov r8, r8)
    4654:	46bd      	mov	sp, r7
    4656:	b002      	add	sp, #8
    4658:	bd80      	pop	{r7, pc}

0000465a <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    465a:	b580      	push	{r7, lr}
    465c:	b082      	sub	sp, #8
    465e:	af00      	add	r7, sp, #0
    4660:	6078      	str	r0, [r7, #4]
    4662:	000a      	movs	r2, r1
    4664:	1cbb      	adds	r3, r7, #2
    4666:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    4668:	687b      	ldr	r3, [r7, #4]
    466a:	1cba      	adds	r2, r7, #2
    466c:	8812      	ldrh	r2, [r2, #0]
    466e:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    4670:	46c0      	nop			; (mov r8, r8)
    4672:	46bd      	mov	sp, r7
    4674:	b002      	add	sp, #8
    4676:	bd80      	pop	{r7, pc}

00004678 <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    4678:	b580      	push	{r7, lr}
    467a:	b082      	sub	sp, #8
    467c:	af00      	add	r7, sp, #0
    467e:	6078      	str	r0, [r7, #4]
    4680:	000a      	movs	r2, r1
    4682:	1cfb      	adds	r3, r7, #3
    4684:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    4686:	687b      	ldr	r3, [r7, #4]
    4688:	1cfa      	adds	r2, r7, #3
    468a:	7812      	ldrb	r2, [r2, #0]
    468c:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    468e:	46c0      	nop			; (mov r8, r8)
    4690:	46bd      	mov	sp, r7
    4692:	b002      	add	sp, #8
    4694:	bd80      	pop	{r7, pc}
	...

00004698 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    4698:	b580      	push	{r7, lr}
    469a:	b084      	sub	sp, #16
    469c:	af00      	add	r7, sp, #0
    469e:	6078      	str	r0, [r7, #4]
    46a0:	000a      	movs	r2, r1
    46a2:	1cfb      	adds	r3, r7, #3
    46a4:	701a      	strb	r2, [r3, #0]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    46a6:	687b      	ldr	r3, [r7, #4]
    46a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    46aa:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    46ac:	68fb      	ldr	r3, [r7, #12]
    46ae:	4a0b      	ldr	r2, [pc, #44]	; (46dc <hri_sercomi2cm_write_ADDR_HS_bit+0x44>)
    46b0:	4013      	ands	r3, r2
    46b2:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    46b4:	1cfb      	adds	r3, r7, #3
    46b6:	781b      	ldrb	r3, [r3, #0]
    46b8:	039b      	lsls	r3, r3, #14
    46ba:	001a      	movs	r2, r3
    46bc:	68fb      	ldr	r3, [r7, #12]
    46be:	4313      	orrs	r3, r2
    46c0:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    46c2:	687b      	ldr	r3, [r7, #4]
    46c4:	68fa      	ldr	r2, [r7, #12]
    46c6:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    46c8:	687b      	ldr	r3, [r7, #4]
    46ca:	2104      	movs	r1, #4
    46cc:	0018      	movs	r0, r3
    46ce:	4b04      	ldr	r3, [pc, #16]	; (46e0 <hri_sercomi2cm_write_ADDR_HS_bit+0x48>)
    46d0:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    46d2:	46c0      	nop			; (mov r8, r8)
    46d4:	46bd      	mov	sp, r7
    46d6:	b004      	add	sp, #16
    46d8:	bd80      	pop	{r7, pc}
    46da:	46c0      	nop			; (mov r8, r8)
    46dc:	ffffbfff 	.word	0xffffbfff
    46e0:	000040d9 	.word	0x000040d9

000046e4 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    46e4:	b580      	push	{r7, lr}
    46e6:	b082      	sub	sp, #8
    46e8:	af00      	add	r7, sp, #0
    46ea:	6078      	str	r0, [r7, #4]
    46ec:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    46ee:	687b      	ldr	r3, [r7, #4]
    46f0:	683a      	ldr	r2, [r7, #0]
    46f2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    46f4:	687b      	ldr	r3, [r7, #4]
    46f6:	2104      	movs	r1, #4
    46f8:	0018      	movs	r0, r3
    46fa:	4b03      	ldr	r3, [pc, #12]	; (4708 <hri_sercomi2cm_write_ADDR_reg+0x24>)
    46fc:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    46fe:	46c0      	nop			; (mov r8, r8)
    4700:	46bd      	mov	sp, r7
    4702:	b002      	add	sp, #8
    4704:	bd80      	pop	{r7, pc}
    4706:	46c0      	nop			; (mov r8, r8)
    4708:	000040d9 	.word	0x000040d9

0000470c <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    470c:	b580      	push	{r7, lr}
    470e:	b082      	sub	sp, #8
    4710:	af00      	add	r7, sp, #0
    4712:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    4714:	687b      	ldr	r3, [r7, #4]
    4716:	2104      	movs	r1, #4
    4718:	0018      	movs	r0, r3
    471a:	4b04      	ldr	r3, [pc, #16]	; (472c <hri_sercomi2cm_read_ADDR_reg+0x20>)
    471c:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    471e:	687b      	ldr	r3, [r7, #4]
    4720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    4722:	0018      	movs	r0, r3
    4724:	46bd      	mov	sp, r7
    4726:	b002      	add	sp, #8
    4728:	bd80      	pop	{r7, pc}
    472a:	46c0      	nop			; (mov r8, r8)
    472c:	000040d9 	.word	0x000040d9

00004730 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    4730:	b580      	push	{r7, lr}
    4732:	b082      	sub	sp, #8
    4734:	af00      	add	r7, sp, #0
    4736:	6078      	str	r0, [r7, #4]
    4738:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    473a:	687b      	ldr	r3, [r7, #4]
    473c:	683a      	ldr	r2, [r7, #0]
    473e:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    4740:	46c0      	nop			; (mov r8, r8)
    4742:	46bd      	mov	sp, r7
    4744:	b002      	add	sp, #8
    4746:	bd80      	pop	{r7, pc}

00004748 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    4748:	b580      	push	{r7, lr}
    474a:	b082      	sub	sp, #8
    474c:	af00      	add	r7, sp, #0
    474e:	6078      	str	r0, [r7, #4]
    4750:	000a      	movs	r2, r1
    4752:	1cfb      	adds	r3, r7, #3
    4754:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    4756:	687b      	ldr	r3, [r7, #4]
    4758:	1cfa      	adds	r2, r7, #3
    475a:	2128      	movs	r1, #40	; 0x28
    475c:	7812      	ldrb	r2, [r2, #0]
    475e:	545a      	strb	r2, [r3, r1]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    4760:	687b      	ldr	r3, [r7, #4]
    4762:	2104      	movs	r1, #4
    4764:	0018      	movs	r0, r3
    4766:	4b03      	ldr	r3, [pc, #12]	; (4774 <hri_sercomi2cm_write_DATA_reg+0x2c>)
    4768:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    476a:	46c0      	nop			; (mov r8, r8)
    476c:	46bd      	mov	sp, r7
    476e:	b002      	add	sp, #8
    4770:	bd80      	pop	{r7, pc}
    4772:	46c0      	nop			; (mov r8, r8)
    4774:	000040d9 	.word	0x000040d9

00004778 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    4778:	b580      	push	{r7, lr}
    477a:	b082      	sub	sp, #8
    477c:	af00      	add	r7, sp, #0
    477e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    4780:	687b      	ldr	r3, [r7, #4]
    4782:	2104      	movs	r1, #4
    4784:	0018      	movs	r0, r3
    4786:	4b05      	ldr	r3, [pc, #20]	; (479c <hri_sercomi2cm_read_DATA_reg+0x24>)
    4788:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    478a:	687b      	ldr	r3, [r7, #4]
    478c:	2228      	movs	r2, #40	; 0x28
    478e:	5c9b      	ldrb	r3, [r3, r2]
    4790:	b2db      	uxtb	r3, r3
}
    4792:	0018      	movs	r0, r3
    4794:	46bd      	mov	sp, r7
    4796:	b002      	add	sp, #8
    4798:	bd80      	pop	{r7, pc}
    479a:	46c0      	nop			; (mov r8, r8)
    479c:	000040d9 	.word	0x000040d9

000047a0 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    47a0:	b580      	push	{r7, lr}
    47a2:	b082      	sub	sp, #8
    47a4:	af00      	add	r7, sp, #0
    47a6:	6078      	str	r0, [r7, #4]
    47a8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    47aa:	687b      	ldr	r3, [r7, #4]
    47ac:	683a      	ldr	r2, [r7, #0]
    47ae:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    47b0:	46c0      	nop			; (mov r8, r8)
    47b2:	46bd      	mov	sp, r7
    47b4:	b002      	add	sp, #8
    47b6:	bd80      	pop	{r7, pc}

000047b8 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    47b8:	b580      	push	{r7, lr}
    47ba:	b082      	sub	sp, #8
    47bc:	af00      	add	r7, sp, #0
    47be:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    47c0:	687b      	ldr	r3, [r7, #4]
    47c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    47c4:	0018      	movs	r0, r3
    47c6:	46bd      	mov	sp, r7
    47c8:	b002      	add	sp, #8
    47ca:	bd80      	pop	{r7, pc}

000047cc <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    47cc:	b580      	push	{r7, lr}
    47ce:	b082      	sub	sp, #8
    47d0:	af00      	add	r7, sp, #0
    47d2:	6078      	str	r0, [r7, #4]
    47d4:	000a      	movs	r2, r1
    47d6:	1cbb      	adds	r3, r7, #2
    47d8:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    47da:	687b      	ldr	r3, [r7, #4]
    47dc:	1cba      	adds	r2, r7, #2
    47de:	8812      	ldrh	r2, [r2, #0]
    47e0:	851a      	strh	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    47e2:	46c0      	nop			; (mov r8, r8)
    47e4:	46bd      	mov	sp, r7
    47e6:	b002      	add	sp, #8
    47e8:	bd80      	pop	{r7, pc}

000047ea <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    47ea:	b580      	push	{r7, lr}
    47ec:	b082      	sub	sp, #8
    47ee:	af00      	add	r7, sp, #0
    47f0:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    47f2:	687b      	ldr	r3, [r7, #4]
    47f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    47f6:	b29b      	uxth	r3, r3
}
    47f8:	0018      	movs	r0, r3
    47fa:	46bd      	mov	sp, r7
    47fc:	b002      	add	sp, #8
    47fe:	bd80      	pop	{r7, pc}

00004800 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    4800:	b580      	push	{r7, lr}
    4802:	b082      	sub	sp, #8
    4804:	af00      	add	r7, sp, #0
    4806:	6078      	str	r0, [r7, #4]
    4808:	000a      	movs	r2, r1
    480a:	1cfb      	adds	r3, r7, #3
    480c:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    480e:	687b      	ldr	r3, [r7, #4]
    4810:	1cfa      	adds	r2, r7, #3
    4812:	2130      	movs	r1, #48	; 0x30
    4814:	7812      	ldrb	r2, [r2, #0]
    4816:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    4818:	46c0      	nop			; (mov r8, r8)
    481a:	46bd      	mov	sp, r7
    481c:	b002      	add	sp, #8
    481e:	bd80      	pop	{r7, pc}

00004820 <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    4820:	b580      	push	{r7, lr}
    4822:	b082      	sub	sp, #8
    4824:	af00      	add	r7, sp, #0
    4826:	6078      	str	r0, [r7, #4]
    4828:	000a      	movs	r2, r1
    482a:	1cfb      	adds	r3, r7, #3
    482c:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    482e:	687b      	ldr	r3, [r7, #4]
    4830:	1cfa      	adds	r2, r7, #3
    4832:	2130      	movs	r1, #48	; 0x30
    4834:	7812      	ldrb	r2, [r2, #0]
    4836:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    4838:	46c0      	nop			; (mov r8, r8)
    483a:	46bd      	mov	sp, r7
    483c:	b002      	add	sp, #8
    483e:	bd80      	pop	{r7, pc}

00004840 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    4840:	b580      	push	{r7, lr}
    4842:	b082      	sub	sp, #8
    4844:	af00      	add	r7, sp, #0
    4846:	6078      	str	r0, [r7, #4]
    4848:	000a      	movs	r2, r1
    484a:	1cbb      	adds	r3, r7, #2
    484c:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    484e:	687b      	ldr	r3, [r7, #4]
    4850:	1cba      	adds	r2, r7, #2
    4852:	8812      	ldrh	r2, [r2, #0]
    4854:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    4856:	46c0      	nop			; (mov r8, r8)
    4858:	46bd      	mov	sp, r7
    485a:	b002      	add	sp, #8
    485c:	bd80      	pop	{r7, pc}
	...

00004860 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    4860:	b580      	push	{r7, lr}
    4862:	b082      	sub	sp, #8
    4864:	af00      	add	r7, sp, #0
    4866:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    4868:	687b      	ldr	r3, [r7, #4]
    486a:	2104      	movs	r1, #4
    486c:	0018      	movs	r0, r3
    486e:	4b04      	ldr	r3, [pc, #16]	; (4880 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    4870:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    4872:	687b      	ldr	r3, [r7, #4]
    4874:	8b5b      	ldrh	r3, [r3, #26]
    4876:	b29b      	uxth	r3, r3
}
    4878:	0018      	movs	r0, r3
    487a:	46bd      	mov	sp, r7
    487c:	b002      	add	sp, #8
    487e:	bd80      	pop	{r7, pc}
    4880:	000040d9 	.word	0x000040d9

00004884 <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
    4884:	b580      	push	{r7, lr}
    4886:	b082      	sub	sp, #8
    4888:	af00      	add	r7, sp, #0
    488a:	6078      	str	r0, [r7, #4]
    488c:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    488e:	687b      	ldr	r3, [r7, #4]
    4890:	1e5a      	subs	r2, r3, #1
    4892:	4193      	sbcs	r3, r2
    4894:	b2db      	uxtb	r3, r3
    4896:	4908      	ldr	r1, [pc, #32]	; (48b8 <_usart_sync_init+0x34>)
    4898:	22b4      	movs	r2, #180	; 0xb4
    489a:	0018      	movs	r0, r3
    489c:	4b07      	ldr	r3, [pc, #28]	; (48bc <_usart_sync_init+0x38>)
    489e:	4798      	blx	r3

	device->hw = hw;
    48a0:	687b      	ldr	r3, [r7, #4]
    48a2:	683a      	ldr	r2, [r7, #0]
    48a4:	601a      	str	r2, [r3, #0]

	return _usart_init(hw);
    48a6:	683b      	ldr	r3, [r7, #0]
    48a8:	0018      	movs	r0, r3
    48aa:	4b05      	ldr	r3, [pc, #20]	; (48c0 <_usart_sync_init+0x3c>)
    48ac:	4798      	blx	r3
    48ae:	0003      	movs	r3, r0
}
    48b0:	0018      	movs	r0, r3
    48b2:	46bd      	mov	sp, r7
    48b4:	b002      	add	sp, #8
    48b6:	bd80      	pop	{r7, pc}
    48b8:	0000c438 	.word	0x0000c438
    48bc:	00002cd5 	.word	0x00002cd5
    48c0:	00004a3d 	.word	0x00004a3d

000048c4 <_usart_sync_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_sync_enable(struct _usart_sync_device *const device)
{
    48c4:	b580      	push	{r7, lr}
    48c6:	b082      	sub	sp, #8
    48c8:	af00      	add	r7, sp, #0
    48ca:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    48cc:	687b      	ldr	r3, [r7, #4]
    48ce:	681b      	ldr	r3, [r3, #0]
    48d0:	0018      	movs	r0, r3
    48d2:	4b03      	ldr	r3, [pc, #12]	; (48e0 <_usart_sync_enable+0x1c>)
    48d4:	4798      	blx	r3
}
    48d6:	46c0      	nop			; (mov r8, r8)
    48d8:	46bd      	mov	sp, r7
    48da:	b002      	add	sp, #8
    48dc:	bd80      	pop	{r7, pc}
    48de:	46c0      	nop			; (mov r8, r8)
    48e0:	00004411 	.word	0x00004411

000048e4 <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
    48e4:	b580      	push	{r7, lr}
    48e6:	b082      	sub	sp, #8
    48e8:	af00      	add	r7, sp, #0
    48ea:	6078      	str	r0, [r7, #4]
    48ec:	000a      	movs	r2, r1
    48ee:	1cfb      	adds	r3, r7, #3
    48f0:	701a      	strb	r2, [r3, #0]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    48f2:	687b      	ldr	r3, [r7, #4]
    48f4:	681a      	ldr	r2, [r3, #0]
    48f6:	1cfb      	adds	r3, r7, #3
    48f8:	781b      	ldrb	r3, [r3, #0]
    48fa:	b29b      	uxth	r3, r3
    48fc:	0019      	movs	r1, r3
    48fe:	0010      	movs	r0, r2
    4900:	4b02      	ldr	r3, [pc, #8]	; (490c <_usart_sync_write_byte+0x28>)
    4902:	4798      	blx	r3
}
    4904:	46c0      	nop			; (mov r8, r8)
    4906:	46bd      	mov	sp, r7
    4908:	b002      	add	sp, #8
    490a:	bd80      	pop	{r7, pc}
    490c:	000047cd 	.word	0x000047cd

00004910 <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
    4910:	b580      	push	{r7, lr}
    4912:	b082      	sub	sp, #8
    4914:	af00      	add	r7, sp, #0
    4916:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_read_DATA_reg(device->hw);
    4918:	687b      	ldr	r3, [r7, #4]
    491a:	681b      	ldr	r3, [r3, #0]
    491c:	0018      	movs	r0, r3
    491e:	4b04      	ldr	r3, [pc, #16]	; (4930 <_usart_sync_read_byte+0x20>)
    4920:	4798      	blx	r3
    4922:	0003      	movs	r3, r0
    4924:	b2db      	uxtb	r3, r3
}
    4926:	0018      	movs	r0, r3
    4928:	46bd      	mov	sp, r7
    492a:	b002      	add	sp, #8
    492c:	bd80      	pop	{r7, pc}
    492e:	46c0      	nop			; (mov r8, r8)
    4930:	000047eb 	.word	0x000047eb

00004934 <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
    4934:	b580      	push	{r7, lr}
    4936:	b082      	sub	sp, #8
    4938:	af00      	add	r7, sp, #0
    493a:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    493c:	687b      	ldr	r3, [r7, #4]
    493e:	681b      	ldr	r3, [r3, #0]
    4940:	0018      	movs	r0, r3
    4942:	4b03      	ldr	r3, [pc, #12]	; (4950 <_usart_sync_is_ready_to_send+0x1c>)
    4944:	4798      	blx	r3
    4946:	0003      	movs	r3, r0
}
    4948:	0018      	movs	r0, r3
    494a:	46bd      	mov	sp, r7
    494c:	b002      	add	sp, #8
    494e:	bd80      	pop	{r7, pc}
    4950:	00004241 	.word	0x00004241

00004954 <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
    4954:	b580      	push	{r7, lr}
    4956:	b082      	sub	sp, #8
    4958:	af00      	add	r7, sp, #0
    495a:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    495c:	687b      	ldr	r3, [r7, #4]
    495e:	681b      	ldr	r3, [r3, #0]
    4960:	0018      	movs	r0, r3
    4962:	4b03      	ldr	r3, [pc, #12]	; (4970 <_usart_sync_is_transmit_done+0x1c>)
    4964:	4798      	blx	r3
    4966:	0003      	movs	r3, r0
}
    4968:	0018      	movs	r0, r3
    496a:	46bd      	mov	sp, r7
    496c:	b002      	add	sp, #8
    496e:	bd80      	pop	{r7, pc}
    4970:	00004263 	.word	0x00004263

00004974 <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
    4974:	b580      	push	{r7, lr}
    4976:	b082      	sub	sp, #8
    4978:	af00      	add	r7, sp, #0
    497a:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    497c:	687b      	ldr	r3, [r7, #4]
    497e:	681b      	ldr	r3, [r3, #0]
    4980:	0018      	movs	r0, r3
    4982:	4b03      	ldr	r3, [pc, #12]	; (4990 <_usart_sync_is_byte_received+0x1c>)
    4984:	4798      	blx	r3
    4986:	0003      	movs	r3, r0
}
    4988:	0018      	movs	r0, r3
    498a:	46bd      	mov	sp, r7
    498c:	b002      	add	sp, #8
    498e:	bd80      	pop	{r7, pc}
    4990:	00004285 	.word	0x00004285

00004994 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    4994:	b580      	push	{r7, lr}
    4996:	b082      	sub	sp, #8
    4998:	af00      	add	r7, sp, #0
    499a:	6078      	str	r0, [r7, #4]
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    499c:	687b      	ldr	r3, [r7, #4]
    499e:	4a04      	ldr	r2, [pc, #16]	; (49b0 <_sercom_get_hardware_index+0x1c>)
    49a0:	4694      	mov	ip, r2
    49a2:	4463      	add	r3, ip
    49a4:	0a9b      	lsrs	r3, r3, #10
    49a6:	b2db      	uxtb	r3, r3
}
    49a8:	0018      	movs	r0, r3
    49aa:	46bd      	mov	sp, r7
    49ac:	b002      	add	sp, #8
    49ae:	bd80      	pop	{r7, pc}
    49b0:	bdfff800 	.word	0xbdfff800

000049b4 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    49b4:	b590      	push	{r4, r7, lr}
    49b6:	b085      	sub	sp, #20
    49b8:	af00      	add	r7, sp, #0
    49ba:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    49bc:	230e      	movs	r3, #14
    49be:	18fc      	adds	r4, r7, r3
    49c0:	687b      	ldr	r3, [r7, #4]
    49c2:	0018      	movs	r0, r3
    49c4:	4b18      	ldr	r3, [pc, #96]	; (4a28 <_get_sercom_index+0x74>)
    49c6:	4798      	blx	r3
    49c8:	0003      	movs	r3, r0
    49ca:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    49cc:	230f      	movs	r3, #15
    49ce:	18fb      	adds	r3, r7, r3
    49d0:	2200      	movs	r2, #0
    49d2:	701a      	strb	r2, [r3, #0]
    49d4:	e018      	b.n	4a08 <_get_sercom_index+0x54>
		if (_usarts[i].number == sercom_offset) {
    49d6:	230f      	movs	r3, #15
    49d8:	18fb      	adds	r3, r7, r3
    49da:	781a      	ldrb	r2, [r3, #0]
    49dc:	4913      	ldr	r1, [pc, #76]	; (4a2c <_get_sercom_index+0x78>)
    49de:	0013      	movs	r3, r2
    49e0:	009b      	lsls	r3, r3, #2
    49e2:	189b      	adds	r3, r3, r2
    49e4:	009b      	lsls	r3, r3, #2
    49e6:	5c5b      	ldrb	r3, [r3, r1]
    49e8:	220e      	movs	r2, #14
    49ea:	18ba      	adds	r2, r7, r2
    49ec:	7812      	ldrb	r2, [r2, #0]
    49ee:	429a      	cmp	r2, r3
    49f0:	d103      	bne.n	49fa <_get_sercom_index+0x46>
			return i;
    49f2:	230f      	movs	r3, #15
    49f4:	18fb      	adds	r3, r7, r3
    49f6:	781b      	ldrb	r3, [r3, #0]
    49f8:	e012      	b.n	4a20 <_get_sercom_index+0x6c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    49fa:	230f      	movs	r3, #15
    49fc:	18fb      	adds	r3, r7, r3
    49fe:	781a      	ldrb	r2, [r3, #0]
    4a00:	230f      	movs	r3, #15
    4a02:	18fb      	adds	r3, r7, r3
    4a04:	3201      	adds	r2, #1
    4a06:	701a      	strb	r2, [r3, #0]
    4a08:	230f      	movs	r3, #15
    4a0a:	18fb      	adds	r3, r7, r3
    4a0c:	781b      	ldrb	r3, [r3, #0]
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d0e1      	beq.n	49d6 <_get_sercom_index+0x22>
		}
	}

	ASSERT(false);
    4a12:	4a07      	ldr	r2, [pc, #28]	; (4a30 <_get_sercom_index+0x7c>)
    4a14:	4b07      	ldr	r3, [pc, #28]	; (4a34 <_get_sercom_index+0x80>)
    4a16:	0019      	movs	r1, r3
    4a18:	2000      	movs	r0, #0
    4a1a:	4b07      	ldr	r3, [pc, #28]	; (4a38 <_get_sercom_index+0x84>)
    4a1c:	4798      	blx	r3
	return 0;
    4a1e:	2300      	movs	r3, #0
}
    4a20:	0018      	movs	r0, r3
    4a22:	46bd      	mov	sp, r7
    4a24:	b005      	add	sp, #20
    4a26:	bd90      	pop	{r4, r7, pc}
    4a28:	00004995 	.word	0x00004995
    4a2c:	2000001c 	.word	0x2000001c
    4a30:	0000023a 	.word	0x0000023a
    4a34:	0000c438 	.word	0x0000c438
    4a38:	00002cd5 	.word	0x00002cd5

00004a3c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    4a3c:	b590      	push	{r4, r7, lr}
    4a3e:	b085      	sub	sp, #20
    4a40:	af00      	add	r7, sp, #0
    4a42:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    4a44:	230f      	movs	r3, #15
    4a46:	18fc      	adds	r4, r7, r3
    4a48:	687b      	ldr	r3, [r7, #4]
    4a4a:	0018      	movs	r0, r3
    4a4c:	4b6f      	ldr	r3, [pc, #444]	; (4c0c <_usart_init+0x1d0>)
    4a4e:	4798      	blx	r3
    4a50:	0003      	movs	r3, r0
    4a52:	7023      	strb	r3, [r4, #0]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    4a54:	687b      	ldr	r3, [r7, #4]
    4a56:	2101      	movs	r1, #1
    4a58:	0018      	movs	r0, r3
    4a5a:	4b6d      	ldr	r3, [pc, #436]	; (4c10 <_usart_init+0x1d4>)
    4a5c:	4798      	blx	r3
    4a5e:	0003      	movs	r3, r0
    4a60:	001a      	movs	r2, r3
    4a62:	2301      	movs	r3, #1
    4a64:	4053      	eors	r3, r2
    4a66:	b2db      	uxtb	r3, r3
    4a68:	2b00      	cmp	r3, #0
    4a6a:	d025      	beq.n	4ab8 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    4a6c:	230f      	movs	r3, #15
    4a6e:	18fb      	adds	r3, r7, r3
    4a70:	781a      	ldrb	r2, [r3, #0]
    4a72:	4968      	ldr	r1, [pc, #416]	; (4c14 <_usart_init+0x1d8>)
    4a74:	0013      	movs	r3, r2
    4a76:	009b      	lsls	r3, r3, #2
    4a78:	189b      	adds	r3, r3, r2
    4a7a:	009b      	lsls	r3, r3, #2
    4a7c:	18cb      	adds	r3, r1, r3
    4a7e:	3304      	adds	r3, #4
    4a80:	681b      	ldr	r3, [r3, #0]
    4a82:	221c      	movs	r2, #28
    4a84:	4013      	ands	r3, r2
    4a86:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    4a88:	687b      	ldr	r3, [r7, #4]
    4a8a:	2102      	movs	r1, #2
    4a8c:	0018      	movs	r0, r3
    4a8e:	4b62      	ldr	r3, [pc, #392]	; (4c18 <_usart_init+0x1dc>)
    4a90:	4798      	blx	r3
    4a92:	1e03      	subs	r3, r0, #0
    4a94:	d008      	beq.n	4aa8 <_usart_init+0x6c>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    4a96:	687b      	ldr	r3, [r7, #4]
    4a98:	0018      	movs	r0, r3
    4a9a:	4b60      	ldr	r3, [pc, #384]	; (4c1c <_usart_init+0x1e0>)
    4a9c:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    4a9e:	687b      	ldr	r3, [r7, #4]
    4aa0:	2102      	movs	r1, #2
    4aa2:	0018      	movs	r0, r3
    4aa4:	4b5e      	ldr	r3, [pc, #376]	; (4c20 <_usart_init+0x1e4>)
    4aa6:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    4aa8:	68bb      	ldr	r3, [r7, #8]
    4aaa:	2201      	movs	r2, #1
    4aac:	431a      	orrs	r2, r3
    4aae:	687b      	ldr	r3, [r7, #4]
    4ab0:	0011      	movs	r1, r2
    4ab2:	0018      	movs	r0, r3
    4ab4:	4b5b      	ldr	r3, [pc, #364]	; (4c24 <_usart_init+0x1e8>)
    4ab6:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    4ab8:	687b      	ldr	r3, [r7, #4]
    4aba:	2101      	movs	r1, #1
    4abc:	0018      	movs	r0, r3
    4abe:	4b58      	ldr	r3, [pc, #352]	; (4c20 <_usart_init+0x1e4>)
    4ac0:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    4ac2:	230f      	movs	r3, #15
    4ac4:	18fb      	adds	r3, r7, r3
    4ac6:	781a      	ldrb	r2, [r3, #0]
    4ac8:	4952      	ldr	r1, [pc, #328]	; (4c14 <_usart_init+0x1d8>)
    4aca:	0013      	movs	r3, r2
    4acc:	009b      	lsls	r3, r3, #2
    4ace:	189b      	adds	r3, r3, r2
    4ad0:	009b      	lsls	r3, r3, #2
    4ad2:	18cb      	adds	r3, r1, r3
    4ad4:	3304      	adds	r3, #4
    4ad6:	681a      	ldr	r2, [r3, #0]
    4ad8:	687b      	ldr	r3, [r7, #4]
    4ada:	0011      	movs	r1, r2
    4adc:	0018      	movs	r0, r3
    4ade:	4b51      	ldr	r3, [pc, #324]	; (4c24 <_usart_init+0x1e8>)
    4ae0:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    4ae2:	230f      	movs	r3, #15
    4ae4:	18fb      	adds	r3, r7, r3
    4ae6:	781a      	ldrb	r2, [r3, #0]
    4ae8:	494a      	ldr	r1, [pc, #296]	; (4c14 <_usart_init+0x1d8>)
    4aea:	0013      	movs	r3, r2
    4aec:	009b      	lsls	r3, r3, #2
    4aee:	189b      	adds	r3, r3, r2
    4af0:	009b      	lsls	r3, r3, #2
    4af2:	18cb      	adds	r3, r1, r3
    4af4:	3308      	adds	r3, #8
    4af6:	681a      	ldr	r2, [r3, #0]
    4af8:	687b      	ldr	r3, [r7, #4]
    4afa:	0011      	movs	r1, r2
    4afc:	0018      	movs	r0, r3
    4afe:	4b4a      	ldr	r3, [pc, #296]	; (4c28 <_usart_init+0x1ec>)
    4b00:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    4b02:	230f      	movs	r3, #15
    4b04:	18fb      	adds	r3, r7, r3
    4b06:	781a      	ldrb	r2, [r3, #0]
    4b08:	4942      	ldr	r1, [pc, #264]	; (4c14 <_usart_init+0x1d8>)
    4b0a:	0013      	movs	r3, r2
    4b0c:	009b      	lsls	r3, r3, #2
    4b0e:	189b      	adds	r3, r3, r2
    4b10:	009b      	lsls	r3, r3, #2
    4b12:	18cb      	adds	r3, r1, r3
    4b14:	3304      	adds	r3, #4
    4b16:	681a      	ldr	r2, [r3, #0]
    4b18:	2380      	movs	r3, #128	; 0x80
    4b1a:	019b      	lsls	r3, r3, #6
    4b1c:	4013      	ands	r3, r2
    4b1e:	d10e      	bne.n	4b3e <_usart_init+0x102>
    4b20:	230f      	movs	r3, #15
    4b22:	18fb      	adds	r3, r7, r3
    4b24:	781a      	ldrb	r2, [r3, #0]
    4b26:	493b      	ldr	r1, [pc, #236]	; (4c14 <_usart_init+0x1d8>)
    4b28:	0013      	movs	r3, r2
    4b2a:	009b      	lsls	r3, r3, #2
    4b2c:	189b      	adds	r3, r3, r2
    4b2e:	009b      	lsls	r3, r3, #2
    4b30:	18cb      	adds	r3, r1, r3
    4b32:	3304      	adds	r3, #4
    4b34:	681a      	ldr	r2, [r3, #0]
    4b36:	23c0      	movs	r3, #192	; 0xc0
    4b38:	01db      	lsls	r3, r3, #7
    4b3a:	4013      	ands	r3, r2
    4b3c:	d030      	beq.n	4ba0 <_usart_init+0x164>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    4b3e:	230f      	movs	r3, #15
    4b40:	18fb      	adds	r3, r7, r3
    4b42:	781a      	ldrb	r2, [r3, #0]
    4b44:	4933      	ldr	r1, [pc, #204]	; (4c14 <_usart_init+0x1d8>)
    4b46:	0013      	movs	r3, r2
    4b48:	009b      	lsls	r3, r3, #2
    4b4a:	189b      	adds	r3, r3, r2
    4b4c:	009b      	lsls	r3, r3, #2
    4b4e:	18cb      	adds	r3, r1, r3
    4b50:	330c      	adds	r3, #12
    4b52:	881b      	ldrh	r3, [r3, #0]
    4b54:	04db      	lsls	r3, r3, #19
    4b56:	0cdb      	lsrs	r3, r3, #19
    4b58:	b299      	uxth	r1, r3
    4b5a:	687a      	ldr	r2, [r7, #4]
    4b5c:	8993      	ldrh	r3, [r2, #12]
    4b5e:	04c9      	lsls	r1, r1, #19
    4b60:	0cc8      	lsrs	r0, r1, #19
    4b62:	0b5b      	lsrs	r3, r3, #13
    4b64:	035b      	lsls	r3, r3, #13
    4b66:	1c19      	adds	r1, r3, #0
    4b68:	1c03      	adds	r3, r0, #0
    4b6a:	430b      	orrs	r3, r1
    4b6c:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    4b6e:	230f      	movs	r3, #15
    4b70:	18fb      	adds	r3, r7, r3
    4b72:	781a      	ldrb	r2, [r3, #0]
    4b74:	4927      	ldr	r1, [pc, #156]	; (4c14 <_usart_init+0x1d8>)
    4b76:	0013      	movs	r3, r2
    4b78:	009b      	lsls	r3, r3, #2
    4b7a:	189b      	adds	r3, r3, r2
    4b7c:	009b      	lsls	r3, r3, #2
    4b7e:	18cb      	adds	r3, r1, r3
    4b80:	330e      	adds	r3, #14
    4b82:	781b      	ldrb	r3, [r3, #0]
    4b84:	1c1a      	adds	r2, r3, #0
    4b86:	2307      	movs	r3, #7
    4b88:	4013      	ands	r3, r2
    4b8a:	b2d9      	uxtb	r1, r3
    4b8c:	687a      	ldr	r2, [r7, #4]
    4b8e:	8993      	ldrh	r3, [r2, #12]
    4b90:	0348      	lsls	r0, r1, #13
    4b92:	04db      	lsls	r3, r3, #19
    4b94:	0cdb      	lsrs	r3, r3, #19
    4b96:	1c19      	adds	r1, r3, #0
    4b98:	1c03      	adds	r3, r0, #0
    4b9a:	430b      	orrs	r3, r1
    4b9c:	8193      	strh	r3, [r2, #12]
    4b9e:	e00f      	b.n	4bc0 <_usart_init+0x184>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    4ba0:	230f      	movs	r3, #15
    4ba2:	18fb      	adds	r3, r7, r3
    4ba4:	781a      	ldrb	r2, [r3, #0]
    4ba6:	491b      	ldr	r1, [pc, #108]	; (4c14 <_usart_init+0x1d8>)
    4ba8:	0013      	movs	r3, r2
    4baa:	009b      	lsls	r3, r3, #2
    4bac:	189b      	adds	r3, r3, r2
    4bae:	009b      	lsls	r3, r3, #2
    4bb0:	18cb      	adds	r3, r1, r3
    4bb2:	330c      	adds	r3, #12
    4bb4:	881a      	ldrh	r2, [r3, #0]
    4bb6:	687b      	ldr	r3, [r7, #4]
    4bb8:	0011      	movs	r1, r2
    4bba:	0018      	movs	r0, r3
    4bbc:	4b1b      	ldr	r3, [pc, #108]	; (4c2c <_usart_init+0x1f0>)
    4bbe:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    4bc0:	230f      	movs	r3, #15
    4bc2:	18fb      	adds	r3, r7, r3
    4bc4:	781a      	ldrb	r2, [r3, #0]
    4bc6:	4913      	ldr	r1, [pc, #76]	; (4c14 <_usart_init+0x1d8>)
    4bc8:	0013      	movs	r3, r2
    4bca:	009b      	lsls	r3, r3, #2
    4bcc:	189b      	adds	r3, r3, r2
    4bce:	009b      	lsls	r3, r3, #2
    4bd0:	18cb      	adds	r3, r1, r3
    4bd2:	330f      	adds	r3, #15
    4bd4:	781a      	ldrb	r2, [r3, #0]
    4bd6:	687b      	ldr	r3, [r7, #4]
    4bd8:	0011      	movs	r1, r2
    4bda:	0018      	movs	r0, r3
    4bdc:	4b14      	ldr	r3, [pc, #80]	; (4c30 <_usart_init+0x1f4>)
    4bde:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    4be0:	230f      	movs	r3, #15
    4be2:	18fb      	adds	r3, r7, r3
    4be4:	781a      	ldrb	r2, [r3, #0]
    4be6:	490b      	ldr	r1, [pc, #44]	; (4c14 <_usart_init+0x1d8>)
    4be8:	0013      	movs	r3, r2
    4bea:	009b      	lsls	r3, r3, #2
    4bec:	189b      	adds	r3, r3, r2
    4bee:	009b      	lsls	r3, r3, #2
    4bf0:	18cb      	adds	r3, r1, r3
    4bf2:	3310      	adds	r3, #16
    4bf4:	781a      	ldrb	r2, [r3, #0]
    4bf6:	687b      	ldr	r3, [r7, #4]
    4bf8:	0011      	movs	r1, r2
    4bfa:	0018      	movs	r0, r3
    4bfc:	4b0d      	ldr	r3, [pc, #52]	; (4c34 <_usart_init+0x1f8>)
    4bfe:	4798      	blx	r3

	return ERR_NONE;
    4c00:	2300      	movs	r3, #0
}
    4c02:	0018      	movs	r0, r3
    4c04:	46bd      	mov	sp, r7
    4c06:	b005      	add	sp, #20
    4c08:	bd90      	pop	{r4, r7, pc}
    4c0a:	46c0      	nop			; (mov r8, r8)
    4c0c:	000049b5 	.word	0x000049b5
    4c10:	00004173 	.word	0x00004173
    4c14:	2000001c 	.word	0x2000001c
    4c18:	00004469 	.word	0x00004469
    4c1c:	0000443d 	.word	0x0000443d
    4c20:	00004155 	.word	0x00004155
    4c24:	00004499 	.word	0x00004499
    4c28:	000045fd 	.word	0x000045fd
    4c2c:	0000465b 	.word	0x0000465b
    4c30:	00004679 	.word	0x00004679
    4c34:	00004821 	.word	0x00004821

00004c38 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    4c38:	b590      	push	{r4, r7, lr}
    4c3a:	b085      	sub	sp, #20
    4c3c:	af00      	add	r7, sp, #0
    4c3e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    4c40:	230e      	movs	r3, #14
    4c42:	18fc      	adds	r4, r7, r3
    4c44:	687b      	ldr	r3, [r7, #4]
    4c46:	0018      	movs	r0, r3
    4c48:	4b1a      	ldr	r3, [pc, #104]	; (4cb4 <_get_i2cm_index+0x7c>)
    4c4a:	4798      	blx	r3
    4c4c:	0003      	movs	r3, r0
    4c4e:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    4c50:	230f      	movs	r3, #15
    4c52:	18fb      	adds	r3, r7, r3
    4c54:	2200      	movs	r2, #0
    4c56:	701a      	strb	r2, [r3, #0]
    4c58:	e019      	b.n	4c8e <_get_i2cm_index+0x56>
		if (_i2cms[i].number == sercom_offset) {
    4c5a:	230f      	movs	r3, #15
    4c5c:	18fb      	adds	r3, r7, r3
    4c5e:	781a      	ldrb	r2, [r3, #0]
    4c60:	4915      	ldr	r1, [pc, #84]	; (4cb8 <_get_i2cm_index+0x80>)
    4c62:	0013      	movs	r3, r2
    4c64:	005b      	lsls	r3, r3, #1
    4c66:	189b      	adds	r3, r3, r2
    4c68:	00db      	lsls	r3, r3, #3
    4c6a:	5c5b      	ldrb	r3, [r3, r1]
    4c6c:	220e      	movs	r2, #14
    4c6e:	18ba      	adds	r2, r7, r2
    4c70:	7812      	ldrb	r2, [r2, #0]
    4c72:	429a      	cmp	r2, r3
    4c74:	d104      	bne.n	4c80 <_get_i2cm_index+0x48>
			return i;
    4c76:	230f      	movs	r3, #15
    4c78:	18fb      	adds	r3, r7, r3
    4c7a:	781b      	ldrb	r3, [r3, #0]
    4c7c:	b25b      	sxtb	r3, r3
    4c7e:	e014      	b.n	4caa <_get_i2cm_index+0x72>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    4c80:	230f      	movs	r3, #15
    4c82:	18fb      	adds	r3, r7, r3
    4c84:	781a      	ldrb	r2, [r3, #0]
    4c86:	230f      	movs	r3, #15
    4c88:	18fb      	adds	r3, r7, r3
    4c8a:	3201      	adds	r2, #1
    4c8c:	701a      	strb	r2, [r3, #0]
    4c8e:	230f      	movs	r3, #15
    4c90:	18fb      	adds	r3, r7, r3
    4c92:	781b      	ldrb	r3, [r3, #0]
    4c94:	2b01      	cmp	r3, #1
    4c96:	d9e0      	bls.n	4c5a <_get_i2cm_index+0x22>
		}
	}

	ASSERT(false);
    4c98:	23e6      	movs	r3, #230	; 0xe6
    4c9a:	009a      	lsls	r2, r3, #2
    4c9c:	4b07      	ldr	r3, [pc, #28]	; (4cbc <_get_i2cm_index+0x84>)
    4c9e:	0019      	movs	r1, r3
    4ca0:	2000      	movs	r0, #0
    4ca2:	4b07      	ldr	r3, [pc, #28]	; (4cc0 <_get_i2cm_index+0x88>)
    4ca4:	4798      	blx	r3
	return -1;
    4ca6:	2301      	movs	r3, #1
    4ca8:	425b      	negs	r3, r3
}
    4caa:	0018      	movs	r0, r3
    4cac:	46bd      	mov	sp, r7
    4cae:	b005      	add	sp, #20
    4cb0:	bd90      	pop	{r4, r7, pc}
    4cb2:	46c0      	nop			; (mov r8, r8)
    4cb4:	00004995 	.word	0x00004995
    4cb8:	20000030 	.word	0x20000030
    4cbc:	0000c438 	.word	0x0000c438
    4cc0:	00002cd5 	.word	0x00002cd5

00004cc4 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    4cc4:	b580      	push	{r7, lr}
    4cc6:	b082      	sub	sp, #8
    4cc8:	af00      	add	r7, sp, #0
    4cca:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    4ccc:	687b      	ldr	r3, [r7, #4]
    4cce:	2103      	movs	r1, #3
    4cd0:	0018      	movs	r0, r3
    4cd2:	4b03      	ldr	r3, [pc, #12]	; (4ce0 <_sercom_i2c_send_stop+0x1c>)
    4cd4:	4798      	blx	r3
}
    4cd6:	46c0      	nop			; (mov r8, r8)
    4cd8:	46bd      	mov	sp, r7
    4cda:	b002      	add	sp, #8
    4cdc:	bd80      	pop	{r7, pc}
    4cde:	46c0      	nop			; (mov r8, r8)
    4ce0:	00004579 	.word	0x00004579

00004ce4 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    4ce4:	b590      	push	{r4, r7, lr}
    4ce6:	b087      	sub	sp, #28
    4ce8:	af00      	add	r7, sp, #0
    4cea:	60f8      	str	r0, [r7, #12]
    4cec:	60b9      	str	r1, [r7, #8]
    4cee:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    4cf0:	68fb      	ldr	r3, [r7, #12]
    4cf2:	0018      	movs	r0, r3
    4cf4:	4b87      	ldr	r3, [pc, #540]	; (4f14 <_sercom_i2c_sync_analyse_flags+0x230>)
    4cf6:	4798      	blx	r3
    4cf8:	0003      	movs	r3, r0
    4cfa:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    4cfc:	2312      	movs	r3, #18
    4cfe:	18fc      	adds	r4, r7, r3
    4d00:	68fb      	ldr	r3, [r7, #12]
    4d02:	0018      	movs	r0, r3
    4d04:	4b84      	ldr	r3, [pc, #528]	; (4f18 <_sercom_i2c_sync_analyse_flags+0x234>)
    4d06:	4798      	blx	r3
    4d08:	0003      	movs	r3, r0
    4d0a:	8023      	strh	r3, [r4, #0]

	if (flags & MB_FLAG) {
    4d0c:	68bb      	ldr	r3, [r7, #8]
    4d0e:	2201      	movs	r2, #1
    4d10:	4013      	ands	r3, r2
    4d12:	d100      	bne.n	4d16 <_sercom_i2c_sync_analyse_flags+0x32>
    4d14:	e0a3      	b.n	4e5e <_sercom_i2c_sync_analyse_flags+0x17a>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    4d16:	2312      	movs	r3, #18
    4d18:	18fb      	adds	r3, r7, r3
    4d1a:	881b      	ldrh	r3, [r3, #0]
    4d1c:	2202      	movs	r2, #2
    4d1e:	4013      	ands	r3, r2
    4d20:	d020      	beq.n	4d64 <_sercom_i2c_sync_analyse_flags+0x80>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    4d22:	68fb      	ldr	r3, [r7, #12]
    4d24:	0018      	movs	r0, r3
    4d26:	4b7d      	ldr	r3, [pc, #500]	; (4f1c <_sercom_i2c_sync_analyse_flags+0x238>)
    4d28:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    4d2a:	687b      	ldr	r3, [r7, #4]
    4d2c:	885b      	ldrh	r3, [r3, #2]
    4d2e:	b29b      	uxth	r3, r3
    4d30:	2280      	movs	r2, #128	; 0x80
    4d32:	0152      	lsls	r2, r2, #5
    4d34:	4313      	orrs	r3, r2
    4d36:	b29a      	uxth	r2, r3
    4d38:	687b      	ldr	r3, [r7, #4]
    4d3a:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    4d3c:	687b      	ldr	r3, [r7, #4]
    4d3e:	885b      	ldrh	r3, [r3, #2]
    4d40:	b29b      	uxth	r3, r3
    4d42:	4a77      	ldr	r2, [pc, #476]	; (4f20 <_sercom_i2c_sync_analyse_flags+0x23c>)
    4d44:	4013      	ands	r3, r2
    4d46:	b29a      	uxth	r2, r3
    4d48:	687b      	ldr	r3, [r7, #4]
    4d4a:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    4d4c:	2312      	movs	r3, #18
    4d4e:	18fb      	adds	r3, r7, r3
    4d50:	881b      	ldrh	r3, [r3, #0]
    4d52:	2201      	movs	r2, #1
    4d54:	4013      	ands	r3, r2
    4d56:	d002      	beq.n	4d5e <_sercom_i2c_sync_analyse_flags+0x7a>
				return I2C_ERR_BUS;
    4d58:	2305      	movs	r3, #5
    4d5a:	425b      	negs	r3, r3
    4d5c:	e0d6      	b.n	4f0c <_sercom_i2c_sync_analyse_flags+0x228>
			}

			return I2C_ERR_BAD_ADDRESS;
    4d5e:	2304      	movs	r3, #4
    4d60:	425b      	negs	r3, r3
    4d62:	e0d3      	b.n	4f0c <_sercom_i2c_sync_analyse_flags+0x228>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    4d64:	2312      	movs	r3, #18
    4d66:	18fb      	adds	r3, r7, r3
    4d68:	881b      	ldrh	r3, [r3, #0]
    4d6a:	2204      	movs	r2, #4
    4d6c:	4013      	ands	r3, r2
    4d6e:	d021      	beq.n	4db4 <_sercom_i2c_sync_analyse_flags+0xd0>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    4d70:	687b      	ldr	r3, [r7, #4]
    4d72:	685b      	ldr	r3, [r3, #4]
    4d74:	2b00      	cmp	r3, #0
    4d76:	dd08      	ble.n	4d8a <_sercom_i2c_sync_analyse_flags+0xa6>
					msg->flags |= I2C_M_FAIL;
    4d78:	687b      	ldr	r3, [r7, #4]
    4d7a:	885b      	ldrh	r3, [r3, #2]
    4d7c:	b29b      	uxth	r3, r3
    4d7e:	2280      	movs	r2, #128	; 0x80
    4d80:	0152      	lsls	r2, r2, #5
    4d82:	4313      	orrs	r3, r2
    4d84:	b29a      	uxth	r2, r3
    4d86:	687b      	ldr	r3, [r7, #4]
    4d88:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    4d8a:	687b      	ldr	r3, [r7, #4]
    4d8c:	885b      	ldrh	r3, [r3, #2]
    4d8e:	b29b      	uxth	r3, r3
    4d90:	b21b      	sxth	r3, r3
    4d92:	2b00      	cmp	r3, #0
    4d94:	da03      	bge.n	4d9e <_sercom_i2c_sync_analyse_flags+0xba>
					_sercom_i2c_send_stop(hw);
    4d96:	68fb      	ldr	r3, [r7, #12]
    4d98:	0018      	movs	r0, r3
    4d9a:	4b62      	ldr	r3, [pc, #392]	; (4f24 <_sercom_i2c_sync_analyse_flags+0x240>)
    4d9c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    4d9e:	687b      	ldr	r3, [r7, #4]
    4da0:	885b      	ldrh	r3, [r3, #2]
    4da2:	b29b      	uxth	r3, r3
    4da4:	4a5e      	ldr	r2, [pc, #376]	; (4f20 <_sercom_i2c_sync_analyse_flags+0x23c>)
    4da6:	4013      	ands	r3, r2
    4da8:	b29a      	uxth	r2, r3
    4daa:	687b      	ldr	r3, [r7, #4]
    4dac:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    4dae:	2302      	movs	r3, #2
    4db0:	425b      	negs	r3, r3
    4db2:	e0ab      	b.n	4f0c <_sercom_i2c_sync_analyse_flags+0x228>
			}

			if (msg->flags & I2C_M_TEN) {
    4db4:	687b      	ldr	r3, [r7, #4]
    4db6:	885b      	ldrh	r3, [r3, #2]
    4db8:	b29b      	uxth	r3, r3
    4dba:	001a      	movs	r2, r3
    4dbc:	2380      	movs	r3, #128	; 0x80
    4dbe:	00db      	lsls	r3, r3, #3
    4dc0:	4013      	ands	r3, r2
    4dc2:	d021      	beq.n	4e08 <_sercom_i2c_sync_analyse_flags+0x124>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    4dc4:	687b      	ldr	r3, [r7, #4]
    4dc6:	881b      	ldrh	r3, [r3, #0]
    4dc8:	121b      	asrs	r3, r3, #8
    4dca:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    4dcc:	001a      	movs	r2, r3
    4dce:	2306      	movs	r3, #6
    4dd0:	401a      	ands	r2, r3
    4dd2:	0014      	movs	r4, r2
    4dd4:	68fb      	ldr	r3, [r7, #12]
    4dd6:	0018      	movs	r0, r3
    4dd8:	4b53      	ldr	r3, [pc, #332]	; (4f28 <_sercom_i2c_sync_analyse_flags+0x244>)
    4dda:	4798      	blx	r3
    4ddc:	0002      	movs	r2, r0
    4dde:	2380      	movs	r3, #128	; 0x80
    4de0:	01db      	lsls	r3, r3, #7
    4de2:	4013      	ands	r3, r2
    4de4:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    4de6:	22f1      	movs	r2, #241	; 0xf1
    4de8:	431a      	orrs	r2, r3
    4dea:	68fb      	ldr	r3, [r7, #12]
    4dec:	0011      	movs	r1, r2
    4dee:	0018      	movs	r0, r3
    4df0:	4b4e      	ldr	r3, [pc, #312]	; (4f2c <_sercom_i2c_sync_analyse_flags+0x248>)
    4df2:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    4df4:	687b      	ldr	r3, [r7, #4]
    4df6:	885b      	ldrh	r3, [r3, #2]
    4df8:	b29b      	uxth	r3, r3
    4dfa:	4a4d      	ldr	r2, [pc, #308]	; (4f30 <_sercom_i2c_sync_analyse_flags+0x24c>)
    4dfc:	4013      	ands	r3, r2
    4dfe:	b29a      	uxth	r2, r3
    4e00:	687b      	ldr	r3, [r7, #4]
    4e02:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    4e04:	2300      	movs	r3, #0
    4e06:	e081      	b.n	4f0c <_sercom_i2c_sync_analyse_flags+0x228>
			}

			if (msg->len == 0) {
    4e08:	687b      	ldr	r3, [r7, #4]
    4e0a:	685b      	ldr	r3, [r3, #4]
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	d112      	bne.n	4e36 <_sercom_i2c_sync_analyse_flags+0x152>
				if (msg->flags & I2C_M_STOP) {
    4e10:	687b      	ldr	r3, [r7, #4]
    4e12:	885b      	ldrh	r3, [r3, #2]
    4e14:	b29b      	uxth	r3, r3
    4e16:	b21b      	sxth	r3, r3
    4e18:	2b00      	cmp	r3, #0
    4e1a:	da03      	bge.n	4e24 <_sercom_i2c_sync_analyse_flags+0x140>
					_sercom_i2c_send_stop(hw);
    4e1c:	68fb      	ldr	r3, [r7, #12]
    4e1e:	0018      	movs	r0, r3
    4e20:	4b40      	ldr	r3, [pc, #256]	; (4f24 <_sercom_i2c_sync_analyse_flags+0x240>)
    4e22:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    4e24:	687b      	ldr	r3, [r7, #4]
    4e26:	885b      	ldrh	r3, [r3, #2]
    4e28:	b29b      	uxth	r3, r3
    4e2a:	4a3d      	ldr	r2, [pc, #244]	; (4f20 <_sercom_i2c_sync_analyse_flags+0x23c>)
    4e2c:	4013      	ands	r3, r2
    4e2e:	b29a      	uxth	r2, r3
    4e30:	687b      	ldr	r3, [r7, #4]
    4e32:	805a      	strh	r2, [r3, #2]
    4e34:	e011      	b.n	4e5a <_sercom_i2c_sync_analyse_flags+0x176>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    4e36:	687b      	ldr	r3, [r7, #4]
    4e38:	689b      	ldr	r3, [r3, #8]
    4e3a:	781a      	ldrb	r2, [r3, #0]
    4e3c:	68fb      	ldr	r3, [r7, #12]
    4e3e:	0011      	movs	r1, r2
    4e40:	0018      	movs	r0, r3
    4e42:	4b3c      	ldr	r3, [pc, #240]	; (4f34 <_sercom_i2c_sync_analyse_flags+0x250>)
    4e44:	4798      	blx	r3
				msg->buffer++;
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	689b      	ldr	r3, [r3, #8]
    4e4a:	1c5a      	adds	r2, r3, #1
    4e4c:	687b      	ldr	r3, [r7, #4]
    4e4e:	609a      	str	r2, [r3, #8]
				msg->len--;
    4e50:	687b      	ldr	r3, [r7, #4]
    4e52:	685b      	ldr	r3, [r3, #4]
    4e54:	1e5a      	subs	r2, r3, #1
    4e56:	687b      	ldr	r3, [r7, #4]
    4e58:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    4e5a:	2300      	movs	r3, #0
    4e5c:	e056      	b.n	4f0c <_sercom_i2c_sync_analyse_flags+0x228>
		}
	} else if (flags & SB_FLAG) {
    4e5e:	68bb      	ldr	r3, [r7, #8]
    4e60:	2202      	movs	r2, #2
    4e62:	4013      	ands	r3, r2
    4e64:	d051      	beq.n	4f0a <_sercom_i2c_sync_analyse_flags+0x226>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    4e66:	687b      	ldr	r3, [r7, #4]
    4e68:	685b      	ldr	r3, [r3, #4]
    4e6a:	2b00      	cmp	r3, #0
    4e6c:	d046      	beq.n	4efc <_sercom_i2c_sync_analyse_flags+0x218>
    4e6e:	2312      	movs	r3, #18
    4e70:	18fb      	adds	r3, r7, r3
    4e72:	881b      	ldrh	r3, [r3, #0]
    4e74:	2204      	movs	r2, #4
    4e76:	4013      	ands	r3, r2
    4e78:	d140      	bne.n	4efc <_sercom_i2c_sync_analyse_flags+0x218>
			msg->len--;
    4e7a:	687b      	ldr	r3, [r7, #4]
    4e7c:	685b      	ldr	r3, [r3, #4]
    4e7e:	1e5a      	subs	r2, r3, #1
    4e80:	687b      	ldr	r3, [r7, #4]
    4e82:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    4e84:	687b      	ldr	r3, [r7, #4]
    4e86:	685b      	ldr	r3, [r3, #4]
    4e88:	2b00      	cmp	r3, #0
    4e8a:	d102      	bne.n	4e92 <_sercom_i2c_sync_analyse_flags+0x1ae>
    4e8c:	697b      	ldr	r3, [r7, #20]
    4e8e:	2b00      	cmp	r3, #0
    4e90:	d006      	beq.n	4ea0 <_sercom_i2c_sync_analyse_flags+0x1bc>
    4e92:	687b      	ldr	r3, [r7, #4]
    4e94:	685b      	ldr	r3, [r3, #4]
    4e96:	2b01      	cmp	r3, #1
    4e98:	d106      	bne.n	4ea8 <_sercom_i2c_sync_analyse_flags+0x1c4>
    4e9a:	697b      	ldr	r3, [r7, #20]
    4e9c:	2b00      	cmp	r3, #0
    4e9e:	d003      	beq.n	4ea8 <_sercom_i2c_sync_analyse_flags+0x1c4>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    4ea0:	68fb      	ldr	r3, [r7, #12]
    4ea2:	0018      	movs	r0, r3
    4ea4:	4b24      	ldr	r3, [pc, #144]	; (4f38 <_sercom_i2c_sync_analyse_flags+0x254>)
    4ea6:	4798      	blx	r3
			}

			if (msg->len == 0) {
    4ea8:	687b      	ldr	r3, [r7, #4]
    4eaa:	685b      	ldr	r3, [r3, #4]
    4eac:	2b00      	cmp	r3, #0
    4eae:	d115      	bne.n	4edc <_sercom_i2c_sync_analyse_flags+0x1f8>
				if (msg->flags & I2C_M_STOP) {
    4eb0:	687b      	ldr	r3, [r7, #4]
    4eb2:	885b      	ldrh	r3, [r3, #2]
    4eb4:	b29b      	uxth	r3, r3
    4eb6:	b21b      	sxth	r3, r3
    4eb8:	2b00      	cmp	r3, #0
    4eba:	da07      	bge.n	4ecc <_sercom_i2c_sync_analyse_flags+0x1e8>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    4ebc:	68fb      	ldr	r3, [r7, #12]
    4ebe:	0018      	movs	r0, r3
    4ec0:	4b1e      	ldr	r3, [pc, #120]	; (4f3c <_sercom_i2c_sync_analyse_flags+0x258>)
    4ec2:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    4ec4:	68fb      	ldr	r3, [r7, #12]
    4ec6:	0018      	movs	r0, r3
    4ec8:	4b16      	ldr	r3, [pc, #88]	; (4f24 <_sercom_i2c_sync_analyse_flags+0x240>)
    4eca:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    4ecc:	687b      	ldr	r3, [r7, #4]
    4ece:	885b      	ldrh	r3, [r3, #2]
    4ed0:	b29b      	uxth	r3, r3
    4ed2:	4a13      	ldr	r2, [pc, #76]	; (4f20 <_sercom_i2c_sync_analyse_flags+0x23c>)
    4ed4:	4013      	ands	r3, r2
    4ed6:	b29a      	uxth	r2, r3
    4ed8:	687b      	ldr	r3, [r7, #4]
    4eda:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    4edc:	687b      	ldr	r3, [r7, #4]
    4ede:	689c      	ldr	r4, [r3, #8]
    4ee0:	1c62      	adds	r2, r4, #1
    4ee2:	687b      	ldr	r3, [r7, #4]
    4ee4:	609a      	str	r2, [r3, #8]
    4ee6:	68fb      	ldr	r3, [r7, #12]
    4ee8:	0018      	movs	r0, r3
    4eea:	4b15      	ldr	r3, [pc, #84]	; (4f40 <_sercom_i2c_sync_analyse_flags+0x25c>)
    4eec:	4798      	blx	r3
    4eee:	0003      	movs	r3, r0
    4ef0:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    4ef2:	68fb      	ldr	r3, [r7, #12]
    4ef4:	0018      	movs	r0, r3
    4ef6:	4b13      	ldr	r3, [pc, #76]	; (4f44 <_sercom_i2c_sync_analyse_flags+0x260>)
    4ef8:	4798      	blx	r3
    4efa:	e006      	b.n	4f0a <_sercom_i2c_sync_analyse_flags+0x226>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    4efc:	68fb      	ldr	r3, [r7, #12]
    4efe:	0018      	movs	r0, r3
    4f00:	4b10      	ldr	r3, [pc, #64]	; (4f44 <_sercom_i2c_sync_analyse_flags+0x260>)
    4f02:	4798      	blx	r3
			return I2C_NACK;
    4f04:	2302      	movs	r3, #2
    4f06:	425b      	negs	r3, r3
    4f08:	e000      	b.n	4f0c <_sercom_i2c_sync_analyse_flags+0x228>
	}

	return I2C_OK;
    4f0a:	2300      	movs	r3, #0
}
    4f0c:	0018      	movs	r0, r3
    4f0e:	46bd      	mov	sp, r7
    4f10:	b007      	add	sp, #28
    4f12:	bd90      	pop	{r4, r7, pc}
    4f14:	000042d5 	.word	0x000042d5
    4f18:	00004861 	.word	0x00004861
    4f1c:	00004193 	.word	0x00004193
    4f20:	fffffeff 	.word	0xfffffeff
    4f24:	00004cc5 	.word	0x00004cc5
    4f28:	0000470d 	.word	0x0000470d
    4f2c:	000046e5 	.word	0x000046e5
    4f30:	fffffbff 	.word	0xfffffbff
    4f34:	00004749 	.word	0x00004749
    4f38:	0000451d 	.word	0x0000451d
    4f3c:	000044ed 	.word	0x000044ed
    4f40:	00004779 	.word	0x00004779
    4f44:	000041a9 	.word	0x000041a9

00004f48 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    4f48:	b580      	push	{r7, lr}
    4f4a:	b082      	sub	sp, #8
    4f4c:	af00      	add	r7, sp, #0
    4f4e:	6078      	str	r0, [r7, #4]
    4f50:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    4f52:	687b      	ldr	r3, [r7, #4]
    4f54:	1e5a      	subs	r2, r3, #1
    4f56:	4193      	sbcs	r3, r2
    4f58:	b2db      	uxtb	r3, r3
    4f5a:	4a09      	ldr	r2, [pc, #36]	; (4f80 <_i2c_m_sync_init+0x38>)
    4f5c:	4909      	ldr	r1, [pc, #36]	; (4f84 <_i2c_m_sync_init+0x3c>)
    4f5e:	0018      	movs	r0, r3
    4f60:	4b09      	ldr	r3, [pc, #36]	; (4f88 <_i2c_m_sync_init+0x40>)
    4f62:	4798      	blx	r3

	i2c_dev->hw = hw;
    4f64:	687b      	ldr	r3, [r7, #4]
    4f66:	683a      	ldr	r2, [r7, #0]
    4f68:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    4f6a:	687b      	ldr	r3, [r7, #4]
    4f6c:	683a      	ldr	r2, [r7, #0]
    4f6e:	0011      	movs	r1, r2
    4f70:	0018      	movs	r0, r3
    4f72:	4b06      	ldr	r3, [pc, #24]	; (4f8c <_i2c_m_sync_init+0x44>)
    4f74:	4798      	blx	r3
    4f76:	0003      	movs	r3, r0
}
    4f78:	0018      	movs	r0, r3
    4f7a:	46bd      	mov	sp, r7
    4f7c:	b002      	add	sp, #8
    4f7e:	bd80      	pop	{r7, pc}
    4f80:	00000507 	.word	0x00000507
    4f84:	0000c438 	.word	0x0000c438
    4f88:	00002cd5 	.word	0x00002cd5
    4f8c:	00005269 	.word	0x00005269

00004f90 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    4f90:	b580      	push	{r7, lr}
    4f92:	b084      	sub	sp, #16
    4f94:	af00      	add	r7, sp, #0
    4f96:	6078      	str	r0, [r7, #4]
    4f98:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    4f9a:	4b12      	ldr	r3, [pc, #72]	; (4fe4 <_sercom_i2c_sync_wait_bus+0x54>)
    4f9c:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    4f9e:	687b      	ldr	r3, [r7, #4]
    4fa0:	691b      	ldr	r3, [r3, #16]
    4fa2:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    4fa4:	68bb      	ldr	r3, [r7, #8]
    4fa6:	0018      	movs	r0, r3
    4fa8:	4b0f      	ldr	r3, [pc, #60]	; (4fe8 <_sercom_i2c_sync_wait_bus+0x58>)
    4faa:	4798      	blx	r3
    4fac:	0003      	movs	r3, r0
    4fae:	001a      	movs	r2, r3
    4fb0:	683b      	ldr	r3, [r7, #0]
    4fb2:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    4fb4:	68fb      	ldr	r3, [r7, #12]
    4fb6:	1e5a      	subs	r2, r3, #1
    4fb8:	60fa      	str	r2, [r7, #12]
    4fba:	2b00      	cmp	r3, #0
    4fbc:	d102      	bne.n	4fc4 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    4fbe:	2305      	movs	r3, #5
    4fc0:	425b      	negs	r3, r3
    4fc2:	e00a      	b.n	4fda <_sercom_i2c_sync_wait_bus+0x4a>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    4fc4:	683b      	ldr	r3, [r7, #0]
    4fc6:	681b      	ldr	r3, [r3, #0]
    4fc8:	2201      	movs	r2, #1
    4fca:	4013      	ands	r3, r2
    4fcc:	d104      	bne.n	4fd8 <_sercom_i2c_sync_wait_bus+0x48>
    4fce:	683b      	ldr	r3, [r7, #0]
    4fd0:	681b      	ldr	r3, [r3, #0]
    4fd2:	2202      	movs	r2, #2
    4fd4:	4013      	ands	r3, r2
    4fd6:	d0e5      	beq.n	4fa4 <_sercom_i2c_sync_wait_bus+0x14>

	return I2C_OK;
    4fd8:	2300      	movs	r3, #0
}
    4fda:	0018      	movs	r0, r3
    4fdc:	46bd      	mov	sp, r7
    4fde:	b004      	add	sp, #16
    4fe0:	bd80      	pop	{r7, pc}
    4fe2:	46c0      	nop			; (mov r8, r8)
    4fe4:	0000ffff 	.word	0x0000ffff
    4fe8:	000041bf 	.word	0x000041bf

00004fec <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    4fec:	b590      	push	{r4, r7, lr}
    4fee:	b087      	sub	sp, #28
    4ff0:	af00      	add	r7, sp, #0
    4ff2:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    4ff4:	687b      	ldr	r3, [r7, #4]
    4ff6:	691b      	ldr	r3, [r3, #16]
    4ff8:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    4ffa:	687b      	ldr	r3, [r7, #4]
    4ffc:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    4ffe:	697b      	ldr	r3, [r7, #20]
    5000:	0018      	movs	r0, r3
    5002:	4b3f      	ldr	r3, [pc, #252]	; (5100 <_sercom_i2c_sync_send_address+0x114>)
    5004:	4798      	blx	r3
    5006:	0003      	movs	r3, r0
    5008:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    500a:	687b      	ldr	r3, [r7, #4]
    500c:	1e5a      	subs	r2, r3, #1
    500e:	4193      	sbcs	r3, r2
    5010:	b2db      	uxtb	r3, r3
    5012:	4a3c      	ldr	r2, [pc, #240]	; (5104 <_sercom_i2c_sync_send_address+0x118>)
    5014:	493c      	ldr	r1, [pc, #240]	; (5108 <_sercom_i2c_sync_send_address+0x11c>)
    5016:	0018      	movs	r0, r3
    5018:	4b3c      	ldr	r3, [pc, #240]	; (510c <_sercom_i2c_sync_send_address+0x120>)
    501a:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    501c:	693b      	ldr	r3, [r7, #16]
    501e:	685b      	ldr	r3, [r3, #4]
    5020:	2b01      	cmp	r3, #1
    5022:	d107      	bne.n	5034 <_sercom_i2c_sync_send_address+0x48>
    5024:	68fb      	ldr	r3, [r7, #12]
    5026:	2b00      	cmp	r3, #0
    5028:	d004      	beq.n	5034 <_sercom_i2c_sync_send_address+0x48>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    502a:	697b      	ldr	r3, [r7, #20]
    502c:	0018      	movs	r0, r3
    502e:	4b38      	ldr	r3, [pc, #224]	; (5110 <_sercom_i2c_sync_send_address+0x124>)
    5030:	4798      	blx	r3
    5032:	e003      	b.n	503c <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    5034:	697b      	ldr	r3, [r7, #20]
    5036:	0018      	movs	r0, r3
    5038:	4b36      	ldr	r3, [pc, #216]	; (5114 <_sercom_i2c_sync_send_address+0x128>)
    503a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    503c:	693b      	ldr	r3, [r7, #16]
    503e:	881b      	ldrh	r3, [r3, #0]
    5040:	001a      	movs	r2, r3
    5042:	2380      	movs	r3, #128	; 0x80
    5044:	00db      	lsls	r3, r3, #3
    5046:	4013      	ands	r3, r2
    5048:	d028      	beq.n	509c <_sercom_i2c_sync_send_address+0xb0>
		if (msg->flags & I2C_M_RD) {
    504a:	693b      	ldr	r3, [r7, #16]
    504c:	885b      	ldrh	r3, [r3, #2]
    504e:	b29b      	uxth	r3, r3
    5050:	001a      	movs	r2, r3
    5052:	2301      	movs	r3, #1
    5054:	4013      	ands	r3, r2
    5056:	d008      	beq.n	506a <_sercom_i2c_sync_send_address+0x7e>
			msg->flags |= I2C_M_TEN;
    5058:	693b      	ldr	r3, [r7, #16]
    505a:	885b      	ldrh	r3, [r3, #2]
    505c:	b29b      	uxth	r3, r3
    505e:	2280      	movs	r2, #128	; 0x80
    5060:	00d2      	lsls	r2, r2, #3
    5062:	4313      	orrs	r3, r2
    5064:	b29a      	uxth	r2, r3
    5066:	693b      	ldr	r3, [r7, #16]
    5068:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    506a:	693b      	ldr	r3, [r7, #16]
    506c:	881b      	ldrh	r3, [r3, #0]
    506e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    5070:	001a      	movs	r2, r3
    5072:	4b29      	ldr	r3, [pc, #164]	; (5118 <_sercom_i2c_sync_send_address+0x12c>)
    5074:	401a      	ands	r2, r3
    5076:	0014      	movs	r4, r2
    5078:	697b      	ldr	r3, [r7, #20]
    507a:	0018      	movs	r0, r3
    507c:	4b27      	ldr	r3, [pc, #156]	; (511c <_sercom_i2c_sync_send_address+0x130>)
    507e:	4798      	blx	r3
    5080:	0002      	movs	r2, r0
    5082:	2380      	movs	r3, #128	; 0x80
    5084:	01db      	lsls	r3, r3, #7
    5086:	4013      	ands	r3, r2
    5088:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    508a:	2280      	movs	r2, #128	; 0x80
    508c:	0212      	lsls	r2, r2, #8
    508e:	431a      	orrs	r2, r3
    5090:	697b      	ldr	r3, [r7, #20]
    5092:	0011      	movs	r1, r2
    5094:	0018      	movs	r0, r3
    5096:	4b22      	ldr	r3, [pc, #136]	; (5120 <_sercom_i2c_sync_send_address+0x134>)
    5098:	4798      	blx	r3
    509a:	e01e      	b.n	50da <_sercom_i2c_sync_send_address+0xee>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    509c:	693b      	ldr	r3, [r7, #16]
    509e:	881b      	ldrh	r3, [r3, #0]
    50a0:	005b      	lsls	r3, r3, #1
    50a2:	22ff      	movs	r2, #255	; 0xff
    50a4:	4013      	ands	r3, r2
    50a6:	693a      	ldr	r2, [r7, #16]
    50a8:	8852      	ldrh	r2, [r2, #2]
    50aa:	b292      	uxth	r2, r2
    50ac:	0011      	movs	r1, r2
    50ae:	2201      	movs	r2, #1
    50b0:	400a      	ands	r2, r1
    50b2:	1e51      	subs	r1, r2, #1
    50b4:	418a      	sbcs	r2, r1
    50b6:	b2d2      	uxtb	r2, r2
    50b8:	4313      	orrs	r3, r2
    50ba:	001c      	movs	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    50bc:	697b      	ldr	r3, [r7, #20]
    50be:	0018      	movs	r0, r3
    50c0:	4b16      	ldr	r3, [pc, #88]	; (511c <_sercom_i2c_sync_send_address+0x130>)
    50c2:	4798      	blx	r3
    50c4:	0002      	movs	r2, r0
    50c6:	2380      	movs	r3, #128	; 0x80
    50c8:	01db      	lsls	r3, r3, #7
    50ca:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    50cc:	0022      	movs	r2, r4
    50ce:	431a      	orrs	r2, r3
    50d0:	697b      	ldr	r3, [r7, #20]
    50d2:	0011      	movs	r1, r2
    50d4:	0018      	movs	r0, r3
    50d6:	4b12      	ldr	r3, [pc, #72]	; (5120 <_sercom_i2c_sync_send_address+0x134>)
    50d8:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    50da:	2308      	movs	r3, #8
    50dc:	18fa      	adds	r2, r7, r3
    50de:	687b      	ldr	r3, [r7, #4]
    50e0:	0011      	movs	r1, r2
    50e2:	0018      	movs	r0, r3
    50e4:	4b0f      	ldr	r3, [pc, #60]	; (5124 <_sercom_i2c_sync_send_address+0x138>)
    50e6:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    50e8:	68b9      	ldr	r1, [r7, #8]
    50ea:	693a      	ldr	r2, [r7, #16]
    50ec:	697b      	ldr	r3, [r7, #20]
    50ee:	0018      	movs	r0, r3
    50f0:	4b0d      	ldr	r3, [pc, #52]	; (5128 <_sercom_i2c_sync_send_address+0x13c>)
    50f2:	4798      	blx	r3
    50f4:	0003      	movs	r3, r0
}
    50f6:	0018      	movs	r0, r3
    50f8:	46bd      	mov	sp, r7
    50fa:	b007      	add	sp, #28
    50fc:	bd90      	pop	{r4, r7, pc}
    50fe:	46c0      	nop			; (mov r8, r8)
    5100:	000042d5 	.word	0x000042d5
    5104:	00000594 	.word	0x00000594
    5108:	0000c438 	.word	0x0000c438
    510c:	00002cd5 	.word	0x00002cd5
    5110:	0000451d 	.word	0x0000451d
    5114:	00004549 	.word	0x00004549
    5118:	000007fe 	.word	0x000007fe
    511c:	0000470d 	.word	0x0000470d
    5120:	000046e5 	.word	0x000046e5
    5124:	00004f91 	.word	0x00004f91
    5128:	00004ce5 	.word	0x00004ce5

0000512c <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    512c:	b590      	push	{r4, r7, lr}
    512e:	b087      	sub	sp, #28
    5130:	af00      	add	r7, sp, #0
    5132:	6078      	str	r0, [r7, #4]
    5134:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    5136:	687b      	ldr	r3, [r7, #4]
    5138:	691b      	ldr	r3, [r3, #16]
    513a:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    513c:	687b      	ldr	r3, [r7, #4]
    513e:	1e5a      	subs	r2, r3, #1
    5140:	4193      	sbcs	r3, r2
    5142:	b2db      	uxtb	r3, r3
    5144:	4a3e      	ldr	r2, [pc, #248]	; (5240 <_i2c_m_sync_transfer+0x114>)
    5146:	493f      	ldr	r1, [pc, #252]	; (5244 <_i2c_m_sync_transfer+0x118>)
    5148:	0018      	movs	r0, r3
    514a:	4b3f      	ldr	r3, [pc, #252]	; (5248 <_i2c_m_sync_transfer+0x11c>)
    514c:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    514e:	687b      	ldr	r3, [r7, #4]
    5150:	691b      	ldr	r3, [r3, #16]
    5152:	1e5a      	subs	r2, r3, #1
    5154:	4193      	sbcs	r3, r2
    5156:	b2d8      	uxtb	r0, r3
    5158:	23b8      	movs	r3, #184	; 0xb8
    515a:	00da      	lsls	r2, r3, #3
    515c:	4b39      	ldr	r3, [pc, #228]	; (5244 <_i2c_m_sync_transfer+0x118>)
    515e:	0019      	movs	r1, r3
    5160:	4b39      	ldr	r3, [pc, #228]	; (5248 <_i2c_m_sync_transfer+0x11c>)
    5162:	4798      	blx	r3
	ASSERT(msg);
    5164:	683b      	ldr	r3, [r7, #0]
    5166:	1e5a      	subs	r2, r3, #1
    5168:	4193      	sbcs	r3, r2
    516a:	b2db      	uxtb	r3, r3
    516c:	4a37      	ldr	r2, [pc, #220]	; (524c <_i2c_m_sync_transfer+0x120>)
    516e:	4935      	ldr	r1, [pc, #212]	; (5244 <_i2c_m_sync_transfer+0x118>)
    5170:	0018      	movs	r0, r3
    5172:	4b35      	ldr	r3, [pc, #212]	; (5248 <_i2c_m_sync_transfer+0x11c>)
    5174:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    5176:	687b      	ldr	r3, [r7, #4]
    5178:	885b      	ldrh	r3, [r3, #2]
    517a:	b29b      	uxth	r3, r3
    517c:	001a      	movs	r2, r3
    517e:	2380      	movs	r3, #128	; 0x80
    5180:	005b      	lsls	r3, r3, #1
    5182:	4013      	ands	r3, r2
    5184:	d002      	beq.n	518c <_i2c_m_sync_transfer+0x60>
		return I2C_ERR_BUSY;
    5186:	2306      	movs	r3, #6
    5188:	425b      	negs	r3, r3
    518a:	e054      	b.n	5236 <_i2c_m_sync_transfer+0x10a>
	}

	msg->flags |= I2C_M_BUSY;
    518c:	683b      	ldr	r3, [r7, #0]
    518e:	885b      	ldrh	r3, [r3, #2]
    5190:	b29b      	uxth	r3, r3
    5192:	2280      	movs	r2, #128	; 0x80
    5194:	0052      	lsls	r2, r2, #1
    5196:	4313      	orrs	r3, r2
    5198:	b29a      	uxth	r2, r3
    519a:	683b      	ldr	r3, [r7, #0]
    519c:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    519e:	687b      	ldr	r3, [r7, #4]
    51a0:	683a      	ldr	r2, [r7, #0]
    51a2:	ca13      	ldmia	r2!, {r0, r1, r4}
    51a4:	c313      	stmia	r3!, {r0, r1, r4}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    51a6:	693b      	ldr	r3, [r7, #16]
    51a8:	0018      	movs	r0, r3
    51aa:	4b29      	ldr	r3, [pc, #164]	; (5250 <_i2c_m_sync_transfer+0x124>)
    51ac:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    51ae:	687b      	ldr	r3, [r7, #4]
    51b0:	0018      	movs	r0, r3
    51b2:	4b28      	ldr	r3, [pc, #160]	; (5254 <_i2c_m_sync_transfer+0x128>)
    51b4:	4798      	blx	r3
    51b6:	0003      	movs	r3, r0
    51b8:	617b      	str	r3, [r7, #20]

	if (ret) {
    51ba:	697b      	ldr	r3, [r7, #20]
    51bc:	2b00      	cmp	r3, #0
    51be:	d031      	beq.n	5224 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    51c0:	687b      	ldr	r3, [r7, #4]
    51c2:	885b      	ldrh	r3, [r3, #2]
    51c4:	b29b      	uxth	r3, r3
    51c6:	4a24      	ldr	r2, [pc, #144]	; (5258 <_i2c_m_sync_transfer+0x12c>)
    51c8:	4013      	ands	r3, r2
    51ca:	b29a      	uxth	r2, r3
    51cc:	687b      	ldr	r3, [r7, #4]
    51ce:	805a      	strh	r2, [r3, #2]

		return ret;
    51d0:	697b      	ldr	r3, [r7, #20]
    51d2:	e030      	b.n	5236 <_i2c_m_sync_transfer+0x10a>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    51d4:	230c      	movs	r3, #12
    51d6:	18fa      	adds	r2, r7, r3
    51d8:	687b      	ldr	r3, [r7, #4]
    51da:	0011      	movs	r1, r2
    51dc:	0018      	movs	r0, r3
    51de:	4b1f      	ldr	r3, [pc, #124]	; (525c <_i2c_m_sync_transfer+0x130>)
    51e0:	4798      	blx	r3
    51e2:	0003      	movs	r3, r0
    51e4:	617b      	str	r3, [r7, #20]

		if (ret) {
    51e6:	697b      	ldr	r3, [r7, #20]
    51e8:	2b00      	cmp	r3, #0
    51ea:	d013      	beq.n	5214 <_i2c_m_sync_transfer+0xe8>
			if (msg->flags & I2C_M_STOP) {
    51ec:	683b      	ldr	r3, [r7, #0]
    51ee:	885b      	ldrh	r3, [r3, #2]
    51f0:	b29b      	uxth	r3, r3
    51f2:	b21b      	sxth	r3, r3
    51f4:	2b00      	cmp	r3, #0
    51f6:	da03      	bge.n	5200 <_i2c_m_sync_transfer+0xd4>
				_sercom_i2c_send_stop(hw);
    51f8:	693b      	ldr	r3, [r7, #16]
    51fa:	0018      	movs	r0, r3
    51fc:	4b18      	ldr	r3, [pc, #96]	; (5260 <_i2c_m_sync_transfer+0x134>)
    51fe:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    5200:	687b      	ldr	r3, [r7, #4]
    5202:	885b      	ldrh	r3, [r3, #2]
    5204:	b29b      	uxth	r3, r3
    5206:	4a14      	ldr	r2, [pc, #80]	; (5258 <_i2c_m_sync_transfer+0x12c>)
    5208:	4013      	ands	r3, r2
    520a:	b29a      	uxth	r2, r3
    520c:	687b      	ldr	r3, [r7, #4]
    520e:	805a      	strh	r2, [r3, #2]

			return ret;
    5210:	697b      	ldr	r3, [r7, #20]
    5212:	e010      	b.n	5236 <_i2c_m_sync_transfer+0x10a>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    5214:	68f9      	ldr	r1, [r7, #12]
    5216:	687a      	ldr	r2, [r7, #4]
    5218:	693b      	ldr	r3, [r7, #16]
    521a:	0018      	movs	r0, r3
    521c:	4b11      	ldr	r3, [pc, #68]	; (5264 <_i2c_m_sync_transfer+0x138>)
    521e:	4798      	blx	r3
    5220:	0003      	movs	r3, r0
    5222:	617b      	str	r3, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    5224:	687b      	ldr	r3, [r7, #4]
    5226:	885b      	ldrh	r3, [r3, #2]
    5228:	b29b      	uxth	r3, r3
    522a:	001a      	movs	r2, r3
    522c:	2380      	movs	r3, #128	; 0x80
    522e:	005b      	lsls	r3, r3, #1
    5230:	4013      	ands	r3, r2
    5232:	d1cf      	bne.n	51d4 <_i2c_m_sync_transfer+0xa8>
	}

	return ret;
    5234:	697b      	ldr	r3, [r7, #20]
}
    5236:	0018      	movs	r0, r3
    5238:	46bd      	mov	sp, r7
    523a:	b007      	add	sp, #28
    523c:	bd90      	pop	{r4, r7, pc}
    523e:	46c0      	nop			; (mov r8, r8)
    5240:	000005bf 	.word	0x000005bf
    5244:	0000c438 	.word	0x0000c438
    5248:	00002cd5 	.word	0x00002cd5
    524c:	000005c1 	.word	0x000005c1
    5250:	000044c1 	.word	0x000044c1
    5254:	00004fed 	.word	0x00004fed
    5258:	fffffeff 	.word	0xfffffeff
    525c:	00004f91 	.word	0x00004f91
    5260:	00004cc5 	.word	0x00004cc5
    5264:	00004ce5 	.word	0x00004ce5

00005268 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    5268:	b580      	push	{r7, lr}
    526a:	b084      	sub	sp, #16
    526c:	af00      	add	r7, sp, #0
    526e:	6078      	str	r0, [r7, #4]
    5270:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    5272:	683b      	ldr	r3, [r7, #0]
    5274:	0018      	movs	r0, r3
    5276:	4b4f      	ldr	r3, [pc, #316]	; (53b4 <_i2c_m_sync_init_impl+0x14c>)
    5278:	4798      	blx	r3
    527a:	0003      	movs	r3, r0
    527c:	001a      	movs	r2, r3
    527e:	230f      	movs	r3, #15
    5280:	18fb      	adds	r3, r7, r3
    5282:	701a      	strb	r2, [r3, #0]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    5284:	683b      	ldr	r3, [r7, #0]
    5286:	2101      	movs	r1, #1
    5288:	0018      	movs	r0, r3
    528a:	4b4b      	ldr	r3, [pc, #300]	; (53b8 <_i2c_m_sync_init_impl+0x150>)
    528c:	4798      	blx	r3
    528e:	0003      	movs	r3, r0
    5290:	001a      	movs	r2, r3
    5292:	2301      	movs	r3, #1
    5294:	4053      	eors	r3, r2
    5296:	b2db      	uxtb	r3, r3
    5298:	2b00      	cmp	r3, #0
    529a:	d025      	beq.n	52e8 <_i2c_m_sync_init_impl+0x80>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    529c:	230f      	movs	r3, #15
    529e:	18fb      	adds	r3, r7, r3
    52a0:	781a      	ldrb	r2, [r3, #0]
    52a2:	4946      	ldr	r1, [pc, #280]	; (53bc <_i2c_m_sync_init_impl+0x154>)
    52a4:	0013      	movs	r3, r2
    52a6:	005b      	lsls	r3, r3, #1
    52a8:	189b      	adds	r3, r3, r2
    52aa:	00db      	lsls	r3, r3, #3
    52ac:	18cb      	adds	r3, r1, r3
    52ae:	3304      	adds	r3, #4
    52b0:	681b      	ldr	r3, [r3, #0]
    52b2:	221c      	movs	r2, #28
    52b4:	4013      	ands	r3, r2
    52b6:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    52b8:	683b      	ldr	r3, [r7, #0]
    52ba:	2102      	movs	r1, #2
    52bc:	0018      	movs	r0, r3
    52be:	4b40      	ldr	r3, [pc, #256]	; (53c0 <_i2c_m_sync_init_impl+0x158>)
    52c0:	4798      	blx	r3
    52c2:	1e03      	subs	r3, r0, #0
    52c4:	d008      	beq.n	52d8 <_i2c_m_sync_init_impl+0x70>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    52c6:	683b      	ldr	r3, [r7, #0]
    52c8:	0018      	movs	r0, r3
    52ca:	4b3e      	ldr	r3, [pc, #248]	; (53c4 <_i2c_m_sync_init_impl+0x15c>)
    52cc:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    52ce:	683b      	ldr	r3, [r7, #0]
    52d0:	2102      	movs	r1, #2
    52d2:	0018      	movs	r0, r3
    52d4:	4b3c      	ldr	r3, [pc, #240]	; (53c8 <_i2c_m_sync_init_impl+0x160>)
    52d6:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    52d8:	68bb      	ldr	r3, [r7, #8]
    52da:	2201      	movs	r2, #1
    52dc:	431a      	orrs	r2, r3
    52de:	683b      	ldr	r3, [r7, #0]
    52e0:	0011      	movs	r1, r2
    52e2:	0018      	movs	r0, r3
    52e4:	4b39      	ldr	r3, [pc, #228]	; (53cc <_i2c_m_sync_init_impl+0x164>)
    52e6:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    52e8:	683b      	ldr	r3, [r7, #0]
    52ea:	2101      	movs	r1, #1
    52ec:	0018      	movs	r0, r3
    52ee:	4b36      	ldr	r3, [pc, #216]	; (53c8 <_i2c_m_sync_init_impl+0x160>)
    52f0:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    52f2:	230f      	movs	r3, #15
    52f4:	18fb      	adds	r3, r7, r3
    52f6:	781a      	ldrb	r2, [r3, #0]
    52f8:	4930      	ldr	r1, [pc, #192]	; (53bc <_i2c_m_sync_init_impl+0x154>)
    52fa:	0013      	movs	r3, r2
    52fc:	005b      	lsls	r3, r3, #1
    52fe:	189b      	adds	r3, r3, r2
    5300:	00db      	lsls	r3, r3, #3
    5302:	18cb      	adds	r3, r1, r3
    5304:	3304      	adds	r3, #4
    5306:	681a      	ldr	r2, [r3, #0]
    5308:	683b      	ldr	r3, [r7, #0]
    530a:	0011      	movs	r1, r2
    530c:	0018      	movs	r0, r3
    530e:	4b2f      	ldr	r3, [pc, #188]	; (53cc <_i2c_m_sync_init_impl+0x164>)
    5310:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    5312:	230f      	movs	r3, #15
    5314:	18fb      	adds	r3, r7, r3
    5316:	781a      	ldrb	r2, [r3, #0]
    5318:	4928      	ldr	r1, [pc, #160]	; (53bc <_i2c_m_sync_init_impl+0x154>)
    531a:	0013      	movs	r3, r2
    531c:	005b      	lsls	r3, r3, #1
    531e:	189b      	adds	r3, r3, r2
    5320:	00db      	lsls	r3, r3, #3
    5322:	18cb      	adds	r3, r1, r3
    5324:	3308      	adds	r3, #8
    5326:	681a      	ldr	r2, [r3, #0]
    5328:	683b      	ldr	r3, [r7, #0]
    532a:	0011      	movs	r1, r2
    532c:	0018      	movs	r0, r3
    532e:	4b28      	ldr	r3, [pc, #160]	; (53d0 <_i2c_m_sync_init_impl+0x168>)
    5330:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    5332:	230f      	movs	r3, #15
    5334:	18fb      	adds	r3, r7, r3
    5336:	781a      	ldrb	r2, [r3, #0]
    5338:	4920      	ldr	r1, [pc, #128]	; (53bc <_i2c_m_sync_init_impl+0x154>)
    533a:	0013      	movs	r3, r2
    533c:	005b      	lsls	r3, r3, #1
    533e:	189b      	adds	r3, r3, r2
    5340:	00db      	lsls	r3, r3, #3
    5342:	18cb      	adds	r3, r1, r3
    5344:	330c      	adds	r3, #12
    5346:	681a      	ldr	r2, [r3, #0]
    5348:	683b      	ldr	r3, [r7, #0]
    534a:	0011      	movs	r1, r2
    534c:	0018      	movs	r0, r3
    534e:	4b21      	ldr	r3, [pc, #132]	; (53d4 <_i2c_m_sync_init_impl+0x16c>)
    5350:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    5352:	230f      	movs	r3, #15
    5354:	18fb      	adds	r3, r7, r3
    5356:	781a      	ldrb	r2, [r3, #0]
    5358:	4918      	ldr	r1, [pc, #96]	; (53bc <_i2c_m_sync_init_impl+0x154>)
    535a:	0013      	movs	r3, r2
    535c:	005b      	lsls	r3, r3, #1
    535e:	189b      	adds	r3, r3, r2
    5360:	00db      	lsls	r3, r3, #3
    5362:	18cb      	adds	r3, r1, r3
    5364:	3304      	adds	r3, #4
    5366:	681b      	ldr	r3, [r3, #0]
    5368:	0e1b      	lsrs	r3, r3, #24
    536a:	b29b      	uxth	r3, r3
    536c:	2203      	movs	r2, #3
    536e:	4013      	ands	r3, r2
    5370:	b29a      	uxth	r2, r3
    5372:	687b      	ldr	r3, [r7, #4]
    5374:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    5376:	687b      	ldr	r3, [r7, #4]
    5378:	899b      	ldrh	r3, [r3, #12]
    537a:	2201      	movs	r2, #1
    537c:	429a      	cmp	r2, r3
    537e:	419b      	sbcs	r3, r3
    5380:	425b      	negs	r3, r3
    5382:	b2da      	uxtb	r2, r3
    5384:	683b      	ldr	r3, [r7, #0]
    5386:	0011      	movs	r1, r2
    5388:	0018      	movs	r0, r3
    538a:	4b13      	ldr	r3, [pc, #76]	; (53d8 <_i2c_m_sync_init_impl+0x170>)
    538c:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    538e:	230f      	movs	r3, #15
    5390:	18fb      	adds	r3, r7, r3
    5392:	781a      	ldrb	r2, [r3, #0]
    5394:	4909      	ldr	r1, [pc, #36]	; (53bc <_i2c_m_sync_init_impl+0x154>)
    5396:	0013      	movs	r3, r2
    5398:	005b      	lsls	r3, r3, #1
    539a:	189b      	adds	r3, r3, r2
    539c:	00db      	lsls	r3, r3, #3
    539e:	18cb      	adds	r3, r1, r3
    53a0:	3312      	adds	r3, #18
    53a2:	881a      	ldrh	r2, [r3, #0]
    53a4:	687b      	ldr	r3, [r7, #4]
    53a6:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    53a8:	2300      	movs	r3, #0
}
    53aa:	0018      	movs	r0, r3
    53ac:	46bd      	mov	sp, r7
    53ae:	b004      	add	sp, #16
    53b0:	bd80      	pop	{r7, pc}
    53b2:	46c0      	nop			; (mov r8, r8)
    53b4:	00004c39 	.word	0x00004c39
    53b8:	000040f7 	.word	0x000040f7
    53bc:	20000030 	.word	0x20000030
    53c0:	000042fd 	.word	0x000042fd
    53c4:	000042a9 	.word	0x000042a9
    53c8:	000040d9 	.word	0x000040d9
    53cc:	0000432d 	.word	0x0000432d
    53d0:	000045ad 	.word	0x000045ad
    53d4:	00004625 	.word	0x00004625
    53d8:	00004699 	.word	0x00004699

000053dc <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    53dc:	b580      	push	{r7, lr}
    53de:	b082      	sub	sp, #8
    53e0:	af00      	add	r7, sp, #0
    53e2:	6078      	str	r0, [r7, #4]
    53e4:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    53e6:	687b      	ldr	r3, [r7, #4]
    53e8:	2b00      	cmp	r3, #0
    53ea:	d004      	beq.n	53f6 <_spi_load_regs_master+0x1a>
    53ec:	683b      	ldr	r3, [r7, #0]
    53ee:	2b00      	cmp	r3, #0
    53f0:	d001      	beq.n	53f6 <_spi_load_regs_master+0x1a>
    53f2:	2301      	movs	r3, #1
    53f4:	e000      	b.n	53f8 <_spi_load_regs_master+0x1c>
    53f6:	2300      	movs	r3, #0
    53f8:	1c1a      	adds	r2, r3, #0
    53fa:	2301      	movs	r3, #1
    53fc:	4013      	ands	r3, r2
    53fe:	b2db      	uxtb	r3, r3
    5400:	4a1f      	ldr	r2, [pc, #124]	; (5480 <_spi_load_regs_master+0xa4>)
    5402:	4920      	ldr	r1, [pc, #128]	; (5484 <_spi_load_regs_master+0xa8>)
    5404:	0018      	movs	r0, r3
    5406:	4b20      	ldr	r3, [pc, #128]	; (5488 <_spi_load_regs_master+0xac>)
    5408:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    540a:	683b      	ldr	r3, [r7, #0]
    540c:	781a      	ldrb	r2, [r3, #0]
    540e:	7859      	ldrb	r1, [r3, #1]
    5410:	0209      	lsls	r1, r1, #8
    5412:	430a      	orrs	r2, r1
    5414:	7899      	ldrb	r1, [r3, #2]
    5416:	0409      	lsls	r1, r1, #16
    5418:	430a      	orrs	r2, r1
    541a:	78db      	ldrb	r3, [r3, #3]
    541c:	061b      	lsls	r3, r3, #24
    541e:	4313      	orrs	r3, r2
    5420:	001a      	movs	r2, r3
	hri_sercomspi_write_CTRLA_reg(
    5422:	4b1a      	ldr	r3, [pc, #104]	; (548c <_spi_load_regs_master+0xb0>)
    5424:	401a      	ands	r2, r3
    5426:	687b      	ldr	r3, [r7, #4]
    5428:	0011      	movs	r1, r2
    542a:	0018      	movs	r0, r3
    542c:	4b18      	ldr	r3, [pc, #96]	; (5490 <_spi_load_regs_master+0xb4>)
    542e:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    5430:	683b      	ldr	r3, [r7, #0]
    5432:	791a      	ldrb	r2, [r3, #4]
    5434:	7959      	ldrb	r1, [r3, #5]
    5436:	0209      	lsls	r1, r1, #8
    5438:	430a      	orrs	r2, r1
    543a:	7999      	ldrb	r1, [r3, #6]
    543c:	0409      	lsls	r1, r1, #16
    543e:	430a      	orrs	r2, r1
    5440:	79db      	ldrb	r3, [r3, #7]
    5442:	061b      	lsls	r3, r3, #24
    5444:	4313      	orrs	r3, r2
    5446:	001a      	movs	r2, r3
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    5448:	4b12      	ldr	r3, [pc, #72]	; (5494 <_spi_load_regs_master+0xb8>)
    544a:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    544c:	2280      	movs	r2, #128	; 0x80
    544e:	0292      	lsls	r2, r2, #10
    5450:	431a      	orrs	r2, r3
    5452:	687b      	ldr	r3, [r7, #4]
    5454:	0011      	movs	r1, r2
    5456:	0018      	movs	r0, r3
    5458:	4b0f      	ldr	r3, [pc, #60]	; (5498 <_spi_load_regs_master+0xbc>)
    545a:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    545c:	683b      	ldr	r3, [r7, #0]
    545e:	7b1a      	ldrb	r2, [r3, #12]
    5460:	687b      	ldr	r3, [r7, #4]
    5462:	0011      	movs	r1, r2
    5464:	0018      	movs	r0, r3
    5466:	4b0d      	ldr	r3, [pc, #52]	; (549c <_spi_load_regs_master+0xc0>)
    5468:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    546a:	683b      	ldr	r3, [r7, #0]
    546c:	7b5a      	ldrb	r2, [r3, #13]
    546e:	687b      	ldr	r3, [r7, #4]
    5470:	0011      	movs	r1, r2
    5472:	0018      	movs	r0, r3
    5474:	4b0a      	ldr	r3, [pc, #40]	; (54a0 <_spi_load_regs_master+0xc4>)
    5476:	4798      	blx	r3
}
    5478:	46c0      	nop			; (mov r8, r8)
    547a:	46bd      	mov	sp, r7
    547c:	b002      	add	sp, #8
    547e:	bd80      	pop	{r7, pc}
    5480:	000008e5 	.word	0x000008e5
    5484:	0000c438 	.word	0x0000c438
    5488:	00002cd5 	.word	0x00002cd5
    548c:	fffffefc 	.word	0xfffffefc
    5490:	000043e9 	.word	0x000043e9
    5494:	fffd1dbf 	.word	0xfffd1dbf
    5498:	000045d5 	.word	0x000045d5
    549c:	0000463d 	.word	0x0000463d
    54a0:	00004801 	.word	0x00004801

000054a4 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    54a4:	b580      	push	{r7, lr}
    54a6:	b082      	sub	sp, #8
    54a8:	af00      	add	r7, sp, #0
    54aa:	6078      	str	r0, [r7, #4]
    54ac:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    54ae:	687b      	ldr	r3, [r7, #4]
    54b0:	2b00      	cmp	r3, #0
    54b2:	d004      	beq.n	54be <_spi_load_regs_slave+0x1a>
    54b4:	683b      	ldr	r3, [r7, #0]
    54b6:	2b00      	cmp	r3, #0
    54b8:	d001      	beq.n	54be <_spi_load_regs_slave+0x1a>
    54ba:	2301      	movs	r3, #1
    54bc:	e000      	b.n	54c0 <_spi_load_regs_slave+0x1c>
    54be:	2300      	movs	r3, #0
    54c0:	1c1a      	adds	r2, r3, #0
    54c2:	2301      	movs	r3, #1
    54c4:	4013      	ands	r3, r2
    54c6:	b2db      	uxtb	r3, r3
    54c8:	4a29      	ldr	r2, [pc, #164]	; (5570 <_spi_load_regs_slave+0xcc>)
    54ca:	492a      	ldr	r1, [pc, #168]	; (5574 <_spi_load_regs_slave+0xd0>)
    54cc:	0018      	movs	r0, r3
    54ce:	4b2a      	ldr	r3, [pc, #168]	; (5578 <_spi_load_regs_slave+0xd4>)
    54d0:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    54d2:	683b      	ldr	r3, [r7, #0]
    54d4:	781a      	ldrb	r2, [r3, #0]
    54d6:	7859      	ldrb	r1, [r3, #1]
    54d8:	0209      	lsls	r1, r1, #8
    54da:	430a      	orrs	r2, r1
    54dc:	7899      	ldrb	r1, [r3, #2]
    54de:	0409      	lsls	r1, r1, #16
    54e0:	430a      	orrs	r2, r1
    54e2:	78db      	ldrb	r3, [r3, #3]
    54e4:	061b      	lsls	r3, r3, #24
    54e6:	4313      	orrs	r3, r2
    54e8:	001a      	movs	r2, r3
	hri_sercomspi_write_CTRLA_reg(
    54ea:	4b24      	ldr	r3, [pc, #144]	; (557c <_spi_load_regs_slave+0xd8>)
    54ec:	401a      	ands	r2, r3
    54ee:	687b      	ldr	r3, [r7, #4]
    54f0:	0011      	movs	r1, r2
    54f2:	0018      	movs	r0, r3
    54f4:	4b22      	ldr	r3, [pc, #136]	; (5580 <_spi_load_regs_slave+0xdc>)
    54f6:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    54f8:	683b      	ldr	r3, [r7, #0]
    54fa:	791a      	ldrb	r2, [r3, #4]
    54fc:	7959      	ldrb	r1, [r3, #5]
    54fe:	0209      	lsls	r1, r1, #8
    5500:	430a      	orrs	r2, r1
    5502:	7999      	ldrb	r1, [r3, #6]
    5504:	0409      	lsls	r1, r1, #16
    5506:	430a      	orrs	r2, r1
    5508:	79db      	ldrb	r3, [r3, #7]
    550a:	061b      	lsls	r3, r3, #24
    550c:	4313      	orrs	r3, r2
    550e:	001a      	movs	r2, r3
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    5510:	4b1c      	ldr	r3, [pc, #112]	; (5584 <_spi_load_regs_slave+0xe0>)
    5512:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    5514:	4a1c      	ldr	r2, [pc, #112]	; (5588 <_spi_load_regs_slave+0xe4>)
    5516:	431a      	orrs	r2, r3
    5518:	687b      	ldr	r3, [r7, #4]
    551a:	0011      	movs	r1, r2
    551c:	0018      	movs	r0, r3
    551e:	4b1b      	ldr	r3, [pc, #108]	; (558c <_spi_load_regs_slave+0xe8>)
    5520:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    5522:	683b      	ldr	r3, [r7, #0]
    5524:	7a1a      	ldrb	r2, [r3, #8]
    5526:	7a59      	ldrb	r1, [r3, #9]
    5528:	0209      	lsls	r1, r1, #8
    552a:	430a      	orrs	r2, r1
    552c:	7a99      	ldrb	r1, [r3, #10]
    552e:	0409      	lsls	r1, r1, #16
    5530:	430a      	orrs	r2, r1
    5532:	7adb      	ldrb	r3, [r3, #11]
    5534:	061b      	lsls	r3, r3, #24
    5536:	4313      	orrs	r3, r2
    5538:	001a      	movs	r2, r3
    553a:	687b      	ldr	r3, [r7, #4]
    553c:	0011      	movs	r1, r2
    553e:	0018      	movs	r0, r3
    5540:	4b13      	ldr	r3, [pc, #76]	; (5590 <_spi_load_regs_slave+0xec>)
    5542:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    5544:	683b      	ldr	r3, [r7, #0]
    5546:	7b5a      	ldrb	r2, [r3, #13]
    5548:	687b      	ldr	r3, [r7, #4]
    554a:	0011      	movs	r1, r2
    554c:	0018      	movs	r0, r3
    554e:	4b11      	ldr	r3, [pc, #68]	; (5594 <_spi_load_regs_slave+0xf0>)
    5550:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    5552:	46c0      	nop			; (mov r8, r8)
    5554:	2301      	movs	r3, #1
    5556:	425a      	negs	r2, r3
    5558:	687b      	ldr	r3, [r7, #4]
    555a:	0011      	movs	r1, r2
    555c:	0018      	movs	r0, r3
    555e:	4b0e      	ldr	r3, [pc, #56]	; (5598 <_spi_load_regs_slave+0xf4>)
    5560:	4798      	blx	r3
    5562:	1e03      	subs	r3, r0, #0
    5564:	d1f6      	bne.n	5554 <_spi_load_regs_slave+0xb0>
		;
}
    5566:	46c0      	nop			; (mov r8, r8)
    5568:	46bd      	mov	sp, r7
    556a:	b002      	add	sp, #8
    556c:	bd80      	pop	{r7, pc}
    556e:	46c0      	nop			; (mov r8, r8)
    5570:	000008f9 	.word	0x000008f9
    5574:	0000c438 	.word	0x0000c438
    5578:	00002cd5 	.word	0x00002cd5
    557c:	fffffefc 	.word	0xfffffefc
    5580:	000043e9 	.word	0x000043e9
    5584:	fffdddbf 	.word	0xfffdddbf
    5588:	00020240 	.word	0x00020240
    558c:	000045d5 	.word	0x000045d5
    5590:	00004731 	.word	0x00004731
    5594:	00004801 	.word	0x00004801
    5598:	00004135 	.word	0x00004135

0000559c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    559c:	b590      	push	{r4, r7, lr}
    559e:	b085      	sub	sp, #20
    55a0:	af00      	add	r7, sp, #0
    55a2:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    55a4:	687b      	ldr	r3, [r7, #4]
    55a6:	220e      	movs	r2, #14
    55a8:	18bc      	adds	r4, r7, r2
    55aa:	0018      	movs	r0, r3
    55ac:	4b18      	ldr	r3, [pc, #96]	; (5610 <_spi_get_regs+0x74>)
    55ae:	4798      	blx	r3
    55b0:	0003      	movs	r3, r0
    55b2:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    55b4:	230f      	movs	r3, #15
    55b6:	18fb      	adds	r3, r7, r3
    55b8:	2200      	movs	r2, #0
    55ba:	701a      	strb	r2, [r3, #0]
    55bc:	e01e      	b.n	55fc <_spi_get_regs+0x60>
		if (sercomspi_regs[i].n == n) {
    55be:	230f      	movs	r3, #15
    55c0:	18fb      	adds	r3, r7, r3
    55c2:	781a      	ldrb	r2, [r3, #0]
    55c4:	4913      	ldr	r1, [pc, #76]	; (5614 <_spi_get_regs+0x78>)
    55c6:	0013      	movs	r3, r2
    55c8:	011b      	lsls	r3, r3, #4
    55ca:	189b      	adds	r3, r3, r2
    55cc:	18cb      	adds	r3, r1, r3
    55ce:	3310      	adds	r3, #16
    55d0:	781b      	ldrb	r3, [r3, #0]
    55d2:	220e      	movs	r2, #14
    55d4:	18ba      	adds	r2, r7, r2
    55d6:	7812      	ldrb	r2, [r2, #0]
    55d8:	429a      	cmp	r2, r3
    55da:	d108      	bne.n	55ee <_spi_get_regs+0x52>
			return &sercomspi_regs[i];
    55dc:	230f      	movs	r3, #15
    55de:	18fb      	adds	r3, r7, r3
    55e0:	781a      	ldrb	r2, [r3, #0]
    55e2:	0013      	movs	r3, r2
    55e4:	011b      	lsls	r3, r3, #4
    55e6:	189b      	adds	r3, r3, r2
    55e8:	4a0a      	ldr	r2, [pc, #40]	; (5614 <_spi_get_regs+0x78>)
    55ea:	189b      	adds	r3, r3, r2
    55ec:	e00c      	b.n	5608 <_spi_get_regs+0x6c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    55ee:	230f      	movs	r3, #15
    55f0:	18fb      	adds	r3, r7, r3
    55f2:	781a      	ldrb	r2, [r3, #0]
    55f4:	230f      	movs	r3, #15
    55f6:	18fb      	adds	r3, r7, r3
    55f8:	3201      	adds	r2, #1
    55fa:	701a      	strb	r2, [r3, #0]
    55fc:	230f      	movs	r3, #15
    55fe:	18fb      	adds	r3, r7, r3
    5600:	781b      	ldrb	r3, [r3, #0]
    5602:	2b01      	cmp	r3, #1
    5604:	d9db      	bls.n	55be <_spi_get_regs+0x22>
		}
	}

	return NULL;
    5606:	2300      	movs	r3, #0
}
    5608:	0018      	movs	r0, r3
    560a:	46bd      	mov	sp, r7
    560c:	b005      	add	sp, #20
    560e:	bd90      	pop	{r4, r7, pc}
    5610:	00004995 	.word	0x00004995
    5614:	0000c454 	.word	0x0000c454

00005618 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    5618:	b580      	push	{r7, lr}
    561a:	b084      	sub	sp, #16
    561c:	af00      	add	r7, sp, #0
    561e:	6078      	str	r0, [r7, #4]
    5620:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    5622:	683b      	ldr	r3, [r7, #0]
    5624:	0018      	movs	r0, r3
    5626:	4b4a      	ldr	r3, [pc, #296]	; (5750 <_spi_m_sync_init+0x138>)
    5628:	4798      	blx	r3
    562a:	0003      	movs	r3, r0
    562c:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    562e:	687b      	ldr	r3, [r7, #4]
    5630:	2b00      	cmp	r3, #0
    5632:	d004      	beq.n	563e <_spi_m_sync_init+0x26>
    5634:	683b      	ldr	r3, [r7, #0]
    5636:	2b00      	cmp	r3, #0
    5638:	d001      	beq.n	563e <_spi_m_sync_init+0x26>
    563a:	2301      	movs	r3, #1
    563c:	e000      	b.n	5640 <_spi_m_sync_init+0x28>
    563e:	2300      	movs	r3, #0
    5640:	1c1a      	adds	r2, r3, #0
    5642:	2301      	movs	r3, #1
    5644:	4013      	ands	r3, r2
    5646:	b2db      	uxtb	r3, r3
    5648:	4a42      	ldr	r2, [pc, #264]	; (5754 <_spi_m_sync_init+0x13c>)
    564a:	4943      	ldr	r1, [pc, #268]	; (5758 <_spi_m_sync_init+0x140>)
    564c:	0018      	movs	r0, r3
    564e:	4b43      	ldr	r3, [pc, #268]	; (575c <_spi_m_sync_init+0x144>)
    5650:	4798      	blx	r3

	if (regs == NULL) {
    5652:	68fb      	ldr	r3, [r7, #12]
    5654:	2b00      	cmp	r3, #0
    5656:	d102      	bne.n	565e <_spi_m_sync_init+0x46>
		return ERR_INVALID_ARG;
    5658:	230d      	movs	r3, #13
    565a:	425b      	negs	r3, r3
    565c:	e074      	b.n	5748 <_spi_m_sync_init+0x130>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    565e:	683b      	ldr	r3, [r7, #0]
    5660:	2101      	movs	r1, #1
    5662:	0018      	movs	r0, r3
    5664:	4b3e      	ldr	r3, [pc, #248]	; (5760 <_spi_m_sync_init+0x148>)
    5666:	4798      	blx	r3
    5668:	0003      	movs	r3, r0
    566a:	001a      	movs	r2, r3
    566c:	2301      	movs	r3, #1
    566e:	4053      	eors	r3, r2
    5670:	b2db      	uxtb	r3, r3
    5672:	2b00      	cmp	r3, #0
    5674:	d026      	beq.n	56c4 <_spi_m_sync_init+0xac>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    5676:	68fb      	ldr	r3, [r7, #12]
    5678:	781a      	ldrb	r2, [r3, #0]
    567a:	7859      	ldrb	r1, [r3, #1]
    567c:	0209      	lsls	r1, r1, #8
    567e:	430a      	orrs	r2, r1
    5680:	7899      	ldrb	r1, [r3, #2]
    5682:	0409      	lsls	r1, r1, #16
    5684:	430a      	orrs	r2, r1
    5686:	78db      	ldrb	r3, [r3, #3]
    5688:	061b      	lsls	r3, r3, #24
    568a:	4313      	orrs	r3, r2
    568c:	001a      	movs	r2, r3
    568e:	231c      	movs	r3, #28
    5690:	4013      	ands	r3, r2
    5692:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    5694:	683b      	ldr	r3, [r7, #0]
    5696:	2102      	movs	r1, #2
    5698:	0018      	movs	r0, r3
    569a:	4b32      	ldr	r3, [pc, #200]	; (5764 <_spi_m_sync_init+0x14c>)
    569c:	4798      	blx	r3
    569e:	1e03      	subs	r3, r0, #0
    56a0:	d008      	beq.n	56b4 <_spi_m_sync_init+0x9c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    56a2:	683b      	ldr	r3, [r7, #0]
    56a4:	0018      	movs	r0, r3
    56a6:	4b30      	ldr	r3, [pc, #192]	; (5768 <_spi_m_sync_init+0x150>)
    56a8:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    56aa:	683b      	ldr	r3, [r7, #0]
    56ac:	2102      	movs	r1, #2
    56ae:	0018      	movs	r0, r3
    56b0:	4b2e      	ldr	r3, [pc, #184]	; (576c <_spi_m_sync_init+0x154>)
    56b2:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    56b4:	68bb      	ldr	r3, [r7, #8]
    56b6:	2201      	movs	r2, #1
    56b8:	431a      	orrs	r2, r3
    56ba:	683b      	ldr	r3, [r7, #0]
    56bc:	0011      	movs	r1, r2
    56be:	0018      	movs	r0, r3
    56c0:	4b2b      	ldr	r3, [pc, #172]	; (5770 <_spi_m_sync_init+0x158>)
    56c2:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    56c4:	683b      	ldr	r3, [r7, #0]
    56c6:	2101      	movs	r1, #1
    56c8:	0018      	movs	r0, r3
    56ca:	4b28      	ldr	r3, [pc, #160]	; (576c <_spi_m_sync_init+0x154>)
    56cc:	4798      	blx	r3

	dev->prvt = hw;
    56ce:	687b      	ldr	r3, [r7, #4]
    56d0:	683a      	ldr	r2, [r7, #0]
    56d2:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    56d4:	68fb      	ldr	r3, [r7, #12]
    56d6:	781a      	ldrb	r2, [r3, #0]
    56d8:	7859      	ldrb	r1, [r3, #1]
    56da:	0209      	lsls	r1, r1, #8
    56dc:	430a      	orrs	r2, r1
    56de:	7899      	ldrb	r1, [r3, #2]
    56e0:	0409      	lsls	r1, r1, #16
    56e2:	430a      	orrs	r2, r1
    56e4:	78db      	ldrb	r3, [r3, #3]
    56e6:	061b      	lsls	r3, r3, #24
    56e8:	4313      	orrs	r3, r2
    56ea:	001a      	movs	r2, r3
    56ec:	231c      	movs	r3, #28
    56ee:	4013      	ands	r3, r2
    56f0:	2b08      	cmp	r3, #8
    56f2:	d106      	bne.n	5702 <_spi_m_sync_init+0xea>
		_spi_load_regs_slave(hw, regs);
    56f4:	68fa      	ldr	r2, [r7, #12]
    56f6:	683b      	ldr	r3, [r7, #0]
    56f8:	0011      	movs	r1, r2
    56fa:	0018      	movs	r0, r3
    56fc:	4b1d      	ldr	r3, [pc, #116]	; (5774 <_spi_m_sync_init+0x15c>)
    56fe:	4798      	blx	r3
    5700:	e005      	b.n	570e <_spi_m_sync_init+0xf6>
	} else {
		_spi_load_regs_master(hw, regs);
    5702:	68fa      	ldr	r2, [r7, #12]
    5704:	683b      	ldr	r3, [r7, #0]
    5706:	0011      	movs	r1, r2
    5708:	0018      	movs	r0, r3
    570a:	4b1b      	ldr	r3, [pc, #108]	; (5778 <_spi_m_sync_init+0x160>)
    570c:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    570e:	68fb      	ldr	r3, [r7, #12]
    5710:	791a      	ldrb	r2, [r3, #4]
    5712:	7959      	ldrb	r1, [r3, #5]
    5714:	0209      	lsls	r1, r1, #8
    5716:	430a      	orrs	r2, r1
    5718:	7999      	ldrb	r1, [r3, #6]
    571a:	0409      	lsls	r1, r1, #16
    571c:	430a      	orrs	r2, r1
    571e:	79db      	ldrb	r3, [r3, #7]
    5720:	061b      	lsls	r3, r3, #24
    5722:	4313      	orrs	r3, r2
    5724:	001a      	movs	r2, r3
    5726:	2307      	movs	r3, #7
    5728:	4013      	ands	r3, r2
    572a:	d101      	bne.n	5730 <_spi_m_sync_init+0x118>
    572c:	2201      	movs	r2, #1
    572e:	e000      	b.n	5732 <_spi_m_sync_init+0x11a>
    5730:	2202      	movs	r2, #2
    5732:	687b      	ldr	r3, [r7, #4]
    5734:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    5736:	68fb      	ldr	r3, [r7, #12]
    5738:	7b9a      	ldrb	r2, [r3, #14]
    573a:	7bdb      	ldrb	r3, [r3, #15]
    573c:	021b      	lsls	r3, r3, #8
    573e:	4313      	orrs	r3, r2
    5740:	b29a      	uxth	r2, r3
    5742:	687b      	ldr	r3, [r7, #4]
    5744:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    5746:	2300      	movs	r3, #0
}
    5748:	0018      	movs	r0, r3
    574a:	46bd      	mov	sp, r7
    574c:	b004      	add	sp, #16
    574e:	bd80      	pop	{r7, pc}
    5750:	0000559d 	.word	0x0000559d
    5754:	0000091b 	.word	0x0000091b
    5758:	0000c438 	.word	0x0000c438
    575c:	00002cd5 	.word	0x00002cd5
    5760:	00004135 	.word	0x00004135
    5764:	000043b9 	.word	0x000043b9
    5768:	0000438d 	.word	0x0000438d
    576c:	00004117 	.word	0x00004117
    5770:	000043e9 	.word	0x000043e9
    5774:	000054a5 	.word	0x000054a5
    5778:	000053dd 	.word	0x000053dd

0000577c <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    577c:	b580      	push	{r7, lr}
    577e:	b082      	sub	sp, #8
    5780:	af00      	add	r7, sp, #0
    5782:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    5784:	46c0      	nop			; (mov r8, r8)
    5786:	687b      	ldr	r3, [r7, #4]
    5788:	2103      	movs	r1, #3
    578a:	0018      	movs	r0, r3
    578c:	4b06      	ldr	r3, [pc, #24]	; (57a8 <_spi_wait_bus_idle+0x2c>)
    578e:	4798      	blx	r3
    5790:	1e03      	subs	r3, r0, #0
    5792:	d0f8      	beq.n	5786 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    5794:	687b      	ldr	r3, [r7, #4]
    5796:	2103      	movs	r1, #3
    5798:	0018      	movs	r0, r3
    579a:	4b04      	ldr	r3, [pc, #16]	; (57ac <_spi_wait_bus_idle+0x30>)
    579c:	4798      	blx	r3
}
    579e:	46c0      	nop			; (mov r8, r8)
    57a0:	46bd      	mov	sp, r7
    57a2:	b002      	add	sp, #8
    57a4:	bd80      	pop	{r7, pc}
    57a6:	46c0      	nop			; (mov r8, r8)
    57a8:	000041d5 	.word	0x000041d5
    57ac:	00004223 	.word	0x00004223

000057b0 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    57b0:	b580      	push	{r7, lr}
    57b2:	b086      	sub	sp, #24
    57b4:	af00      	add	r7, sp, #0
    57b6:	60f8      	str	r0, [r7, #12]
    57b8:	60b9      	str	r1, [r7, #8]
    57ba:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    57bc:	68bb      	ldr	r3, [r7, #8]
    57be:	2204      	movs	r2, #4
    57c0:	4013      	ands	r3, r2
    57c2:	d101      	bne.n	57c8 <_spi_rx_check_and_receive+0x18>
		return false;
    57c4:	2300      	movs	r3, #0
    57c6:	e024      	b.n	5812 <_spi_rx_check_and_receive+0x62>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    57c8:	68fb      	ldr	r3, [r7, #12]
    57ca:	0018      	movs	r0, r3
    57cc:	4b13      	ldr	r3, [pc, #76]	; (581c <_spi_rx_check_and_receive+0x6c>)
    57ce:	4798      	blx	r3
    57d0:	0003      	movs	r3, r0
    57d2:	617b      	str	r3, [r7, #20]

	if (ctrl->rxbuf) {
    57d4:	687b      	ldr	r3, [r7, #4]
    57d6:	685b      	ldr	r3, [r3, #4]
    57d8:	2b00      	cmp	r3, #0
    57da:	d014      	beq.n	5806 <_spi_rx_check_and_receive+0x56>
		*ctrl->rxbuf++ = (uint8_t)data;
    57dc:	687b      	ldr	r3, [r7, #4]
    57de:	685b      	ldr	r3, [r3, #4]
    57e0:	1c59      	adds	r1, r3, #1
    57e2:	687a      	ldr	r2, [r7, #4]
    57e4:	6051      	str	r1, [r2, #4]
    57e6:	697a      	ldr	r2, [r7, #20]
    57e8:	b2d2      	uxtb	r2, r2
    57ea:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    57ec:	687b      	ldr	r3, [r7, #4]
    57ee:	7c1b      	ldrb	r3, [r3, #16]
    57f0:	2b01      	cmp	r3, #1
    57f2:	d908      	bls.n	5806 <_spi_rx_check_and_receive+0x56>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    57f4:	687b      	ldr	r3, [r7, #4]
    57f6:	685b      	ldr	r3, [r3, #4]
    57f8:	1c59      	adds	r1, r3, #1
    57fa:	687a      	ldr	r2, [r7, #4]
    57fc:	6051      	str	r1, [r2, #4]
    57fe:	697a      	ldr	r2, [r7, #20]
    5800:	0a12      	lsrs	r2, r2, #8
    5802:	b2d2      	uxtb	r2, r2
    5804:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    5806:	687b      	ldr	r3, [r7, #4]
    5808:	68db      	ldr	r3, [r3, #12]
    580a:	1c5a      	adds	r2, r3, #1
    580c:	687b      	ldr	r3, [r7, #4]
    580e:	60da      	str	r2, [r3, #12]

	return true;
    5810:	2301      	movs	r3, #1
}
    5812:	0018      	movs	r0, r3
    5814:	46bd      	mov	sp, r7
    5816:	b006      	add	sp, #24
    5818:	bd80      	pop	{r7, pc}
    581a:	46c0      	nop			; (mov r8, r8)
    581c:	000047b9 	.word	0x000047b9

00005820 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    5820:	b580      	push	{r7, lr}
    5822:	b086      	sub	sp, #24
    5824:	af00      	add	r7, sp, #0
    5826:	60f8      	str	r0, [r7, #12]
    5828:	60b9      	str	r1, [r7, #8]
    582a:	607a      	str	r2, [r7, #4]
    582c:	001a      	movs	r2, r3
    582e:	1cbb      	adds	r3, r7, #2
    5830:	801a      	strh	r2, [r3, #0]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    5832:	68bb      	ldr	r3, [r7, #8]
    5834:	2201      	movs	r2, #1
    5836:	4013      	ands	r3, r2
    5838:	d02b      	beq.n	5892 <_spi_tx_check_and_send+0x72>
		return;
	}

	if (ctrl->txbuf) {
    583a:	687b      	ldr	r3, [r7, #4]
    583c:	681b      	ldr	r3, [r3, #0]
    583e:	2b00      	cmp	r3, #0
    5840:	d018      	beq.n	5874 <_spi_tx_check_and_send+0x54>
		data = *ctrl->txbuf++;
    5842:	687b      	ldr	r3, [r7, #4]
    5844:	681b      	ldr	r3, [r3, #0]
    5846:	1c59      	adds	r1, r3, #1
    5848:	687a      	ldr	r2, [r7, #4]
    584a:	6011      	str	r1, [r2, #0]
    584c:	781b      	ldrb	r3, [r3, #0]
    584e:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    5850:	687b      	ldr	r3, [r7, #4]
    5852:	7c1b      	ldrb	r3, [r3, #16]
    5854:	2b01      	cmp	r3, #1
    5856:	d910      	bls.n	587a <_spi_tx_check_and_send+0x5a>
			data |= (*ctrl->txbuf) << 8;
    5858:	687b      	ldr	r3, [r7, #4]
    585a:	681b      	ldr	r3, [r3, #0]
    585c:	781b      	ldrb	r3, [r3, #0]
    585e:	021b      	lsls	r3, r3, #8
    5860:	001a      	movs	r2, r3
    5862:	697b      	ldr	r3, [r7, #20]
    5864:	4313      	orrs	r3, r2
    5866:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    5868:	687b      	ldr	r3, [r7, #4]
    586a:	681b      	ldr	r3, [r3, #0]
    586c:	1c5a      	adds	r2, r3, #1
    586e:	687b      	ldr	r3, [r7, #4]
    5870:	601a      	str	r2, [r3, #0]
    5872:	e002      	b.n	587a <_spi_tx_check_and_send+0x5a>
		}
	} else {
		data = dummy;
    5874:	1cbb      	adds	r3, r7, #2
    5876:	881b      	ldrh	r3, [r3, #0]
    5878:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    587a:	687b      	ldr	r3, [r7, #4]
    587c:	689b      	ldr	r3, [r3, #8]
    587e:	1c5a      	adds	r2, r3, #1
    5880:	687b      	ldr	r3, [r7, #4]
    5882:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    5884:	697a      	ldr	r2, [r7, #20]
    5886:	68fb      	ldr	r3, [r7, #12]
    5888:	0011      	movs	r1, r2
    588a:	0018      	movs	r0, r3
    588c:	4b03      	ldr	r3, [pc, #12]	; (589c <_spi_tx_check_and_send+0x7c>)
    588e:	4798      	blx	r3
    5890:	e000      	b.n	5894 <_spi_tx_check_and_send+0x74>
		return;
    5892:	46c0      	nop			; (mov r8, r8)
}
    5894:	46bd      	mov	sp, r7
    5896:	b006      	add	sp, #24
    5898:	bd80      	pop	{r7, pc}
    589a:	46c0      	nop			; (mov r8, r8)
    589c:	000047a1 	.word	0x000047a1

000058a0 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    58a0:	b580      	push	{r7, lr}
    58a2:	b082      	sub	sp, #8
    58a4:	af00      	add	r7, sp, #0
    58a6:	6078      	str	r0, [r7, #4]
    58a8:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    58aa:	687b      	ldr	r3, [r7, #4]
    58ac:	2280      	movs	r2, #128	; 0x80
    58ae:	4013      	ands	r3, r2
    58b0:	d00d      	beq.n	58ce <_spi_err_check+0x2e>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    58b2:	4a09      	ldr	r2, [pc, #36]	; (58d8 <_spi_err_check+0x38>)
    58b4:	683b      	ldr	r3, [r7, #0]
    58b6:	0011      	movs	r1, r2
    58b8:	0018      	movs	r0, r3
    58ba:	4b08      	ldr	r3, [pc, #32]	; (58dc <_spi_err_check+0x3c>)
    58bc:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    58be:	683b      	ldr	r3, [r7, #0]
    58c0:	2180      	movs	r1, #128	; 0x80
    58c2:	0018      	movs	r0, r3
    58c4:	4b06      	ldr	r3, [pc, #24]	; (58e0 <_spi_err_check+0x40>)
    58c6:	4798      	blx	r3
		return ERR_OVERFLOW;
    58c8:	2313      	movs	r3, #19
    58ca:	425b      	negs	r3, r3
    58cc:	e000      	b.n	58d0 <_spi_err_check+0x30>
	}

	return ERR_NONE;
    58ce:	2300      	movs	r3, #0
}
    58d0:	0018      	movs	r0, r3
    58d2:	46bd      	mov	sp, r7
    58d4:	b002      	add	sp, #8
    58d6:	bd80      	pop	{r7, pc}
    58d8:	0000ffff 	.word	0x0000ffff
    58dc:	00004841 	.word	0x00004841
    58e0:	00004223 	.word	0x00004223

000058e4 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    58e4:	b590      	push	{r4, r7, lr}
    58e6:	b08b      	sub	sp, #44	; 0x2c
    58e8:	af00      	add	r7, sp, #0
    58ea:	6078      	str	r0, [r7, #4]
    58ec:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    58ee:	687b      	ldr	r3, [r7, #4]
    58f0:	681b      	ldr	r3, [r3, #0]
    58f2:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    58f4:	2300      	movs	r3, #0
    58f6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    58f8:	683b      	ldr	r3, [r7, #0]
    58fa:	681a      	ldr	r2, [r3, #0]
    58fc:	2308      	movs	r3, #8
    58fe:	18fb      	adds	r3, r7, r3
    5900:	601a      	str	r2, [r3, #0]
    5902:	683b      	ldr	r3, [r7, #0]
    5904:	685a      	ldr	r2, [r3, #4]
    5906:	2308      	movs	r3, #8
    5908:	18fb      	adds	r3, r7, r3
    590a:	605a      	str	r2, [r3, #4]
    590c:	2308      	movs	r3, #8
    590e:	18fb      	adds	r3, r7, r3
    5910:	2200      	movs	r2, #0
    5912:	609a      	str	r2, [r3, #8]
    5914:	2308      	movs	r3, #8
    5916:	18fb      	adds	r3, r7, r3
    5918:	2200      	movs	r2, #0
    591a:	60da      	str	r2, [r3, #12]
    591c:	687b      	ldr	r3, [r7, #4]
    591e:	791a      	ldrb	r2, [r3, #4]
    5920:	2308      	movs	r3, #8
    5922:	18fb      	adds	r3, r7, r3
    5924:	741a      	strb	r2, [r3, #16]

	ASSERT(dev && hw);
    5926:	687b      	ldr	r3, [r7, #4]
    5928:	2b00      	cmp	r3, #0
    592a:	d004      	beq.n	5936 <_spi_m_sync_trans+0x52>
    592c:	6a3b      	ldr	r3, [r7, #32]
    592e:	2b00      	cmp	r3, #0
    5930:	d001      	beq.n	5936 <_spi_m_sync_trans+0x52>
    5932:	2301      	movs	r3, #1
    5934:	e000      	b.n	5938 <_spi_m_sync_trans+0x54>
    5936:	2300      	movs	r3, #0
    5938:	1c1a      	adds	r2, r3, #0
    593a:	2301      	movs	r3, #1
    593c:	4013      	ands	r3, r2
    593e:	b2db      	uxtb	r3, r3
    5940:	4a34      	ldr	r2, [pc, #208]	; (5a14 <_spi_m_sync_trans+0x130>)
    5942:	4935      	ldr	r1, [pc, #212]	; (5a18 <_spi_m_sync_trans+0x134>)
    5944:	0018      	movs	r0, r3
    5946:	4b35      	ldr	r3, [pc, #212]	; (5a1c <_spi_m_sync_trans+0x138>)
    5948:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    594a:	6a3b      	ldr	r3, [r7, #32]
    594c:	2107      	movs	r1, #7
    594e:	0018      	movs	r0, r3
    5950:	4b33      	ldr	r3, [pc, #204]	; (5a20 <_spi_m_sync_trans+0x13c>)
    5952:	4798      	blx	r3
    5954:	1e03      	subs	r3, r0, #0
    5956:	d002      	beq.n	595e <_spi_m_sync_trans+0x7a>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    5958:	2304      	movs	r3, #4
    595a:	425b      	negs	r3, r3
    595c:	e055      	b.n	5a0a <_spi_m_sync_trans+0x126>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    595e:	6a3b      	ldr	r3, [r7, #32]
    5960:	0018      	movs	r0, r3
    5962:	4b30      	ldr	r3, [pc, #192]	; (5a24 <_spi_m_sync_trans+0x140>)
    5964:	4798      	blx	r3
    5966:	0003      	movs	r3, r0
    5968:	001a      	movs	r2, r3
    596a:	2301      	movs	r3, #1
    596c:	4053      	eors	r3, r2
    596e:	b2db      	uxtb	r3, r3
    5970:	2b00      	cmp	r3, #0
    5972:	d002      	beq.n	597a <_spi_m_sync_trans+0x96>
		return ERR_NOT_INITIALIZED;
    5974:	2314      	movs	r3, #20
    5976:	425b      	negs	r3, r3
    5978:	e047      	b.n	5a0a <_spi_m_sync_trans+0x126>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    597a:	6a3b      	ldr	r3, [r7, #32]
    597c:	0018      	movs	r0, r3
    597e:	4b2a      	ldr	r3, [pc, #168]	; (5a28 <_spi_m_sync_trans+0x144>)
    5980:	4798      	blx	r3
    5982:	0003      	movs	r3, r0
    5984:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    5986:	2308      	movs	r3, #8
    5988:	18fa      	adds	r2, r7, r3
    598a:	69f9      	ldr	r1, [r7, #28]
    598c:	6a3b      	ldr	r3, [r7, #32]
    598e:	0018      	movs	r0, r3
    5990:	4b26      	ldr	r3, [pc, #152]	; (5a2c <_spi_m_sync_trans+0x148>)
    5992:	4798      	blx	r3
    5994:	0003      	movs	r3, r0
    5996:	001a      	movs	r2, r3
    5998:	2301      	movs	r3, #1
    599a:	4053      	eors	r3, r2
    599c:	b2db      	uxtb	r3, r3
    599e:	2b00      	cmp	r3, #0
    59a0:	d00f      	beq.n	59c2 <_spi_m_sync_trans+0xde>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    59a2:	2308      	movs	r3, #8
    59a4:	18fb      	adds	r3, r7, r3
    59a6:	68da      	ldr	r2, [r3, #12]
    59a8:	2308      	movs	r3, #8
    59aa:	18fb      	adds	r3, r7, r3
    59ac:	689b      	ldr	r3, [r3, #8]
    59ae:	429a      	cmp	r2, r3
    59b0:	d307      	bcc.n	59c2 <_spi_m_sync_trans+0xde>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    59b2:	687b      	ldr	r3, [r7, #4]
    59b4:	88db      	ldrh	r3, [r3, #6]
    59b6:	2208      	movs	r2, #8
    59b8:	18ba      	adds	r2, r7, r2
    59ba:	69f9      	ldr	r1, [r7, #28]
    59bc:	6a38      	ldr	r0, [r7, #32]
    59be:	4c1c      	ldr	r4, [pc, #112]	; (5a30 <_spi_m_sync_trans+0x14c>)
    59c0:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    59c2:	6a3a      	ldr	r2, [r7, #32]
    59c4:	69fb      	ldr	r3, [r7, #28]
    59c6:	0011      	movs	r1, r2
    59c8:	0018      	movs	r0, r3
    59ca:	4b1a      	ldr	r3, [pc, #104]	; (5a34 <_spi_m_sync_trans+0x150>)
    59cc:	4798      	blx	r3
    59ce:	0003      	movs	r3, r0
    59d0:	627b      	str	r3, [r7, #36]	; 0x24

		if (rc < 0) {
    59d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    59d4:	2b00      	cmp	r3, #0
    59d6:	db12      	blt.n	59fe <_spi_m_sync_trans+0x11a>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    59d8:	2308      	movs	r3, #8
    59da:	18fb      	adds	r3, r7, r3
    59dc:	689a      	ldr	r2, [r3, #8]
    59de:	683b      	ldr	r3, [r7, #0]
    59e0:	689b      	ldr	r3, [r3, #8]
    59e2:	429a      	cmp	r2, r3
    59e4:	d3c9      	bcc.n	597a <_spi_m_sync_trans+0x96>
    59e6:	2308      	movs	r3, #8
    59e8:	18fb      	adds	r3, r7, r3
    59ea:	68da      	ldr	r2, [r3, #12]
    59ec:	683b      	ldr	r3, [r7, #0]
    59ee:	689b      	ldr	r3, [r3, #8]
    59f0:	429a      	cmp	r2, r3
    59f2:	d3c2      	bcc.n	597a <_spi_m_sync_trans+0x96>
			rc = ctrl.txcnt;
    59f4:	2308      	movs	r3, #8
    59f6:	18fb      	adds	r3, r7, r3
    59f8:	689b      	ldr	r3, [r3, #8]
    59fa:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    59fc:	e000      	b.n	5a00 <_spi_m_sync_trans+0x11c>
			break;
    59fe:	46c0      	nop			; (mov r8, r8)
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    5a00:	6a3b      	ldr	r3, [r7, #32]
    5a02:	0018      	movs	r0, r3
    5a04:	4b0c      	ldr	r3, [pc, #48]	; (5a38 <_spi_m_sync_trans+0x154>)
    5a06:	4798      	blx	r3

	return rc;
    5a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    5a0a:	0018      	movs	r0, r3
    5a0c:	46bd      	mov	sp, r7
    5a0e:	b00b      	add	sp, #44	; 0x2c
    5a10:	bd90      	pop	{r4, r7, pc}
    5a12:	46c0      	nop			; (mov r8, r8)
    5a14:	00000a7b 	.word	0x00000a7b
    5a18:	0000c438 	.word	0x0000c438
    5a1c:	00002cd5 	.word	0x00002cd5
    5a20:	00004135 	.word	0x00004135
    5a24:	00004355 	.word	0x00004355
    5a28:	0000420d 	.word	0x0000420d
    5a2c:	000057b1 	.word	0x000057b1
    5a30:	00005821 	.word	0x00005821
    5a34:	000058a1 	.word	0x000058a1
    5a38:	0000577d 	.word	0x0000577d

00005a3c <hri_gclk_get_STATUS_SYNCBUSY_bit>:
{
    5a3c:	b580      	push	{r7, lr}
    5a3e:	b082      	sub	sp, #8
    5a40:	af00      	add	r7, sp, #0
    5a42:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    5a44:	687b      	ldr	r3, [r7, #4]
    5a46:	785b      	ldrb	r3, [r3, #1]
    5a48:	b2db      	uxtb	r3, r3
    5a4a:	09db      	lsrs	r3, r3, #7
    5a4c:	2201      	movs	r2, #1
    5a4e:	4013      	ands	r3, r2
    5a50:	1e5a      	subs	r2, r3, #1
    5a52:	4193      	sbcs	r3, r2
    5a54:	b2db      	uxtb	r3, r3
}
    5a56:	0018      	movs	r0, r3
    5a58:	46bd      	mov	sp, r7
    5a5a:	b002      	add	sp, #8
    5a5c:	bd80      	pop	{r7, pc}

00005a5e <hri_sysctrl_get_PCLKSR_OSC8MRDY_bit>:
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
}

static inline bool hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(const void *const hw)
{
    5a5e:	b580      	push	{r7, lr}
    5a60:	b082      	sub	sp, #8
    5a62:	af00      	add	r7, sp, #0
    5a64:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    5a66:	687b      	ldr	r3, [r7, #4]
    5a68:	68db      	ldr	r3, [r3, #12]
    5a6a:	08db      	lsrs	r3, r3, #3
    5a6c:	2201      	movs	r2, #1
    5a6e:	4013      	ands	r3, r2
    5a70:	1e5a      	subs	r2, r3, #1
    5a72:	4193      	sbcs	r3, r2
    5a74:	b2db      	uxtb	r3, r3
}
    5a76:	0018      	movs	r0, r3
    5a78:	46bd      	mov	sp, r7
    5a7a:	b002      	add	sp, #8
    5a7c:	bd80      	pop	{r7, pc}

00005a7e <hri_sysctrl_get_PCLKSR_DFLLRDY_bit>:

static inline bool hri_sysctrl_get_PCLKSR_DFLLRDY_bit(const void *const hw)
{
    5a7e:	b580      	push	{r7, lr}
    5a80:	b082      	sub	sp, #8
    5a82:	af00      	add	r7, sp, #0
    5a84:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    5a86:	687b      	ldr	r3, [r7, #4]
    5a88:	68db      	ldr	r3, [r3, #12]
    5a8a:	091b      	lsrs	r3, r3, #4
    5a8c:	2201      	movs	r2, #1
    5a8e:	4013      	ands	r3, r2
    5a90:	1e5a      	subs	r2, r3, #1
    5a92:	4193      	sbcs	r3, r2
    5a94:	b2db      	uxtb	r3, r3
}
    5a96:	0018      	movs	r0, r3
    5a98:	46bd      	mov	sp, r7
    5a9a:	b002      	add	sp, #8
    5a9c:	bd80      	pop	{r7, pc}

00005a9e <hri_sysctrl_get_PCLKSR_reg>:
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DPLLLTO) >> SYSCTRL_PCLKSR_DPLLLTO_Pos;
}

static inline hri_sysctrl_pclksr_reg_t hri_sysctrl_get_PCLKSR_reg(const void *const hw, hri_sysctrl_pclksr_reg_t mask)
{
    5a9e:	b580      	push	{r7, lr}
    5aa0:	b084      	sub	sp, #16
    5aa2:	af00      	add	r7, sp, #0
    5aa4:	6078      	str	r0, [r7, #4]
    5aa6:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    5aa8:	687b      	ldr	r3, [r7, #4]
    5aaa:	68db      	ldr	r3, [r3, #12]
    5aac:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5aae:	68fb      	ldr	r3, [r7, #12]
    5ab0:	683a      	ldr	r2, [r7, #0]
    5ab2:	4013      	ands	r3, r2
    5ab4:	60fb      	str	r3, [r7, #12]
	return tmp;
    5ab6:	68fb      	ldr	r3, [r7, #12]
}
    5ab8:	0018      	movs	r0, r3
    5aba:	46bd      	mov	sp, r7
    5abc:	b004      	add	sp, #16
    5abe:	bd80      	pop	{r7, pc}

00005ac0 <hri_sysctrl_set_OSC32K_ENABLE_bit>:
{
	return ((Sysctrl *)hw)->XOSC32K.reg;
}

static inline void hri_sysctrl_set_OSC32K_ENABLE_bit(const void *const hw)
{
    5ac0:	b580      	push	{r7, lr}
    5ac2:	b082      	sub	sp, #8
    5ac4:	af00      	add	r7, sp, #0
    5ac6:	6078      	str	r0, [r7, #4]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5ac8:	687b      	ldr	r3, [r7, #4]
    5aca:	699b      	ldr	r3, [r3, #24]
    5acc:	2202      	movs	r2, #2
    5ace:	431a      	orrs	r2, r3
    5ad0:	687b      	ldr	r3, [r7, #4]
    5ad2:	619a      	str	r2, [r3, #24]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    5ad4:	46c0      	nop			; (mov r8, r8)
    5ad6:	46bd      	mov	sp, r7
    5ad8:	b002      	add	sp, #8
    5ada:	bd80      	pop	{r7, pc}

00005adc <hri_sysctrl_clear_OSC32K_ENABLE_bit>:
	((Sysctrl *)hw)->OSC32K.reg = tmp;
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sysctrl_clear_OSC32K_ENABLE_bit(const void *const hw)
{
    5adc:	b580      	push	{r7, lr}
    5ade:	b082      	sub	sp, #8
    5ae0:	af00      	add	r7, sp, #0
    5ae2:	6078      	str	r0, [r7, #4]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    5ae4:	687b      	ldr	r3, [r7, #4]
    5ae6:	699b      	ldr	r3, [r3, #24]
    5ae8:	2202      	movs	r2, #2
    5aea:	4393      	bics	r3, r2
    5aec:	001a      	movs	r2, r3
    5aee:	687b      	ldr	r3, [r7, #4]
    5af0:	619a      	str	r2, [r3, #24]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    5af2:	46c0      	nop			; (mov r8, r8)
    5af4:	46bd      	mov	sp, r7
    5af6:	b002      	add	sp, #8
    5af8:	bd80      	pop	{r7, pc}

00005afa <hri_sysctrl_read_OSCULP32K_CALIB_bf>:
	((Sysctrl *)hw)->OSCULP32K.reg ^= SYSCTRL_OSCULP32K_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    5afa:	b580      	push	{r7, lr}
    5afc:	b084      	sub	sp, #16
    5afe:	af00      	add	r7, sp, #0
    5b00:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    5b02:	230f      	movs	r3, #15
    5b04:	18fb      	adds	r3, r7, r3
    5b06:	687a      	ldr	r2, [r7, #4]
    5b08:	7f12      	ldrb	r2, [r2, #28]
    5b0a:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    5b0c:	230f      	movs	r3, #15
    5b0e:	18fb      	adds	r3, r7, r3
    5b10:	220f      	movs	r2, #15
    5b12:	18ba      	adds	r2, r7, r2
    5b14:	7812      	ldrb	r2, [r2, #0]
    5b16:	211f      	movs	r1, #31
    5b18:	400a      	ands	r2, r1
    5b1a:	701a      	strb	r2, [r3, #0]
	return tmp;
    5b1c:	230f      	movs	r3, #15
    5b1e:	18fb      	adds	r3, r7, r3
    5b20:	781b      	ldrb	r3, [r3, #0]
}
    5b22:	0018      	movs	r0, r3
    5b24:	46bd      	mov	sp, r7
    5b26:	b004      	add	sp, #16
    5b28:	bd80      	pop	{r7, pc}

00005b2a <hri_sysctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
    5b2a:	b580      	push	{r7, lr}
    5b2c:	b082      	sub	sp, #8
    5b2e:	af00      	add	r7, sp, #0
    5b30:	6078      	str	r0, [r7, #4]
    5b32:	000a      	movs	r2, r1
    5b34:	1cfb      	adds	r3, r7, #3
    5b36:	701a      	strb	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    5b38:	687b      	ldr	r3, [r7, #4]
    5b3a:	1cfa      	adds	r2, r7, #3
    5b3c:	7812      	ldrb	r2, [r2, #0]
    5b3e:	771a      	strb	r2, [r3, #28]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    5b40:	46c0      	nop			; (mov r8, r8)
    5b42:	46bd      	mov	sp, r7
    5b44:	b002      	add	sp, #8
    5b46:	bd80      	pop	{r7, pc}

00005b48 <hri_sysctrl_set_OSC8M_ONDEMAND_bit>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_RUNSTDBY;
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sysctrl_set_OSC8M_ONDEMAND_bit(const void *const hw)
{
    5b48:	b580      	push	{r7, lr}
    5b4a:	b082      	sub	sp, #8
    5b4c:	af00      	add	r7, sp, #0
    5b4e:	6078      	str	r0, [r7, #4]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    5b50:	687b      	ldr	r3, [r7, #4]
    5b52:	6a1b      	ldr	r3, [r3, #32]
    5b54:	2280      	movs	r2, #128	; 0x80
    5b56:	431a      	orrs	r2, r3
    5b58:	687b      	ldr	r3, [r7, #4]
    5b5a:	621a      	str	r2, [r3, #32]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    5b5c:	46c0      	nop			; (mov r8, r8)
    5b5e:	46bd      	mov	sp, r7
    5b60:	b002      	add	sp, #8
    5b62:	bd80      	pop	{r7, pc}

00005b64 <hri_sysctrl_read_OSC8M_CALIB_bf>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
    5b64:	b580      	push	{r7, lr}
    5b66:	b084      	sub	sp, #16
    5b68:	af00      	add	r7, sp, #0
    5b6a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    5b6c:	687b      	ldr	r3, [r7, #4]
    5b6e:	6a1b      	ldr	r3, [r3, #32]
    5b70:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    5b72:	68fb      	ldr	r3, [r7, #12]
    5b74:	0c1b      	lsrs	r3, r3, #16
    5b76:	051b      	lsls	r3, r3, #20
    5b78:	0d1b      	lsrs	r3, r3, #20
    5b7a:	60fb      	str	r3, [r7, #12]
	return tmp;
    5b7c:	68fb      	ldr	r3, [r7, #12]
}
    5b7e:	0018      	movs	r0, r3
    5b80:	46bd      	mov	sp, r7
    5b82:	b004      	add	sp, #16
    5b84:	bd80      	pop	{r7, pc}

00005b86 <hri_sysctrl_read_OSC8M_FRANGE_bf>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_FRANGE(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
    5b86:	b580      	push	{r7, lr}
    5b88:	b084      	sub	sp, #16
    5b8a:	af00      	add	r7, sp, #0
    5b8c:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    5b8e:	687b      	ldr	r3, [r7, #4]
    5b90:	6a1b      	ldr	r3, [r3, #32]
    5b92:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC8M_FRANGE_Msk) >> SYSCTRL_OSC8M_FRANGE_Pos;
    5b94:	68fb      	ldr	r3, [r7, #12]
    5b96:	0f9b      	lsrs	r3, r3, #30
    5b98:	60fb      	str	r3, [r7, #12]
	return tmp;
    5b9a:	68fb      	ldr	r3, [r7, #12]
}
    5b9c:	0018      	movs	r0, r3
    5b9e:	46bd      	mov	sp, r7
    5ba0:	b004      	add	sp, #16
    5ba2:	bd80      	pop	{r7, pc}

00005ba4 <hri_sysctrl_write_OSC8M_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
    5ba4:	b580      	push	{r7, lr}
    5ba6:	b082      	sub	sp, #8
    5ba8:	af00      	add	r7, sp, #0
    5baa:	6078      	str	r0, [r7, #4]
    5bac:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    5bae:	687b      	ldr	r3, [r7, #4]
    5bb0:	683a      	ldr	r2, [r7, #0]
    5bb2:	621a      	str	r2, [r3, #32]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    5bb4:	46c0      	nop			; (mov r8, r8)
    5bb6:	46bd      	mov	sp, r7
    5bb8:	b002      	add	sp, #8
    5bba:	bd80      	pop	{r7, pc}

00005bbc <hri_sysctrl_get_DFLLCTRL_MODE_bit>:
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE;
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sysctrl_get_DFLLCTRL_MODE_bit(const void *const hw)
{
    5bbc:	b580      	push	{r7, lr}
    5bbe:	b084      	sub	sp, #16
    5bc0:	af00      	add	r7, sp, #0
    5bc2:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    5bc4:	230e      	movs	r3, #14
    5bc6:	18fb      	adds	r3, r7, r3
    5bc8:	687a      	ldr	r2, [r7, #4]
    5bca:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    5bcc:	801a      	strh	r2, [r3, #0]
	tmp = (tmp & SYSCTRL_DFLLCTRL_MODE) >> SYSCTRL_DFLLCTRL_MODE_Pos;
    5bce:	230e      	movs	r3, #14
    5bd0:	18fb      	adds	r3, r7, r3
    5bd2:	881b      	ldrh	r3, [r3, #0]
    5bd4:	089b      	lsrs	r3, r3, #2
    5bd6:	b29a      	uxth	r2, r3
    5bd8:	230e      	movs	r3, #14
    5bda:	18fb      	adds	r3, r7, r3
    5bdc:	2101      	movs	r1, #1
    5bde:	400a      	ands	r2, r1
    5be0:	801a      	strh	r2, [r3, #0]
	return (bool)tmp;
    5be2:	230e      	movs	r3, #14
    5be4:	18fb      	adds	r3, r7, r3
    5be6:	881b      	ldrh	r3, [r3, #0]
    5be8:	1e5a      	subs	r2, r3, #1
    5bea:	4193      	sbcs	r3, r2
    5bec:	b2db      	uxtb	r3, r3
}
    5bee:	0018      	movs	r0, r3
    5bf0:	46bd      	mov	sp, r7
    5bf2:	b004      	add	sp, #16
    5bf4:	bd80      	pop	{r7, pc}

00005bf6 <hri_sysctrl_set_DFLLCTRL_ONDEMAND_bit>:
	((Sysctrl *)hw)->DFLLCTRL.reg ^= SYSCTRL_DFLLCTRL_RUNSTDBY;
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sysctrl_set_DFLLCTRL_ONDEMAND_bit(const void *const hw)
{
    5bf6:	b580      	push	{r7, lr}
    5bf8:	b082      	sub	sp, #8
    5bfa:	af00      	add	r7, sp, #0
    5bfc:	6078      	str	r0, [r7, #4]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    5bfe:	687b      	ldr	r3, [r7, #4]
    5c00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    5c02:	b29b      	uxth	r3, r3
    5c04:	2280      	movs	r2, #128	; 0x80
    5c06:	4313      	orrs	r3, r2
    5c08:	b29a      	uxth	r2, r3
    5c0a:	687b      	ldr	r3, [r7, #4]
    5c0c:	849a      	strh	r2, [r3, #36]	; 0x24
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    5c0e:	46c0      	nop			; (mov r8, r8)
    5c10:	46bd      	mov	sp, r7
    5c12:	b002      	add	sp, #8
    5c14:	bd80      	pop	{r7, pc}

00005c16 <hri_sysctrl_write_DFLLCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
    5c16:	b580      	push	{r7, lr}
    5c18:	b082      	sub	sp, #8
    5c1a:	af00      	add	r7, sp, #0
    5c1c:	6078      	str	r0, [r7, #4]
    5c1e:	000a      	movs	r2, r1
    5c20:	1cbb      	adds	r3, r7, #2
    5c22:	801a      	strh	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    5c24:	687b      	ldr	r3, [r7, #4]
    5c26:	1cba      	adds	r2, r7, #2
    5c28:	8812      	ldrh	r2, [r2, #0]
    5c2a:	849a      	strh	r2, [r3, #36]	; 0x24
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    5c2c:	46c0      	nop			; (mov r8, r8)
    5c2e:	46bd      	mov	sp, r7
    5c30:	b002      	add	sp, #8
    5c32:	bd80      	pop	{r7, pc}

00005c34 <hri_sysctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DFLLVAL_reg(const void *const hw, hri_sysctrl_dfllval_reg_t data)
{
    5c34:	b580      	push	{r7, lr}
    5c36:	b082      	sub	sp, #8
    5c38:	af00      	add	r7, sp, #0
    5c3a:	6078      	str	r0, [r7, #4]
    5c3c:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    5c3e:	687b      	ldr	r3, [r7, #4]
    5c40:	683a      	ldr	r2, [r7, #0]
    5c42:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    5c44:	46c0      	nop			; (mov r8, r8)
    5c46:	46bd      	mov	sp, r7
    5c48:	b002      	add	sp, #8
    5c4a:	bd80      	pop	{r7, pc}

00005c4c <hri_sysctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
    5c4c:	b580      	push	{r7, lr}
    5c4e:	b082      	sub	sp, #8
    5c50:	af00      	add	r7, sp, #0
    5c52:	6078      	str	r0, [r7, #4]
    5c54:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    5c56:	687b      	ldr	r3, [r7, #4]
    5c58:	683a      	ldr	r2, [r7, #0]
    5c5a:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    5c5c:	46c0      	nop			; (mov r8, r8)
    5c5e:	46bd      	mov	sp, r7
    5c60:	b002      	add	sp, #8
    5c62:	bd80      	pop	{r7, pc}

00005c64 <_sysctrl_init_sources>:
 * \brief Initializes clock generators
 *
 * All GCLK generators are running when this function returns.
 */
void _sysctrl_init_sources(void)
{
    5c64:	b580      	push	{r7, lr}
    5c66:	b082      	sub	sp, #8
    5c68:	af00      	add	r7, sp, #0
	void *   hw = (void *)SYSCTRL;
    5c6a:	4b24      	ldr	r3, [pc, #144]	; (5cfc <_sysctrl_init_sources+0x98>)
    5c6c:	607b      	str	r3, [r7, #4]
	        | (CONF_XOSC_RUNSTDBY << SYSCTRL_XOSC_RUNSTDBY_Pos) | (CONF_XOSC_XTALEN << SYSCTRL_XOSC_XTALEN_Pos)
	        | (CONF_XOSC_ENABLE << SYSCTRL_XOSC_ENABLE_Pos));
#endif

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);
    5c6e:	687b      	ldr	r3, [r7, #4]
    5c70:	0018      	movs	r0, r3
    5c72:	4b23      	ldr	r3, [pc, #140]	; (5d00 <_sysctrl_init_sources+0x9c>)
    5c74:	4798      	blx	r3
    5c76:	0002      	movs	r2, r0
    5c78:	1cbb      	adds	r3, r7, #2
    5c7a:	801a      	strh	r2, [r3, #0]

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    5c7c:	687b      	ldr	r3, [r7, #4]
    5c7e:	0018      	movs	r0, r3
    5c80:	4b20      	ldr	r3, [pc, #128]	; (5d04 <_sysctrl_init_sources+0xa0>)
    5c82:	4798      	blx	r3
    5c84:	0003      	movs	r3, r0
    5c86:	079a      	lsls	r2, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    5c88:	1cbb      	adds	r3, r7, #2
    5c8a:	881b      	ldrh	r3, [r3, #0]
    5c8c:	041b      	lsls	r3, r3, #16
    5c8e:	0019      	movs	r1, r3
    5c90:	4b1d      	ldr	r3, [pc, #116]	; (5d08 <_sysctrl_init_sources+0xa4>)
    5c92:	400b      	ands	r3, r1
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    5c94:	4313      	orrs	r3, r2
	hri_sysctrl_write_OSC8M_reg(hw,
    5c96:	2202      	movs	r2, #2
    5c98:	431a      	orrs	r2, r3
    5c9a:	687b      	ldr	r3, [r7, #4]
    5c9c:	0011      	movs	r1, r2
    5c9e:	0018      	movs	r0, r3
    5ca0:	4b1a      	ldr	r3, [pc, #104]	; (5d0c <_sysctrl_init_sources+0xa8>)
    5ca2:	4798      	blx	r3
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
#else
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
    5ca4:	687b      	ldr	r3, [r7, #4]
    5ca6:	0018      	movs	r0, r3
    5ca8:	4b19      	ldr	r3, [pc, #100]	; (5d10 <_sysctrl_init_sources+0xac>)
    5caa:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_sysctrl_read_OSCULP32K_CALIB_bf(hw);
    5cac:	687b      	ldr	r3, [r7, #4]
    5cae:	0018      	movs	r0, r3
    5cb0:	4b18      	ldr	r3, [pc, #96]	; (5d14 <_sysctrl_init_sources+0xb0>)
    5cb2:	4798      	blx	r3
    5cb4:	0003      	movs	r3, r0
    5cb6:	001a      	movs	r2, r3
    5cb8:	1cbb      	adds	r3, r7, #2
    5cba:	801a      	strh	r2, [r3, #0]

	hri_sysctrl_write_OSCULP32K_reg(hw,
    5cbc:	1cbb      	adds	r3, r7, #2
    5cbe:	881b      	ldrh	r3, [r3, #0]
    5cc0:	b2db      	uxtb	r3, r3
    5cc2:	221f      	movs	r2, #31
    5cc4:	4013      	ands	r3, r2
    5cc6:	b2da      	uxtb	r2, r3
    5cc8:	687b      	ldr	r3, [r7, #4]
    5cca:	0011      	movs	r1, r2
    5ccc:	0018      	movs	r0, r3
    5cce:	4b12      	ldr	r3, [pc, #72]	; (5d18 <_sysctrl_init_sources+0xb4>)
    5cd0:	4798      	blx	r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    5cd2:	46c0      	nop			; (mov r8, r8)
    5cd4:	687b      	ldr	r3, [r7, #4]
    5cd6:	0018      	movs	r0, r3
    5cd8:	4b10      	ldr	r3, [pc, #64]	; (5d1c <_sysctrl_init_sources+0xb8>)
    5cda:	4798      	blx	r3
    5cdc:	0003      	movs	r3, r0
    5cde:	001a      	movs	r2, r3
    5ce0:	2301      	movs	r3, #1
    5ce2:	4053      	eors	r3, r2
    5ce4:	b2db      	uxtb	r3, r3
    5ce6:	2b00      	cmp	r3, #0
    5ce8:	d1f4      	bne.n	5cd4 <_sysctrl_init_sources+0x70>
		;
#endif
#if CONF_OSC8M_ONDEMAND == 1
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
    5cea:	687b      	ldr	r3, [r7, #4]
    5cec:	0018      	movs	r0, r3
    5cee:	4b0c      	ldr	r3, [pc, #48]	; (5d20 <_sysctrl_init_sources+0xbc>)
    5cf0:	4798      	blx	r3
#endif
#endif

	(void)calib, (void)hw;
}
    5cf2:	46c0      	nop			; (mov r8, r8)
    5cf4:	46bd      	mov	sp, r7
    5cf6:	b002      	add	sp, #8
    5cf8:	bd80      	pop	{r7, pc}
    5cfa:	46c0      	nop			; (mov r8, r8)
    5cfc:	40000800 	.word	0x40000800
    5d00:	00005b65 	.word	0x00005b65
    5d04:	00005b87 	.word	0x00005b87
    5d08:	0fff0000 	.word	0x0fff0000
    5d0c:	00005ba5 	.word	0x00005ba5
    5d10:	00005ac1 	.word	0x00005ac1
    5d14:	00005afb 	.word	0x00005afb
    5d18:	00005b2b 	.word	0x00005b2b
    5d1c:	00005a5f 	.word	0x00005a5f
    5d20:	00005b49 	.word	0x00005b49

00005d24 <_sysctrl_init_referenced_generators>:

void _sysctrl_init_referenced_generators(void)
{
    5d24:	b580      	push	{r7, lr}
    5d26:	b084      	sub	sp, #16
    5d28:	af00      	add	r7, sp, #0
	void *hw = (void *)SYSCTRL;
    5d2a:	4b37      	ldr	r3, [pc, #220]	; (5e08 <_sysctrl_init_referenced_generators+0xe4>)
    5d2c:	60fb      	str	r3, [r7, #12]
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != CONF_DFLL_OPEN_LOOP_MODE
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
    5d2e:	68fb      	ldr	r3, [r7, #12]
    5d30:	2102      	movs	r1, #2
    5d32:	0018      	movs	r0, r3
    5d34:	4b35      	ldr	r3, [pc, #212]	; (5e0c <_sysctrl_init_referenced_generators+0xe8>)
    5d36:	4798      	blx	r3
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    5d38:	46c0      	nop			; (mov r8, r8)
    5d3a:	68fb      	ldr	r3, [r7, #12]
    5d3c:	0018      	movs	r0, r3
    5d3e:	4b34      	ldr	r3, [pc, #208]	; (5e10 <_sysctrl_init_referenced_generators+0xec>)
    5d40:	4798      	blx	r3
    5d42:	0003      	movs	r3, r0
    5d44:	001a      	movs	r2, r3
    5d46:	2301      	movs	r3, #1
    5d48:	4053      	eors	r3, r2
    5d4a:	b2db      	uxtb	r3, r3
    5d4c:	2b00      	cmp	r3, #0
    5d4e:	d1f4      	bne.n	5d3a <_sysctrl_init_referenced_generators+0x16>
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
    5d50:	4a30      	ldr	r2, [pc, #192]	; (5e14 <_sysctrl_init_referenced_generators+0xf0>)
    5d52:	68fb      	ldr	r3, [r7, #12]
    5d54:	0011      	movs	r1, r2
    5d56:	0018      	movs	r0, r3
    5d58:	4b2f      	ldr	r3, [pc, #188]	; (5e18 <_sysctrl_init_referenced_generators+0xf4>)
    5d5a:	4798      	blx	r3
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    5d5c:	4b2f      	ldr	r3, [pc, #188]	; (5e1c <_sysctrl_init_referenced_generators+0xf8>)
    5d5e:	681b      	ldr	r3, [r3, #0]
    5d60:	0e9b      	lsrs	r3, r3, #26
    5d62:	2b3f      	cmp	r3, #63	; 0x3f
    5d64:	d009      	beq.n	5d7a <_sysctrl_init_referenced_generators+0x56>
    5d66:	4b2d      	ldr	r3, [pc, #180]	; (5e1c <_sysctrl_init_referenced_generators+0xf8>)
    5d68:	681b      	ldr	r3, [r3, #0]
    5d6a:	0e9b      	lsrs	r3, r3, #26
    5d6c:	029b      	lsls	r3, r3, #10
    5d6e:	041b      	lsls	r3, r3, #16
    5d70:	0c1b      	lsrs	r3, r3, #16
    5d72:	2280      	movs	r2, #128	; 0x80
    5d74:	0092      	lsls	r2, r2, #2
    5d76:	4313      	orrs	r3, r2
    5d78:	e001      	b.n	5d7e <_sysctrl_init_referenced_generators+0x5a>
    5d7a:	23fc      	movs	r3, #252	; 0xfc
    5d7c:	01db      	lsls	r3, r3, #7
    5d7e:	68fa      	ldr	r2, [r7, #12]
    5d80:	0019      	movs	r1, r3
    5d82:	0010      	movs	r0, r2
    5d84:	4b26      	ldr	r3, [pc, #152]	; (5e20 <_sysctrl_init_referenced_generators+0xfc>)
    5d86:	4798      	blx	r3

	hri_sysctrl_dfllctrl_reg_t tmp =
    5d88:	230a      	movs	r3, #10
    5d8a:	18fb      	adds	r3, r7, r3
    5d8c:	4a25      	ldr	r2, [pc, #148]	; (5e24 <_sysctrl_init_referenced_generators+0x100>)
    5d8e:	801a      	strh	r2, [r3, #0]
	    | (CONF_DFLL_QLDIS << SYSCTRL_DFLLCTRL_QLDIS_Pos) | (CONF_DFLL_CCDIS << SYSCTRL_DFLLCTRL_CCDIS_Pos)
	    | (CONF_DFLL_RUNSTDBY << SYSCTRL_DFLLCTRL_RUNSTDBY_Pos) | (CONF_DFLL_USBCRM << SYSCTRL_DFLLCTRL_USBCRM_Pos)
	    | (CONF_DFLL_LLAW << SYSCTRL_DFLLCTRL_LLAW_Pos) | (CONF_DFLL_STABLE << SYSCTRL_DFLLCTRL_STABLE_Pos)
	    | (CONF_DFLL_MODE << SYSCTRL_DFLLCTRL_MODE_Pos) | (CONF_DFLL_ENABLE << SYSCTRL_DFLLCTRL_ENABLE_Pos);

	hri_sysctrl_write_DFLLCTRL_reg(hw, tmp);
    5d90:	230a      	movs	r3, #10
    5d92:	18fb      	adds	r3, r7, r3
    5d94:	881a      	ldrh	r2, [r3, #0]
    5d96:	68fb      	ldr	r3, [r7, #12]
    5d98:	0011      	movs	r1, r2
    5d9a:	0018      	movs	r0, r3
    5d9c:	4b1b      	ldr	r3, [pc, #108]	; (5e0c <_sysctrl_init_referenced_generators+0xe8>)
    5d9e:	4798      	blx	r3
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    5da0:	68fb      	ldr	r3, [r7, #12]
    5da2:	0018      	movs	r0, r3
    5da4:	4b20      	ldr	r3, [pc, #128]	; (5e28 <_sysctrl_init_referenced_generators+0x104>)
    5da6:	4798      	blx	r3
    5da8:	1e03      	subs	r3, r0, #0
    5daa:	d00d      	beq.n	5dc8 <_sysctrl_init_referenced_generators+0xa4>

#if CONF_DFLL_USBCRM == 0
		hri_sysctrl_pclksr_reg_t status_mask
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
    5dac:	2310      	movs	r3, #16
    5dae:	607b      	str	r3, [r7, #4]
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    5db0:	46c0      	nop			; (mov r8, r8)
    5db2:	687a      	ldr	r2, [r7, #4]
    5db4:	68fb      	ldr	r3, [r7, #12]
    5db6:	0011      	movs	r1, r2
    5db8:	0018      	movs	r0, r3
    5dba:	4b1c      	ldr	r3, [pc, #112]	; (5e2c <_sysctrl_init_referenced_generators+0x108>)
    5dbc:	4798      	blx	r3
    5dbe:	0002      	movs	r2, r0
    5dc0:	687b      	ldr	r3, [r7, #4]
    5dc2:	429a      	cmp	r2, r3
    5dc4:	d1f5      	bne.n	5db2 <_sysctrl_init_referenced_generators+0x8e>
    5dc6:	e00b      	b.n	5de0 <_sysctrl_init_referenced_generators+0xbc>
			;
	} else {
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    5dc8:	46c0      	nop			; (mov r8, r8)
    5dca:	68fb      	ldr	r3, [r7, #12]
    5dcc:	0018      	movs	r0, r3
    5dce:	4b10      	ldr	r3, [pc, #64]	; (5e10 <_sysctrl_init_referenced_generators+0xec>)
    5dd0:	4798      	blx	r3
    5dd2:	0003      	movs	r3, r0
    5dd4:	001a      	movs	r2, r3
    5dd6:	2301      	movs	r3, #1
    5dd8:	4053      	eors	r3, r2
    5dda:	b2db      	uxtb	r3, r3
    5ddc:	2b00      	cmp	r3, #0
    5dde:	d1f4      	bne.n	5dca <_sysctrl_init_referenced_generators+0xa6>
			;
	}
#endif
#if CONF_DFLL_ONDEMAND == 1
	hri_sysctrl_set_DFLLCTRL_ONDEMAND_bit(hw);
    5de0:	68fb      	ldr	r3, [r7, #12]
    5de2:	0018      	movs	r0, r3
    5de4:	4b12      	ldr	r3, [pc, #72]	; (5e30 <_sysctrl_init_referenced_generators+0x10c>)
    5de6:	4798      	blx	r3
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    5de8:	46c0      	nop			; (mov r8, r8)
    5dea:	4b12      	ldr	r3, [pc, #72]	; (5e34 <_sysctrl_init_referenced_generators+0x110>)
    5dec:	0018      	movs	r0, r3
    5dee:	4b12      	ldr	r3, [pc, #72]	; (5e38 <_sysctrl_init_referenced_generators+0x114>)
    5df0:	4798      	blx	r3
    5df2:	1e03      	subs	r3, r0, #0
    5df4:	d1f9      	bne.n	5dea <_sysctrl_init_referenced_generators+0xc6>
		;
#endif

#if CONF_OSC32K_CONFIG == 0 || CONF_OSC32K_ENABLE == 0
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
    5df6:	68fb      	ldr	r3, [r7, #12]
    5df8:	0018      	movs	r0, r3
    5dfa:	4b10      	ldr	r3, [pc, #64]	; (5e3c <_sysctrl_init_referenced_generators+0x118>)
    5dfc:	4798      	blx	r3
#endif

	(void)hw;
}
    5dfe:	46c0      	nop			; (mov r8, r8)
    5e00:	46bd      	mov	sp, r7
    5e02:	b004      	add	sp, #16
    5e04:	bd80      	pop	{r7, pc}
    5e06:	46c0      	nop			; (mov r8, r8)
    5e08:	40000800 	.word	0x40000800
    5e0c:	00005c17 	.word	0x00005c17
    5e10:	00005a7f 	.word	0x00005a7f
    5e14:	0401bb80 	.word	0x0401bb80
    5e18:	00005c4d 	.word	0x00005c4d
    5e1c:	00806024 	.word	0x00806024
    5e20:	00005c35 	.word	0x00005c35
    5e24:	0000052e 	.word	0x0000052e
    5e28:	00005bbd 	.word	0x00005bbd
    5e2c:	00005a9f 	.word	0x00005a9f
    5e30:	00005bf7 	.word	0x00005bf7
    5e34:	40000c00 	.word	0x40000c00
    5e38:	00005a3d 	.word	0x00005a3d
    5e3c:	00005add 	.word	0x00005add

00005e40 <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    5e40:	b580      	push	{r7, lr}
    5e42:	b082      	sub	sp, #8
    5e44:	af00      	add	r7, sp, #0
    5e46:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    5e48:	4b04      	ldr	r3, [pc, #16]	; (5e5c <_system_time_init+0x1c>)
    5e4a:	4a05      	ldr	r2, [pc, #20]	; (5e60 <_system_time_init+0x20>)
    5e4c:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    5e4e:	4b03      	ldr	r3, [pc, #12]	; (5e5c <_system_time_init+0x1c>)
    5e50:	2205      	movs	r2, #5
    5e52:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    5e54:	46c0      	nop			; (mov r8, r8)
    5e56:	46bd      	mov	sp, r7
    5e58:	b002      	add	sp, #8
    5e5a:	bd80      	pop	{r7, pc}
    5e5c:	e000e010 	.word	0xe000e010
    5e60:	00ffffff 	.word	0x00ffffff

00005e64 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    5e64:	b580      	push	{r7, lr}
    5e66:	b082      	sub	sp, #8
    5e68:	af00      	add	r7, sp, #0
    5e6a:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    5e6c:	687b      	ldr	r3, [r7, #4]
    5e6e:	0018      	movs	r0, r3
    5e70:	4b02      	ldr	r3, [pc, #8]	; (5e7c <_delay_init+0x18>)
    5e72:	4798      	blx	r3
}
    5e74:	46c0      	nop			; (mov r8, r8)
    5e76:	46bd      	mov	sp, r7
    5e78:	b002      	add	sp, #8
    5e7a:	bd80      	pop	{r7, pc}
    5e7c:	00005e41 	.word	0x00005e41

00005e80 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    5e80:	b580      	push	{r7, lr}
    5e82:	b084      	sub	sp, #16
    5e84:	af00      	add	r7, sp, #0
    5e86:	6078      	str	r0, [r7, #4]
    5e88:	6039      	str	r1, [r7, #0]
	(void)hw;
	uint8_t  n   = cycles >> 24;
    5e8a:	683b      	ldr	r3, [r7, #0]
    5e8c:	0e1a      	lsrs	r2, r3, #24
    5e8e:	230f      	movs	r3, #15
    5e90:	18fb      	adds	r3, r7, r3
    5e92:	701a      	strb	r2, [r3, #0]
	uint32_t buf = cycles;
    5e94:	683b      	ldr	r3, [r7, #0]
    5e96:	60bb      	str	r3, [r7, #8]

	while (n--) {
    5e98:	e011      	b.n	5ebe <_delay_cycles+0x3e>
		SysTick->LOAD = 0xFFFFFF;
    5e9a:	4b16      	ldr	r3, [pc, #88]	; (5ef4 <_delay_cycles+0x74>)
    5e9c:	4a16      	ldr	r2, [pc, #88]	; (5ef8 <_delay_cycles+0x78>)
    5e9e:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    5ea0:	4b14      	ldr	r3, [pc, #80]	; (5ef4 <_delay_cycles+0x74>)
    5ea2:	4a15      	ldr	r2, [pc, #84]	; (5ef8 <_delay_cycles+0x78>)
    5ea4:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    5ea6:	46c0      	nop			; (mov r8, r8)
    5ea8:	4b12      	ldr	r3, [pc, #72]	; (5ef4 <_delay_cycles+0x74>)
    5eaa:	681a      	ldr	r2, [r3, #0]
    5eac:	2380      	movs	r3, #128	; 0x80
    5eae:	025b      	lsls	r3, r3, #9
    5eb0:	4013      	ands	r3, r2
    5eb2:	d0f9      	beq.n	5ea8 <_delay_cycles+0x28>
			;
		buf -= 0xFFFFFF;
    5eb4:	68bb      	ldr	r3, [r7, #8]
    5eb6:	4a11      	ldr	r2, [pc, #68]	; (5efc <_delay_cycles+0x7c>)
    5eb8:	4694      	mov	ip, r2
    5eba:	4463      	add	r3, ip
    5ebc:	60bb      	str	r3, [r7, #8]
	while (n--) {
    5ebe:	230f      	movs	r3, #15
    5ec0:	18fb      	adds	r3, r7, r3
    5ec2:	781b      	ldrb	r3, [r3, #0]
    5ec4:	220f      	movs	r2, #15
    5ec6:	18ba      	adds	r2, r7, r2
    5ec8:	1e59      	subs	r1, r3, #1
    5eca:	7011      	strb	r1, [r2, #0]
    5ecc:	2b00      	cmp	r3, #0
    5ece:	d1e4      	bne.n	5e9a <_delay_cycles+0x1a>
	}

	SysTick->LOAD = buf;
    5ed0:	4b08      	ldr	r3, [pc, #32]	; (5ef4 <_delay_cycles+0x74>)
    5ed2:	68ba      	ldr	r2, [r7, #8]
    5ed4:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = buf;
    5ed6:	4b07      	ldr	r3, [pc, #28]	; (5ef4 <_delay_cycles+0x74>)
    5ed8:	68ba      	ldr	r2, [r7, #8]
    5eda:	609a      	str	r2, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    5edc:	46c0      	nop			; (mov r8, r8)
    5ede:	4b05      	ldr	r3, [pc, #20]	; (5ef4 <_delay_cycles+0x74>)
    5ee0:	681a      	ldr	r2, [r3, #0]
    5ee2:	2380      	movs	r3, #128	; 0x80
    5ee4:	025b      	lsls	r3, r3, #9
    5ee6:	4013      	ands	r3, r2
    5ee8:	d0f9      	beq.n	5ede <_delay_cycles+0x5e>
		;
}
    5eea:	46c0      	nop			; (mov r8, r8)
    5eec:	46bd      	mov	sp, r7
    5eee:	b004      	add	sp, #16
    5ef0:	bd80      	pop	{r7, pc}
    5ef2:	46c0      	nop			; (mov r8, r8)
    5ef4:	e000e010 	.word	0xe000e010
    5ef8:	00ffffff 	.word	0x00ffffff
    5efc:	ff000001 	.word	0xff000001

00005f00 <__NVIC_EnableIRQ>:
{
    5f00:	b580      	push	{r7, lr}
    5f02:	b082      	sub	sp, #8
    5f04:	af00      	add	r7, sp, #0
    5f06:	0002      	movs	r2, r0
    5f08:	1dfb      	adds	r3, r7, #7
    5f0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    5f0c:	1dfb      	adds	r3, r7, #7
    5f0e:	781b      	ldrb	r3, [r3, #0]
    5f10:	2b7f      	cmp	r3, #127	; 0x7f
    5f12:	d809      	bhi.n	5f28 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5f14:	4b06      	ldr	r3, [pc, #24]	; (5f30 <__NVIC_EnableIRQ+0x30>)
    5f16:	1dfa      	adds	r2, r7, #7
    5f18:	7812      	ldrb	r2, [r2, #0]
    5f1a:	0011      	movs	r1, r2
    5f1c:	221f      	movs	r2, #31
    5f1e:	400a      	ands	r2, r1
    5f20:	2101      	movs	r1, #1
    5f22:	4091      	lsls	r1, r2
    5f24:	000a      	movs	r2, r1
    5f26:	601a      	str	r2, [r3, #0]
}
    5f28:	46c0      	nop			; (mov r8, r8)
    5f2a:	46bd      	mov	sp, r7
    5f2c:	b002      	add	sp, #8
    5f2e:	bd80      	pop	{r7, pc}
    5f30:	e000e100 	.word	0xe000e100

00005f34 <__NVIC_DisableIRQ>:
{
    5f34:	b580      	push	{r7, lr}
    5f36:	b082      	sub	sp, #8
    5f38:	af00      	add	r7, sp, #0
    5f3a:	0002      	movs	r2, r0
    5f3c:	1dfb      	adds	r3, r7, #7
    5f3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    5f40:	1dfb      	adds	r3, r7, #7
    5f42:	781b      	ldrb	r3, [r3, #0]
    5f44:	2b7f      	cmp	r3, #127	; 0x7f
    5f46:	d80e      	bhi.n	5f66 <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5f48:	4909      	ldr	r1, [pc, #36]	; (5f70 <__NVIC_DisableIRQ+0x3c>)
    5f4a:	1dfb      	adds	r3, r7, #7
    5f4c:	781b      	ldrb	r3, [r3, #0]
    5f4e:	001a      	movs	r2, r3
    5f50:	231f      	movs	r3, #31
    5f52:	4013      	ands	r3, r2
    5f54:	2201      	movs	r2, #1
    5f56:	409a      	lsls	r2, r3
    5f58:	0013      	movs	r3, r2
    5f5a:	2280      	movs	r2, #128	; 0x80
    5f5c:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    5f5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5f62:	f3bf 8f6f 	isb	sy
}
    5f66:	46c0      	nop			; (mov r8, r8)
    5f68:	46bd      	mov	sp, r7
    5f6a:	b002      	add	sp, #8
    5f6c:	bd80      	pop	{r7, pc}
    5f6e:	46c0      	nop			; (mov r8, r8)
    5f70:	e000e100 	.word	0xe000e100

00005f74 <__NVIC_ClearPendingIRQ>:
{
    5f74:	b580      	push	{r7, lr}
    5f76:	b082      	sub	sp, #8
    5f78:	af00      	add	r7, sp, #0
    5f7a:	0002      	movs	r2, r0
    5f7c:	1dfb      	adds	r3, r7, #7
    5f7e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    5f80:	1dfb      	adds	r3, r7, #7
    5f82:	781b      	ldrb	r3, [r3, #0]
    5f84:	2b7f      	cmp	r3, #127	; 0x7f
    5f86:	d80a      	bhi.n	5f9e <__NVIC_ClearPendingIRQ+0x2a>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5f88:	4907      	ldr	r1, [pc, #28]	; (5fa8 <__NVIC_ClearPendingIRQ+0x34>)
    5f8a:	1dfb      	adds	r3, r7, #7
    5f8c:	781b      	ldrb	r3, [r3, #0]
    5f8e:	001a      	movs	r2, r3
    5f90:	231f      	movs	r3, #31
    5f92:	4013      	ands	r3, r2
    5f94:	2201      	movs	r2, #1
    5f96:	409a      	lsls	r2, r3
    5f98:	23c0      	movs	r3, #192	; 0xc0
    5f9a:	005b      	lsls	r3, r3, #1
    5f9c:	50ca      	str	r2, [r1, r3]
}
    5f9e:	46c0      	nop			; (mov r8, r8)
    5fa0:	46bd      	mov	sp, r7
    5fa2:	b002      	add	sp, #8
    5fa4:	bd80      	pop	{r7, pc}
    5fa6:	46c0      	nop			; (mov r8, r8)
    5fa8:	e000e100 	.word	0xe000e100

00005fac <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    5fac:	b580      	push	{r7, lr}
    5fae:	b082      	sub	sp, #8
    5fb0:	af00      	add	r7, sp, #0
    5fb2:	6078      	str	r0, [r7, #4]
    5fb4:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    5fb6:	46c0      	nop			; (mov r8, r8)
    5fb8:	687b      	ldr	r3, [r7, #4]
    5fba:	689b      	ldr	r3, [r3, #8]
    5fbc:	683a      	ldr	r2, [r7, #0]
    5fbe:	4013      	ands	r3, r2
    5fc0:	d1fa      	bne.n	5fb8 <hri_tcc_wait_for_sync+0xc>
	};
}
    5fc2:	46c0      	nop			; (mov r8, r8)
    5fc4:	46bd      	mov	sp, r7
    5fc6:	b002      	add	sp, #8
    5fc8:	bd80      	pop	{r7, pc}

00005fca <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    5fca:	b580      	push	{r7, lr}
    5fcc:	b082      	sub	sp, #8
    5fce:	af00      	add	r7, sp, #0
    5fd0:	6078      	str	r0, [r7, #4]
    5fd2:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    5fd4:	687b      	ldr	r3, [r7, #4]
    5fd6:	689b      	ldr	r3, [r3, #8]
    5fd8:	683a      	ldr	r2, [r7, #0]
    5fda:	4013      	ands	r3, r2
    5fdc:	1e5a      	subs	r2, r3, #1
    5fde:	4193      	sbcs	r3, r2
    5fe0:	b2db      	uxtb	r3, r3
}
    5fe2:	0018      	movs	r0, r3
    5fe4:	46bd      	mov	sp, r7
    5fe6:	b002      	add	sp, #8
    5fe8:	bd80      	pop	{r7, pc}

00005fea <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC3;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    5fea:	b580      	push	{r7, lr}
    5fec:	b082      	sub	sp, #8
    5fee:	af00      	add	r7, sp, #0
    5ff0:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    5ff2:	687b      	ldr	r3, [r7, #4]
    5ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5ff6:	2201      	movs	r2, #1
    5ff8:	4013      	ands	r3, r2
    5ffa:	1e5a      	subs	r2, r3, #1
    5ffc:	4193      	sbcs	r3, r2
    5ffe:	b2db      	uxtb	r3, r3
}
    6000:	0018      	movs	r0, r3
    6002:	46bd      	mov	sp, r7
    6004:	b002      	add	sp, #8
    6006:	bd80      	pop	{r7, pc}

00006008 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    6008:	b580      	push	{r7, lr}
    600a:	b082      	sub	sp, #8
    600c:	af00      	add	r7, sp, #0
    600e:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	2201      	movs	r2, #1
    6014:	62da      	str	r2, [r3, #44]	; 0x2c
}
    6016:	46c0      	nop			; (mov r8, r8)
    6018:	46bd      	mov	sp, r7
    601a:	b002      	add	sp, #8
    601c:	bd80      	pop	{r7, pc}

0000601e <hri_tcc_clear_interrupt_ERR_bit>:
{
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_ERR) >> TCC_INTFLAG_ERR_Pos;
}

static inline void hri_tcc_clear_interrupt_ERR_bit(const void *const hw)
{
    601e:	b580      	push	{r7, lr}
    6020:	b082      	sub	sp, #8
    6022:	af00      	add	r7, sp, #0
    6024:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_ERR;
    6026:	687b      	ldr	r3, [r7, #4]
    6028:	2208      	movs	r2, #8
    602a:	62da      	str	r2, [r3, #44]	; 0x2c
}
    602c:	46c0      	nop			; (mov r8, r8)
    602e:	46bd      	mov	sp, r7
    6030:	b002      	add	sp, #8
    6032:	bd80      	pop	{r7, pc}

00006034 <hri_tcc_clear_CTRLB_LUPD_bit>:
		((Tcc *)hw)->CTRLBSET.reg = TCC_CTRLBSET_LUPD;
	}
}

static inline void hri_tcc_clear_CTRLB_LUPD_bit(const void *const hw)
{
    6034:	b580      	push	{r7, lr}
    6036:	b082      	sub	sp, #8
    6038:	af00      	add	r7, sp, #0
    603a:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_LUPD;
    603c:	687b      	ldr	r3, [r7, #4]
    603e:	2202      	movs	r2, #2
    6040:	711a      	strb	r2, [r3, #4]
}
    6042:	46c0      	nop			; (mov r8, r8)
    6044:	46bd      	mov	sp, r7
    6046:	b002      	add	sp, #8
    6048:	bd80      	pop	{r7, pc}

0000604a <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    604a:	b580      	push	{r7, lr}
    604c:	b082      	sub	sp, #8
    604e:	af00      	add	r7, sp, #0
    6050:	6078      	str	r0, [r7, #4]
    6052:	000a      	movs	r2, r1
    6054:	1cfb      	adds	r3, r7, #3
    6056:	701a      	strb	r2, [r3, #0]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    6058:	687b      	ldr	r3, [r7, #4]
    605a:	1cfa      	adds	r2, r7, #3
    605c:	7812      	ldrb	r2, [r2, #0]
    605e:	715a      	strb	r2, [r3, #5]
}
    6060:	46c0      	nop			; (mov r8, r8)
    6062:	46bd      	mov	sp, r7
    6064:	b002      	add	sp, #8
    6066:	bd80      	pop	{r7, pc}

00006068 <hri_tcc_get_INTEN_ERR_bit>:
{
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_ERR;
}

static inline bool hri_tcc_get_INTEN_ERR_bit(const void *const hw)
{
    6068:	b580      	push	{r7, lr}
    606a:	b082      	sub	sp, #8
    606c:	af00      	add	r7, sp, #0
    606e:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTENSET.reg & TCC_INTENSET_ERR) >> TCC_INTENSET_ERR_Pos;
    6070:	687b      	ldr	r3, [r7, #4]
    6072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6074:	08db      	lsrs	r3, r3, #3
    6076:	2201      	movs	r2, #1
    6078:	4013      	ands	r3, r2
    607a:	1e5a      	subs	r2, r3, #1
    607c:	4193      	sbcs	r3, r2
    607e:	b2db      	uxtb	r3, r3
}
    6080:	0018      	movs	r0, r3
    6082:	46bd      	mov	sp, r7
    6084:	b002      	add	sp, #8
    6086:	bd80      	pop	{r7, pc}

00006088 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6088:	b580      	push	{r7, lr}
    608a:	b082      	sub	sp, #8
    608c:	af00      	add	r7, sp, #0
    608e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    6090:	687b      	ldr	r3, [r7, #4]
    6092:	681b      	ldr	r3, [r3, #0]
    6094:	2202      	movs	r2, #2
    6096:	431a      	orrs	r2, r3
    6098:	687b      	ldr	r3, [r7, #4]
    609a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    609c:	687b      	ldr	r3, [r7, #4]
    609e:	2103      	movs	r1, #3
    60a0:	0018      	movs	r0, r3
    60a2:	4b03      	ldr	r3, [pc, #12]	; (60b0 <hri_tcc_set_CTRLA_ENABLE_bit+0x28>)
    60a4:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    60a6:	46c0      	nop			; (mov r8, r8)
    60a8:	46bd      	mov	sp, r7
    60aa:	b002      	add	sp, #8
    60ac:	bd80      	pop	{r7, pc}
    60ae:	46c0      	nop			; (mov r8, r8)
    60b0:	00005fad 	.word	0x00005fad

000060b4 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    60b4:	b580      	push	{r7, lr}
    60b6:	b084      	sub	sp, #16
    60b8:	af00      	add	r7, sp, #0
    60ba:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    60bc:	687b      	ldr	r3, [r7, #4]
    60be:	2103      	movs	r1, #3
    60c0:	0018      	movs	r0, r3
    60c2:	4b09      	ldr	r3, [pc, #36]	; (60e8 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    60c4:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    60c6:	687b      	ldr	r3, [r7, #4]
    60c8:	681b      	ldr	r3, [r3, #0]
    60ca:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    60cc:	68fb      	ldr	r3, [r7, #12]
    60ce:	085b      	lsrs	r3, r3, #1
    60d0:	2201      	movs	r2, #1
    60d2:	4013      	ands	r3, r2
    60d4:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    60d6:	68fb      	ldr	r3, [r7, #12]
    60d8:	1e5a      	subs	r2, r3, #1
    60da:	4193      	sbcs	r3, r2
    60dc:	b2db      	uxtb	r3, r3
}
    60de:	0018      	movs	r0, r3
    60e0:	46bd      	mov	sp, r7
    60e2:	b004      	add	sp, #16
    60e4:	bd80      	pop	{r7, pc}
    60e6:	46c0      	nop			; (mov r8, r8)
    60e8:	00005fad 	.word	0x00005fad

000060ec <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    60ec:	b580      	push	{r7, lr}
    60ee:	b082      	sub	sp, #8
    60f0:	af00      	add	r7, sp, #0
    60f2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    60f4:	687b      	ldr	r3, [r7, #4]
    60f6:	681b      	ldr	r3, [r3, #0]
    60f8:	2202      	movs	r2, #2
    60fa:	4393      	bics	r3, r2
    60fc:	001a      	movs	r2, r3
    60fe:	687b      	ldr	r3, [r7, #4]
    6100:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6102:	687b      	ldr	r3, [r7, #4]
    6104:	2103      	movs	r1, #3
    6106:	0018      	movs	r0, r3
    6108:	4b02      	ldr	r3, [pc, #8]	; (6114 <hri_tcc_clear_CTRLA_ENABLE_bit+0x28>)
    610a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    610c:	46c0      	nop			; (mov r8, r8)
    610e:	46bd      	mov	sp, r7
    6110:	b002      	add	sp, #8
    6112:	bd80      	pop	{r7, pc}
    6114:	00005fad 	.word	0x00005fad

00006118 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    6118:	b580      	push	{r7, lr}
    611a:	b084      	sub	sp, #16
    611c:	af00      	add	r7, sp, #0
    611e:	6078      	str	r0, [r7, #4]
    6120:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6122:	687b      	ldr	r3, [r7, #4]
    6124:	2103      	movs	r1, #3
    6126:	0018      	movs	r0, r3
    6128:	4b06      	ldr	r3, [pc, #24]	; (6144 <hri_tcc_get_CTRLA_reg+0x2c>)
    612a:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    612c:	687b      	ldr	r3, [r7, #4]
    612e:	681b      	ldr	r3, [r3, #0]
    6130:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6132:	68fb      	ldr	r3, [r7, #12]
    6134:	683a      	ldr	r2, [r7, #0]
    6136:	4013      	ands	r3, r2
    6138:	60fb      	str	r3, [r7, #12]
	return tmp;
    613a:	68fb      	ldr	r3, [r7, #12]
}
    613c:	0018      	movs	r0, r3
    613e:	46bd      	mov	sp, r7
    6140:	b004      	add	sp, #16
    6142:	bd80      	pop	{r7, pc}
    6144:	00005fad 	.word	0x00005fad

00006148 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    6148:	b580      	push	{r7, lr}
    614a:	b082      	sub	sp, #8
    614c:	af00      	add	r7, sp, #0
    614e:	6078      	str	r0, [r7, #4]
    6150:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    6152:	687b      	ldr	r3, [r7, #4]
    6154:	683a      	ldr	r2, [r7, #0]
    6156:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6158:	687b      	ldr	r3, [r7, #4]
    615a:	2103      	movs	r1, #3
    615c:	0018      	movs	r0, r3
    615e:	4b03      	ldr	r3, [pc, #12]	; (616c <hri_tcc_write_CTRLA_reg+0x24>)
    6160:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6162:	46c0      	nop			; (mov r8, r8)
    6164:	46bd      	mov	sp, r7
    6166:	b002      	add	sp, #8
    6168:	bd80      	pop	{r7, pc}
    616a:	46c0      	nop			; (mov r8, r8)
    616c:	00005fad 	.word	0x00005fad

00006170 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    6170:	b580      	push	{r7, lr}
    6172:	b082      	sub	sp, #8
    6174:	af00      	add	r7, sp, #0
    6176:	6078      	str	r0, [r7, #4]
    6178:	000a      	movs	r2, r1
    617a:	1cfb      	adds	r3, r7, #3
    617c:	701a      	strb	r2, [r3, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    617e:	687b      	ldr	r3, [r7, #4]
    6180:	1cfa      	adds	r2, r7, #3
    6182:	7812      	ldrb	r2, [r2, #0]
    6184:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    6186:	46c0      	nop			; (mov r8, r8)
    6188:	46bd      	mov	sp, r7
    618a:	b002      	add	sp, #8
    618c:	bd80      	pop	{r7, pc}

0000618e <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    618e:	b580      	push	{r7, lr}
    6190:	b082      	sub	sp, #8
    6192:	af00      	add	r7, sp, #0
    6194:	6078      	str	r0, [r7, #4]
    6196:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    6198:	687b      	ldr	r3, [r7, #4]
    619a:	683a      	ldr	r2, [r7, #0]
    619c:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    619e:	46c0      	nop			; (mov r8, r8)
    61a0:	46bd      	mov	sp, r7
    61a2:	b002      	add	sp, #8
    61a4:	bd80      	pop	{r7, pc}
	...

000061a8 <hri_tcc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_WAVE_reg(const void *const hw, hri_tcc_wave_reg_t data)
{
    61a8:	b580      	push	{r7, lr}
    61aa:	b082      	sub	sp, #8
    61ac:	af00      	add	r7, sp, #0
    61ae:	6078      	str	r0, [r7, #4]
    61b0:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->WAVE.reg = data;
    61b2:	687b      	ldr	r3, [r7, #4]
    61b4:	683a      	ldr	r2, [r7, #0]
    61b6:	63da      	str	r2, [r3, #60]	; 0x3c
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_MASK);
    61b8:	4a04      	ldr	r2, [pc, #16]	; (61cc <hri_tcc_write_WAVE_reg+0x24>)
    61ba:	687b      	ldr	r3, [r7, #4]
    61bc:	0011      	movs	r1, r2
    61be:	0018      	movs	r0, r3
    61c0:	4b03      	ldr	r3, [pc, #12]	; (61d0 <hri_tcc_write_WAVE_reg+0x28>)
    61c2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    61c4:	46c0      	nop			; (mov r8, r8)
    61c6:	46bd      	mov	sp, r7
    61c8:	b002      	add	sp, #8
    61ca:	bd80      	pop	{r7, pc}
    61cc:	007f0fff 	.word	0x007f0fff
    61d0:	00005fad 	.word	0x00005fad

000061d4 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    61d4:	b580      	push	{r7, lr}
    61d6:	b082      	sub	sp, #8
    61d8:	af00      	add	r7, sp, #0
    61da:	6078      	str	r0, [r7, #4]
    61dc:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    61de:	687b      	ldr	r3, [r7, #4]
    61e0:	683a      	ldr	r2, [r7, #0]
    61e2:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    61e4:	687b      	ldr	r3, [r7, #4]
    61e6:	2180      	movs	r1, #128	; 0x80
    61e8:	0018      	movs	r0, r3
    61ea:	4b03      	ldr	r3, [pc, #12]	; (61f8 <hri_tcc_write_PER_reg+0x24>)
    61ec:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    61ee:	46c0      	nop			; (mov r8, r8)
    61f0:	46bd      	mov	sp, r7
    61f2:	b002      	add	sp, #8
    61f4:	bd80      	pop	{r7, pc}
    61f6:	46c0      	nop			; (mov r8, r8)
    61f8:	00005fad 	.word	0x00005fad

000061fc <hri_tcc_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_CC_reg(const void *const hw, uint8_t index, hri_tcc_cc_reg_t data)
{
    61fc:	b580      	push	{r7, lr}
    61fe:	b084      	sub	sp, #16
    6200:	af00      	add	r7, sp, #0
    6202:	60f8      	str	r0, [r7, #12]
    6204:	607a      	str	r2, [r7, #4]
    6206:	230b      	movs	r3, #11
    6208:	18fb      	adds	r3, r7, r3
    620a:	1c0a      	adds	r2, r1, #0
    620c:	701a      	strb	r2, [r3, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CC[index].reg = data;
    620e:	230b      	movs	r3, #11
    6210:	18fb      	adds	r3, r7, r3
    6212:	781b      	ldrb	r3, [r3, #0]
    6214:	68fa      	ldr	r2, [r7, #12]
    6216:	3310      	adds	r3, #16
    6218:	009b      	lsls	r3, r3, #2
    621a:	18d3      	adds	r3, r2, r3
    621c:	3304      	adds	r3, #4
    621e:	687a      	ldr	r2, [r7, #4]
    6220:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CC1 | TCC_SYNCBUSY_CC2 | TCC_SYNCBUSY_CC3);
    6222:	23f0      	movs	r3, #240	; 0xf0
    6224:	011a      	lsls	r2, r3, #4
    6226:	68fb      	ldr	r3, [r7, #12]
    6228:	0011      	movs	r1, r2
    622a:	0018      	movs	r0, r3
    622c:	4b02      	ldr	r3, [pc, #8]	; (6238 <hri_tcc_write_CC_reg+0x3c>)
    622e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6230:	46c0      	nop			; (mov r8, r8)
    6232:	46bd      	mov	sp, r7
    6234:	b004      	add	sp, #16
    6236:	bd80      	pop	{r7, pc}
    6238:	00005fad 	.word	0x00005fad

0000623c <hri_tcc_write_PERB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PERB_reg(const void *const hw, hri_tcc_perb_reg_t data)
{
    623c:	b580      	push	{r7, lr}
    623e:	b082      	sub	sp, #8
    6240:	af00      	add	r7, sp, #0
    6242:	6078      	str	r0, [r7, #4]
    6244:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PERB.reg = data;
    6246:	687b      	ldr	r3, [r7, #4]
    6248:	683a      	ldr	r2, [r7, #0]
    624a:	66da      	str	r2, [r3, #108]	; 0x6c
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PERB);
    624c:	2380      	movs	r3, #128	; 0x80
    624e:	02da      	lsls	r2, r3, #11
    6250:	687b      	ldr	r3, [r7, #4]
    6252:	0011      	movs	r1, r2
    6254:	0018      	movs	r0, r3
    6256:	4b03      	ldr	r3, [pc, #12]	; (6264 <hri_tcc_write_PERB_reg+0x28>)
    6258:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    625a:	46c0      	nop			; (mov r8, r8)
    625c:	46bd      	mov	sp, r7
    625e:	b002      	add	sp, #8
    6260:	bd80      	pop	{r7, pc}
    6262:	46c0      	nop			; (mov r8, r8)
    6264:	00005fad 	.word	0x00005fad

00006268 <hri_tcc_write_CCB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_CCB_reg(const void *const hw, uint8_t index, hri_tcc_ccb_reg_t data)
{
    6268:	b580      	push	{r7, lr}
    626a:	b084      	sub	sp, #16
    626c:	af00      	add	r7, sp, #0
    626e:	60f8      	str	r0, [r7, #12]
    6270:	607a      	str	r2, [r7, #4]
    6272:	230b      	movs	r3, #11
    6274:	18fb      	adds	r3, r7, r3
    6276:	1c0a      	adds	r2, r1, #0
    6278:	701a      	strb	r2, [r3, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CCB[index].reg = data;
    627a:	230b      	movs	r3, #11
    627c:	18fb      	adds	r3, r7, r3
    627e:	781a      	ldrb	r2, [r3, #0]
    6280:	68fb      	ldr	r3, [r7, #12]
    6282:	321c      	adds	r2, #28
    6284:	0092      	lsls	r2, r2, #2
    6286:	6879      	ldr	r1, [r7, #4]
    6288:	50d1      	str	r1, [r2, r3]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_CCB0 | TCC_SYNCBUSY_CCB1 | TCC_SYNCBUSY_CCB2 | TCC_SYNCBUSY_CCB3);
    628a:	23f0      	movs	r3, #240	; 0xf0
    628c:	03da      	lsls	r2, r3, #15
    628e:	68fb      	ldr	r3, [r7, #12]
    6290:	0011      	movs	r1, r2
    6292:	0018      	movs	r0, r3
    6294:	4b02      	ldr	r3, [pc, #8]	; (62a0 <hri_tcc_write_CCB_reg+0x38>)
    6296:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6298:	46c0      	nop			; (mov r8, r8)
    629a:	46bd      	mov	sp, r7
    629c:	b004      	add	sp, #16
    629e:	bd80      	pop	{r7, pc}
    62a0:	00005fad 	.word	0x00005fad

000062a4 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    62a4:	b580      	push	{r7, lr}
    62a6:	b082      	sub	sp, #8
    62a8:	af00      	add	r7, sp, #0
    62aa:	6078      	str	r0, [r7, #4]
    62ac:	6039      	str	r1, [r7, #0]
	if (hw == TCC1) {
    62ae:	687b      	ldr	r3, [r7, #4]
    62b0:	4a04      	ldr	r2, [pc, #16]	; (62c4 <_tcc_init_irq_param+0x20>)
    62b2:	4293      	cmp	r3, r2
    62b4:	d102      	bne.n	62bc <_tcc_init_irq_param+0x18>
		_tcc1_dev = (struct _pwm_device *)dev;
    62b6:	4b04      	ldr	r3, [pc, #16]	; (62c8 <_tcc_init_irq_param+0x24>)
    62b8:	683a      	ldr	r2, [r7, #0]
    62ba:	601a      	str	r2, [r3, #0]
	}
}
    62bc:	46c0      	nop			; (mov r8, r8)
    62be:	46bd      	mov	sp, r7
    62c0:	b002      	add	sp, #8
    62c2:	bd80      	pop	{r7, pc}
    62c4:	42002400 	.word	0x42002400
    62c8:	2000021c 	.word	0x2000021c

000062cc <_pwm_init>:
/**
 * \brief Initialize TCC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    62cc:	b580      	push	{r7, lr}
    62ce:	b084      	sub	sp, #16
    62d0:	af00      	add	r7, sp, #0
    62d2:	6078      	str	r0, [r7, #4]
    62d4:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    62d6:	683b      	ldr	r3, [r7, #0]
    62d8:	0018      	movs	r0, r3
    62da:	4b67      	ldr	r3, [pc, #412]	; (6478 <_pwm_init+0x1ac>)
    62dc:	4798      	blx	r3
    62de:	0003      	movs	r3, r0
    62e0:	60fb      	str	r3, [r7, #12]
	if (cfg == NULL) {
    62e2:	68fb      	ldr	r3, [r7, #12]
    62e4:	2b00      	cmp	r3, #0
    62e6:	d102      	bne.n	62ee <_pwm_init+0x22>
		return ERR_NOT_FOUND;
    62e8:	230a      	movs	r3, #10
    62ea:	425b      	negs	r3, r3
    62ec:	e0bf      	b.n	646e <_pwm_init+0x1a2>
	}
	struct tcc_pwm_cfg *cfg_pwm = _get_tcc_pwm_cfg(hw);
    62ee:	683b      	ldr	r3, [r7, #0]
    62f0:	0018      	movs	r0, r3
    62f2:	4b62      	ldr	r3, [pc, #392]	; (647c <_pwm_init+0x1b0>)
    62f4:	4798      	blx	r3
    62f6:	0003      	movs	r3, r0
    62f8:	60bb      	str	r3, [r7, #8]
	if (cfg_pwm == NULL) {
    62fa:	68bb      	ldr	r3, [r7, #8]
    62fc:	2b00      	cmp	r3, #0
    62fe:	d102      	bne.n	6306 <_pwm_init+0x3a>
		return ERR_NOT_FOUND;
    6300:	230a      	movs	r3, #10
    6302:	425b      	negs	r3, r3
    6304:	e0b3      	b.n	646e <_pwm_init+0x1a2>
	}

	device->hw = hw;
    6306:	687b      	ldr	r3, [r7, #4]
    6308:	683a      	ldr	r2, [r7, #0]
    630a:	611a      	str	r2, [r3, #16]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    630c:	683b      	ldr	r3, [r7, #0]
    630e:	2101      	movs	r1, #1
    6310:	0018      	movs	r0, r3
    6312:	4b5b      	ldr	r3, [pc, #364]	; (6480 <_pwm_init+0x1b4>)
    6314:	4798      	blx	r3
    6316:	0003      	movs	r3, r0
    6318:	001a      	movs	r2, r3
    631a:	2301      	movs	r3, #1
    631c:	4053      	eors	r3, r2
    631e:	b2db      	uxtb	r3, r3
    6320:	2b00      	cmp	r3, #0
    6322:	d014      	beq.n	634e <_pwm_init+0x82>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    6324:	683b      	ldr	r3, [r7, #0]
    6326:	2102      	movs	r1, #2
    6328:	0018      	movs	r0, r3
    632a:	4b56      	ldr	r3, [pc, #344]	; (6484 <_pwm_init+0x1b8>)
    632c:	4798      	blx	r3
    632e:	1e03      	subs	r3, r0, #0
    6330:	d008      	beq.n	6344 <_pwm_init+0x78>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    6332:	683b      	ldr	r3, [r7, #0]
    6334:	0018      	movs	r0, r3
    6336:	4b54      	ldr	r3, [pc, #336]	; (6488 <_pwm_init+0x1bc>)
    6338:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    633a:	683b      	ldr	r3, [r7, #0]
    633c:	2102      	movs	r1, #2
    633e:	0018      	movs	r0, r3
    6340:	4b52      	ldr	r3, [pc, #328]	; (648c <_pwm_init+0x1c0>)
    6342:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    6344:	683b      	ldr	r3, [r7, #0]
    6346:	2101      	movs	r1, #1
    6348:	0018      	movs	r0, r3
    634a:	4b51      	ldr	r3, [pc, #324]	; (6490 <_pwm_init+0x1c4>)
    634c:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    634e:	683b      	ldr	r3, [r7, #0]
    6350:	2101      	movs	r1, #1
    6352:	0018      	movs	r0, r3
    6354:	4b4d      	ldr	r3, [pc, #308]	; (648c <_pwm_init+0x1c0>)
    6356:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    6358:	68fb      	ldr	r3, [r7, #12]
    635a:	689a      	ldr	r2, [r3, #8]
    635c:	683b      	ldr	r3, [r7, #0]
    635e:	0011      	movs	r1, r2
    6360:	0018      	movs	r0, r3
    6362:	4b4b      	ldr	r3, [pc, #300]	; (6490 <_pwm_init+0x1c4>)
    6364:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    6366:	68fb      	ldr	r3, [r7, #12]
    6368:	7b1a      	ldrb	r2, [r3, #12]
    636a:	683b      	ldr	r3, [r7, #0]
    636c:	0011      	movs	r1, r2
    636e:	0018      	movs	r0, r3
    6370:	4b48      	ldr	r3, [pc, #288]	; (6494 <_pwm_init+0x1c8>)
    6372:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    6374:	68fb      	ldr	r3, [r7, #12]
    6376:	7b5a      	ldrb	r2, [r3, #13]
    6378:	683b      	ldr	r3, [r7, #0]
    637a:	0011      	movs	r1, r2
    637c:	0018      	movs	r0, r3
    637e:	4b46      	ldr	r3, [pc, #280]	; (6498 <_pwm_init+0x1cc>)
    6380:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    6382:	68fb      	ldr	r3, [r7, #12]
    6384:	691a      	ldr	r2, [r3, #16]
    6386:	683b      	ldr	r3, [r7, #0]
    6388:	0011      	movs	r1, r2
    638a:	0018      	movs	r0, r3
    638c:	4b43      	ldr	r3, [pc, #268]	; (649c <_pwm_init+0x1d0>)
    638e:	4798      	blx	r3

	hri_tcc_write_WAVE_reg(hw, cfg_pwm->wave);
    6390:	68bb      	ldr	r3, [r7, #8]
    6392:	691a      	ldr	r2, [r3, #16]
    6394:	683b      	ldr	r3, [r7, #0]
    6396:	0011      	movs	r1, r2
    6398:	0018      	movs	r0, r3
    639a:	4b41      	ldr	r3, [pc, #260]	; (64a0 <_pwm_init+0x1d4>)
    639c:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg_pwm->period);
    639e:	68bb      	ldr	r3, [r7, #8]
    63a0:	689a      	ldr	r2, [r3, #8]
    63a2:	683b      	ldr	r3, [r7, #0]
    63a4:	0011      	movs	r1, r2
    63a6:	0018      	movs	r0, r3
    63a8:	4b3e      	ldr	r3, [pc, #248]	; (64a4 <_pwm_init+0x1d8>)
    63aa:	4798      	blx	r3
	cfg->per = cfg_pwm->period;
    63ac:	68bb      	ldr	r3, [r7, #8]
    63ae:	689a      	ldr	r2, [r3, #8]
    63b0:	68fb      	ldr	r3, [r7, #12]
    63b2:	625a      	str	r2, [r3, #36]	; 0x24
	switch (cfg_pwm->sel_ch) {
    63b4:	68bb      	ldr	r3, [r7, #8]
    63b6:	795b      	ldrb	r3, [r3, #5]
    63b8:	2b01      	cmp	r3, #1
    63ba:	d014      	beq.n	63e6 <_pwm_init+0x11a>
    63bc:	dc02      	bgt.n	63c4 <_pwm_init+0xf8>
    63be:	2b00      	cmp	r3, #0
    63c0:	d005      	beq.n	63ce <_pwm_init+0x102>
    63c2:	e034      	b.n	642e <_pwm_init+0x162>
    63c4:	2b02      	cmp	r3, #2
    63c6:	d01a      	beq.n	63fe <_pwm_init+0x132>
    63c8:	2b03      	cmp	r3, #3
    63ca:	d024      	beq.n	6416 <_pwm_init+0x14a>
    63cc:	e02f      	b.n	642e <_pwm_init+0x162>
	case 0:
		cfg->cc0 = cfg_pwm->duty_cycle;
    63ce:	68bb      	ldr	r3, [r7, #8]
    63d0:	68da      	ldr	r2, [r3, #12]
    63d2:	68fb      	ldr	r3, [r7, #12]
    63d4:	615a      	str	r2, [r3, #20]
		hri_tcc_write_CC_reg(hw, 0, cfg->cc0);
    63d6:	68fb      	ldr	r3, [r7, #12]
    63d8:	695a      	ldr	r2, [r3, #20]
    63da:	683b      	ldr	r3, [r7, #0]
    63dc:	2100      	movs	r1, #0
    63de:	0018      	movs	r0, r3
    63e0:	4b31      	ldr	r3, [pc, #196]	; (64a8 <_pwm_init+0x1dc>)
    63e2:	4798      	blx	r3
		break;
    63e4:	e026      	b.n	6434 <_pwm_init+0x168>
	case 1:
		cfg->cc1 = cfg_pwm->duty_cycle;
    63e6:	68bb      	ldr	r3, [r7, #8]
    63e8:	68da      	ldr	r2, [r3, #12]
    63ea:	68fb      	ldr	r3, [r7, #12]
    63ec:	619a      	str	r2, [r3, #24]
		hri_tcc_write_CC_reg(hw, 1, cfg->cc1);
    63ee:	68fb      	ldr	r3, [r7, #12]
    63f0:	699a      	ldr	r2, [r3, #24]
    63f2:	683b      	ldr	r3, [r7, #0]
    63f4:	2101      	movs	r1, #1
    63f6:	0018      	movs	r0, r3
    63f8:	4b2b      	ldr	r3, [pc, #172]	; (64a8 <_pwm_init+0x1dc>)
    63fa:	4798      	blx	r3
		break;
    63fc:	e01a      	b.n	6434 <_pwm_init+0x168>
	case 2:
		cfg->cc2 = cfg_pwm->duty_cycle;
    63fe:	68bb      	ldr	r3, [r7, #8]
    6400:	68da      	ldr	r2, [r3, #12]
    6402:	68fb      	ldr	r3, [r7, #12]
    6404:	61da      	str	r2, [r3, #28]
		hri_tcc_write_CC_reg(hw, 2, cfg->cc2);
    6406:	68fb      	ldr	r3, [r7, #12]
    6408:	69da      	ldr	r2, [r3, #28]
    640a:	683b      	ldr	r3, [r7, #0]
    640c:	2102      	movs	r1, #2
    640e:	0018      	movs	r0, r3
    6410:	4b25      	ldr	r3, [pc, #148]	; (64a8 <_pwm_init+0x1dc>)
    6412:	4798      	blx	r3
		break;
    6414:	e00e      	b.n	6434 <_pwm_init+0x168>
	case 3:
		cfg->cc3 = cfg_pwm->duty_cycle;
    6416:	68bb      	ldr	r3, [r7, #8]
    6418:	68da      	ldr	r2, [r3, #12]
    641a:	68fb      	ldr	r3, [r7, #12]
    641c:	621a      	str	r2, [r3, #32]
		hri_tcc_write_CC_reg(hw, 3, cfg->cc3);
    641e:	68fb      	ldr	r3, [r7, #12]
    6420:	6a1a      	ldr	r2, [r3, #32]
    6422:	683b      	ldr	r3, [r7, #0]
    6424:	2103      	movs	r1, #3
    6426:	0018      	movs	r0, r3
    6428:	4b1f      	ldr	r3, [pc, #124]	; (64a8 <_pwm_init+0x1dc>)
    642a:	4798      	blx	r3
		break;
    642c:	e002      	b.n	6434 <_pwm_init+0x168>
	default:
		return ERR_NO_RESOURCE;
    642e:	231c      	movs	r3, #28
    6430:	425b      	negs	r3, r3
    6432:	e01c      	b.n	646e <_pwm_init+0x1a2>
		break;
	}
	hri_tcc_clear_CTRLB_LUPD_bit(hw);
    6434:	683b      	ldr	r3, [r7, #0]
    6436:	0018      	movs	r0, r3
    6438:	4b1c      	ldr	r3, [pc, #112]	; (64ac <_pwm_init+0x1e0>)
    643a:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    643c:	687a      	ldr	r2, [r7, #4]
    643e:	683b      	ldr	r3, [r7, #0]
    6440:	0011      	movs	r1, r2
    6442:	0018      	movs	r0, r3
    6444:	4b1a      	ldr	r3, [pc, #104]	; (64b0 <_pwm_init+0x1e4>)
    6446:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg_pwm->irq);
    6448:	68bb      	ldr	r3, [r7, #8]
    644a:	791b      	ldrb	r3, [r3, #4]
    644c:	b25b      	sxtb	r3, r3
    644e:	0018      	movs	r0, r3
    6450:	4b18      	ldr	r3, [pc, #96]	; (64b4 <_pwm_init+0x1e8>)
    6452:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg_pwm->irq);
    6454:	68bb      	ldr	r3, [r7, #8]
    6456:	791b      	ldrb	r3, [r3, #4]
    6458:	b25b      	sxtb	r3, r3
    645a:	0018      	movs	r0, r3
    645c:	4b16      	ldr	r3, [pc, #88]	; (64b8 <_pwm_init+0x1ec>)
    645e:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg_pwm->irq);
    6460:	68bb      	ldr	r3, [r7, #8]
    6462:	791b      	ldrb	r3, [r3, #4]
    6464:	b25b      	sxtb	r3, r3
    6466:	0018      	movs	r0, r3
    6468:	4b14      	ldr	r3, [pc, #80]	; (64bc <_pwm_init+0x1f0>)
    646a:	4798      	blx	r3

	return ERR_NONE;
    646c:	2300      	movs	r3, #0
}
    646e:	0018      	movs	r0, r3
    6470:	46bd      	mov	sp, r7
    6472:	b004      	add	sp, #16
    6474:	bd80      	pop	{r7, pc}
    6476:	46c0      	nop			; (mov r8, r8)
    6478:	000065f1 	.word	0x000065f1
    647c:	00006655 	.word	0x00006655
    6480:	00005fcb 	.word	0x00005fcb
    6484:	00006119 	.word	0x00006119
    6488:	000060ed 	.word	0x000060ed
    648c:	00005fad 	.word	0x00005fad
    6490:	00006149 	.word	0x00006149
    6494:	0000604b 	.word	0x0000604b
    6498:	00006171 	.word	0x00006171
    649c:	0000618f 	.word	0x0000618f
    64a0:	000061a9 	.word	0x000061a9
    64a4:	000061d5 	.word	0x000061d5
    64a8:	000061fd 	.word	0x000061fd
    64ac:	00006035 	.word	0x00006035
    64b0:	000062a5 	.word	0x000062a5
    64b4:	00005f35 	.word	0x00005f35
    64b8:	00005f75 	.word	0x00005f75
    64bc:	00005f01 	.word	0x00005f01

000064c0 <_pwm_enable>:
}
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    64c0:	b580      	push	{r7, lr}
    64c2:	b082      	sub	sp, #8
    64c4:	af00      	add	r7, sp, #0
    64c6:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    64c8:	687b      	ldr	r3, [r7, #4]
    64ca:	691b      	ldr	r3, [r3, #16]
    64cc:	0018      	movs	r0, r3
    64ce:	4b03      	ldr	r3, [pc, #12]	; (64dc <_pwm_enable+0x1c>)
    64d0:	4798      	blx	r3
}
    64d2:	46c0      	nop			; (mov r8, r8)
    64d4:	46bd      	mov	sp, r7
    64d6:	b002      	add	sp, #8
    64d8:	bd80      	pop	{r7, pc}
    64da:	46c0      	nop			; (mov r8, r8)
    64dc:	00006089 	.word	0x00006089

000064e0 <_pwm_set_param>:
}
/**
 * \brief Set PWM parameter
 */
void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
    64e0:	b580      	push	{r7, lr}
    64e2:	b086      	sub	sp, #24
    64e4:	af00      	add	r7, sp, #0
    64e6:	60f8      	str	r0, [r7, #12]
    64e8:	60b9      	str	r1, [r7, #8]
    64ea:	607a      	str	r2, [r7, #4]
	void *const         hw      = device->hw;
    64ec:	68fb      	ldr	r3, [r7, #12]
    64ee:	691b      	ldr	r3, [r3, #16]
    64f0:	617b      	str	r3, [r7, #20]
	struct tcc_pwm_cfg *cfg_pwm = _get_tcc_pwm_cfg(hw);
    64f2:	697b      	ldr	r3, [r7, #20]
    64f4:	0018      	movs	r0, r3
    64f6:	4b0c      	ldr	r3, [pc, #48]	; (6528 <_pwm_set_param+0x48>)
    64f8:	4798      	blx	r3
    64fa:	0003      	movs	r3, r0
    64fc:	613b      	str	r3, [r7, #16]
	if (cfg_pwm != NULL) {
    64fe:	693b      	ldr	r3, [r7, #16]
    6500:	2b00      	cmp	r3, #0
    6502:	d00c      	beq.n	651e <_pwm_set_param+0x3e>
		hri_tcc_write_PERB_reg(hw, period);
    6504:	68ba      	ldr	r2, [r7, #8]
    6506:	697b      	ldr	r3, [r7, #20]
    6508:	0011      	movs	r1, r2
    650a:	0018      	movs	r0, r3
    650c:	4b07      	ldr	r3, [pc, #28]	; (652c <_pwm_set_param+0x4c>)
    650e:	4798      	blx	r3
		hri_tcc_write_CCB_reg(hw, cfg_pwm->sel_ch, duty_cycle);
    6510:	693b      	ldr	r3, [r7, #16]
    6512:	7959      	ldrb	r1, [r3, #5]
    6514:	687a      	ldr	r2, [r7, #4]
    6516:	697b      	ldr	r3, [r7, #20]
    6518:	0018      	movs	r0, r3
    651a:	4b05      	ldr	r3, [pc, #20]	; (6530 <_pwm_set_param+0x50>)
    651c:	4798      	blx	r3
		;
	}
}
    651e:	46c0      	nop			; (mov r8, r8)
    6520:	46bd      	mov	sp, r7
    6522:	b006      	add	sp, #24
    6524:	bd80      	pop	{r7, pc}
    6526:	46c0      	nop			; (mov r8, r8)
    6528:	00006655 	.word	0x00006655
    652c:	0000623d 	.word	0x0000623d
    6530:	00006269 	.word	0x00006269

00006534 <_pwm_is_enabled>:
}
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    6534:	b580      	push	{r7, lr}
    6536:	b082      	sub	sp, #8
    6538:	af00      	add	r7, sp, #0
    653a:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    653c:	687b      	ldr	r3, [r7, #4]
    653e:	691b      	ldr	r3, [r3, #16]
    6540:	0018      	movs	r0, r3
    6542:	4b03      	ldr	r3, [pc, #12]	; (6550 <_pwm_is_enabled+0x1c>)
    6544:	4798      	blx	r3
    6546:	0003      	movs	r3, r0
}
    6548:	0018      	movs	r0, r3
    654a:	46bd      	mov	sp, r7
    654c:	b002      	add	sp, #8
    654e:	bd80      	pop	{r7, pc}
    6550:	000060b5 	.word	0x000060b5

00006554 <_tcc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tcc_get_pwm(void)
{
    6554:	b580      	push	{r7, lr}
    6556:	af00      	add	r7, sp, #0
	return NULL;
    6558:	2300      	movs	r3, #0
}
    655a:	0018      	movs	r0, r3
    655c:	46bd      	mov	sp, r7
    655e:	bd80      	pop	{r7, pc}

00006560 <tcc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tcc_pwm_interrupt_handler(struct _pwm_device *device)
{
    6560:	b580      	push	{r7, lr}
    6562:	b084      	sub	sp, #16
    6564:	af00      	add	r7, sp, #0
    6566:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    6568:	687b      	ldr	r3, [r7, #4]
    656a:	691b      	ldr	r3, [r3, #16]
    656c:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    656e:	68fb      	ldr	r3, [r7, #12]
    6570:	0018      	movs	r0, r3
    6572:	4b14      	ldr	r3, [pc, #80]	; (65c4 <tcc_pwm_interrupt_handler+0x64>)
    6574:	4798      	blx	r3
    6576:	1e03      	subs	r3, r0, #0
    6578:	d00c      	beq.n	6594 <tcc_pwm_interrupt_handler+0x34>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    657a:	68fb      	ldr	r3, [r7, #12]
    657c:	0018      	movs	r0, r3
    657e:	4b12      	ldr	r3, [pc, #72]	; (65c8 <tcc_pwm_interrupt_handler+0x68>)
    6580:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    6582:	687b      	ldr	r3, [r7, #4]
    6584:	681b      	ldr	r3, [r3, #0]
    6586:	2b00      	cmp	r3, #0
    6588:	d004      	beq.n	6594 <tcc_pwm_interrupt_handler+0x34>
			device->callback.pwm_period_cb(device);
    658a:	687b      	ldr	r3, [r7, #4]
    658c:	681b      	ldr	r3, [r3, #0]
    658e:	687a      	ldr	r2, [r7, #4]
    6590:	0010      	movs	r0, r2
    6592:	4798      	blx	r3
		}
	}
	if (hri_tcc_get_INTEN_ERR_bit(hw)) {
    6594:	68fb      	ldr	r3, [r7, #12]
    6596:	0018      	movs	r0, r3
    6598:	4b0c      	ldr	r3, [pc, #48]	; (65cc <tcc_pwm_interrupt_handler+0x6c>)
    659a:	4798      	blx	r3
    659c:	1e03      	subs	r3, r0, #0
    659e:	d00c      	beq.n	65ba <tcc_pwm_interrupt_handler+0x5a>
		hri_tcc_clear_interrupt_ERR_bit(hw);
    65a0:	68fb      	ldr	r3, [r7, #12]
    65a2:	0018      	movs	r0, r3
    65a4:	4b0a      	ldr	r3, [pc, #40]	; (65d0 <tcc_pwm_interrupt_handler+0x70>)
    65a6:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    65a8:	687b      	ldr	r3, [r7, #4]
    65aa:	685b      	ldr	r3, [r3, #4]
    65ac:	2b00      	cmp	r3, #0
    65ae:	d004      	beq.n	65ba <tcc_pwm_interrupt_handler+0x5a>
			device->callback.pwm_error_cb(device);
    65b0:	687b      	ldr	r3, [r7, #4]
    65b2:	685b      	ldr	r3, [r3, #4]
    65b4:	687a      	ldr	r2, [r7, #4]
    65b6:	0010      	movs	r0, r2
    65b8:	4798      	blx	r3
		}
	}
}
    65ba:	46c0      	nop			; (mov r8, r8)
    65bc:	46bd      	mov	sp, r7
    65be:	b004      	add	sp, #16
    65c0:	bd80      	pop	{r7, pc}
    65c2:	46c0      	nop			; (mov r8, r8)
    65c4:	00005feb 	.word	0x00005feb
    65c8:	00006009 	.word	0x00006009
    65cc:	00006069 	.word	0x00006069
    65d0:	0000601f 	.word	0x0000601f

000065d4 <TCC1_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_Handler(void)
{
    65d4:	b580      	push	{r7, lr}
    65d6:	af00      	add	r7, sp, #0
	tcc_pwm_interrupt_handler(_tcc1_dev);
    65d8:	4b03      	ldr	r3, [pc, #12]	; (65e8 <TCC1_Handler+0x14>)
    65da:	681b      	ldr	r3, [r3, #0]
    65dc:	0018      	movs	r0, r3
    65de:	4b03      	ldr	r3, [pc, #12]	; (65ec <TCC1_Handler+0x18>)
    65e0:	4798      	blx	r3
}
    65e2:	46c0      	nop			; (mov r8, r8)
    65e4:	46bd      	mov	sp, r7
    65e6:	bd80      	pop	{r7, pc}
    65e8:	2000021c 	.word	0x2000021c
    65ec:	00006561 	.word	0x00006561

000065f0 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    65f0:	b580      	push	{r7, lr}
    65f2:	b084      	sub	sp, #16
    65f4:	af00      	add	r7, sp, #0
    65f6:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    65f8:	230f      	movs	r3, #15
    65fa:	18fb      	adds	r3, r7, r3
    65fc:	2200      	movs	r2, #0
    65fe:	701a      	strb	r2, [r3, #0]
    6600:	e01c      	b.n	663c <_get_tcc_cfg+0x4c>
		if (_cfgs[i].hw == hw) {
    6602:	230f      	movs	r3, #15
    6604:	18fb      	adds	r3, r7, r3
    6606:	781a      	ldrb	r2, [r3, #0]
    6608:	4911      	ldr	r1, [pc, #68]	; (6650 <_get_tcc_cfg+0x60>)
    660a:	0013      	movs	r3, r2
    660c:	009b      	lsls	r3, r3, #2
    660e:	189b      	adds	r3, r3, r2
    6610:	00db      	lsls	r3, r3, #3
    6612:	585a      	ldr	r2, [r3, r1]
    6614:	687b      	ldr	r3, [r7, #4]
    6616:	429a      	cmp	r2, r3
    6618:	d109      	bne.n	662e <_get_tcc_cfg+0x3e>
			return &(_cfgs[i]);
    661a:	230f      	movs	r3, #15
    661c:	18fb      	adds	r3, r7, r3
    661e:	781a      	ldrb	r2, [r3, #0]
    6620:	0013      	movs	r3, r2
    6622:	009b      	lsls	r3, r3, #2
    6624:	189b      	adds	r3, r3, r2
    6626:	00db      	lsls	r3, r3, #3
    6628:	4a09      	ldr	r2, [pc, #36]	; (6650 <_get_tcc_cfg+0x60>)
    662a:	189b      	adds	r3, r3, r2
    662c:	e00c      	b.n	6648 <_get_tcc_cfg+0x58>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    662e:	230f      	movs	r3, #15
    6630:	18fb      	adds	r3, r7, r3
    6632:	781a      	ldrb	r2, [r3, #0]
    6634:	230f      	movs	r3, #15
    6636:	18fb      	adds	r3, r7, r3
    6638:	3201      	adds	r2, #1
    663a:	701a      	strb	r2, [r3, #0]
    663c:	230f      	movs	r3, #15
    663e:	18fb      	adds	r3, r7, r3
    6640:	781b      	ldrb	r3, [r3, #0]
    6642:	2b00      	cmp	r3, #0
    6644:	d0dd      	beq.n	6602 <_get_tcc_cfg+0x12>
		}
	}
	return NULL;
    6646:	2300      	movs	r3, #0
}
    6648:	0018      	movs	r0, r3
    664a:	46bd      	mov	sp, r7
    664c:	b004      	add	sp, #16
    664e:	bd80      	pop	{r7, pc}
    6650:	20000060 	.word	0x20000060

00006654 <_get_tcc_pwm_cfg>:

static struct tcc_pwm_cfg *_get_tcc_pwm_cfg(void *hw)
{
    6654:	b580      	push	{r7, lr}
    6656:	b084      	sub	sp, #16
    6658:	af00      	add	r7, sp, #0
    665a:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs_pwm); i++) {
    665c:	230f      	movs	r3, #15
    665e:	18fb      	adds	r3, r7, r3
    6660:	2200      	movs	r2, #0
    6662:	701a      	strb	r2, [r3, #0]
    6664:	e01c      	b.n	66a0 <_get_tcc_pwm_cfg+0x4c>
		if (_cfgs_pwm[i].hw == hw) {
    6666:	230f      	movs	r3, #15
    6668:	18fb      	adds	r3, r7, r3
    666a:	781a      	ldrb	r2, [r3, #0]
    666c:	4911      	ldr	r1, [pc, #68]	; (66b4 <_get_tcc_pwm_cfg+0x60>)
    666e:	0013      	movs	r3, r2
    6670:	009b      	lsls	r3, r3, #2
    6672:	189b      	adds	r3, r3, r2
    6674:	009b      	lsls	r3, r3, #2
    6676:	585a      	ldr	r2, [r3, r1]
    6678:	687b      	ldr	r3, [r7, #4]
    667a:	429a      	cmp	r2, r3
    667c:	d109      	bne.n	6692 <_get_tcc_pwm_cfg+0x3e>
			return &(_cfgs_pwm[i]);
    667e:	230f      	movs	r3, #15
    6680:	18fb      	adds	r3, r7, r3
    6682:	781a      	ldrb	r2, [r3, #0]
    6684:	0013      	movs	r3, r2
    6686:	009b      	lsls	r3, r3, #2
    6688:	189b      	adds	r3, r3, r2
    668a:	009b      	lsls	r3, r3, #2
    668c:	4a09      	ldr	r2, [pc, #36]	; (66b4 <_get_tcc_pwm_cfg+0x60>)
    668e:	189b      	adds	r3, r3, r2
    6690:	e00c      	b.n	66ac <_get_tcc_pwm_cfg+0x58>
	for (i = 0; i < ARRAY_SIZE(_cfgs_pwm); i++) {
    6692:	230f      	movs	r3, #15
    6694:	18fb      	adds	r3, r7, r3
    6696:	781a      	ldrb	r2, [r3, #0]
    6698:	230f      	movs	r3, #15
    669a:	18fb      	adds	r3, r7, r3
    669c:	3201      	adds	r2, #1
    669e:	701a      	strb	r2, [r3, #0]
    66a0:	230f      	movs	r3, #15
    66a2:	18fb      	adds	r3, r7, r3
    66a4:	781b      	ldrb	r3, [r3, #0]
    66a6:	2b00      	cmp	r3, #0
    66a8:	d0dd      	beq.n	6666 <_get_tcc_pwm_cfg+0x12>
		}
	}
	return NULL;
    66aa:	2300      	movs	r3, #0
}
    66ac:	0018      	movs	r0, r3
    66ae:	46bd      	mov	sp, r7
    66b0:	b004      	add	sp, #16
    66b2:	bd80      	pop	{r7, pc}
    66b4:	20000088 	.word	0x20000088

000066b8 <__NVIC_EnableIRQ>:
{
    66b8:	b580      	push	{r7, lr}
    66ba:	b082      	sub	sp, #8
    66bc:	af00      	add	r7, sp, #0
    66be:	0002      	movs	r2, r0
    66c0:	1dfb      	adds	r3, r7, #7
    66c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    66c4:	1dfb      	adds	r3, r7, #7
    66c6:	781b      	ldrb	r3, [r3, #0]
    66c8:	2b7f      	cmp	r3, #127	; 0x7f
    66ca:	d809      	bhi.n	66e0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    66cc:	4b06      	ldr	r3, [pc, #24]	; (66e8 <__NVIC_EnableIRQ+0x30>)
    66ce:	1dfa      	adds	r2, r7, #7
    66d0:	7812      	ldrb	r2, [r2, #0]
    66d2:	0011      	movs	r1, r2
    66d4:	221f      	movs	r2, #31
    66d6:	400a      	ands	r2, r1
    66d8:	2101      	movs	r1, #1
    66da:	4091      	lsls	r1, r2
    66dc:	000a      	movs	r2, r1
    66de:	601a      	str	r2, [r3, #0]
}
    66e0:	46c0      	nop			; (mov r8, r8)
    66e2:	46bd      	mov	sp, r7
    66e4:	b002      	add	sp, #8
    66e6:	bd80      	pop	{r7, pc}
    66e8:	e000e100 	.word	0xe000e100

000066ec <hri_sysctrl_get_PCLKSR_reg>:
{
    66ec:	b580      	push	{r7, lr}
    66ee:	b084      	sub	sp, #16
    66f0:	af00      	add	r7, sp, #0
    66f2:	6078      	str	r0, [r7, #4]
    66f4:	6039      	str	r1, [r7, #0]
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    66f6:	687b      	ldr	r3, [r7, #4]
    66f8:	68db      	ldr	r3, [r3, #12]
    66fa:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    66fc:	68fb      	ldr	r3, [r7, #12]
    66fe:	683a      	ldr	r2, [r7, #0]
    6700:	4013      	ands	r3, r2
    6702:	60fb      	str	r3, [r7, #12]
	return tmp;
    6704:	68fb      	ldr	r3, [r7, #12]
}
    6706:	0018      	movs	r0, r3
    6708:	46bd      	mov	sp, r7
    670a:	b004      	add	sp, #16
    670c:	bd80      	pop	{r7, pc}

0000670e <hri_sysctrl_get_DPLLSTATUS_reg>:
{
    670e:	b580      	push	{r7, lr}
    6710:	b084      	sub	sp, #16
    6712:	af00      	add	r7, sp, #0
    6714:	6078      	str	r0, [r7, #4]
    6716:	000a      	movs	r2, r1
    6718:	1cfb      	adds	r3, r7, #3
    671a:	701a      	strb	r2, [r3, #0]
	tmp = ((Sysctrl *)hw)->DPLLSTATUS.reg;
    671c:	230f      	movs	r3, #15
    671e:	18fb      	adds	r3, r7, r3
    6720:	687a      	ldr	r2, [r7, #4]
    6722:	2150      	movs	r1, #80	; 0x50
    6724:	5c52      	ldrb	r2, [r2, r1]
    6726:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    6728:	230f      	movs	r3, #15
    672a:	18fb      	adds	r3, r7, r3
    672c:	220f      	movs	r2, #15
    672e:	18ba      	adds	r2, r7, r2
    6730:	1cf9      	adds	r1, r7, #3
    6732:	7812      	ldrb	r2, [r2, #0]
    6734:	7809      	ldrb	r1, [r1, #0]
    6736:	400a      	ands	r2, r1
    6738:	701a      	strb	r2, [r3, #0]
	return tmp;
    673a:	230f      	movs	r3, #15
    673c:	18fb      	adds	r3, r7, r3
    673e:	781b      	ldrb	r3, [r3, #0]
}
    6740:	0018      	movs	r0, r3
    6742:	46bd      	mov	sp, r7
    6744:	b004      	add	sp, #16
    6746:	bd80      	pop	{r7, pc}

00006748 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    6748:	b580      	push	{r7, lr}
    674a:	b082      	sub	sp, #8
    674c:	af00      	add	r7, sp, #0
    674e:	6078      	str	r0, [r7, #4]
    6750:	000a      	movs	r2, r1
    6752:	1cfb      	adds	r3, r7, #3
    6754:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    6756:	46c0      	nop			; (mov r8, r8)
    6758:	687b      	ldr	r3, [r7, #4]
    675a:	789b      	ldrb	r3, [r3, #2]
    675c:	b2db      	uxtb	r3, r3
    675e:	1cfa      	adds	r2, r7, #3
    6760:	7812      	ldrb	r2, [r2, #0]
    6762:	4013      	ands	r3, r2
    6764:	b2db      	uxtb	r3, r3
    6766:	2b00      	cmp	r3, #0
    6768:	d1f6      	bne.n	6758 <hri_usb_wait_for_sync+0x10>
	};
}
    676a:	46c0      	nop			; (mov r8, r8)
    676c:	46bd      	mov	sp, r7
    676e:	b002      	add	sp, #8
    6770:	bd80      	pop	{r7, pc}

00006772 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    6772:	b580      	push	{r7, lr}
    6774:	b082      	sub	sp, #8
    6776:	af00      	add	r7, sp, #0
    6778:	6078      	str	r0, [r7, #4]
    677a:	000a      	movs	r2, r1
    677c:	1cfb      	adds	r3, r7, #3
    677e:	701a      	strb	r2, [r3, #0]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    6780:	687b      	ldr	r3, [r7, #4]
    6782:	789b      	ldrb	r3, [r3, #2]
    6784:	b2db      	uxtb	r3, r3
    6786:	1cfa      	adds	r2, r7, #3
    6788:	7812      	ldrb	r2, [r2, #0]
    678a:	4013      	ands	r3, r2
    678c:	b2db      	uxtb	r3, r3
    678e:	1e5a      	subs	r2, r3, #1
    6790:	4193      	sbcs	r3, r2
    6792:	b2db      	uxtb	r3, r3
}
    6794:	0018      	movs	r0, r3
    6796:	46bd      	mov	sp, r7
    6798:	b002      	add	sp, #8
    679a:	bd80      	pop	{r7, pc}

0000679c <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    679c:	b580      	push	{r7, lr}
    679e:	b084      	sub	sp, #16
    67a0:	af00      	add	r7, sp, #0
    67a2:	6078      	str	r0, [r7, #4]
    67a4:	0008      	movs	r0, r1
    67a6:	0011      	movs	r1, r2
    67a8:	1cfb      	adds	r3, r7, #3
    67aa:	1c02      	adds	r2, r0, #0
    67ac:	701a      	strb	r2, [r3, #0]
    67ae:	1cbb      	adds	r3, r7, #2
    67b0:	1c0a      	adds	r2, r1, #0
    67b2:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    67b4:	1cfb      	adds	r3, r7, #3
    67b6:	781a      	ldrb	r2, [r3, #0]
    67b8:	230f      	movs	r3, #15
    67ba:	18fb      	adds	r3, r7, r3
    67bc:	6879      	ldr	r1, [r7, #4]
    67be:	3208      	adds	r2, #8
    67c0:	0152      	lsls	r2, r2, #5
    67c2:	188a      	adds	r2, r1, r2
    67c4:	3207      	adds	r2, #7
    67c6:	7812      	ldrb	r2, [r2, #0]
    67c8:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    67ca:	230f      	movs	r3, #15
    67cc:	18fb      	adds	r3, r7, r3
    67ce:	220f      	movs	r2, #15
    67d0:	18ba      	adds	r2, r7, r2
    67d2:	1cb9      	adds	r1, r7, #2
    67d4:	7812      	ldrb	r2, [r2, #0]
    67d6:	7809      	ldrb	r1, [r1, #0]
    67d8:	400a      	ands	r2, r1
    67da:	701a      	strb	r2, [r3, #0]
	return tmp;
    67dc:	230f      	movs	r3, #15
    67de:	18fb      	adds	r3, r7, r3
    67e0:	781b      	ldrb	r3, [r3, #0]
}
    67e2:	0018      	movs	r0, r3
    67e4:	46bd      	mov	sp, r7
    67e6:	b004      	add	sp, #16
    67e8:	bd80      	pop	{r7, pc}

000067ea <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    67ea:	b580      	push	{r7, lr}
    67ec:	b082      	sub	sp, #8
    67ee:	af00      	add	r7, sp, #0
    67f0:	6078      	str	r0, [r7, #4]
    67f2:	000a      	movs	r2, r1
    67f4:	1cfb      	adds	r3, r7, #3
    67f6:	701a      	strb	r2, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    67f8:	1cfb      	adds	r3, r7, #3
    67fa:	781b      	ldrb	r3, [r3, #0]
    67fc:	687a      	ldr	r2, [r7, #4]
    67fe:	3308      	adds	r3, #8
    6800:	015b      	lsls	r3, r3, #5
    6802:	18d3      	adds	r3, r2, r3
    6804:	3307      	adds	r3, #7
    6806:	781b      	ldrb	r3, [r3, #0]
    6808:	b2db      	uxtb	r3, r3
}
    680a:	0018      	movs	r0, r3
    680c:	46bd      	mov	sp, r7
    680e:	b002      	add	sp, #8
    6810:	bd80      	pop	{r7, pc}

00006812 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    6812:	b580      	push	{r7, lr}
    6814:	b082      	sub	sp, #8
    6816:	af00      	add	r7, sp, #0
    6818:	6078      	str	r0, [r7, #4]
    681a:	0008      	movs	r0, r1
    681c:	0011      	movs	r1, r2
    681e:	1cfb      	adds	r3, r7, #3
    6820:	1c02      	adds	r2, r0, #0
    6822:	701a      	strb	r2, [r3, #0]
    6824:	1cbb      	adds	r3, r7, #2
    6826:	1c0a      	adds	r2, r1, #0
    6828:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    682a:	1cfb      	adds	r3, r7, #3
    682c:	781b      	ldrb	r3, [r3, #0]
    682e:	687a      	ldr	r2, [r7, #4]
    6830:	3308      	adds	r3, #8
    6832:	015b      	lsls	r3, r3, #5
    6834:	18d3      	adds	r3, r2, r3
    6836:	3307      	adds	r3, #7
    6838:	1cba      	adds	r2, r7, #2
    683a:	7812      	ldrb	r2, [r2, #0]
    683c:	701a      	strb	r2, [r3, #0]
}
    683e:	46c0      	nop			; (mov r8, r8)
    6840:	46bd      	mov	sp, r7
    6842:	b002      	add	sp, #8
    6844:	bd80      	pop	{r7, pc}

00006846 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    6846:	b580      	push	{r7, lr}
    6848:	b082      	sub	sp, #8
    684a:	af00      	add	r7, sp, #0
    684c:	6078      	str	r0, [r7, #4]
    684e:	0008      	movs	r0, r1
    6850:	0011      	movs	r1, r2
    6852:	1cfb      	adds	r3, r7, #3
    6854:	1c02      	adds	r2, r0, #0
    6856:	701a      	strb	r2, [r3, #0]
    6858:	1cbb      	adds	r3, r7, #2
    685a:	1c0a      	adds	r2, r1, #0
    685c:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    685e:	1cfb      	adds	r3, r7, #3
    6860:	781b      	ldrb	r3, [r3, #0]
    6862:	687a      	ldr	r2, [r7, #4]
    6864:	3308      	adds	r3, #8
    6866:	015b      	lsls	r3, r3, #5
    6868:	18d3      	adds	r3, r2, r3
    686a:	3305      	adds	r3, #5
    686c:	1cba      	adds	r2, r7, #2
    686e:	7812      	ldrb	r2, [r2, #0]
    6870:	701a      	strb	r2, [r3, #0]
}
    6872:	46c0      	nop			; (mov r8, r8)
    6874:	46bd      	mov	sp, r7
    6876:	b002      	add	sp, #8
    6878:	bd80      	pop	{r7, pc}

0000687a <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    687a:	b580      	push	{r7, lr}
    687c:	b082      	sub	sp, #8
    687e:	af00      	add	r7, sp, #0
    6880:	6078      	str	r0, [r7, #4]
    6882:	000a      	movs	r2, r1
    6884:	1cfb      	adds	r3, r7, #3
    6886:	701a      	strb	r2, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    6888:	1cfb      	adds	r3, r7, #3
    688a:	781b      	ldrb	r3, [r3, #0]
    688c:	687a      	ldr	r2, [r7, #4]
    688e:	3308      	adds	r3, #8
    6890:	015b      	lsls	r3, r3, #5
    6892:	18d3      	adds	r3, r2, r3
    6894:	3306      	adds	r3, #6
    6896:	781b      	ldrb	r3, [r3, #0]
    6898:	b2db      	uxtb	r3, r3
}
    689a:	0018      	movs	r0, r3
    689c:	46bd      	mov	sp, r7
    689e:	b002      	add	sp, #8
    68a0:	bd80      	pop	{r7, pc}

000068a2 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    68a2:	b580      	push	{r7, lr}
    68a4:	b082      	sub	sp, #8
    68a6:	af00      	add	r7, sp, #0
    68a8:	6078      	str	r0, [r7, #4]
    68aa:	0008      	movs	r0, r1
    68ac:	0011      	movs	r1, r2
    68ae:	1cfb      	adds	r3, r7, #3
    68b0:	1c02      	adds	r2, r0, #0
    68b2:	701a      	strb	r2, [r3, #0]
    68b4:	1cbb      	adds	r3, r7, #2
    68b6:	1c0a      	adds	r2, r1, #0
    68b8:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    68ba:	1cfb      	adds	r3, r7, #3
    68bc:	781b      	ldrb	r3, [r3, #0]
    68be:	687a      	ldr	r2, [r7, #4]
    68c0:	3308      	adds	r3, #8
    68c2:	015b      	lsls	r3, r3, #5
    68c4:	18d3      	adds	r3, r2, r3
    68c6:	3304      	adds	r3, #4
    68c8:	1cba      	adds	r2, r7, #2
    68ca:	7812      	ldrb	r2, [r2, #0]
    68cc:	701a      	strb	r2, [r3, #0]
}
    68ce:	46c0      	nop			; (mov r8, r8)
    68d0:	46bd      	mov	sp, r7
    68d2:	b002      	add	sp, #8
    68d4:	bd80      	pop	{r7, pc}

000068d6 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    68d6:	b580      	push	{r7, lr}
    68d8:	b082      	sub	sp, #8
    68da:	af00      	add	r7, sp, #0
    68dc:	6078      	str	r0, [r7, #4]
    68de:	000a      	movs	r2, r1
    68e0:	1cfb      	adds	r3, r7, #3
    68e2:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    68e4:	1cfb      	adds	r3, r7, #3
    68e6:	781a      	ldrb	r2, [r3, #0]
    68e8:	6879      	ldr	r1, [r7, #4]
    68ea:	2384      	movs	r3, #132	; 0x84
    68ec:	005b      	lsls	r3, r3, #1
    68ee:	0152      	lsls	r2, r2, #5
    68f0:	188a      	adds	r2, r1, r2
    68f2:	18d3      	adds	r3, r2, r3
    68f4:	2210      	movs	r2, #16
    68f6:	701a      	strb	r2, [r3, #0]
}
    68f8:	46c0      	nop			; (mov r8, r8)
    68fa:	46bd      	mov	sp, r7
    68fc:	b002      	add	sp, #8
    68fe:	bd80      	pop	{r7, pc}

00006900 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    6900:	b580      	push	{r7, lr}
    6902:	b082      	sub	sp, #8
    6904:	af00      	add	r7, sp, #0
    6906:	6078      	str	r0, [r7, #4]
    6908:	0008      	movs	r0, r1
    690a:	0011      	movs	r1, r2
    690c:	1cfb      	adds	r3, r7, #3
    690e:	1c02      	adds	r2, r0, #0
    6910:	701a      	strb	r2, [r3, #0]
    6912:	1cbb      	adds	r3, r7, #2
    6914:	1c0a      	adds	r2, r1, #0
    6916:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    6918:	1cfb      	adds	r3, r7, #3
    691a:	781a      	ldrb	r2, [r3, #0]
    691c:	6879      	ldr	r1, [r7, #4]
    691e:	230a      	movs	r3, #10
    6920:	33ff      	adds	r3, #255	; 0xff
    6922:	0152      	lsls	r2, r2, #5
    6924:	188a      	adds	r2, r1, r2
    6926:	18d3      	adds	r3, r2, r3
    6928:	1cba      	adds	r2, r7, #2
    692a:	7812      	ldrb	r2, [r2, #0]
    692c:	701a      	strb	r2, [r3, #0]
}
    692e:	46c0      	nop			; (mov r8, r8)
    6930:	46bd      	mov	sp, r7
    6932:	b002      	add	sp, #8
    6934:	bd80      	pop	{r7, pc}

00006936 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    6936:	b580      	push	{r7, lr}
    6938:	b082      	sub	sp, #8
    693a:	af00      	add	r7, sp, #0
    693c:	6078      	str	r0, [r7, #4]
    693e:	0008      	movs	r0, r1
    6940:	0011      	movs	r1, r2
    6942:	1cfb      	adds	r3, r7, #3
    6944:	1c02      	adds	r2, r0, #0
    6946:	701a      	strb	r2, [r3, #0]
    6948:	1cbb      	adds	r3, r7, #2
    694a:	1c0a      	adds	r2, r1, #0
    694c:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    694e:	1cfb      	adds	r3, r7, #3
    6950:	781a      	ldrb	r2, [r3, #0]
    6952:	6879      	ldr	r1, [r7, #4]
    6954:	2384      	movs	r3, #132	; 0x84
    6956:	005b      	lsls	r3, r3, #1
    6958:	0152      	lsls	r2, r2, #5
    695a:	188a      	adds	r2, r1, r2
    695c:	18d3      	adds	r3, r2, r3
    695e:	1cba      	adds	r2, r7, #2
    6960:	7812      	ldrb	r2, [r2, #0]
    6962:	701a      	strb	r2, [r3, #0]
}
    6964:	46c0      	nop			; (mov r8, r8)
    6966:	46bd      	mov	sp, r7
    6968:	b002      	add	sp, #8
    696a:	bd80      	pop	{r7, pc}

0000696c <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    696c:	b580      	push	{r7, lr}
    696e:	b084      	sub	sp, #16
    6970:	af00      	add	r7, sp, #0
    6972:	6078      	str	r0, [r7, #4]
    6974:	000a      	movs	r2, r1
    6976:	1cfb      	adds	r3, r7, #3
    6978:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    697a:	1cfb      	adds	r3, r7, #3
    697c:	7819      	ldrb	r1, [r3, #0]
    697e:	230f      	movs	r3, #15
    6980:	18fb      	adds	r3, r7, r3
    6982:	687a      	ldr	r2, [r7, #4]
    6984:	3108      	adds	r1, #8
    6986:	0149      	lsls	r1, r1, #5
    6988:	5c8a      	ldrb	r2, [r1, r2]
    698a:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    698c:	230f      	movs	r3, #15
    698e:	18fb      	adds	r3, r7, r3
    6990:	220f      	movs	r2, #15
    6992:	18ba      	adds	r2, r7, r2
    6994:	7812      	ldrb	r2, [r2, #0]
    6996:	2107      	movs	r1, #7
    6998:	400a      	ands	r2, r1
    699a:	701a      	strb	r2, [r3, #0]
	return tmp;
    699c:	230f      	movs	r3, #15
    699e:	18fb      	adds	r3, r7, r3
    69a0:	781b      	ldrb	r3, [r3, #0]
}
    69a2:	0018      	movs	r0, r3
    69a4:	46bd      	mov	sp, r7
    69a6:	b004      	add	sp, #16
    69a8:	bd80      	pop	{r7, pc}

000069aa <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    69aa:	b580      	push	{r7, lr}
    69ac:	b084      	sub	sp, #16
    69ae:	af00      	add	r7, sp, #0
    69b0:	6078      	str	r0, [r7, #4]
    69b2:	000a      	movs	r2, r1
    69b4:	1cfb      	adds	r3, r7, #3
    69b6:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    69b8:	1cfb      	adds	r3, r7, #3
    69ba:	7819      	ldrb	r1, [r3, #0]
    69bc:	230f      	movs	r3, #15
    69be:	18fb      	adds	r3, r7, r3
    69c0:	687a      	ldr	r2, [r7, #4]
    69c2:	3108      	adds	r1, #8
    69c4:	0149      	lsls	r1, r1, #5
    69c6:	5c8a      	ldrb	r2, [r1, r2]
    69c8:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    69ca:	230f      	movs	r3, #15
    69cc:	18fb      	adds	r3, r7, r3
    69ce:	781b      	ldrb	r3, [r3, #0]
    69d0:	091b      	lsrs	r3, r3, #4
    69d2:	b2da      	uxtb	r2, r3
    69d4:	230f      	movs	r3, #15
    69d6:	18fb      	adds	r3, r7, r3
    69d8:	2107      	movs	r1, #7
    69da:	400a      	ands	r2, r1
    69dc:	701a      	strb	r2, [r3, #0]
	return tmp;
    69de:	230f      	movs	r3, #15
    69e0:	18fb      	adds	r3, r7, r3
    69e2:	781b      	ldrb	r3, [r3, #0]
}
    69e4:	0018      	movs	r0, r3
    69e6:	46bd      	mov	sp, r7
    69e8:	b004      	add	sp, #16
    69ea:	bd80      	pop	{r7, pc}

000069ec <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    69ec:	b580      	push	{r7, lr}
    69ee:	b082      	sub	sp, #8
    69f0:	af00      	add	r7, sp, #0
    69f2:	6078      	str	r0, [r7, #4]
    69f4:	0008      	movs	r0, r1
    69f6:	0011      	movs	r1, r2
    69f8:	1cfb      	adds	r3, r7, #3
    69fa:	1c02      	adds	r2, r0, #0
    69fc:	701a      	strb	r2, [r3, #0]
    69fe:	1cbb      	adds	r3, r7, #2
    6a00:	1c0a      	adds	r2, r1, #0
    6a02:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    6a04:	1cfb      	adds	r3, r7, #3
    6a06:	781a      	ldrb	r2, [r3, #0]
    6a08:	687b      	ldr	r3, [r7, #4]
    6a0a:	3208      	adds	r2, #8
    6a0c:	0152      	lsls	r2, r2, #5
    6a0e:	1cb9      	adds	r1, r7, #2
    6a10:	7809      	ldrb	r1, [r1, #0]
    6a12:	54d1      	strb	r1, [r2, r3]
	USB_CRITICAL_SECTION_LEAVE();
}
    6a14:	46c0      	nop			; (mov r8, r8)
    6a16:	46bd      	mov	sp, r7
    6a18:	b002      	add	sp, #8
    6a1a:	bd80      	pop	{r7, pc}

00006a1c <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    6a1c:	b580      	push	{r7, lr}
    6a1e:	b082      	sub	sp, #8
    6a20:	af00      	add	r7, sp, #0
    6a22:	6078      	str	r0, [r7, #4]
    6a24:	000a      	movs	r2, r1
    6a26:	1cfb      	adds	r3, r7, #3
    6a28:	701a      	strb	r2, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    6a2a:	1cfb      	adds	r3, r7, #3
    6a2c:	781a      	ldrb	r2, [r3, #0]
    6a2e:	687b      	ldr	r3, [r7, #4]
    6a30:	3208      	adds	r2, #8
    6a32:	0152      	lsls	r2, r2, #5
    6a34:	5cd3      	ldrb	r3, [r2, r3]
    6a36:	b2db      	uxtb	r3, r3
}
    6a38:	0018      	movs	r0, r3
    6a3a:	46bd      	mov	sp, r7
    6a3c:	b002      	add	sp, #8
    6a3e:	bd80      	pop	{r7, pc}

00006a40 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    6a40:	b580      	push	{r7, lr}
    6a42:	b082      	sub	sp, #8
    6a44:	af00      	add	r7, sp, #0
    6a46:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    6a48:	687b      	ldr	r3, [r7, #4]
    6a4a:	8b9b      	ldrh	r3, [r3, #28]
    6a4c:	b29b      	uxth	r3, r3
}
    6a4e:	0018      	movs	r0, r3
    6a50:	46bd      	mov	sp, r7
    6a52:	b002      	add	sp, #8
    6a54:	bd80      	pop	{r7, pc}

00006a56 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    6a56:	b580      	push	{r7, lr}
    6a58:	b082      	sub	sp, #8
    6a5a:	af00      	add	r7, sp, #0
    6a5c:	6078      	str	r0, [r7, #4]
    6a5e:	000a      	movs	r2, r1
    6a60:	1cbb      	adds	r3, r7, #2
    6a62:	801a      	strh	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    6a64:	687b      	ldr	r3, [r7, #4]
    6a66:	1cba      	adds	r2, r7, #2
    6a68:	8812      	ldrh	r2, [r2, #0]
    6a6a:	839a      	strh	r2, [r3, #28]
}
    6a6c:	46c0      	nop			; (mov r8, r8)
    6a6e:	46bd      	mov	sp, r7
    6a70:	b002      	add	sp, #8
    6a72:	bd80      	pop	{r7, pc}

00006a74 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    6a74:	b580      	push	{r7, lr}
    6a76:	b082      	sub	sp, #8
    6a78:	af00      	add	r7, sp, #0
    6a7a:	6078      	str	r0, [r7, #4]
    6a7c:	000a      	movs	r2, r1
    6a7e:	1cbb      	adds	r3, r7, #2
    6a80:	801a      	strh	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    6a82:	687b      	ldr	r3, [r7, #4]
    6a84:	1cba      	adds	r2, r7, #2
    6a86:	8812      	ldrh	r2, [r2, #0]
    6a88:	831a      	strh	r2, [r3, #24]
}
    6a8a:	46c0      	nop			; (mov r8, r8)
    6a8c:	46bd      	mov	sp, r7
    6a8e:	b002      	add	sp, #8
    6a90:	bd80      	pop	{r7, pc}

00006a92 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    6a92:	b580      	push	{r7, lr}
    6a94:	b082      	sub	sp, #8
    6a96:	af00      	add	r7, sp, #0
    6a98:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    6a9a:	687b      	ldr	r3, [r7, #4]
    6a9c:	8b1b      	ldrh	r3, [r3, #24]
    6a9e:	b29b      	uxth	r3, r3
}
    6aa0:	0018      	movs	r0, r3
    6aa2:	46bd      	mov	sp, r7
    6aa4:	b002      	add	sp, #8
    6aa6:	bd80      	pop	{r7, pc}

00006aa8 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    6aa8:	b580      	push	{r7, lr}
    6aaa:	b082      	sub	sp, #8
    6aac:	af00      	add	r7, sp, #0
    6aae:	6078      	str	r0, [r7, #4]
    6ab0:	000a      	movs	r2, r1
    6ab2:	1cbb      	adds	r3, r7, #2
    6ab4:	801a      	strh	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    6ab6:	687b      	ldr	r3, [r7, #4]
    6ab8:	1cba      	adds	r2, r7, #2
    6aba:	8812      	ldrh	r2, [r2, #0]
    6abc:	829a      	strh	r2, [r3, #20]
}
    6abe:	46c0      	nop			; (mov r8, r8)
    6ac0:	46bd      	mov	sp, r7
    6ac2:	b002      	add	sp, #8
    6ac4:	bd80      	pop	{r7, pc}

00006ac6 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    6ac6:	b580      	push	{r7, lr}
    6ac8:	b084      	sub	sp, #16
    6aca:	af00      	add	r7, sp, #0
    6acc:	6078      	str	r0, [r7, #4]
    6ace:	000a      	movs	r2, r1
    6ad0:	1cfb      	adds	r3, r7, #3
    6ad2:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    6ad4:	230f      	movs	r3, #15
    6ad6:	18fb      	adds	r3, r7, r3
    6ad8:	687a      	ldr	r2, [r7, #4]
    6ada:	7892      	ldrb	r2, [r2, #2]
    6adc:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    6ade:	230f      	movs	r3, #15
    6ae0:	18fb      	adds	r3, r7, r3
    6ae2:	220f      	movs	r2, #15
    6ae4:	18ba      	adds	r2, r7, r2
    6ae6:	1cf9      	adds	r1, r7, #3
    6ae8:	7812      	ldrb	r2, [r2, #0]
    6aea:	7809      	ldrb	r1, [r1, #0]
    6aec:	400a      	ands	r2, r1
    6aee:	701a      	strb	r2, [r3, #0]
	return tmp;
    6af0:	230f      	movs	r3, #15
    6af2:	18fb      	adds	r3, r7, r3
    6af4:	781b      	ldrb	r3, [r3, #0]
}
    6af6:	0018      	movs	r0, r3
    6af8:	46bd      	mov	sp, r7
    6afa:	b004      	add	sp, #16
    6afc:	bd80      	pop	{r7, pc}
	...

00006b00 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6b00:	b580      	push	{r7, lr}
    6b02:	b082      	sub	sp, #8
    6b04:	af00      	add	r7, sp, #0
    6b06:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    6b08:	687b      	ldr	r3, [r7, #4]
    6b0a:	781b      	ldrb	r3, [r3, #0]
    6b0c:	b2db      	uxtb	r3, r3
    6b0e:	2202      	movs	r2, #2
    6b10:	4393      	bics	r3, r2
    6b12:	b2da      	uxtb	r2, r3
    6b14:	687b      	ldr	r3, [r7, #4]
    6b16:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    6b18:	687b      	ldr	r3, [r7, #4]
    6b1a:	2103      	movs	r1, #3
    6b1c:	0018      	movs	r0, r3
    6b1e:	4b03      	ldr	r3, [pc, #12]	; (6b2c <hri_usb_clear_CTRLA_ENABLE_bit+0x2c>)
    6b20:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    6b22:	46c0      	nop			; (mov r8, r8)
    6b24:	46bd      	mov	sp, r7
    6b26:	b002      	add	sp, #8
    6b28:	bd80      	pop	{r7, pc}
    6b2a:	46c0      	nop			; (mov r8, r8)
    6b2c:	00006749 	.word	0x00006749

00006b30 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    6b30:	b580      	push	{r7, lr}
    6b32:	b084      	sub	sp, #16
    6b34:	af00      	add	r7, sp, #0
    6b36:	6078      	str	r0, [r7, #4]
    6b38:	000a      	movs	r2, r1
    6b3a:	1cfb      	adds	r3, r7, #3
    6b3c:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    6b3e:	687b      	ldr	r3, [r7, #4]
    6b40:	2103      	movs	r1, #3
    6b42:	0018      	movs	r0, r3
    6b44:	4b0b      	ldr	r3, [pc, #44]	; (6b74 <hri_usb_get_CTRLA_reg+0x44>)
    6b46:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    6b48:	230f      	movs	r3, #15
    6b4a:	18fb      	adds	r3, r7, r3
    6b4c:	687a      	ldr	r2, [r7, #4]
    6b4e:	7812      	ldrb	r2, [r2, #0]
    6b50:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    6b52:	230f      	movs	r3, #15
    6b54:	18fb      	adds	r3, r7, r3
    6b56:	220f      	movs	r2, #15
    6b58:	18ba      	adds	r2, r7, r2
    6b5a:	1cf9      	adds	r1, r7, #3
    6b5c:	7812      	ldrb	r2, [r2, #0]
    6b5e:	7809      	ldrb	r1, [r1, #0]
    6b60:	400a      	ands	r2, r1
    6b62:	701a      	strb	r2, [r3, #0]
	return tmp;
    6b64:	230f      	movs	r3, #15
    6b66:	18fb      	adds	r3, r7, r3
    6b68:	781b      	ldrb	r3, [r3, #0]
}
    6b6a:	0018      	movs	r0, r3
    6b6c:	46bd      	mov	sp, r7
    6b6e:	b004      	add	sp, #16
    6b70:	bd80      	pop	{r7, pc}
    6b72:	46c0      	nop			; (mov r8, r8)
    6b74:	00006749 	.word	0x00006749

00006b78 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    6b78:	b580      	push	{r7, lr}
    6b7a:	b082      	sub	sp, #8
    6b7c:	af00      	add	r7, sp, #0
    6b7e:	6078      	str	r0, [r7, #4]
    6b80:	000a      	movs	r2, r1
    6b82:	1cfb      	adds	r3, r7, #3
    6b84:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    6b86:	687b      	ldr	r3, [r7, #4]
    6b88:	1cfa      	adds	r2, r7, #3
    6b8a:	7812      	ldrb	r2, [r2, #0]
    6b8c:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    6b8e:	687b      	ldr	r3, [r7, #4]
    6b90:	2103      	movs	r1, #3
    6b92:	0018      	movs	r0, r3
    6b94:	4b02      	ldr	r3, [pc, #8]	; (6ba0 <hri_usb_write_CTRLA_reg+0x28>)
    6b96:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    6b98:	46c0      	nop			; (mov r8, r8)
    6b9a:	46bd      	mov	sp, r7
    6b9c:	b002      	add	sp, #8
    6b9e:	bd80      	pop	{r7, pc}
    6ba0:	00006749 	.word	0x00006749

00006ba4 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    6ba4:	b580      	push	{r7, lr}
    6ba6:	b082      	sub	sp, #8
    6ba8:	af00      	add	r7, sp, #0
    6baa:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    6bac:	687b      	ldr	r3, [r7, #4]
    6bae:	2103      	movs	r1, #3
    6bb0:	0018      	movs	r0, r3
    6bb2:	4b04      	ldr	r3, [pc, #16]	; (6bc4 <hri_usb_read_CTRLA_reg+0x20>)
    6bb4:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    6bb6:	687b      	ldr	r3, [r7, #4]
    6bb8:	781b      	ldrb	r3, [r3, #0]
    6bba:	b2db      	uxtb	r3, r3
}
    6bbc:	0018      	movs	r0, r3
    6bbe:	46bd      	mov	sp, r7
    6bc0:	b002      	add	sp, #8
    6bc2:	bd80      	pop	{r7, pc}
    6bc4:	00006749 	.word	0x00006749

00006bc8 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    6bc8:	b580      	push	{r7, lr}
    6bca:	b082      	sub	sp, #8
    6bcc:	af00      	add	r7, sp, #0
    6bce:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    6bd0:	687b      	ldr	r3, [r7, #4]
    6bd2:	891b      	ldrh	r3, [r3, #8]
    6bd4:	b29b      	uxth	r3, r3
    6bd6:	2201      	movs	r2, #1
    6bd8:	4393      	bics	r3, r2
    6bda:	b29a      	uxth	r2, r3
    6bdc:	687b      	ldr	r3, [r7, #4]
    6bde:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    6be0:	46c0      	nop			; (mov r8, r8)
    6be2:	46bd      	mov	sp, r7
    6be4:	b002      	add	sp, #8
    6be6:	bd80      	pop	{r7, pc}

00006be8 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    6be8:	b580      	push	{r7, lr}
    6bea:	b082      	sub	sp, #8
    6bec:	af00      	add	r7, sp, #0
    6bee:	6078      	str	r0, [r7, #4]
    6bf0:	000a      	movs	r2, r1
    6bf2:	1cbb      	adds	r3, r7, #2
    6bf4:	801a      	strh	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    6bf6:	687b      	ldr	r3, [r7, #4]
    6bf8:	1cba      	adds	r2, r7, #2
    6bfa:	8812      	ldrh	r2, [r2, #0]
    6bfc:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    6bfe:	46c0      	nop			; (mov r8, r8)
    6c00:	46bd      	mov	sp, r7
    6c02:	b002      	add	sp, #8
    6c04:	bd80      	pop	{r7, pc}

00006c06 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    6c06:	b580      	push	{r7, lr}
    6c08:	b082      	sub	sp, #8
    6c0a:	af00      	add	r7, sp, #0
    6c0c:	6078      	str	r0, [r7, #4]
    6c0e:	000a      	movs	r2, r1
    6c10:	1cfb      	adds	r3, r7, #3
    6c12:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    6c14:	687b      	ldr	r3, [r7, #4]
    6c16:	1cfa      	adds	r2, r7, #3
    6c18:	7812      	ldrb	r2, [r2, #0]
    6c1a:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    6c1c:	46c0      	nop			; (mov r8, r8)
    6c1e:	46bd      	mov	sp, r7
    6c20:	b002      	add	sp, #8
    6c22:	bd80      	pop	{r7, pc}

00006c24 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    6c24:	b580      	push	{r7, lr}
    6c26:	b082      	sub	sp, #8
    6c28:	af00      	add	r7, sp, #0
    6c2a:	6078      	str	r0, [r7, #4]
    6c2c:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    6c2e:	687b      	ldr	r3, [r7, #4]
    6c30:	683a      	ldr	r2, [r7, #0]
    6c32:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    6c34:	46c0      	nop			; (mov r8, r8)
    6c36:	46bd      	mov	sp, r7
    6c38:	b002      	add	sp, #8
    6c3a:	bd80      	pop	{r7, pc}

00006c3c <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    6c3c:	b580      	push	{r7, lr}
    6c3e:	b082      	sub	sp, #8
    6c40:	af00      	add	r7, sp, #0
    6c42:	6078      	str	r0, [r7, #4]
    6c44:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    6c46:	2300      	movs	r3, #0
}
    6c48:	0018      	movs	r0, r3
    6c4a:	46bd      	mov	sp, r7
    6c4c:	b002      	add	sp, #8
    6c4e:	bd80      	pop	{r7, pc}

00006c50 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    6c50:	b580      	push	{r7, lr}
    6c52:	b084      	sub	sp, #16
    6c54:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 50
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    6c56:	4b26      	ldr	r3, [pc, #152]	; (6cf0 <_usb_load_calib+0xa0>)
    6c58:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    6c5a:	4b26      	ldr	r3, [pc, #152]	; (6cf4 <_usb_load_calib+0xa4>)
    6c5c:	681b      	ldr	r3, [r3, #0]
    6c5e:	0b5b      	lsrs	r3, r3, #13
	uint32_t pad_transn
    6c60:	221f      	movs	r2, #31
    6c62:	4013      	ands	r3, r2
    6c64:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    6c66:	4b23      	ldr	r3, [pc, #140]	; (6cf4 <_usb_load_calib+0xa4>)
    6c68:	681b      	ldr	r3, [r3, #0]
    6c6a:	0c9b      	lsrs	r3, r3, #18
	uint32_t pad_transp
    6c6c:	221f      	movs	r2, #31
    6c6e:	4013      	ands	r3, r2
    6c70:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    6c72:	4b20      	ldr	r3, [pc, #128]	; (6cf4 <_usb_load_calib+0xa4>)
    6c74:	681b      	ldr	r3, [r3, #0]
    6c76:	0ddb      	lsrs	r3, r3, #23
    6c78:	2207      	movs	r2, #7
    6c7a:	4013      	ands	r3, r2
    6c7c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
    6c7e:	68fb      	ldr	r3, [r7, #12]
    6c80:	2b1f      	cmp	r3, #31
    6c82:	d101      	bne.n	6c88 <_usb_load_calib+0x38>
		pad_transn = 5;
    6c84:	2305      	movs	r3, #5
    6c86:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0x1F) {
    6c88:	68bb      	ldr	r3, [r7, #8]
    6c8a:	2b1f      	cmp	r3, #31
    6c8c:	d101      	bne.n	6c92 <_usb_load_calib+0x42>
		pad_transp = 29;
    6c8e:	231d      	movs	r3, #29
    6c90:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0x7) {
    6c92:	687b      	ldr	r3, [r7, #4]
    6c94:	2b07      	cmp	r3, #7
    6c96:	d101      	bne.n	6c9c <_usb_load_calib+0x4c>
		pad_trim = 5;
    6c98:	2305      	movs	r3, #5
    6c9a:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    6c9c:	68fb      	ldr	r3, [r7, #12]
    6c9e:	b29b      	uxth	r3, r3
    6ca0:	019b      	lsls	r3, r3, #6
    6ca2:	b29a      	uxth	r2, r3
    6ca4:	23f8      	movs	r3, #248	; 0xf8
    6ca6:	00db      	lsls	r3, r3, #3
    6ca8:	4013      	ands	r3, r2
    6caa:	b29a      	uxth	r2, r3
    6cac:	68bb      	ldr	r3, [r7, #8]
    6cae:	b29b      	uxth	r3, r3
    6cb0:	211f      	movs	r1, #31
    6cb2:	400b      	ands	r3, r1
    6cb4:	b29b      	uxth	r3, r3
    6cb6:	4313      	orrs	r3, r2
    6cb8:	b29a      	uxth	r2, r3
    6cba:	687b      	ldr	r3, [r7, #4]
    6cbc:	b29b      	uxth	r3, r3
    6cbe:	031b      	lsls	r3, r3, #12
    6cc0:	b299      	uxth	r1, r3
    6cc2:	23e0      	movs	r3, #224	; 0xe0
    6cc4:	01db      	lsls	r3, r3, #7
    6cc6:	400b      	ands	r3, r1
    6cc8:	b29b      	uxth	r3, r3
    6cca:	4313      	orrs	r3, r2
    6ccc:	b29a      	uxth	r2, r3
    6cce:	683b      	ldr	r3, [r7, #0]
    6cd0:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    6cd2:	683a      	ldr	r2, [r7, #0]
    6cd4:	78d3      	ldrb	r3, [r2, #3]
    6cd6:	2103      	movs	r1, #3
    6cd8:	430b      	orrs	r3, r1
    6cda:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    6cdc:	683a      	ldr	r2, [r7, #0]
    6cde:	78d3      	ldrb	r3, [r2, #3]
    6ce0:	210c      	movs	r1, #12
    6ce2:	430b      	orrs	r3, r1
    6ce4:	70d3      	strb	r3, [r2, #3]
}
    6ce6:	46c0      	nop			; (mov r8, r8)
    6ce8:	46bd      	mov	sp, r7
    6cea:	b004      	add	sp, #16
    6cec:	bd80      	pop	{r7, pc}
    6cee:	46c0      	nop			; (mov r8, r8)
    6cf0:	41005000 	.word	0x41005000
    6cf4:	00806024 	.word	0x00806024

00006cf8 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    6cf8:	b580      	push	{r7, lr}
    6cfa:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (SYSCTRL_DPLLSTATUS_ENABLE | SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)
	while (hri_sysctrl_get_DPLLSTATUS_reg(SYSCTRL, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    6cfc:	46c0      	nop			; (mov r8, r8)
    6cfe:	4b05      	ldr	r3, [pc, #20]	; (6d14 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    6d00:	2107      	movs	r1, #7
    6d02:	0018      	movs	r0, r3
    6d04:	4b04      	ldr	r3, [pc, #16]	; (6d18 <_usb_d_dev_wait_dpll_rdy+0x20>)
    6d06:	4798      	blx	r3
    6d08:	0003      	movs	r3, r0
    6d0a:	2b07      	cmp	r3, #7
    6d0c:	d1f7      	bne.n	6cfe <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    6d0e:	46c0      	nop			; (mov r8, r8)
    6d10:	46bd      	mov	sp, r7
    6d12:	bd80      	pop	{r7, pc}
    6d14:	40000800 	.word	0x40000800
    6d18:	0000670f 	.word	0x0000670f

00006d1c <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    6d1c:	b580      	push	{r7, lr}
    6d1e:	af00      	add	r7, sp, #0
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)
	/* In USB recovery mode the status is not checked */
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    6d20:	4b0e      	ldr	r3, [pc, #56]	; (6d5c <_usb_d_dev_wait_dfll_rdy+0x40>)
    6d22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    6d24:	b29b      	uxth	r3, r3
    6d26:	001a      	movs	r2, r3
    6d28:	2320      	movs	r3, #32
    6d2a:	4013      	ands	r3, r2
    6d2c:	d109      	bne.n	6d42 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    6d2e:	46c0      	nop			; (mov r8, r8)
    6d30:	4b0a      	ldr	r3, [pc, #40]	; (6d5c <_usb_d_dev_wait_dfll_rdy+0x40>)
    6d32:	21d0      	movs	r1, #208	; 0xd0
    6d34:	0018      	movs	r0, r3
    6d36:	4b0a      	ldr	r3, [pc, #40]	; (6d60 <_usb_d_dev_wait_dfll_rdy+0x44>)
    6d38:	4798      	blx	r3
    6d3a:	0003      	movs	r3, r0
    6d3c:	2bd0      	cmp	r3, #208	; 0xd0
    6d3e:	d1f7      	bne.n	6d30 <_usb_d_dev_wait_dfll_rdy+0x14>
			;
	} else {
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
			;
	}
}
    6d40:	e008      	b.n	6d54 <_usb_d_dev_wait_dfll_rdy+0x38>
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    6d42:	46c0      	nop			; (mov r8, r8)
    6d44:	4b05      	ldr	r3, [pc, #20]	; (6d5c <_usb_d_dev_wait_dfll_rdy+0x40>)
    6d46:	2110      	movs	r1, #16
    6d48:	0018      	movs	r0, r3
    6d4a:	4b05      	ldr	r3, [pc, #20]	; (6d60 <_usb_d_dev_wait_dfll_rdy+0x44>)
    6d4c:	4798      	blx	r3
    6d4e:	0003      	movs	r3, r0
    6d50:	2b10      	cmp	r3, #16
    6d52:	d1f7      	bne.n	6d44 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    6d54:	46c0      	nop			; (mov r8, r8)
    6d56:	46bd      	mov	sp, r7
    6d58:	bd80      	pop	{r7, pc}
    6d5a:	46c0      	nop			; (mov r8, r8)
    6d5c:	40000800 	.word	0x40000800
    6d60:	000066ed 	.word	0x000066ed

00006d64 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    6d64:	b580      	push	{r7, lr}
    6d66:	b082      	sub	sp, #8
    6d68:	af00      	add	r7, sp, #0
    6d6a:	0002      	movs	r2, r0
    6d6c:	1dfb      	adds	r3, r7, #7
    6d6e:	701a      	strb	r2, [r3, #0]
	if (clk_src == USB_CLK_SRC_DFLL) {
    6d70:	1dfb      	adds	r3, r7, #7
    6d72:	781b      	ldrb	r3, [r3, #0]
    6d74:	2b00      	cmp	r3, #0
    6d76:	d102      	bne.n	6d7e <_usb_d_dev_wait_clk_rdy+0x1a>
		_usb_d_dev_wait_dfll_rdy();
    6d78:	4b06      	ldr	r3, [pc, #24]	; (6d94 <_usb_d_dev_wait_clk_rdy+0x30>)
    6d7a:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    6d7c:	e005      	b.n	6d8a <_usb_d_dev_wait_clk_rdy+0x26>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    6d7e:	1dfb      	adds	r3, r7, #7
    6d80:	781b      	ldrb	r3, [r3, #0]
    6d82:	2b01      	cmp	r3, #1
    6d84:	d101      	bne.n	6d8a <_usb_d_dev_wait_clk_rdy+0x26>
		_usb_d_dev_wait_dpll_rdy();
    6d86:	4b04      	ldr	r3, [pc, #16]	; (6d98 <_usb_d_dev_wait_clk_rdy+0x34>)
    6d88:	4798      	blx	r3
}
    6d8a:	46c0      	nop			; (mov r8, r8)
    6d8c:	46bd      	mov	sp, r7
    6d8e:	b002      	add	sp, #8
    6d90:	bd80      	pop	{r7, pc}
    6d92:	46c0      	nop			; (mov r8, r8)
    6d94:	00006d1d 	.word	0x00006d1d
    6d98:	00006cf9 	.word	0x00006cf9

00006d9c <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    6d9c:	b580      	push	{r7, lr}
    6d9e:	b082      	sub	sp, #8
    6da0:	af00      	add	r7, sp, #0
    6da2:	0002      	movs	r2, r0
    6da4:	6039      	str	r1, [r7, #0]
    6da6:	1dfb      	adds	r3, r7, #7
    6da8:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    6daa:	683b      	ldr	r3, [r7, #0]
    6dac:	b2da      	uxtb	r2, r3
    6dae:	1dfb      	adds	r3, r7, #7
    6db0:	781b      	ldrb	r3, [r3, #0]
    6db2:	4804      	ldr	r0, [pc, #16]	; (6dc4 <_usbd_ep_int_ack+0x28>)
    6db4:	0019      	movs	r1, r3
    6db6:	4b04      	ldr	r3, [pc, #16]	; (6dc8 <_usbd_ep_int_ack+0x2c>)
    6db8:	4798      	blx	r3
}
    6dba:	46c0      	nop			; (mov r8, r8)
    6dbc:	46bd      	mov	sp, r7
    6dbe:	b002      	add	sp, #8
    6dc0:	bd80      	pop	{r7, pc}
    6dc2:	46c0      	nop			; (mov r8, r8)
    6dc4:	41005000 	.word	0x41005000
    6dc8:	00006813 	.word	0x00006813

00006dcc <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    6dcc:	b580      	push	{r7, lr}
    6dce:	b082      	sub	sp, #8
    6dd0:	af00      	add	r7, sp, #0
    6dd2:	0002      	movs	r2, r0
    6dd4:	6039      	str	r1, [r7, #0]
    6dd6:	1dfb      	adds	r3, r7, #7
    6dd8:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    6dda:	683b      	ldr	r3, [r7, #0]
    6ddc:	b2da      	uxtb	r2, r3
    6dde:	1dfb      	adds	r3, r7, #7
    6de0:	781b      	ldrb	r3, [r3, #0]
    6de2:	4804      	ldr	r0, [pc, #16]	; (6df4 <_usbd_ep_int_en+0x28>)
    6de4:	0019      	movs	r1, r3
    6de6:	4b04      	ldr	r3, [pc, #16]	; (6df8 <_usbd_ep_int_en+0x2c>)
    6de8:	4798      	blx	r3
}
    6dea:	46c0      	nop			; (mov r8, r8)
    6dec:	46bd      	mov	sp, r7
    6dee:	b002      	add	sp, #8
    6df0:	bd80      	pop	{r7, pc}
    6df2:	46c0      	nop			; (mov r8, r8)
    6df4:	41005000 	.word	0x41005000
    6df8:	00006901 	.word	0x00006901

00006dfc <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    6dfc:	b580      	push	{r7, lr}
    6dfe:	b082      	sub	sp, #8
    6e00:	af00      	add	r7, sp, #0
    6e02:	0002      	movs	r2, r0
    6e04:	6039      	str	r1, [r7, #0]
    6e06:	1dfb      	adds	r3, r7, #7
    6e08:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    6e0a:	683b      	ldr	r3, [r7, #0]
    6e0c:	b2da      	uxtb	r2, r3
    6e0e:	1dfb      	adds	r3, r7, #7
    6e10:	781b      	ldrb	r3, [r3, #0]
    6e12:	4804      	ldr	r0, [pc, #16]	; (6e24 <_usbd_ep_int_dis+0x28>)
    6e14:	0019      	movs	r1, r3
    6e16:	4b04      	ldr	r3, [pc, #16]	; (6e28 <_usbd_ep_int_dis+0x2c>)
    6e18:	4798      	blx	r3
}
    6e1a:	46c0      	nop			; (mov r8, r8)
    6e1c:	46bd      	mov	sp, r7
    6e1e:	b002      	add	sp, #8
    6e20:	bd80      	pop	{r7, pc}
    6e22:	46c0      	nop			; (mov r8, r8)
    6e24:	41005000 	.word	0x41005000
    6e28:	00006937 	.word	0x00006937

00006e2c <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    6e2c:	b580      	push	{r7, lr}
    6e2e:	b082      	sub	sp, #8
    6e30:	af00      	add	r7, sp, #0
    6e32:	0002      	movs	r2, r0
    6e34:	1dfb      	adds	r3, r7, #7
    6e36:	701a      	strb	r2, [r3, #0]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    6e38:	1dfb      	adds	r3, r7, #7
    6e3a:	781b      	ldrb	r3, [r3, #0]
    6e3c:	4a06      	ldr	r2, [pc, #24]	; (6e58 <_usbd_ep_is_ctrl+0x2c>)
    6e3e:	0019      	movs	r1, r3
    6e40:	0010      	movs	r0, r2
    6e42:	4b06      	ldr	r3, [pc, #24]	; (6e5c <_usbd_ep_is_ctrl+0x30>)
    6e44:	4798      	blx	r3
    6e46:	0003      	movs	r3, r0
    6e48:	3b11      	subs	r3, #17
    6e4a:	425a      	negs	r2, r3
    6e4c:	4153      	adcs	r3, r2
    6e4e:	b2db      	uxtb	r3, r3
}
    6e50:	0018      	movs	r0, r3
    6e52:	46bd      	mov	sp, r7
    6e54:	b002      	add	sp, #8
    6e56:	bd80      	pop	{r7, pc}
    6e58:	41005000 	.word	0x41005000
    6e5c:	00006a1d 	.word	0x00006a1d

00006e60 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    6e60:	b590      	push	{r4, r7, lr}
    6e62:	b083      	sub	sp, #12
    6e64:	af00      	add	r7, sp, #0
    6e66:	0004      	movs	r4, r0
    6e68:	0008      	movs	r0, r1
    6e6a:	0011      	movs	r1, r2
    6e6c:	1dfb      	adds	r3, r7, #7
    6e6e:	1c22      	adds	r2, r4, #0
    6e70:	701a      	strb	r2, [r3, #0]
    6e72:	1dbb      	adds	r3, r7, #6
    6e74:	1c02      	adds	r2, r0, #0
    6e76:	701a      	strb	r2, [r3, #0]
    6e78:	1d7b      	adds	r3, r7, #5
    6e7a:	1c0a      	adds	r2, r1, #0
    6e7c:	701a      	strb	r2, [r3, #0]
	if (st) {
    6e7e:	1d7b      	adds	r3, r7, #5
    6e80:	781b      	ldrb	r3, [r3, #0]
    6e82:	2b00      	cmp	r3, #0
    6e84:	d00c      	beq.n	6ea0 <_usbd_ep_set_stall+0x40>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    6e86:	1dbb      	adds	r3, r7, #6
    6e88:	781b      	ldrb	r3, [r3, #0]
    6e8a:	2210      	movs	r2, #16
    6e8c:	409a      	lsls	r2, r3
    6e8e:	0013      	movs	r3, r2
    6e90:	b2da      	uxtb	r2, r3
    6e92:	1dfb      	adds	r3, r7, #7
    6e94:	781b      	ldrb	r3, [r3, #0]
    6e96:	480a      	ldr	r0, [pc, #40]	; (6ec0 <_usbd_ep_set_stall+0x60>)
    6e98:	0019      	movs	r1, r3
    6e9a:	4b0a      	ldr	r3, [pc, #40]	; (6ec4 <_usbd_ep_set_stall+0x64>)
    6e9c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    6e9e:	e00b      	b.n	6eb8 <_usbd_ep_set_stall+0x58>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    6ea0:	1dbb      	adds	r3, r7, #6
    6ea2:	781b      	ldrb	r3, [r3, #0]
    6ea4:	2210      	movs	r2, #16
    6ea6:	409a      	lsls	r2, r3
    6ea8:	0013      	movs	r3, r2
    6eaa:	b2da      	uxtb	r2, r3
    6eac:	1dfb      	adds	r3, r7, #7
    6eae:	781b      	ldrb	r3, [r3, #0]
    6eb0:	4803      	ldr	r0, [pc, #12]	; (6ec0 <_usbd_ep_set_stall+0x60>)
    6eb2:	0019      	movs	r1, r3
    6eb4:	4b04      	ldr	r3, [pc, #16]	; (6ec8 <_usbd_ep_set_stall+0x68>)
    6eb6:	4798      	blx	r3
}
    6eb8:	46c0      	nop			; (mov r8, r8)
    6eba:	46bd      	mov	sp, r7
    6ebc:	b003      	add	sp, #12
    6ebe:	bd90      	pop	{r4, r7, pc}
    6ec0:	41005000 	.word	0x41005000
    6ec4:	00006847 	.word	0x00006847
    6ec8:	000068a3 	.word	0x000068a3

00006ecc <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    6ecc:	b580      	push	{r7, lr}
    6ece:	b084      	sub	sp, #16
    6ed0:	af00      	add	r7, sp, #0
    6ed2:	0002      	movs	r2, r0
    6ed4:	1dfb      	adds	r3, r7, #7
    6ed6:	701a      	strb	r2, [r3, #0]
    6ed8:	1dbb      	adds	r3, r7, #6
    6eda:	1c0a      	adds	r2, r1, #0
    6edc:	701a      	strb	r2, [r3, #0]
	Usb *hw = USB;
    6ede:	4b0c      	ldr	r3, [pc, #48]	; (6f10 <_usbd_ep_is_stalled+0x44>)
    6ee0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    6ee2:	1dfb      	adds	r3, r7, #7
    6ee4:	781a      	ldrb	r2, [r3, #0]
    6ee6:	68fb      	ldr	r3, [r7, #12]
    6ee8:	0011      	movs	r1, r2
    6eea:	0018      	movs	r0, r3
    6eec:	4b09      	ldr	r3, [pc, #36]	; (6f14 <_usbd_ep_is_stalled+0x48>)
    6eee:	4798      	blx	r3
    6ef0:	0003      	movs	r3, r0
    6ef2:	0019      	movs	r1, r3
    6ef4:	1dbb      	adds	r3, r7, #6
    6ef6:	781b      	ldrb	r3, [r3, #0]
    6ef8:	2210      	movs	r2, #16
    6efa:	409a      	lsls	r2, r3
    6efc:	0013      	movs	r3, r2
    6efe:	400b      	ands	r3, r1
    6f00:	1e5a      	subs	r2, r3, #1
    6f02:	4193      	sbcs	r3, r2
    6f04:	b2db      	uxtb	r3, r3
}
    6f06:	0018      	movs	r0, r3
    6f08:	46bd      	mov	sp, r7
    6f0a:	b004      	add	sp, #16
    6f0c:	bd80      	pop	{r7, pc}
    6f0e:	46c0      	nop			; (mov r8, r8)
    6f10:	41005000 	.word	0x41005000
    6f14:	0000687b 	.word	0x0000687b

00006f18 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    6f18:	b580      	push	{r7, lr}
    6f1a:	b084      	sub	sp, #16
    6f1c:	af00      	add	r7, sp, #0
    6f1e:	0002      	movs	r2, r0
    6f20:	1dfb      	adds	r3, r7, #7
    6f22:	701a      	strb	r2, [r3, #0]
    6f24:	1dbb      	adds	r3, r7, #6
    6f26:	1c0a      	adds	r2, r1, #0
    6f28:	701a      	strb	r2, [r3, #0]
	Usb *hw = USB;
    6f2a:	4b0c      	ldr	r3, [pc, #48]	; (6f5c <_usbd_ep_is_stall_sent+0x44>)
    6f2c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    6f2e:	1dfb      	adds	r3, r7, #7
    6f30:	781a      	ldrb	r2, [r3, #0]
    6f32:	68fb      	ldr	r3, [r7, #12]
    6f34:	0011      	movs	r1, r2
    6f36:	0018      	movs	r0, r3
    6f38:	4b09      	ldr	r3, [pc, #36]	; (6f60 <_usbd_ep_is_stall_sent+0x48>)
    6f3a:	4798      	blx	r3
    6f3c:	0003      	movs	r3, r0
    6f3e:	0019      	movs	r1, r3
    6f40:	1dbb      	adds	r3, r7, #6
    6f42:	781b      	ldrb	r3, [r3, #0]
    6f44:	2220      	movs	r2, #32
    6f46:	409a      	lsls	r2, r3
    6f48:	0013      	movs	r3, r2
    6f4a:	400b      	ands	r3, r1
    6f4c:	1e5a      	subs	r2, r3, #1
    6f4e:	4193      	sbcs	r3, r2
    6f50:	b2db      	uxtb	r3, r3
}
    6f52:	0018      	movs	r0, r3
    6f54:	46bd      	mov	sp, r7
    6f56:	b004      	add	sp, #16
    6f58:	bd80      	pop	{r7, pc}
    6f5a:	46c0      	nop			; (mov r8, r8)
    6f5c:	41005000 	.word	0x41005000
    6f60:	000067eb 	.word	0x000067eb

00006f64 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    6f64:	b580      	push	{r7, lr}
    6f66:	b082      	sub	sp, #8
    6f68:	af00      	add	r7, sp, #0
    6f6a:	0002      	movs	r2, r0
    6f6c:	1dfb      	adds	r3, r7, #7
    6f6e:	701a      	strb	r2, [r3, #0]
    6f70:	1dbb      	adds	r3, r7, #6
    6f72:	1c0a      	adds	r2, r1, #0
    6f74:	701a      	strb	r2, [r3, #0]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    6f76:	1dbb      	adds	r3, r7, #6
    6f78:	781b      	ldrb	r3, [r3, #0]
    6f7a:	2220      	movs	r2, #32
    6f7c:	409a      	lsls	r2, r3
    6f7e:	1dfb      	adds	r3, r7, #7
    6f80:	781b      	ldrb	r3, [r3, #0]
    6f82:	0011      	movs	r1, r2
    6f84:	0018      	movs	r0, r3
    6f86:	4b03      	ldr	r3, [pc, #12]	; (6f94 <_usbd_ep_ack_stall+0x30>)
    6f88:	4798      	blx	r3
}
    6f8a:	46c0      	nop			; (mov r8, r8)
    6f8c:	46bd      	mov	sp, r7
    6f8e:	b002      	add	sp, #8
    6f90:	bd80      	pop	{r7, pc}
    6f92:	46c0      	nop			; (mov r8, r8)
    6f94:	00006d9d 	.word	0x00006d9d

00006f98 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    6f98:	b590      	push	{r4, r7, lr}
    6f9a:	b083      	sub	sp, #12
    6f9c:	af00      	add	r7, sp, #0
    6f9e:	0004      	movs	r4, r0
    6fa0:	0008      	movs	r0, r1
    6fa2:	0011      	movs	r1, r2
    6fa4:	1dfb      	adds	r3, r7, #7
    6fa6:	1c22      	adds	r2, r4, #0
    6fa8:	701a      	strb	r2, [r3, #0]
    6faa:	1dbb      	adds	r3, r7, #6
    6fac:	1c02      	adds	r2, r0, #0
    6fae:	701a      	strb	r2, [r3, #0]
    6fb0:	1d7b      	adds	r3, r7, #5
    6fb2:	1c0a      	adds	r2, r1, #0
    6fb4:	701a      	strb	r2, [r3, #0]
	if (en) {
    6fb6:	1d7b      	adds	r3, r7, #5
    6fb8:	781b      	ldrb	r3, [r3, #0]
    6fba:	2b00      	cmp	r3, #0
    6fbc:	d00a      	beq.n	6fd4 <_usbd_ep_int_stall_en+0x3c>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    6fbe:	1dbb      	adds	r3, r7, #6
    6fc0:	781b      	ldrb	r3, [r3, #0]
    6fc2:	2220      	movs	r2, #32
    6fc4:	409a      	lsls	r2, r3
    6fc6:	1dfb      	adds	r3, r7, #7
    6fc8:	781b      	ldrb	r3, [r3, #0]
    6fca:	0011      	movs	r1, r2
    6fcc:	0018      	movs	r0, r3
    6fce:	4b08      	ldr	r3, [pc, #32]	; (6ff0 <_usbd_ep_int_stall_en+0x58>)
    6fd0:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    6fd2:	e009      	b.n	6fe8 <_usbd_ep_int_stall_en+0x50>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    6fd4:	1dbb      	adds	r3, r7, #6
    6fd6:	781b      	ldrb	r3, [r3, #0]
    6fd8:	2220      	movs	r2, #32
    6fda:	409a      	lsls	r2, r3
    6fdc:	1dfb      	adds	r3, r7, #7
    6fde:	781b      	ldrb	r3, [r3, #0]
    6fe0:	0011      	movs	r1, r2
    6fe2:	0018      	movs	r0, r3
    6fe4:	4b03      	ldr	r3, [pc, #12]	; (6ff4 <_usbd_ep_int_stall_en+0x5c>)
    6fe6:	4798      	blx	r3
}
    6fe8:	46c0      	nop			; (mov r8, r8)
    6fea:	46bd      	mov	sp, r7
    6fec:	b003      	add	sp, #12
    6fee:	bd90      	pop	{r4, r7, pc}
    6ff0:	00006dcd 	.word	0x00006dcd
    6ff4:	00006dfd 	.word	0x00006dfd

00006ff8 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    6ff8:	b580      	push	{r7, lr}
    6ffa:	b082      	sub	sp, #8
    6ffc:	af00      	add	r7, sp, #0
    6ffe:	0002      	movs	r2, r0
    7000:	1dfb      	adds	r3, r7, #7
    7002:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    7004:	1dfb      	adds	r3, r7, #7
    7006:	781b      	ldrb	r3, [r3, #0]
    7008:	4a04      	ldr	r2, [pc, #16]	; (701c <_usbd_ep_stop_setup+0x24>)
    700a:	0019      	movs	r1, r3
    700c:	0010      	movs	r0, r2
    700e:	4b04      	ldr	r3, [pc, #16]	; (7020 <_usbd_ep_stop_setup+0x28>)
    7010:	4798      	blx	r3
}
    7012:	46c0      	nop			; (mov r8, r8)
    7014:	46bd      	mov	sp, r7
    7016:	b002      	add	sp, #8
    7018:	bd80      	pop	{r7, pc}
    701a:	46c0      	nop			; (mov r8, r8)
    701c:	41005000 	.word	0x41005000
    7020:	000068d7 	.word	0x000068d7

00007024 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    7024:	b580      	push	{r7, lr}
    7026:	b082      	sub	sp, #8
    7028:	af00      	add	r7, sp, #0
    702a:	0002      	movs	r2, r0
    702c:	1dfb      	adds	r3, r7, #7
    702e:	701a      	strb	r2, [r3, #0]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    7030:	1dfb      	adds	r3, r7, #7
    7032:	781b      	ldrb	r3, [r3, #0]
    7034:	4806      	ldr	r0, [pc, #24]	; (7050 <_usbd_ep_is_setup+0x2c>)
    7036:	2210      	movs	r2, #16
    7038:	0019      	movs	r1, r3
    703a:	4b06      	ldr	r3, [pc, #24]	; (7054 <_usbd_ep_is_setup+0x30>)
    703c:	4798      	blx	r3
    703e:	0003      	movs	r3, r0
    7040:	1e5a      	subs	r2, r3, #1
    7042:	4193      	sbcs	r3, r2
    7044:	b2db      	uxtb	r3, r3
}
    7046:	0018      	movs	r0, r3
    7048:	46bd      	mov	sp, r7
    704a:	b002      	add	sp, #8
    704c:	bd80      	pop	{r7, pc}
    704e:	46c0      	nop			; (mov r8, r8)
    7050:	41005000 	.word	0x41005000
    7054:	0000679d 	.word	0x0000679d

00007058 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    7058:	b580      	push	{r7, lr}
    705a:	b082      	sub	sp, #8
    705c:	af00      	add	r7, sp, #0
    705e:	0002      	movs	r2, r0
    7060:	1dfb      	adds	r3, r7, #7
    7062:	701a      	strb	r2, [r3, #0]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    7064:	1dfb      	adds	r3, r7, #7
    7066:	781b      	ldrb	r3, [r3, #0]
    7068:	2110      	movs	r1, #16
    706a:	0018      	movs	r0, r3
    706c:	4b02      	ldr	r3, [pc, #8]	; (7078 <_usbd_ep_ack_setup+0x20>)
    706e:	4798      	blx	r3
}
    7070:	46c0      	nop			; (mov r8, r8)
    7072:	46bd      	mov	sp, r7
    7074:	b002      	add	sp, #8
    7076:	bd80      	pop	{r7, pc}
    7078:	00006d9d 	.word	0x00006d9d

0000707c <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    707c:	b590      	push	{r4, r7, lr}
    707e:	b083      	sub	sp, #12
    7080:	af00      	add	r7, sp, #0
    7082:	0004      	movs	r4, r0
    7084:	0008      	movs	r0, r1
    7086:	0011      	movs	r1, r2
    7088:	1dfb      	adds	r3, r7, #7
    708a:	1c22      	adds	r2, r4, #0
    708c:	701a      	strb	r2, [r3, #0]
    708e:	1dbb      	adds	r3, r7, #6
    7090:	1c02      	adds	r2, r0, #0
    7092:	701a      	strb	r2, [r3, #0]
    7094:	1d7b      	adds	r3, r7, #5
    7096:	1c0a      	adds	r2, r1, #0
    7098:	701a      	strb	r2, [r3, #0]
	if (tgl) {
    709a:	1d7b      	adds	r3, r7, #5
    709c:	781b      	ldrb	r3, [r3, #0]
    709e:	2b00      	cmp	r3, #0
    70a0:	d00c      	beq.n	70bc <_usbd_ep_set_toggle+0x40>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    70a2:	1dbb      	adds	r3, r7, #6
    70a4:	781b      	ldrb	r3, [r3, #0]
    70a6:	2201      	movs	r2, #1
    70a8:	409a      	lsls	r2, r3
    70aa:	0013      	movs	r3, r2
    70ac:	b2da      	uxtb	r2, r3
    70ae:	1dfb      	adds	r3, r7, #7
    70b0:	781b      	ldrb	r3, [r3, #0]
    70b2:	480a      	ldr	r0, [pc, #40]	; (70dc <_usbd_ep_set_toggle+0x60>)
    70b4:	0019      	movs	r1, r3
    70b6:	4b0a      	ldr	r3, [pc, #40]	; (70e0 <_usbd_ep_set_toggle+0x64>)
    70b8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    70ba:	e00b      	b.n	70d4 <_usbd_ep_set_toggle+0x58>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    70bc:	1dbb      	adds	r3, r7, #6
    70be:	781b      	ldrb	r3, [r3, #0]
    70c0:	2201      	movs	r2, #1
    70c2:	409a      	lsls	r2, r3
    70c4:	0013      	movs	r3, r2
    70c6:	b2da      	uxtb	r2, r3
    70c8:	1dfb      	adds	r3, r7, #7
    70ca:	781b      	ldrb	r3, [r3, #0]
    70cc:	4803      	ldr	r0, [pc, #12]	; (70dc <_usbd_ep_set_toggle+0x60>)
    70ce:	0019      	movs	r1, r3
    70d0:	4b04      	ldr	r3, [pc, #16]	; (70e4 <_usbd_ep_set_toggle+0x68>)
    70d2:	4798      	blx	r3
}
    70d4:	46c0      	nop			; (mov r8, r8)
    70d6:	46bd      	mov	sp, r7
    70d8:	b003      	add	sp, #12
    70da:	bd90      	pop	{r4, r7, pc}
    70dc:	41005000 	.word	0x41005000
    70e0:	00006847 	.word	0x00006847
    70e4:	000068a3 	.word	0x000068a3

000070e8 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    70e8:	b580      	push	{r7, lr}
    70ea:	b082      	sub	sp, #8
    70ec:	af00      	add	r7, sp, #0
    70ee:	0002      	movs	r2, r0
    70f0:	1dfb      	adds	r3, r7, #7
    70f2:	701a      	strb	r2, [r3, #0]
    70f4:	1dbb      	adds	r3, r7, #6
    70f6:	1c0a      	adds	r2, r1, #0
    70f8:	701a      	strb	r2, [r3, #0]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    70fa:	1dbb      	adds	r3, r7, #6
    70fc:	781b      	ldrb	r3, [r3, #0]
    70fe:	2201      	movs	r2, #1
    7100:	409a      	lsls	r2, r3
    7102:	1dfb      	adds	r3, r7, #7
    7104:	781b      	ldrb	r3, [r3, #0]
    7106:	0011      	movs	r1, r2
    7108:	0018      	movs	r0, r3
    710a:	4b03      	ldr	r3, [pc, #12]	; (7118 <_usbd_ep_ack_io_cpt+0x30>)
    710c:	4798      	blx	r3
}
    710e:	46c0      	nop			; (mov r8, r8)
    7110:	46bd      	mov	sp, r7
    7112:	b002      	add	sp, #8
    7114:	bd80      	pop	{r7, pc}
    7116:	46c0      	nop			; (mov r8, r8)
    7118:	00006d9d 	.word	0x00006d9d

0000711c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    711c:	b580      	push	{r7, lr}
    711e:	b084      	sub	sp, #16
    7120:	af00      	add	r7, sp, #0
    7122:	603a      	str	r2, [r7, #0]
    7124:	1dfb      	adds	r3, r7, #7
    7126:	1c02      	adds	r2, r0, #0
    7128:	701a      	strb	r2, [r3, #0]
    712a:	1dbb      	adds	r3, r7, #6
    712c:	1c0a      	adds	r2, r1, #0
    712e:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    7130:	1dfb      	adds	r3, r7, #7
    7132:	781a      	ldrb	r2, [r3, #0]
    7134:	1dbb      	adds	r3, r7, #6
    7136:	781b      	ldrb	r3, [r3, #0]
    7138:	0052      	lsls	r2, r2, #1
    713a:	18d3      	adds	r3, r2, r3
    713c:	011a      	lsls	r2, r3, #4
    713e:	4b05      	ldr	r3, [pc, #20]	; (7154 <_usbd_ep_set_buf+0x38>)
    7140:	18d3      	adds	r3, r2, r3
    7142:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    7144:	68fb      	ldr	r3, [r7, #12]
    7146:	683a      	ldr	r2, [r7, #0]
    7148:	601a      	str	r2, [r3, #0]
}
    714a:	46c0      	nop			; (mov r8, r8)
    714c:	46bd      	mov	sp, r7
    714e:	b004      	add	sp, #16
    7150:	bd80      	pop	{r7, pc}
    7152:	46c0      	nop			; (mov r8, r8)
    7154:	200003a8 	.word	0x200003a8

00007158 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    7158:	b590      	push	{r4, r7, lr}
    715a:	b085      	sub	sp, #20
    715c:	af00      	add	r7, sp, #0
    715e:	0004      	movs	r4, r0
    7160:	0008      	movs	r0, r1
    7162:	0011      	movs	r1, r2
    7164:	1dfb      	adds	r3, r7, #7
    7166:	1c22      	adds	r2, r4, #0
    7168:	701a      	strb	r2, [r3, #0]
    716a:	1dbb      	adds	r3, r7, #6
    716c:	1c02      	adds	r2, r0, #0
    716e:	701a      	strb	r2, [r3, #0]
    7170:	1d3b      	adds	r3, r7, #4
    7172:	1c0a      	adds	r2, r1, #0
    7174:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    7176:	1dfb      	adds	r3, r7, #7
    7178:	781a      	ldrb	r2, [r3, #0]
    717a:	1dbb      	adds	r3, r7, #6
    717c:	781b      	ldrb	r3, [r3, #0]
    717e:	0052      	lsls	r2, r2, #1
    7180:	18d3      	adds	r3, r2, r3
    7182:	011a      	lsls	r2, r3, #4
    7184:	4b0a      	ldr	r3, [pc, #40]	; (71b0 <_usbd_ep_set_in_count+0x58>)
    7186:	18d3      	adds	r3, r2, r3
    7188:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    718a:	1d3b      	adds	r3, r7, #4
    718c:	881b      	ldrh	r3, [r3, #0]
    718e:	049b      	lsls	r3, r3, #18
    7190:	0c9b      	lsrs	r3, r3, #18
    7192:	b299      	uxth	r1, r3
    7194:	68fb      	ldr	r3, [r7, #12]
    7196:	685a      	ldr	r2, [r3, #4]
    7198:	0489      	lsls	r1, r1, #18
    719a:	0c89      	lsrs	r1, r1, #18
    719c:	0389      	lsls	r1, r1, #14
    719e:	4805      	ldr	r0, [pc, #20]	; (71b4 <_usbd_ep_set_in_count+0x5c>)
    71a0:	4002      	ands	r2, r0
    71a2:	430a      	orrs	r2, r1
    71a4:	605a      	str	r2, [r3, #4]
}
    71a6:	46c0      	nop			; (mov r8, r8)
    71a8:	46bd      	mov	sp, r7
    71aa:	b005      	add	sp, #20
    71ac:	bd90      	pop	{r4, r7, pc}
    71ae:	46c0      	nop			; (mov r8, r8)
    71b0:	200003a8 	.word	0x200003a8
    71b4:	f0003fff 	.word	0xf0003fff

000071b8 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    71b8:	b590      	push	{r4, r7, lr}
    71ba:	b085      	sub	sp, #20
    71bc:	af00      	add	r7, sp, #0
    71be:	0004      	movs	r4, r0
    71c0:	0008      	movs	r0, r1
    71c2:	0011      	movs	r1, r2
    71c4:	1dfb      	adds	r3, r7, #7
    71c6:	1c22      	adds	r2, r4, #0
    71c8:	701a      	strb	r2, [r3, #0]
    71ca:	1dbb      	adds	r3, r7, #6
    71cc:	1c02      	adds	r2, r0, #0
    71ce:	701a      	strb	r2, [r3, #0]
    71d0:	1d3b      	adds	r3, r7, #4
    71d2:	1c0a      	adds	r2, r1, #0
    71d4:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    71d6:	1dfb      	adds	r3, r7, #7
    71d8:	781a      	ldrb	r2, [r3, #0]
    71da:	1dbb      	adds	r3, r7, #6
    71dc:	781b      	ldrb	r3, [r3, #0]
    71de:	0052      	lsls	r2, r2, #1
    71e0:	18d3      	adds	r3, r2, r3
    71e2:	011a      	lsls	r2, r3, #4
    71e4:	4b09      	ldr	r3, [pc, #36]	; (720c <_usbd_ep_set_in_size+0x54>)
    71e6:	18d3      	adds	r3, r2, r3
    71e8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    71ea:	1d3b      	adds	r3, r7, #4
    71ec:	881b      	ldrh	r3, [r3, #0]
    71ee:	049b      	lsls	r3, r3, #18
    71f0:	0c9b      	lsrs	r3, r3, #18
    71f2:	b299      	uxth	r1, r3
    71f4:	68fb      	ldr	r3, [r7, #12]
    71f6:	685a      	ldr	r2, [r3, #4]
    71f8:	0489      	lsls	r1, r1, #18
    71fa:	0c89      	lsrs	r1, r1, #18
    71fc:	0b92      	lsrs	r2, r2, #14
    71fe:	0392      	lsls	r2, r2, #14
    7200:	430a      	orrs	r2, r1
    7202:	605a      	str	r2, [r3, #4]
}
    7204:	46c0      	nop			; (mov r8, r8)
    7206:	46bd      	mov	sp, r7
    7208:	b005      	add	sp, #20
    720a:	bd90      	pop	{r4, r7, pc}
    720c:	200003a8 	.word	0x200003a8

00007210 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    7210:	b590      	push	{r4, r7, lr}
    7212:	b085      	sub	sp, #20
    7214:	af00      	add	r7, sp, #0
    7216:	0004      	movs	r4, r0
    7218:	0008      	movs	r0, r1
    721a:	0011      	movs	r1, r2
    721c:	1dfb      	adds	r3, r7, #7
    721e:	1c22      	adds	r2, r4, #0
    7220:	701a      	strb	r2, [r3, #0]
    7222:	1dbb      	adds	r3, r7, #6
    7224:	1c02      	adds	r2, r0, #0
    7226:	701a      	strb	r2, [r3, #0]
    7228:	1d3b      	adds	r3, r7, #4
    722a:	1c0a      	adds	r2, r1, #0
    722c:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    722e:	1dfb      	adds	r3, r7, #7
    7230:	781a      	ldrb	r2, [r3, #0]
    7232:	1dbb      	adds	r3, r7, #6
    7234:	781b      	ldrb	r3, [r3, #0]
    7236:	0052      	lsls	r2, r2, #1
    7238:	18d3      	adds	r3, r2, r3
    723a:	011a      	lsls	r2, r3, #4
    723c:	4b09      	ldr	r3, [pc, #36]	; (7264 <_usbd_ep_set_out_count+0x54>)
    723e:	18d3      	adds	r3, r2, r3
    7240:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    7242:	1d3b      	adds	r3, r7, #4
    7244:	881b      	ldrh	r3, [r3, #0]
    7246:	049b      	lsls	r3, r3, #18
    7248:	0c9b      	lsrs	r3, r3, #18
    724a:	b299      	uxth	r1, r3
    724c:	68fb      	ldr	r3, [r7, #12]
    724e:	685a      	ldr	r2, [r3, #4]
    7250:	0489      	lsls	r1, r1, #18
    7252:	0c89      	lsrs	r1, r1, #18
    7254:	0b92      	lsrs	r2, r2, #14
    7256:	0392      	lsls	r2, r2, #14
    7258:	430a      	orrs	r2, r1
    725a:	605a      	str	r2, [r3, #4]
}
    725c:	46c0      	nop			; (mov r8, r8)
    725e:	46bd      	mov	sp, r7
    7260:	b005      	add	sp, #20
    7262:	bd90      	pop	{r4, r7, pc}
    7264:	200003a8 	.word	0x200003a8

00007268 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    7268:	b590      	push	{r4, r7, lr}
    726a:	b085      	sub	sp, #20
    726c:	af00      	add	r7, sp, #0
    726e:	0004      	movs	r4, r0
    7270:	0008      	movs	r0, r1
    7272:	0011      	movs	r1, r2
    7274:	1dfb      	adds	r3, r7, #7
    7276:	1c22      	adds	r2, r4, #0
    7278:	701a      	strb	r2, [r3, #0]
    727a:	1dbb      	adds	r3, r7, #6
    727c:	1c02      	adds	r2, r0, #0
    727e:	701a      	strb	r2, [r3, #0]
    7280:	1d3b      	adds	r3, r7, #4
    7282:	1c0a      	adds	r2, r1, #0
    7284:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    7286:	1dfb      	adds	r3, r7, #7
    7288:	781a      	ldrb	r2, [r3, #0]
    728a:	1dbb      	adds	r3, r7, #6
    728c:	781b      	ldrb	r3, [r3, #0]
    728e:	0052      	lsls	r2, r2, #1
    7290:	18d3      	adds	r3, r2, r3
    7292:	011a      	lsls	r2, r3, #4
    7294:	4b0a      	ldr	r3, [pc, #40]	; (72c0 <_usbd_ep_set_out_size+0x58>)
    7296:	18d3      	adds	r3, r2, r3
    7298:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    729a:	1d3b      	adds	r3, r7, #4
    729c:	881b      	ldrh	r3, [r3, #0]
    729e:	049b      	lsls	r3, r3, #18
    72a0:	0c9b      	lsrs	r3, r3, #18
    72a2:	b299      	uxth	r1, r3
    72a4:	68fb      	ldr	r3, [r7, #12]
    72a6:	685a      	ldr	r2, [r3, #4]
    72a8:	0489      	lsls	r1, r1, #18
    72aa:	0c89      	lsrs	r1, r1, #18
    72ac:	0389      	lsls	r1, r1, #14
    72ae:	4805      	ldr	r0, [pc, #20]	; (72c4 <_usbd_ep_set_out_size+0x5c>)
    72b0:	4002      	ands	r2, r0
    72b2:	430a      	orrs	r2, r1
    72b4:	605a      	str	r2, [r3, #4]
}
    72b6:	46c0      	nop			; (mov r8, r8)
    72b8:	46bd      	mov	sp, r7
    72ba:	b005      	add	sp, #20
    72bc:	bd90      	pop	{r4, r7, pc}
    72be:	46c0      	nop			; (mov r8, r8)
    72c0:	200003a8 	.word	0x200003a8
    72c4:	f0003fff 	.word	0xf0003fff

000072c8 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    72c8:	b580      	push	{r7, lr}
    72ca:	b084      	sub	sp, #16
    72cc:	af00      	add	r7, sp, #0
    72ce:	60ba      	str	r2, [r7, #8]
    72d0:	607b      	str	r3, [r7, #4]
    72d2:	230f      	movs	r3, #15
    72d4:	18fb      	adds	r3, r7, r3
    72d6:	1c02      	adds	r2, r0, #0
    72d8:	701a      	strb	r2, [r3, #0]
    72da:	230e      	movs	r3, #14
    72dc:	18fb      	adds	r3, r7, r3
    72de:	1c0a      	adds	r2, r1, #0
    72e0:	701a      	strb	r2, [r3, #0]
	_usbd_ep_set_in_size(epn, bank_n, size);
    72e2:	68bb      	ldr	r3, [r7, #8]
    72e4:	b29a      	uxth	r2, r3
    72e6:	230e      	movs	r3, #14
    72e8:	18fb      	adds	r3, r7, r3
    72ea:	7819      	ldrb	r1, [r3, #0]
    72ec:	230f      	movs	r3, #15
    72ee:	18fb      	adds	r3, r7, r3
    72f0:	781b      	ldrb	r3, [r3, #0]
    72f2:	0018      	movs	r0, r3
    72f4:	4b08      	ldr	r3, [pc, #32]	; (7318 <_usbd_ep_set_in_trans+0x50>)
    72f6:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    72f8:	687b      	ldr	r3, [r7, #4]
    72fa:	b29a      	uxth	r2, r3
    72fc:	230e      	movs	r3, #14
    72fe:	18fb      	adds	r3, r7, r3
    7300:	7819      	ldrb	r1, [r3, #0]
    7302:	230f      	movs	r3, #15
    7304:	18fb      	adds	r3, r7, r3
    7306:	781b      	ldrb	r3, [r3, #0]
    7308:	0018      	movs	r0, r3
    730a:	4b04      	ldr	r3, [pc, #16]	; (731c <_usbd_ep_set_in_trans+0x54>)
    730c:	4798      	blx	r3
}
    730e:	46c0      	nop			; (mov r8, r8)
    7310:	46bd      	mov	sp, r7
    7312:	b004      	add	sp, #16
    7314:	bd80      	pop	{r7, pc}
    7316:	46c0      	nop			; (mov r8, r8)
    7318:	000071b9 	.word	0x000071b9
    731c:	00007159 	.word	0x00007159

00007320 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    7320:	b580      	push	{r7, lr}
    7322:	b084      	sub	sp, #16
    7324:	af00      	add	r7, sp, #0
    7326:	60ba      	str	r2, [r7, #8]
    7328:	607b      	str	r3, [r7, #4]
    732a:	230f      	movs	r3, #15
    732c:	18fb      	adds	r3, r7, r3
    732e:	1c02      	adds	r2, r0, #0
    7330:	701a      	strb	r2, [r3, #0]
    7332:	230e      	movs	r3, #14
    7334:	18fb      	adds	r3, r7, r3
    7336:	1c0a      	adds	r2, r1, #0
    7338:	701a      	strb	r2, [r3, #0]
	_usbd_ep_set_out_size(epn, bank_n, size);
    733a:	68bb      	ldr	r3, [r7, #8]
    733c:	b29a      	uxth	r2, r3
    733e:	230e      	movs	r3, #14
    7340:	18fb      	adds	r3, r7, r3
    7342:	7819      	ldrb	r1, [r3, #0]
    7344:	230f      	movs	r3, #15
    7346:	18fb      	adds	r3, r7, r3
    7348:	781b      	ldrb	r3, [r3, #0]
    734a:	0018      	movs	r0, r3
    734c:	4b08      	ldr	r3, [pc, #32]	; (7370 <_usbd_ep_set_out_trans+0x50>)
    734e:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    7350:	687b      	ldr	r3, [r7, #4]
    7352:	b29a      	uxth	r2, r3
    7354:	230e      	movs	r3, #14
    7356:	18fb      	adds	r3, r7, r3
    7358:	7819      	ldrb	r1, [r3, #0]
    735a:	230f      	movs	r3, #15
    735c:	18fb      	adds	r3, r7, r3
    735e:	781b      	ldrb	r3, [r3, #0]
    7360:	0018      	movs	r0, r3
    7362:	4b04      	ldr	r3, [pc, #16]	; (7374 <_usbd_ep_set_out_trans+0x54>)
    7364:	4798      	blx	r3
}
    7366:	46c0      	nop			; (mov r8, r8)
    7368:	46bd      	mov	sp, r7
    736a:	b004      	add	sp, #16
    736c:	bd80      	pop	{r7, pc}
    736e:	46c0      	nop			; (mov r8, r8)
    7370:	00007269 	.word	0x00007269
    7374:	00007211 	.word	0x00007211

00007378 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    7378:	b580      	push	{r7, lr}
    737a:	b084      	sub	sp, #16
    737c:	af00      	add	r7, sp, #0
    737e:	0002      	movs	r2, r0
    7380:	1dfb      	adds	r3, r7, #7
    7382:	701a      	strb	r2, [r3, #0]
    7384:	1dbb      	adds	r3, r7, #6
    7386:	1c0a      	adds	r2, r1, #0
    7388:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    738a:	1dfb      	adds	r3, r7, #7
    738c:	781a      	ldrb	r2, [r3, #0]
    738e:	1dbb      	adds	r3, r7, #6
    7390:	781b      	ldrb	r3, [r3, #0]
    7392:	0052      	lsls	r2, r2, #1
    7394:	18d3      	adds	r3, r2, r3
    7396:	011a      	lsls	r2, r3, #4
    7398:	4b04      	ldr	r3, [pc, #16]	; (73ac <_usbd_ep_clear_bank_status+0x34>)
    739a:	18d3      	adds	r3, r2, r3
    739c:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    739e:	68fb      	ldr	r3, [r7, #12]
    73a0:	2200      	movs	r2, #0
    73a2:	729a      	strb	r2, [r3, #10]
}
    73a4:	46c0      	nop			; (mov r8, r8)
    73a6:	46bd      	mov	sp, r7
    73a8:	b004      	add	sp, #16
    73aa:	bd80      	pop	{r7, pc}
    73ac:	200003a8 	.word	0x200003a8

000073b0 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    73b0:	b590      	push	{r4, r7, lr}
    73b2:	b083      	sub	sp, #12
    73b4:	af00      	add	r7, sp, #0
    73b6:	0004      	movs	r4, r0
    73b8:	0008      	movs	r0, r1
    73ba:	0011      	movs	r1, r2
    73bc:	1dfb      	adds	r3, r7, #7
    73be:	1c22      	adds	r2, r4, #0
    73c0:	701a      	strb	r2, [r3, #0]
    73c2:	1dbb      	adds	r3, r7, #6
    73c4:	1c02      	adds	r2, r0, #0
    73c6:	701a      	strb	r2, [r3, #0]
    73c8:	1d7b      	adds	r3, r7, #5
    73ca:	1c0a      	adds	r2, r1, #0
    73cc:	701a      	strb	r2, [r3, #0]
	if (rdy) {
    73ce:	1d7b      	adds	r3, r7, #5
    73d0:	781b      	ldrb	r3, [r3, #0]
    73d2:	2b00      	cmp	r3, #0
    73d4:	d00c      	beq.n	73f0 <_usbd_ep_set_in_rdy+0x40>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    73d6:	1dbb      	adds	r3, r7, #6
    73d8:	781b      	ldrb	r3, [r3, #0]
    73da:	2240      	movs	r2, #64	; 0x40
    73dc:	409a      	lsls	r2, r3
    73de:	0013      	movs	r3, r2
    73e0:	b2da      	uxtb	r2, r3
    73e2:	1dfb      	adds	r3, r7, #7
    73e4:	781b      	ldrb	r3, [r3, #0]
    73e6:	480a      	ldr	r0, [pc, #40]	; (7410 <_usbd_ep_set_in_rdy+0x60>)
    73e8:	0019      	movs	r1, r3
    73ea:	4b0a      	ldr	r3, [pc, #40]	; (7414 <_usbd_ep_set_in_rdy+0x64>)
    73ec:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    73ee:	e00b      	b.n	7408 <_usbd_ep_set_in_rdy+0x58>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    73f0:	1dbb      	adds	r3, r7, #6
    73f2:	781b      	ldrb	r3, [r3, #0]
    73f4:	2240      	movs	r2, #64	; 0x40
    73f6:	409a      	lsls	r2, r3
    73f8:	0013      	movs	r3, r2
    73fa:	b2da      	uxtb	r2, r3
    73fc:	1dfb      	adds	r3, r7, #7
    73fe:	781b      	ldrb	r3, [r3, #0]
    7400:	4803      	ldr	r0, [pc, #12]	; (7410 <_usbd_ep_set_in_rdy+0x60>)
    7402:	0019      	movs	r1, r3
    7404:	4b04      	ldr	r3, [pc, #16]	; (7418 <_usbd_ep_set_in_rdy+0x68>)
    7406:	4798      	blx	r3
}
    7408:	46c0      	nop			; (mov r8, r8)
    740a:	46bd      	mov	sp, r7
    740c:	b003      	add	sp, #12
    740e:	bd90      	pop	{r4, r7, pc}
    7410:	41005000 	.word	0x41005000
    7414:	00006847 	.word	0x00006847
    7418:	000068a3 	.word	0x000068a3

0000741c <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    741c:	b590      	push	{r4, r7, lr}
    741e:	b083      	sub	sp, #12
    7420:	af00      	add	r7, sp, #0
    7422:	0004      	movs	r4, r0
    7424:	0008      	movs	r0, r1
    7426:	0011      	movs	r1, r2
    7428:	1dfb      	adds	r3, r7, #7
    742a:	1c22      	adds	r2, r4, #0
    742c:	701a      	strb	r2, [r3, #0]
    742e:	1dbb      	adds	r3, r7, #6
    7430:	1c02      	adds	r2, r0, #0
    7432:	701a      	strb	r2, [r3, #0]
    7434:	1d7b      	adds	r3, r7, #5
    7436:	1c0a      	adds	r2, r1, #0
    7438:	701a      	strb	r2, [r3, #0]
	if (rdy) {
    743a:	1d7b      	adds	r3, r7, #5
    743c:	781b      	ldrb	r3, [r3, #0]
    743e:	2b00      	cmp	r3, #0
    7440:	d00c      	beq.n	745c <_usbd_ep_set_out_rdy+0x40>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    7442:	1dbb      	adds	r3, r7, #6
    7444:	781b      	ldrb	r3, [r3, #0]
    7446:	2240      	movs	r2, #64	; 0x40
    7448:	409a      	lsls	r2, r3
    744a:	0013      	movs	r3, r2
    744c:	b2da      	uxtb	r2, r3
    744e:	1dfb      	adds	r3, r7, #7
    7450:	781b      	ldrb	r3, [r3, #0]
    7452:	480a      	ldr	r0, [pc, #40]	; (747c <_usbd_ep_set_out_rdy+0x60>)
    7454:	0019      	movs	r1, r3
    7456:	4b0a      	ldr	r3, [pc, #40]	; (7480 <_usbd_ep_set_out_rdy+0x64>)
    7458:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    745a:	e00b      	b.n	7474 <_usbd_ep_set_out_rdy+0x58>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    745c:	1dbb      	adds	r3, r7, #6
    745e:	781b      	ldrb	r3, [r3, #0]
    7460:	2240      	movs	r2, #64	; 0x40
    7462:	409a      	lsls	r2, r3
    7464:	0013      	movs	r3, r2
    7466:	b2da      	uxtb	r2, r3
    7468:	1dfb      	adds	r3, r7, #7
    746a:	781b      	ldrb	r3, [r3, #0]
    746c:	4803      	ldr	r0, [pc, #12]	; (747c <_usbd_ep_set_out_rdy+0x60>)
    746e:	0019      	movs	r1, r3
    7470:	4b04      	ldr	r3, [pc, #16]	; (7484 <_usbd_ep_set_out_rdy+0x68>)
    7472:	4798      	blx	r3
}
    7474:	46c0      	nop			; (mov r8, r8)
    7476:	46bd      	mov	sp, r7
    7478:	b003      	add	sp, #12
    747a:	bd90      	pop	{r4, r7, pc}
    747c:	41005000 	.word	0x41005000
    7480:	000068a3 	.word	0x000068a3
    7484:	00006847 	.word	0x00006847

00007488 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    7488:	b580      	push	{r7, lr}
    748a:	b082      	sub	sp, #8
    748c:	af00      	add	r7, sp, #0
    748e:	0002      	movs	r2, r0
    7490:	1dbb      	adds	r3, r7, #6
    7492:	801a      	strh	r2, [r3, #0]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    7494:	1dbb      	adds	r3, r7, #6
    7496:	881a      	ldrh	r2, [r3, #0]
    7498:	2380      	movs	r3, #128	; 0x80
    749a:	009b      	lsls	r3, r3, #2
    749c:	429a      	cmp	r2, r3
    749e:	d827      	bhi.n	74f0 <_usbd_ep_pcksize_size+0x68>
    74a0:	1dbb      	adds	r3, r7, #6
    74a2:	881a      	ldrh	r2, [r3, #0]
    74a4:	2380      	movs	r3, #128	; 0x80
    74a6:	005b      	lsls	r3, r3, #1
    74a8:	429a      	cmp	r2, r3
    74aa:	d81f      	bhi.n	74ec <_usbd_ep_pcksize_size+0x64>
    74ac:	1dbb      	adds	r3, r7, #6
    74ae:	881b      	ldrh	r3, [r3, #0]
    74b0:	2b80      	cmp	r3, #128	; 0x80
    74b2:	d819      	bhi.n	74e8 <_usbd_ep_pcksize_size+0x60>
    74b4:	1dbb      	adds	r3, r7, #6
    74b6:	881b      	ldrh	r3, [r3, #0]
    74b8:	2b40      	cmp	r3, #64	; 0x40
    74ba:	d813      	bhi.n	74e4 <_usbd_ep_pcksize_size+0x5c>
    74bc:	1dbb      	adds	r3, r7, #6
    74be:	881b      	ldrh	r3, [r3, #0]
    74c0:	2b20      	cmp	r3, #32
    74c2:	d80d      	bhi.n	74e0 <_usbd_ep_pcksize_size+0x58>
    74c4:	1dbb      	adds	r3, r7, #6
    74c6:	881b      	ldrh	r3, [r3, #0]
    74c8:	2b10      	cmp	r3, #16
    74ca:	d807      	bhi.n	74dc <_usbd_ep_pcksize_size+0x54>
    74cc:	1dbb      	adds	r3, r7, #6
    74ce:	881b      	ldrh	r3, [r3, #0]
    74d0:	2208      	movs	r2, #8
    74d2:	429a      	cmp	r2, r3
    74d4:	419b      	sbcs	r3, r3
    74d6:	425b      	negs	r3, r3
    74d8:	b2db      	uxtb	r3, r3
    74da:	e00a      	b.n	74f2 <_usbd_ep_pcksize_size+0x6a>
    74dc:	2302      	movs	r3, #2
    74de:	e008      	b.n	74f2 <_usbd_ep_pcksize_size+0x6a>
    74e0:	2303      	movs	r3, #3
    74e2:	e006      	b.n	74f2 <_usbd_ep_pcksize_size+0x6a>
    74e4:	2304      	movs	r3, #4
    74e6:	e004      	b.n	74f2 <_usbd_ep_pcksize_size+0x6a>
    74e8:	2305      	movs	r3, #5
    74ea:	e002      	b.n	74f2 <_usbd_ep_pcksize_size+0x6a>
    74ec:	2306      	movs	r3, #6
    74ee:	e000      	b.n	74f2 <_usbd_ep_pcksize_size+0x6a>
    74f0:	2307      	movs	r3, #7
}
    74f2:	0018      	movs	r0, r3
    74f4:	46bd      	mov	sp, r7
    74f6:	b002      	add	sp, #8
    74f8:	bd80      	pop	{r7, pc}
	...

000074fc <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    74fc:	b580      	push	{r7, lr}
    74fe:	b084      	sub	sp, #16
    7500:	af00      	add	r7, sp, #0
    7502:	0002      	movs	r2, r0
    7504:	1dfb      	adds	r3, r7, #7
    7506:	701a      	strb	r2, [r3, #0]
    7508:	1dbb      	adds	r3, r7, #6
    750a:	1c0a      	adds	r2, r1, #0
    750c:	701a      	strb	r2, [r3, #0]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    750e:	1dfb      	adds	r3, r7, #7
    7510:	781b      	ldrb	r3, [r3, #0]
    7512:	2b00      	cmp	r3, #0
    7514:	d00b      	beq.n	752e <_usb_d_dev_ept+0x32>
    7516:	1dbb      	adds	r3, r7, #6
    7518:	781b      	ldrb	r3, [r3, #0]
    751a:	2b00      	cmp	r3, #0
    751c:	d004      	beq.n	7528 <_usb_d_dev_ept+0x2c>
    751e:	1dfb      	adds	r3, r7, #7
    7520:	781b      	ldrb	r3, [r3, #0]
    7522:	3302      	adds	r3, #2
    7524:	b2db      	uxtb	r3, r3
    7526:	e003      	b.n	7530 <_usb_d_dev_ept+0x34>
    7528:	1dfb      	adds	r3, r7, #7
    752a:	781b      	ldrb	r3, [r3, #0]
    752c:	e000      	b.n	7530 <_usb_d_dev_ept+0x34>
    752e:	2300      	movs	r3, #0
    7530:	220f      	movs	r2, #15
    7532:	18ba      	adds	r2, r7, r2
    7534:	7013      	strb	r3, [r2, #0]
	return &dev_inst.ep[ep_index];
    7536:	230f      	movs	r3, #15
    7538:	18fb      	adds	r3, r7, r3
    753a:	781a      	ldrb	r2, [r3, #0]
    753c:	0013      	movs	r3, r2
    753e:	009b      	lsls	r3, r3, #2
    7540:	189b      	adds	r3, r3, r2
    7542:	009b      	lsls	r3, r3, #2
    7544:	3310      	adds	r3, #16
    7546:	001a      	movs	r2, r3
    7548:	4b03      	ldr	r3, [pc, #12]	; (7558 <_usb_d_dev_ept+0x5c>)
    754a:	18d3      	adds	r3, r2, r3
    754c:	3304      	adds	r3, #4
}
    754e:	0018      	movs	r0, r3
    7550:	46bd      	mov	sp, r7
    7552:	b004      	add	sp, #16
    7554:	bd80      	pop	{r7, pc}
    7556:	46c0      	nop			; (mov r8, r8)
    7558:	200002e0 	.word	0x200002e0

0000755c <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    755c:	b580      	push	{r7, lr}
    755e:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    7560:	4b05      	ldr	r3, [pc, #20]	; (7578 <_usb_d_dev_sof+0x1c>)
    7562:	2104      	movs	r1, #4
    7564:	0018      	movs	r0, r3
    7566:	4b05      	ldr	r3, [pc, #20]	; (757c <_usb_d_dev_sof+0x20>)
    7568:	4798      	blx	r3
	dev_inst.callbacks.sof();
    756a:	4b05      	ldr	r3, [pc, #20]	; (7580 <_usb_d_dev_sof+0x24>)
    756c:	681b      	ldr	r3, [r3, #0]
    756e:	4798      	blx	r3
}
    7570:	46c0      	nop			; (mov r8, r8)
    7572:	46bd      	mov	sp, r7
    7574:	bd80      	pop	{r7, pc}
    7576:	46c0      	nop			; (mov r8, r8)
    7578:	41005000 	.word	0x41005000
    757c:	00006a57 	.word	0x00006a57
    7580:	200002e0 	.word	0x200002e0

00007584 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    7584:	b580      	push	{r7, lr}
    7586:	b084      	sub	sp, #16
    7588:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    758a:	2300      	movs	r3, #0
    758c:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    758e:	4a22      	ldr	r2, [pc, #136]	; (7618 <_usb_d_dev_lpmsusp+0x94>)
    7590:	4b22      	ldr	r3, [pc, #136]	; (761c <_usb_d_dev_lpmsusp+0x98>)
    7592:	0011      	movs	r1, r2
    7594:	0018      	movs	r0, r3
    7596:	4b22      	ldr	r3, [pc, #136]	; (7620 <_usb_d_dev_lpmsusp+0x9c>)
    7598:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    759a:	4a1f      	ldr	r2, [pc, #124]	; (7618 <_usb_d_dev_lpmsusp+0x94>)
    759c:	4b1f      	ldr	r3, [pc, #124]	; (761c <_usb_d_dev_lpmsusp+0x98>)
    759e:	0011      	movs	r1, r2
    75a0:	0018      	movs	r0, r3
    75a2:	4b20      	ldr	r3, [pc, #128]	; (7624 <_usb_d_dev_lpmsusp+0xa0>)
    75a4:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    75a6:	4b1d      	ldr	r3, [pc, #116]	; (761c <_usb_d_dev_lpmsusp+0x98>)
    75a8:	2170      	movs	r1, #112	; 0x70
    75aa:	0018      	movs	r0, r3
    75ac:	4b1e      	ldr	r3, [pc, #120]	; (7628 <_usb_d_dev_lpmsusp+0xa4>)
    75ae:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    75b0:	230f      	movs	r3, #15
    75b2:	18fb      	adds	r3, r7, r3
    75b4:	2200      	movs	r2, #0
    75b6:	701a      	strb	r2, [r3, #0]
    75b8:	e01e      	b.n	75f8 <_usb_d_dev_lpmsusp+0x74>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    75ba:	230f      	movs	r3, #15
    75bc:	18fb      	adds	r3, r7, r3
    75be:	781b      	ldrb	r3, [r3, #0]
    75c0:	015a      	lsls	r2, r3, #5
    75c2:	4b1a      	ldr	r3, [pc, #104]	; (762c <_usb_d_dev_lpmsusp+0xa8>)
    75c4:	18d3      	adds	r3, r2, r3
    75c6:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    75c8:	687b      	ldr	r3, [r7, #4]
    75ca:	891b      	ldrh	r3, [r3, #8]
    75cc:	071b      	lsls	r3, r3, #28
    75ce:	0f1b      	lsrs	r3, r3, #28
    75d0:	b2db      	uxtb	r3, r3
    75d2:	2b03      	cmp	r3, #3
    75d4:	d109      	bne.n	75ea <_usb_d_dev_lpmsusp+0x66>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    75d6:	687b      	ldr	r3, [r7, #4]
    75d8:	891b      	ldrh	r3, [r3, #8]
    75da:	045b      	lsls	r3, r3, #17
    75dc:	0d5b      	lsrs	r3, r3, #21
    75de:	b29b      	uxth	r3, r3
    75e0:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    75e2:	687b      	ldr	r3, [r7, #4]
    75e4:	2200      	movs	r2, #0
    75e6:	811a      	strh	r2, [r3, #8]
			break;
    75e8:	e00b      	b.n	7602 <_usb_d_dev_lpmsusp+0x7e>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    75ea:	230f      	movs	r3, #15
    75ec:	18fb      	adds	r3, r7, r3
    75ee:	781a      	ldrb	r2, [r3, #0]
    75f0:	230f      	movs	r3, #15
    75f2:	18fb      	adds	r3, r7, r3
    75f4:	3201      	adds	r2, #1
    75f6:	701a      	strb	r2, [r3, #0]
    75f8:	230f      	movs	r3, #15
    75fa:	18fb      	adds	r3, r7, r3
    75fc:	781b      	ldrb	r3, [r3, #0]
    75fe:	2b01      	cmp	r3, #1
    7600:	d9db      	bls.n	75ba <_usb_d_dev_lpmsusp+0x36>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    7602:	4b0b      	ldr	r3, [pc, #44]	; (7630 <_usb_d_dev_lpmsusp+0xac>)
    7604:	685b      	ldr	r3, [r3, #4]
    7606:	68ba      	ldr	r2, [r7, #8]
    7608:	0011      	movs	r1, r2
    760a:	2003      	movs	r0, #3
    760c:	4798      	blx	r3
}
    760e:	46c0      	nop			; (mov r8, r8)
    7610:	46bd      	mov	sp, r7
    7612:	b004      	add	sp, #16
    7614:	bd80      	pop	{r7, pc}
    7616:	46c0      	nop			; (mov r8, r8)
    7618:	00000201 	.word	0x00000201
    761c:	41005000 	.word	0x41005000
    7620:	00006a57 	.word	0x00006a57
    7624:	00006aa9 	.word	0x00006aa9
    7628:	00006a75 	.word	0x00006a75
    762c:	200003a8 	.word	0x200003a8
    7630:	200002e0 	.word	0x200002e0

00007634 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    7634:	b580      	push	{r7, lr}
    7636:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    7638:	4b06      	ldr	r3, [pc, #24]	; (7654 <_usb_d_dev_ramerr+0x20>)
    763a:	2180      	movs	r1, #128	; 0x80
    763c:	0018      	movs	r0, r3
    763e:	4b06      	ldr	r3, [pc, #24]	; (7658 <_usb_d_dev_ramerr+0x24>)
    7640:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    7642:	4b06      	ldr	r3, [pc, #24]	; (765c <_usb_d_dev_ramerr+0x28>)
    7644:	685b      	ldr	r3, [r3, #4]
    7646:	2100      	movs	r1, #0
    7648:	2005      	movs	r0, #5
    764a:	4798      	blx	r3
}
    764c:	46c0      	nop			; (mov r8, r8)
    764e:	46bd      	mov	sp, r7
    7650:	bd80      	pop	{r7, pc}
    7652:	46c0      	nop			; (mov r8, r8)
    7654:	41005000 	.word	0x41005000
    7658:	00006a57 	.word	0x00006a57
    765c:	200002e0 	.word	0x200002e0

00007660 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    7660:	b580      	push	{r7, lr}
    7662:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    7664:	4b0d      	ldr	r3, [pc, #52]	; (769c <_usb_d_dev_wakeup+0x3c>)
    7666:	2170      	movs	r1, #112	; 0x70
    7668:	0018      	movs	r0, r3
    766a:	4b0d      	ldr	r3, [pc, #52]	; (76a0 <_usb_d_dev_wakeup+0x40>)
    766c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    766e:	4b0b      	ldr	r3, [pc, #44]	; (769c <_usb_d_dev_wakeup+0x3c>)
    7670:	2170      	movs	r1, #112	; 0x70
    7672:	0018      	movs	r0, r3
    7674:	4b0b      	ldr	r3, [pc, #44]	; (76a4 <_usb_d_dev_wakeup+0x44>)
    7676:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    7678:	4a0b      	ldr	r2, [pc, #44]	; (76a8 <_usb_d_dev_wakeup+0x48>)
    767a:	4b08      	ldr	r3, [pc, #32]	; (769c <_usb_d_dev_wakeup+0x3c>)
    767c:	0011      	movs	r1, r2
    767e:	0018      	movs	r0, r3
    7680:	4b0a      	ldr	r3, [pc, #40]	; (76ac <_usb_d_dev_wakeup+0x4c>)
    7682:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    7684:	2000      	movs	r0, #0
    7686:	4b0a      	ldr	r3, [pc, #40]	; (76b0 <_usb_d_dev_wakeup+0x50>)
    7688:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    768a:	4b0a      	ldr	r3, [pc, #40]	; (76b4 <_usb_d_dev_wakeup+0x54>)
    768c:	685b      	ldr	r3, [r3, #4]
    768e:	2100      	movs	r1, #0
    7690:	2002      	movs	r0, #2
    7692:	4798      	blx	r3
}
    7694:	46c0      	nop			; (mov r8, r8)
    7696:	46bd      	mov	sp, r7
    7698:	bd80      	pop	{r7, pc}
    769a:	46c0      	nop			; (mov r8, r8)
    769c:	41005000 	.word	0x41005000
    76a0:	00006a57 	.word	0x00006a57
    76a4:	00006aa9 	.word	0x00006aa9
    76a8:	00000201 	.word	0x00000201
    76ac:	00006a75 	.word	0x00006a75
    76b0:	00006d65 	.word	0x00006d65
    76b4:	200002e0 	.word	0x200002e0

000076b8 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    76b8:	b580      	push	{r7, lr}
    76ba:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    76bc:	4b0f      	ldr	r3, [pc, #60]	; (76fc <_usb_d_dev_reset+0x44>)
    76be:	2200      	movs	r2, #0
    76c0:	2100      	movs	r1, #0
    76c2:	0018      	movs	r0, r3
    76c4:	4b0e      	ldr	r3, [pc, #56]	; (7700 <_usb_d_dev_reset+0x48>)
    76c6:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    76c8:	4b0c      	ldr	r3, [pc, #48]	; (76fc <_usb_d_dev_reset+0x44>)
    76ca:	2108      	movs	r1, #8
    76cc:	0018      	movs	r0, r3
    76ce:	4b0d      	ldr	r3, [pc, #52]	; (7704 <_usb_d_dev_reset+0x4c>)
    76d0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    76d2:	4b0a      	ldr	r3, [pc, #40]	; (76fc <_usb_d_dev_reset+0x44>)
    76d4:	2170      	movs	r1, #112	; 0x70
    76d6:	0018      	movs	r0, r3
    76d8:	4b0b      	ldr	r3, [pc, #44]	; (7708 <_usb_d_dev_reset+0x50>)
    76da:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    76dc:	4a0b      	ldr	r2, [pc, #44]	; (770c <_usb_d_dev_reset+0x54>)
    76de:	4b07      	ldr	r3, [pc, #28]	; (76fc <_usb_d_dev_reset+0x44>)
    76e0:	0011      	movs	r1, r2
    76e2:	0018      	movs	r0, r3
    76e4:	4b0a      	ldr	r3, [pc, #40]	; (7710 <_usb_d_dev_reset+0x58>)
    76e6:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    76e8:	4b0a      	ldr	r3, [pc, #40]	; (7714 <_usb_d_dev_reset+0x5c>)
    76ea:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    76ec:	4b0a      	ldr	r3, [pc, #40]	; (7718 <_usb_d_dev_reset+0x60>)
    76ee:	685b      	ldr	r3, [r3, #4]
    76f0:	2100      	movs	r1, #0
    76f2:	2001      	movs	r0, #1
    76f4:	4798      	blx	r3
}
    76f6:	46c0      	nop			; (mov r8, r8)
    76f8:	46bd      	mov	sp, r7
    76fa:	bd80      	pop	{r7, pc}
    76fc:	41005000 	.word	0x41005000
    7700:	000069ed 	.word	0x000069ed
    7704:	00006a57 	.word	0x00006a57
    7708:	00006aa9 	.word	0x00006aa9
    770c:	00000201 	.word	0x00000201
    7710:	00006a75 	.word	0x00006a75
    7714:	000084f9 	.word	0x000084f9
    7718:	200002e0 	.word	0x200002e0

0000771c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    771c:	b580      	push	{r7, lr}
    771e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    7720:	4a0c      	ldr	r2, [pc, #48]	; (7754 <_usb_d_dev_suspend+0x38>)
    7722:	4b0d      	ldr	r3, [pc, #52]	; (7758 <_usb_d_dev_suspend+0x3c>)
    7724:	0011      	movs	r1, r2
    7726:	0018      	movs	r0, r3
    7728:	4b0c      	ldr	r3, [pc, #48]	; (775c <_usb_d_dev_suspend+0x40>)
    772a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    772c:	4a09      	ldr	r2, [pc, #36]	; (7754 <_usb_d_dev_suspend+0x38>)
    772e:	4b0a      	ldr	r3, [pc, #40]	; (7758 <_usb_d_dev_suspend+0x3c>)
    7730:	0011      	movs	r1, r2
    7732:	0018      	movs	r0, r3
    7734:	4b0a      	ldr	r3, [pc, #40]	; (7760 <_usb_d_dev_suspend+0x44>)
    7736:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    7738:	4b07      	ldr	r3, [pc, #28]	; (7758 <_usb_d_dev_suspend+0x3c>)
    773a:	2170      	movs	r1, #112	; 0x70
    773c:	0018      	movs	r0, r3
    773e:	4b09      	ldr	r3, [pc, #36]	; (7764 <_usb_d_dev_suspend+0x48>)
    7740:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    7742:	4b09      	ldr	r3, [pc, #36]	; (7768 <_usb_d_dev_suspend+0x4c>)
    7744:	685b      	ldr	r3, [r3, #4]
    7746:	2100      	movs	r1, #0
    7748:	2004      	movs	r0, #4
    774a:	4798      	blx	r3
}
    774c:	46c0      	nop			; (mov r8, r8)
    774e:	46bd      	mov	sp, r7
    7750:	bd80      	pop	{r7, pc}
    7752:	46c0      	nop			; (mov r8, r8)
    7754:	00000201 	.word	0x00000201
    7758:	41005000 	.word	0x41005000
    775c:	00006a57 	.word	0x00006a57
    7760:	00006aa9 	.word	0x00006aa9
    7764:	00006a75 	.word	0x00006a75
    7768:	200002e0 	.word	0x200002e0

0000776c <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    776c:	b590      	push	{r4, r7, lr}
    776e:	b083      	sub	sp, #12
    7770:	af00      	add	r7, sp, #0
	bool     rc    = true;
    7772:	1dfb      	adds	r3, r7, #7
    7774:	2201      	movs	r2, #1
    7776:	701a      	strb	r2, [r3, #0]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    7778:	1d3c      	adds	r4, r7, #4
    777a:	4b26      	ldr	r3, [pc, #152]	; (7814 <_usb_d_dev_handle_nep+0xa8>)
    777c:	0018      	movs	r0, r3
    777e:	4b26      	ldr	r3, [pc, #152]	; (7818 <_usb_d_dev_handle_nep+0xac>)
    7780:	4798      	blx	r3
    7782:	0003      	movs	r3, r0
    7784:	8023      	strh	r3, [r4, #0]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    7786:	4b23      	ldr	r3, [pc, #140]	; (7814 <_usb_d_dev_handle_nep+0xa8>)
    7788:	0018      	movs	r0, r3
    778a:	4b24      	ldr	r3, [pc, #144]	; (781c <_usb_d_dev_handle_nep+0xb0>)
    778c:	4798      	blx	r3
    778e:	0003      	movs	r3, r0
    7790:	0019      	movs	r1, r3
    7792:	1d3b      	adds	r3, r7, #4
    7794:	1d3a      	adds	r2, r7, #4
    7796:	8812      	ldrh	r2, [r2, #0]
    7798:	400a      	ands	r2, r1
    779a:	801a      	strh	r2, [r3, #0]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    779c:	1d3b      	adds	r3, r7, #4
    779e:	881b      	ldrh	r3, [r3, #0]
    77a0:	2204      	movs	r2, #4
    77a2:	4013      	ands	r3, r2
    77a4:	d003      	beq.n	77ae <_usb_d_dev_handle_nep+0x42>
		_usb_d_dev_sof();
    77a6:	4b1e      	ldr	r3, [pc, #120]	; (7820 <_usb_d_dev_handle_nep+0xb4>)
    77a8:	4798      	blx	r3
		return true;
    77aa:	2301      	movs	r3, #1
    77ac:	e02d      	b.n	780a <_usb_d_dev_handle_nep+0x9e>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    77ae:	1d3b      	adds	r3, r7, #4
    77b0:	881a      	ldrh	r2, [r3, #0]
    77b2:	2380      	movs	r3, #128	; 0x80
    77b4:	009b      	lsls	r3, r3, #2
    77b6:	4013      	ands	r3, r2
    77b8:	d002      	beq.n	77c0 <_usb_d_dev_handle_nep+0x54>
		_usb_d_dev_lpmsusp();
    77ba:	4b1a      	ldr	r3, [pc, #104]	; (7824 <_usb_d_dev_handle_nep+0xb8>)
    77bc:	4798      	blx	r3
    77be:	e022      	b.n	7806 <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    77c0:	1d3b      	adds	r3, r7, #4
    77c2:	881b      	ldrh	r3, [r3, #0]
    77c4:	2280      	movs	r2, #128	; 0x80
    77c6:	4013      	ands	r3, r2
    77c8:	d002      	beq.n	77d0 <_usb_d_dev_handle_nep+0x64>
		_usb_d_dev_ramerr();
    77ca:	4b17      	ldr	r3, [pc, #92]	; (7828 <_usb_d_dev_handle_nep+0xbc>)
    77cc:	4798      	blx	r3
    77ce:	e01a      	b.n	7806 <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    77d0:	1d3b      	adds	r3, r7, #4
    77d2:	881b      	ldrh	r3, [r3, #0]
    77d4:	2270      	movs	r2, #112	; 0x70
    77d6:	4013      	ands	r3, r2
    77d8:	d002      	beq.n	77e0 <_usb_d_dev_handle_nep+0x74>
		_usb_d_dev_wakeup();
    77da:	4b14      	ldr	r3, [pc, #80]	; (782c <_usb_d_dev_handle_nep+0xc0>)
    77dc:	4798      	blx	r3
    77de:	e012      	b.n	7806 <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    77e0:	1d3b      	adds	r3, r7, #4
    77e2:	881b      	ldrh	r3, [r3, #0]
    77e4:	2208      	movs	r2, #8
    77e6:	4013      	ands	r3, r2
    77e8:	d002      	beq.n	77f0 <_usb_d_dev_handle_nep+0x84>
		_usb_d_dev_reset();
    77ea:	4b11      	ldr	r3, [pc, #68]	; (7830 <_usb_d_dev_handle_nep+0xc4>)
    77ec:	4798      	blx	r3
    77ee:	e00a      	b.n	7806 <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    77f0:	1d3b      	adds	r3, r7, #4
    77f2:	881b      	ldrh	r3, [r3, #0]
    77f4:	2201      	movs	r2, #1
    77f6:	4013      	ands	r3, r2
    77f8:	d002      	beq.n	7800 <_usb_d_dev_handle_nep+0x94>
		_usb_d_dev_suspend();
    77fa:	4b0e      	ldr	r3, [pc, #56]	; (7834 <_usb_d_dev_handle_nep+0xc8>)
    77fc:	4798      	blx	r3
    77fe:	e002      	b.n	7806 <_usb_d_dev_handle_nep+0x9a>
	} else {
		rc = false;
    7800:	1dfb      	adds	r3, r7, #7
    7802:	2200      	movs	r2, #0
    7804:	701a      	strb	r2, [r3, #0]
	}
	return rc;
    7806:	1dfb      	adds	r3, r7, #7
    7808:	781b      	ldrb	r3, [r3, #0]
}
    780a:	0018      	movs	r0, r3
    780c:	46bd      	mov	sp, r7
    780e:	b003      	add	sp, #12
    7810:	bd90      	pop	{r4, r7, pc}
    7812:	46c0      	nop			; (mov r8, r8)
    7814:	41005000 	.word	0x41005000
    7818:	00006a41 	.word	0x00006a41
    781c:	00006a93 	.word	0x00006a93
    7820:	0000755d 	.word	0x0000755d
    7824:	00007585 	.word	0x00007585
    7828:	00007635 	.word	0x00007635
    782c:	00007661 	.word	0x00007661
    7830:	000076b9 	.word	0x000076b9
    7834:	0000771d 	.word	0x0000771d

00007838 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    7838:	b590      	push	{r4, r7, lr}
    783a:	b089      	sub	sp, #36	; 0x24
    783c:	af00      	add	r7, sp, #0
    783e:	6078      	str	r0, [r7, #4]
    7840:	000a      	movs	r2, r1
    7842:	1cfb      	adds	r3, r7, #3
    7844:	701a      	strb	r2, [r3, #0]
	Usb *              hw          = USB;
    7846:	4b98      	ldr	r3, [pc, #608]	; (7aa8 <_usb_d_dev_in_next+0x270>)
    7848:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    784a:	687b      	ldr	r3, [r7, #4]
    784c:	7c9a      	ldrb	r2, [r3, #18]
    784e:	2317      	movs	r3, #23
    7850:	18fb      	adds	r3, r7, r3
    7852:	210f      	movs	r1, #15
    7854:	400a      	ands	r2, r1
    7856:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    7858:	2317      	movs	r3, #23
    785a:	18fb      	adds	r3, r7, r3
    785c:	781b      	ldrb	r3, [r3, #0]
    785e:	015a      	lsls	r2, r3, #5
    7860:	4b92      	ldr	r3, [pc, #584]	; (7aac <_usb_d_dev_in_next+0x274>)
    7862:	18d3      	adds	r3, r2, r3
    7864:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    7866:	1cfb      	adds	r3, r7, #3
    7868:	781b      	ldrb	r3, [r3, #0]
    786a:	2b00      	cmp	r3, #0
    786c:	d007      	beq.n	787e <_usb_d_dev_in_next+0x46>
    786e:	693b      	ldr	r3, [r7, #16]
    7870:	3310      	adds	r3, #16
    7872:	685b      	ldr	r3, [r3, #4]
    7874:	049b      	lsls	r3, r3, #18
    7876:	0c9b      	lsrs	r3, r3, #18
    7878:	b29b      	uxth	r3, r3
    787a:	001a      	movs	r2, r3
    787c:	e000      	b.n	7880 <_usb_d_dev_in_next+0x48>
    787e:	2200      	movs	r2, #0
    7880:	230e      	movs	r3, #14
    7882:	18fb      	adds	r3, r7, r3
    7884:	801a      	strh	r2, [r3, #0]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    7886:	687b      	ldr	r3, [r7, #4]
    7888:	8a1b      	ldrh	r3, [r3, #16]
    788a:	4a89      	ldr	r2, [pc, #548]	; (7ab0 <_usb_d_dev_in_next+0x278>)
    788c:	4293      	cmp	r3, r2
    788e:	d103      	bne.n	7898 <_usb_d_dev_in_next+0x60>
    7890:	687b      	ldr	r3, [r7, #4]
    7892:	8a1b      	ldrh	r3, [r3, #16]
    7894:	b21b      	sxth	r3, r3
    7896:	e004      	b.n	78a2 <_usb_d_dev_in_next+0x6a>
    7898:	687b      	ldr	r3, [r7, #4]
    789a:	8a1b      	ldrh	r3, [r3, #16]
    789c:	3b01      	subs	r3, #1
    789e:	b29b      	uxth	r3, r3
    78a0:	b21b      	sxth	r3, r3
    78a2:	220e      	movs	r2, #14
    78a4:	18ba      	adds	r2, r7, r2
    78a6:	2100      	movs	r1, #0
    78a8:	5e52      	ldrsh	r2, [r2, r1]
    78aa:	4013      	ands	r3, r2
    78ac:	b21a      	sxth	r2, r3
    78ae:	230c      	movs	r3, #12
    78b0:	18fb      	adds	r3, r7, r3
    78b2:	801a      	strh	r2, [r3, #0]
	uint8_t            inten    = 0;
    78b4:	231d      	movs	r3, #29
    78b6:	18fb      	adds	r3, r7, r3
    78b8:	2200      	movs	r2, #0
    78ba:	701a      	strb	r2, [r3, #0]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    78bc:	687b      	ldr	r3, [r7, #4]
    78be:	7cdb      	ldrb	r3, [r3, #19]
    78c0:	2207      	movs	r2, #7
    78c2:	4013      	ands	r3, r2
    78c4:	b2da      	uxtb	r2, r3
    78c6:	230b      	movs	r3, #11
    78c8:	18fb      	adds	r3, r7, r3
    78ca:	3a01      	subs	r2, #1
    78cc:	4251      	negs	r1, r2
    78ce:	414a      	adcs	r2, r1
    78d0:	701a      	strb	r2, [r3, #0]

	if (isr) {
    78d2:	1cfb      	adds	r3, r7, #3
    78d4:	781b      	ldrb	r3, [r3, #0]
    78d6:	2b00      	cmp	r3, #0
    78d8:	d006      	beq.n	78e8 <_usb_d_dev_in_next+0xb0>
		_usbd_ep_ack_io_cpt(epn, 1);
    78da:	2317      	movs	r3, #23
    78dc:	18fb      	adds	r3, r7, r3
    78de:	781b      	ldrb	r3, [r3, #0]
    78e0:	2101      	movs	r1, #1
    78e2:	0018      	movs	r0, r3
    78e4:	4b73      	ldr	r3, [pc, #460]	; (7ab4 <_usb_d_dev_in_next+0x27c>)
    78e6:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    78e8:	687b      	ldr	r3, [r7, #4]
    78ea:	689a      	ldr	r2, [r3, #8]
    78ec:	230e      	movs	r3, #14
    78ee:	18fb      	adds	r3, r7, r3
    78f0:	881b      	ldrh	r3, [r3, #0]
    78f2:	18d2      	adds	r2, r2, r3
    78f4:	687b      	ldr	r3, [r7, #4]
    78f6:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    78f8:	687b      	ldr	r3, [r7, #4]
    78fa:	689a      	ldr	r2, [r3, #8]
    78fc:	687b      	ldr	r3, [r7, #4]
    78fe:	685b      	ldr	r3, [r3, #4]
    7900:	429a      	cmp	r2, r3
    7902:	d258      	bcs.n	79b6 <_usb_d_dev_in_next+0x17e>
		trans_next = ept->trans_size - ept->trans_count;
    7904:	687b      	ldr	r3, [r7, #4]
    7906:	685b      	ldr	r3, [r3, #4]
    7908:	b299      	uxth	r1, r3
    790a:	687b      	ldr	r3, [r7, #4]
    790c:	689b      	ldr	r3, [r3, #8]
    790e:	b29a      	uxth	r2, r3
    7910:	231e      	movs	r3, #30
    7912:	18fb      	adds	r3, r7, r3
    7914:	1a8a      	subs	r2, r1, r2
    7916:	801a      	strh	r2, [r3, #0]
		if (ept->flags.bits.use_cache) {
    7918:	687b      	ldr	r3, [r7, #4]
    791a:	7cdb      	ldrb	r3, [r3, #19]
    791c:	2220      	movs	r2, #32
    791e:	4013      	ands	r3, r2
    7920:	b2db      	uxtb	r3, r3
    7922:	2b00      	cmp	r3, #0
    7924:	d023      	beq.n	796e <_usb_d_dev_in_next+0x136>
			if (trans_next > ept->size) {
    7926:	687b      	ldr	r3, [r7, #4]
    7928:	8a1b      	ldrh	r3, [r3, #16]
    792a:	221e      	movs	r2, #30
    792c:	18ba      	adds	r2, r7, r2
    792e:	8812      	ldrh	r2, [r2, #0]
    7930:	429a      	cmp	r2, r3
    7932:	d904      	bls.n	793e <_usb_d_dev_in_next+0x106>
				trans_next = ept->size;
    7934:	231e      	movs	r3, #30
    7936:	18fb      	adds	r3, r7, r3
    7938:	687a      	ldr	r2, [r7, #4]
    793a:	8a12      	ldrh	r2, [r2, #16]
    793c:	801a      	strh	r2, [r3, #0]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    793e:	687b      	ldr	r3, [r7, #4]
    7940:	68d8      	ldr	r0, [r3, #12]
    7942:	687b      	ldr	r3, [r7, #4]
    7944:	681a      	ldr	r2, [r3, #0]
    7946:	687b      	ldr	r3, [r7, #4]
    7948:	689b      	ldr	r3, [r3, #8]
    794a:	18d1      	adds	r1, r2, r3
    794c:	231e      	movs	r3, #30
    794e:	18fb      	adds	r3, r7, r3
    7950:	881b      	ldrh	r3, [r3, #0]
    7952:	001a      	movs	r2, r3
    7954:	4b58      	ldr	r3, [pc, #352]	; (7ab8 <_usb_d_dev_in_next+0x280>)
    7956:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    7958:	687b      	ldr	r3, [r7, #4]
    795a:	68db      	ldr	r3, [r3, #12]
    795c:	001a      	movs	r2, r3
    795e:	2317      	movs	r3, #23
    7960:	18fb      	adds	r3, r7, r3
    7962:	781b      	ldrb	r3, [r3, #0]
    7964:	2101      	movs	r1, #1
    7966:	0018      	movs	r0, r3
    7968:	4b54      	ldr	r3, [pc, #336]	; (7abc <_usb_d_dev_in_next+0x284>)
    796a:	4798      	blx	r3
    796c:	e018      	b.n	79a0 <_usb_d_dev_in_next+0x168>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    796e:	231e      	movs	r3, #30
    7970:	18fb      	adds	r3, r7, r3
    7972:	881a      	ldrh	r2, [r3, #0]
    7974:	2380      	movs	r3, #128	; 0x80
    7976:	019b      	lsls	r3, r3, #6
    7978:	429a      	cmp	r2, r3
    797a:	d904      	bls.n	7986 <_usb_d_dev_in_next+0x14e>
				trans_next = USB_D_DEV_TRANS_MAX;
    797c:	231e      	movs	r3, #30
    797e:	18fb      	adds	r3, r7, r3
    7980:	2280      	movs	r2, #128	; 0x80
    7982:	0192      	lsls	r2, r2, #6
    7984:	801a      	strh	r2, [r3, #0]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    7986:	687b      	ldr	r3, [r7, #4]
    7988:	681a      	ldr	r2, [r3, #0]
    798a:	687b      	ldr	r3, [r7, #4]
    798c:	689b      	ldr	r3, [r3, #8]
    798e:	18d3      	adds	r3, r2, r3
    7990:	001a      	movs	r2, r3
    7992:	2317      	movs	r3, #23
    7994:	18fb      	adds	r3, r7, r3
    7996:	781b      	ldrb	r3, [r3, #0]
    7998:	2101      	movs	r1, #1
    799a:	0018      	movs	r0, r3
    799c:	4b47      	ldr	r3, [pc, #284]	; (7abc <_usb_d_dev_in_next+0x284>)
    799e:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    79a0:	231e      	movs	r3, #30
    79a2:	18fb      	adds	r3, r7, r3
    79a4:	881a      	ldrh	r2, [r3, #0]
    79a6:	2317      	movs	r3, #23
    79a8:	18fb      	adds	r3, r7, r3
    79aa:	7818      	ldrb	r0, [r3, #0]
    79ac:	2300      	movs	r3, #0
    79ae:	2101      	movs	r1, #1
    79b0:	4c43      	ldr	r4, [pc, #268]	; (7ac0 <_usb_d_dev_in_next+0x288>)
    79b2:	47a0      	blx	r4
		goto _in_tx_exec;
    79b4:	e04b      	b.n	7a4e <_usb_d_dev_in_next+0x216>
	} else if (ept->flags.bits.need_zlp) {
    79b6:	687b      	ldr	r3, [r7, #4]
    79b8:	7cdb      	ldrb	r3, [r3, #19]
    79ba:	2210      	movs	r2, #16
    79bc:	4013      	ands	r3, r2
    79be:	b2db      	uxtb	r3, r3
    79c0:	2b00      	cmp	r3, #0
    79c2:	d00d      	beq.n	79e0 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.need_zlp = 0;
    79c4:	687b      	ldr	r3, [r7, #4]
    79c6:	7cda      	ldrb	r2, [r3, #19]
    79c8:	2110      	movs	r1, #16
    79ca:	438a      	bics	r2, r1
    79cc:	74da      	strb	r2, [r3, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    79ce:	2317      	movs	r3, #23
    79d0:	18fb      	adds	r3, r7, r3
    79d2:	7818      	ldrb	r0, [r3, #0]
    79d4:	2300      	movs	r3, #0
    79d6:	2200      	movs	r2, #0
    79d8:	2101      	movs	r1, #1
    79da:	4c39      	ldr	r4, [pc, #228]	; (7ac0 <_usb_d_dev_in_next+0x288>)
    79dc:	47a0      	blx	r4
		goto _in_tx_exec;
    79de:	e036      	b.n	7a4e <_usb_d_dev_in_next+0x216>
	}
	/* Complete. */
	if (is_ctrl) {
    79e0:	230b      	movs	r3, #11
    79e2:	18fb      	adds	r3, r7, r3
    79e4:	781b      	ldrb	r3, [r3, #0]
    79e6:	2b00      	cmp	r3, #0
    79e8:	d008      	beq.n	79fc <_usb_d_dev_in_next+0x1c4>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    79ea:	2317      	movs	r3, #23
    79ec:	18fb      	adds	r3, r7, r3
    79ee:	7819      	ldrb	r1, [r3, #0]
    79f0:	69bb      	ldr	r3, [r7, #24]
    79f2:	224b      	movs	r2, #75	; 0x4b
    79f4:	0018      	movs	r0, r3
    79f6:	4b33      	ldr	r3, [pc, #204]	; (7ac4 <_usb_d_dev_in_next+0x28c>)
    79f8:	4798      	blx	r3
    79fa:	e007      	b.n	7a0c <_usb_d_dev_in_next+0x1d4>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    79fc:	2317      	movs	r3, #23
    79fe:	18fb      	adds	r3, r7, r3
    7a00:	7819      	ldrb	r1, [r3, #0]
    7a02:	69bb      	ldr	r3, [r7, #24]
    7a04:	224a      	movs	r2, #74	; 0x4a
    7a06:	0018      	movs	r0, r3
    7a08:	4b2e      	ldr	r3, [pc, #184]	; (7ac4 <_usb_d_dev_in_next+0x28c>)
    7a0a:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    7a0c:	687b      	ldr	r3, [r7, #4]
    7a0e:	8a1b      	ldrh	r3, [r3, #16]
    7a10:	220c      	movs	r2, #12
    7a12:	18ba      	adds	r2, r7, r2
    7a14:	8812      	ldrh	r2, [r2, #0]
    7a16:	429a      	cmp	r2, r3
    7a18:	d113      	bne.n	7a42 <_usb_d_dev_in_next+0x20a>
		ept->flags.bits.is_busy = 0;
    7a1a:	687b      	ldr	r3, [r7, #4]
    7a1c:	7cda      	ldrb	r2, [r3, #19]
    7a1e:	2140      	movs	r1, #64	; 0x40
    7a20:	438a      	bics	r2, r1
    7a22:	74da      	strb	r2, [r3, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    7a24:	4b28      	ldr	r3, [pc, #160]	; (7ac8 <_usb_d_dev_in_next+0x290>)
    7a26:	68da      	ldr	r2, [r3, #12]
    7a28:	687b      	ldr	r3, [r7, #4]
    7a2a:	7c98      	ldrb	r0, [r3, #18]
    7a2c:	687b      	ldr	r3, [r7, #4]
    7a2e:	689b      	ldr	r3, [r3, #8]
    7a30:	0019      	movs	r1, r3
    7a32:	4790      	blx	r2
    7a34:	1e03      	subs	r3, r0, #0
    7a36:	d132      	bne.n	7a9e <_usb_d_dev_in_next+0x266>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    7a38:	687b      	ldr	r3, [r7, #4]
    7a3a:	7cda      	ldrb	r2, [r3, #19]
    7a3c:	2140      	movs	r1, #64	; 0x40
    7a3e:	430a      	orrs	r2, r1
    7a40:	74da      	strb	r2, [r3, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    7a42:	687b      	ldr	r3, [r7, #4]
    7a44:	2100      	movs	r1, #0
    7a46:	0018      	movs	r0, r3
    7a48:	4b20      	ldr	r3, [pc, #128]	; (7acc <_usb_d_dev_in_next+0x294>)
    7a4a:	4798      	blx	r3
	return;
    7a4c:	e028      	b.n	7aa0 <_usb_d_dev_in_next+0x268>

_in_tx_exec:
	if (!isr) {
    7a4e:	1cfb      	adds	r3, r7, #3
    7a50:	781b      	ldrb	r3, [r3, #0]
    7a52:	2201      	movs	r2, #1
    7a54:	4053      	eors	r3, r2
    7a56:	b2db      	uxtb	r3, r3
    7a58:	2b00      	cmp	r3, #0
    7a5a:	d017      	beq.n	7a8c <_usb_d_dev_in_next+0x254>
		if (is_ctrl) {
    7a5c:	230b      	movs	r3, #11
    7a5e:	18fb      	adds	r3, r7, r3
    7a60:	781b      	ldrb	r3, [r3, #0]
    7a62:	2b00      	cmp	r3, #0
    7a64:	d004      	beq.n	7a70 <_usb_d_dev_in_next+0x238>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    7a66:	231d      	movs	r3, #29
    7a68:	18fb      	adds	r3, r7, r3
    7a6a:	224e      	movs	r2, #78	; 0x4e
    7a6c:	701a      	strb	r2, [r3, #0]
    7a6e:	e003      	b.n	7a78 <_usb_d_dev_in_next+0x240>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    7a70:	231d      	movs	r3, #29
    7a72:	18fb      	adds	r3, r7, r3
    7a74:	224a      	movs	r2, #74	; 0x4a
    7a76:	701a      	strb	r2, [r3, #0]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    7a78:	231d      	movs	r3, #29
    7a7a:	18fb      	adds	r3, r7, r3
    7a7c:	781a      	ldrb	r2, [r3, #0]
    7a7e:	2317      	movs	r3, #23
    7a80:	18fb      	adds	r3, r7, r3
    7a82:	7819      	ldrb	r1, [r3, #0]
    7a84:	69bb      	ldr	r3, [r7, #24]
    7a86:	0018      	movs	r0, r3
    7a88:	4b11      	ldr	r3, [pc, #68]	; (7ad0 <_usb_d_dev_in_next+0x298>)
    7a8a:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    7a8c:	2317      	movs	r3, #23
    7a8e:	18fb      	adds	r3, r7, r3
    7a90:	781b      	ldrb	r3, [r3, #0]
    7a92:	2201      	movs	r2, #1
    7a94:	2101      	movs	r1, #1
    7a96:	0018      	movs	r0, r3
    7a98:	4b0e      	ldr	r3, [pc, #56]	; (7ad4 <_usb_d_dev_in_next+0x29c>)
    7a9a:	4798      	blx	r3
    7a9c:	e000      	b.n	7aa0 <_usb_d_dev_in_next+0x268>
			return;
    7a9e:	46c0      	nop			; (mov r8, r8)
}
    7aa0:	46bd      	mov	sp, r7
    7aa2:	b009      	add	sp, #36	; 0x24
    7aa4:	bd90      	pop	{r4, r7, pc}
    7aa6:	46c0      	nop			; (mov r8, r8)
    7aa8:	41005000 	.word	0x41005000
    7aac:	200003a8 	.word	0x200003a8
    7ab0:	000003ff 	.word	0x000003ff
    7ab4:	000070e9 	.word	0x000070e9
    7ab8:	0000ba45 	.word	0x0000ba45
    7abc:	0000711d 	.word	0x0000711d
    7ac0:	000072c9 	.word	0x000072c9
    7ac4:	00006937 	.word	0x00006937
    7ac8:	200002e0 	.word	0x200002e0
    7acc:	00008f9d 	.word	0x00008f9d
    7ad0:	00006901 	.word	0x00006901
    7ad4:	000073b1 	.word	0x000073b1

00007ad8 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    7ad8:	b590      	push	{r4, r7, lr}
    7ada:	b08b      	sub	sp, #44	; 0x2c
    7adc:	af00      	add	r7, sp, #0
    7ade:	6078      	str	r0, [r7, #4]
    7ae0:	000a      	movs	r2, r1
    7ae2:	1cfb      	adds	r3, r7, #3
    7ae4:	701a      	strb	r2, [r3, #0]
	Usb *              hw         = USB;
    7ae6:	4bc7      	ldr	r3, [pc, #796]	; (7e04 <_usb_d_dev_out_next+0x32c>)
    7ae8:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    7aea:	687b      	ldr	r3, [r7, #4]
    7aec:	7c9a      	ldrb	r2, [r3, #18]
    7aee:	231f      	movs	r3, #31
    7af0:	18fb      	adds	r3, r7, r3
    7af2:	210f      	movs	r1, #15
    7af4:	400a      	ands	r2, r1
    7af6:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    7af8:	231f      	movs	r3, #31
    7afa:	18fb      	adds	r3, r7, r3
    7afc:	781b      	ldrb	r3, [r3, #0]
    7afe:	015a      	lsls	r2, r3, #5
    7b00:	4bc1      	ldr	r3, [pc, #772]	; (7e08 <_usb_d_dev_out_next+0x330>)
    7b02:	18d3      	adds	r3, r2, r3
    7b04:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    7b06:	1cfb      	adds	r3, r7, #3
    7b08:	781b      	ldrb	r3, [r3, #0]
    7b0a:	2b00      	cmp	r3, #0
    7b0c:	d006      	beq.n	7b1c <_usb_d_dev_out_next+0x44>
    7b0e:	69bb      	ldr	r3, [r7, #24]
    7b10:	685b      	ldr	r3, [r3, #4]
    7b12:	011b      	lsls	r3, r3, #4
    7b14:	0c9b      	lsrs	r3, r3, #18
    7b16:	b29b      	uxth	r3, r3
    7b18:	001a      	movs	r2, r3
    7b1a:	e000      	b.n	7b1e <_usb_d_dev_out_next+0x46>
    7b1c:	2200      	movs	r2, #0
    7b1e:	2316      	movs	r3, #22
    7b20:	18fb      	adds	r3, r7, r3
    7b22:	801a      	strh	r2, [r3, #0]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    7b24:	1cfb      	adds	r3, r7, #3
    7b26:	781b      	ldrb	r3, [r3, #0]
    7b28:	2b00      	cmp	r3, #0
    7b2a:	d006      	beq.n	7b3a <_usb_d_dev_out_next+0x62>
    7b2c:	69bb      	ldr	r3, [r7, #24]
    7b2e:	685b      	ldr	r3, [r3, #4]
    7b30:	049b      	lsls	r3, r3, #18
    7b32:	0c9b      	lsrs	r3, r3, #18
    7b34:	b29b      	uxth	r3, r3
    7b36:	001a      	movs	r2, r3
    7b38:	e000      	b.n	7b3c <_usb_d_dev_out_next+0x64>
    7b3a:	2200      	movs	r2, #0
    7b3c:	2314      	movs	r3, #20
    7b3e:	18fb      	adds	r3, r7, r3
    7b40:	801a      	strh	r2, [r3, #0]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    7b42:	687b      	ldr	r3, [r7, #4]
    7b44:	8a1b      	ldrh	r3, [r3, #16]
    7b46:	4ab1      	ldr	r2, [pc, #708]	; (7e0c <_usb_d_dev_out_next+0x334>)
    7b48:	4293      	cmp	r3, r2
    7b4a:	d004      	beq.n	7b56 <_usb_d_dev_out_next+0x7e>
    7b4c:	687b      	ldr	r3, [r7, #4]
    7b4e:	8a1b      	ldrh	r3, [r3, #16]
    7b50:	3b01      	subs	r3, #1
    7b52:	b29a      	uxth	r2, r3
    7b54:	e000      	b.n	7b58 <_usb_d_dev_out_next+0x80>
    7b56:	4aad      	ldr	r2, [pc, #692]	; (7e0c <_usb_d_dev_out_next+0x334>)
    7b58:	2312      	movs	r3, #18
    7b5a:	18fb      	adds	r3, r7, r3
    7b5c:	801a      	strh	r2, [r3, #0]
	uint16_t           last_pkt   = last_trans & size_mask;
    7b5e:	2310      	movs	r3, #16
    7b60:	18fb      	adds	r3, r7, r3
    7b62:	2214      	movs	r2, #20
    7b64:	18ba      	adds	r2, r7, r2
    7b66:	2112      	movs	r1, #18
    7b68:	1879      	adds	r1, r7, r1
    7b6a:	8812      	ldrh	r2, [r2, #0]
    7b6c:	8809      	ldrh	r1, [r1, #0]
    7b6e:	400a      	ands	r2, r1
    7b70:	801a      	strh	r2, [r3, #0]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7b72:	687b      	ldr	r3, [r7, #4]
    7b74:	7cdb      	ldrb	r3, [r3, #19]
    7b76:	2207      	movs	r2, #7
    7b78:	4013      	ands	r3, r2
    7b7a:	b2da      	uxtb	r2, r3
    7b7c:	230f      	movs	r3, #15
    7b7e:	18fb      	adds	r3, r7, r3
    7b80:	3a01      	subs	r2, #1
    7b82:	4251      	negs	r1, r2
    7b84:	414a      	adcs	r2, r1
    7b86:	701a      	strb	r2, [r3, #0]

	if (isr) {
    7b88:	1cfb      	adds	r3, r7, #3
    7b8a:	781b      	ldrb	r3, [r3, #0]
    7b8c:	2b00      	cmp	r3, #0
    7b8e:	d006      	beq.n	7b9e <_usb_d_dev_out_next+0xc6>
		_usbd_ep_ack_io_cpt(epn, 0);
    7b90:	231f      	movs	r3, #31
    7b92:	18fb      	adds	r3, r7, r3
    7b94:	781b      	ldrb	r3, [r3, #0]
    7b96:	2100      	movs	r1, #0
    7b98:	0018      	movs	r0, r3
    7b9a:	4b9d      	ldr	r3, [pc, #628]	; (7e10 <_usb_d_dev_out_next+0x338>)
    7b9c:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    7b9e:	687b      	ldr	r3, [r7, #4]
    7ba0:	7cdb      	ldrb	r3, [r3, #19]
    7ba2:	2220      	movs	r2, #32
    7ba4:	4013      	ands	r3, r2
    7ba6:	b2db      	uxtb	r3, r3
    7ba8:	2b00      	cmp	r3, #0
    7baa:	d026      	beq.n	7bfa <_usb_d_dev_out_next+0x122>
    7bac:	687b      	ldr	r3, [r7, #4]
    7bae:	685b      	ldr	r3, [r3, #4]
    7bb0:	2b00      	cmp	r3, #0
    7bb2:	d022      	beq.n	7bfa <_usb_d_dev_out_next+0x122>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    7bb4:	687b      	ldr	r3, [r7, #4]
    7bb6:	685b      	ldr	r3, [r3, #4]
    7bb8:	b299      	uxth	r1, r3
    7bba:	687b      	ldr	r3, [r7, #4]
    7bbc:	689b      	ldr	r3, [r3, #8]
    7bbe:	b29a      	uxth	r2, r3
    7bc0:	230c      	movs	r3, #12
    7bc2:	18fb      	adds	r3, r7, r3
    7bc4:	1a8a      	subs	r2, r1, r2
    7bc6:	801a      	strh	r2, [r3, #0]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    7bc8:	687b      	ldr	r3, [r7, #4]
    7bca:	681a      	ldr	r2, [r3, #0]
    7bcc:	687b      	ldr	r3, [r7, #4]
    7bce:	689b      	ldr	r3, [r3, #8]
    7bd0:	18d0      	adds	r0, r2, r3
    7bd2:	687b      	ldr	r3, [r7, #4]
    7bd4:	68d9      	ldr	r1, [r3, #12]
    7bd6:	230c      	movs	r3, #12
    7bd8:	18fa      	adds	r2, r7, r3
    7bda:	2310      	movs	r3, #16
    7bdc:	18fb      	adds	r3, r7, r3
    7bde:	8812      	ldrh	r2, [r2, #0]
    7be0:	881b      	ldrh	r3, [r3, #0]
    7be2:	429a      	cmp	r2, r3
    7be4:	d903      	bls.n	7bee <_usb_d_dev_out_next+0x116>
    7be6:	2310      	movs	r3, #16
    7be8:	18fb      	adds	r3, r7, r3
    7bea:	881b      	ldrh	r3, [r3, #0]
    7bec:	e002      	b.n	7bf4 <_usb_d_dev_out_next+0x11c>
    7bee:	230c      	movs	r3, #12
    7bf0:	18fb      	adds	r3, r7, r3
    7bf2:	881b      	ldrh	r3, [r3, #0]
    7bf4:	001a      	movs	r2, r3
    7bf6:	4b87      	ldr	r3, [pc, #540]	; (7e14 <_usb_d_dev_out_next+0x33c>)
    7bf8:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    7bfa:	687b      	ldr	r3, [r7, #4]
    7bfc:	685b      	ldr	r3, [r3, #4]
    7bfe:	2b00      	cmp	r3, #0
    7c00:	d125      	bne.n	7c4e <_usb_d_dev_out_next+0x176>
    7c02:	687b      	ldr	r3, [r7, #4]
    7c04:	7cdb      	ldrb	r3, [r3, #19]
    7c06:	2210      	movs	r2, #16
    7c08:	4013      	ands	r3, r2
    7c0a:	b2db      	uxtb	r3, r3
    7c0c:	2b00      	cmp	r3, #0
    7c0e:	d01e      	beq.n	7c4e <_usb_d_dev_out_next+0x176>
		ept->flags.bits.need_zlp  = 0;
    7c10:	687b      	ldr	r3, [r7, #4]
    7c12:	7cda      	ldrb	r2, [r3, #19]
    7c14:	2110      	movs	r1, #16
    7c16:	438a      	bics	r2, r1
    7c18:	74da      	strb	r2, [r3, #19]
		ept->flags.bits.use_cache = 1;
    7c1a:	687b      	ldr	r3, [r7, #4]
    7c1c:	7cda      	ldrb	r2, [r3, #19]
    7c1e:	2120      	movs	r1, #32
    7c20:	430a      	orrs	r2, r1
    7c22:	74da      	strb	r2, [r3, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    7c24:	687b      	ldr	r3, [r7, #4]
    7c26:	68db      	ldr	r3, [r3, #12]
    7c28:	001a      	movs	r2, r3
    7c2a:	231f      	movs	r3, #31
    7c2c:	18fb      	adds	r3, r7, r3
    7c2e:	781b      	ldrb	r3, [r3, #0]
    7c30:	2100      	movs	r1, #0
    7c32:	0018      	movs	r0, r3
    7c34:	4b78      	ldr	r3, [pc, #480]	; (7e18 <_usb_d_dev_out_next+0x340>)
    7c36:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    7c38:	687b      	ldr	r3, [r7, #4]
    7c3a:	8a1b      	ldrh	r3, [r3, #16]
    7c3c:	001a      	movs	r2, r3
    7c3e:	231f      	movs	r3, #31
    7c40:	18fb      	adds	r3, r7, r3
    7c42:	7818      	ldrb	r0, [r3, #0]
    7c44:	2300      	movs	r3, #0
    7c46:	2100      	movs	r1, #0
    7c48:	4c74      	ldr	r4, [pc, #464]	; (7e1c <_usb_d_dev_out_next+0x344>)
    7c4a:	47a0      	blx	r4
		goto _out_rx_exec;
    7c4c:	e0c2      	b.n	7dd4 <_usb_d_dev_out_next+0x2fc>
	} else if (isr && last_pkt < ept->size) {
    7c4e:	1cfb      	adds	r3, r7, #3
    7c50:	781b      	ldrb	r3, [r3, #0]
    7c52:	2b00      	cmp	r3, #0
    7c54:	d014      	beq.n	7c80 <_usb_d_dev_out_next+0x1a8>
    7c56:	687b      	ldr	r3, [r7, #4]
    7c58:	8a1b      	ldrh	r3, [r3, #16]
    7c5a:	2210      	movs	r2, #16
    7c5c:	18ba      	adds	r2, r7, r2
    7c5e:	8812      	ldrh	r2, [r2, #0]
    7c60:	429a      	cmp	r2, r3
    7c62:	d20d      	bcs.n	7c80 <_usb_d_dev_out_next+0x1a8>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    7c64:	687b      	ldr	r3, [r7, #4]
    7c66:	7cda      	ldrb	r2, [r3, #19]
    7c68:	2110      	movs	r1, #16
    7c6a:	438a      	bics	r2, r1
    7c6c:	74da      	strb	r2, [r3, #19]
		ept->trans_count += last_trans;
    7c6e:	687b      	ldr	r3, [r7, #4]
    7c70:	689a      	ldr	r2, [r3, #8]
    7c72:	2314      	movs	r3, #20
    7c74:	18fb      	adds	r3, r7, r3
    7c76:	881b      	ldrh	r3, [r3, #0]
    7c78:	18d2      	adds	r2, r2, r3
    7c7a:	687b      	ldr	r3, [r7, #4]
    7c7c:	609a      	str	r2, [r3, #8]
    7c7e:	e07e      	b.n	7d7e <_usb_d_dev_out_next+0x2a6>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    7c80:	687b      	ldr	r3, [r7, #4]
    7c82:	689a      	ldr	r2, [r3, #8]
    7c84:	2316      	movs	r3, #22
    7c86:	18fb      	adds	r3, r7, r3
    7c88:	881b      	ldrh	r3, [r3, #0]
    7c8a:	18d2      	adds	r2, r2, r3
    7c8c:	687b      	ldr	r3, [r7, #4]
    7c8e:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    7c90:	687b      	ldr	r3, [r7, #4]
    7c92:	689a      	ldr	r2, [r3, #8]
    7c94:	687b      	ldr	r3, [r7, #4]
    7c96:	685b      	ldr	r3, [r3, #4]
    7c98:	429a      	cmp	r2, r3
    7c9a:	d300      	bcc.n	7c9e <_usb_d_dev_out_next+0x1c6>
    7c9c:	e06f      	b.n	7d7e <_usb_d_dev_out_next+0x2a6>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    7c9e:	687b      	ldr	r3, [r7, #4]
    7ca0:	685b      	ldr	r3, [r3, #4]
    7ca2:	b299      	uxth	r1, r3
    7ca4:	687b      	ldr	r3, [r7, #4]
    7ca6:	689b      	ldr	r3, [r3, #8]
    7ca8:	b29a      	uxth	r2, r3
    7caa:	2326      	movs	r3, #38	; 0x26
    7cac:	18fb      	adds	r3, r7, r3
    7cae:	1a8a      	subs	r2, r1, r2
    7cb0:	801a      	strh	r2, [r3, #0]
			if (ept->flags.bits.use_cache) {
    7cb2:	687b      	ldr	r3, [r7, #4]
    7cb4:	7cdb      	ldrb	r3, [r3, #19]
    7cb6:	2220      	movs	r2, #32
    7cb8:	4013      	ands	r3, r2
    7cba:	b2db      	uxtb	r3, r3
    7cbc:	2b00      	cmp	r3, #0
    7cbe:	d016      	beq.n	7cee <_usb_d_dev_out_next+0x216>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    7cc0:	687b      	ldr	r3, [r7, #4]
    7cc2:	8a1b      	ldrh	r3, [r3, #16]
    7cc4:	2226      	movs	r2, #38	; 0x26
    7cc6:	18ba      	adds	r2, r7, r2
    7cc8:	8812      	ldrh	r2, [r2, #0]
    7cca:	429a      	cmp	r2, r3
    7ccc:	d904      	bls.n	7cd8 <_usb_d_dev_out_next+0x200>
					trans_next = ept->size;
    7cce:	2326      	movs	r3, #38	; 0x26
    7cd0:	18fb      	adds	r3, r7, r3
    7cd2:	687a      	ldr	r2, [r7, #4]
    7cd4:	8a12      	ldrh	r2, [r2, #16]
    7cd6:	801a      	strh	r2, [r3, #0]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    7cd8:	687b      	ldr	r3, [r7, #4]
    7cda:	68db      	ldr	r3, [r3, #12]
    7cdc:	001a      	movs	r2, r3
    7cde:	231f      	movs	r3, #31
    7ce0:	18fb      	adds	r3, r7, r3
    7ce2:	781b      	ldrb	r3, [r3, #0]
    7ce4:	2100      	movs	r1, #0
    7ce6:	0018      	movs	r0, r3
    7ce8:	4b4b      	ldr	r3, [pc, #300]	; (7e18 <_usb_d_dev_out_next+0x340>)
    7cea:	4798      	blx	r3
    7cec:	e03c      	b.n	7d68 <_usb_d_dev_out_next+0x290>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    7cee:	687b      	ldr	r3, [r7, #4]
    7cf0:	8a1b      	ldrh	r3, [r3, #16]
    7cf2:	2226      	movs	r2, #38	; 0x26
    7cf4:	18ba      	adds	r2, r7, r2
    7cf6:	8812      	ldrh	r2, [r2, #0]
    7cf8:	429a      	cmp	r2, r3
    7cfa:	d91c      	bls.n	7d36 <_usb_d_dev_out_next+0x25e>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    7cfc:	2326      	movs	r3, #38	; 0x26
    7cfe:	18fb      	adds	r3, r7, r3
    7d00:	881a      	ldrh	r2, [r3, #0]
    7d02:	2380      	movs	r3, #128	; 0x80
    7d04:	019b      	lsls	r3, r3, #6
    7d06:	429a      	cmp	r2, r3
    7d08:	d905      	bls.n	7d16 <_usb_d_dev_out_next+0x23e>
						trans_next = USB_D_DEV_TRANS_MAX;
    7d0a:	2326      	movs	r3, #38	; 0x26
    7d0c:	18fb      	adds	r3, r7, r3
    7d0e:	2280      	movs	r2, #128	; 0x80
    7d10:	0192      	lsls	r2, r2, #6
    7d12:	801a      	strh	r2, [r3, #0]
    7d14:	e01b      	b.n	7d4e <_usb_d_dev_out_next+0x276>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    7d16:	2326      	movs	r3, #38	; 0x26
    7d18:	18fb      	adds	r3, r7, r3
    7d1a:	2212      	movs	r2, #18
    7d1c:	18ba      	adds	r2, r7, r2
    7d1e:	881b      	ldrh	r3, [r3, #0]
    7d20:	8812      	ldrh	r2, [r2, #0]
    7d22:	4013      	ands	r3, r2
    7d24:	b29a      	uxth	r2, r3
    7d26:	2326      	movs	r3, #38	; 0x26
    7d28:	18fb      	adds	r3, r7, r3
    7d2a:	2126      	movs	r1, #38	; 0x26
    7d2c:	1879      	adds	r1, r7, r1
    7d2e:	8809      	ldrh	r1, [r1, #0]
    7d30:	1a8a      	subs	r2, r1, r2
    7d32:	801a      	strh	r2, [r3, #0]
    7d34:	e00b      	b.n	7d4e <_usb_d_dev_out_next+0x276>
					}
				} else if (trans_next < ept->size) {
    7d36:	687b      	ldr	r3, [r7, #4]
    7d38:	8a1b      	ldrh	r3, [r3, #16]
    7d3a:	2226      	movs	r2, #38	; 0x26
    7d3c:	18ba      	adds	r2, r7, r2
    7d3e:	8812      	ldrh	r2, [r2, #0]
    7d40:	429a      	cmp	r2, r3
    7d42:	d204      	bcs.n	7d4e <_usb_d_dev_out_next+0x276>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    7d44:	687b      	ldr	r3, [r7, #4]
    7d46:	7cda      	ldrb	r2, [r3, #19]
    7d48:	2120      	movs	r1, #32
    7d4a:	430a      	orrs	r2, r1
    7d4c:	74da      	strb	r2, [r3, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    7d4e:	687b      	ldr	r3, [r7, #4]
    7d50:	681a      	ldr	r2, [r3, #0]
    7d52:	687b      	ldr	r3, [r7, #4]
    7d54:	689b      	ldr	r3, [r3, #8]
    7d56:	18d3      	adds	r3, r2, r3
    7d58:	001a      	movs	r2, r3
    7d5a:	231f      	movs	r3, #31
    7d5c:	18fb      	adds	r3, r7, r3
    7d5e:	781b      	ldrb	r3, [r3, #0]
    7d60:	2100      	movs	r1, #0
    7d62:	0018      	movs	r0, r3
    7d64:	4b2c      	ldr	r3, [pc, #176]	; (7e18 <_usb_d_dev_out_next+0x340>)
    7d66:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    7d68:	2326      	movs	r3, #38	; 0x26
    7d6a:	18fb      	adds	r3, r7, r3
    7d6c:	881a      	ldrh	r2, [r3, #0]
    7d6e:	231f      	movs	r3, #31
    7d70:	18fb      	adds	r3, r7, r3
    7d72:	7818      	ldrb	r0, [r3, #0]
    7d74:	2300      	movs	r3, #0
    7d76:	2100      	movs	r1, #0
    7d78:	4c28      	ldr	r4, [pc, #160]	; (7e1c <_usb_d_dev_out_next+0x344>)
    7d7a:	47a0      	blx	r4
			goto _out_rx_exec;
    7d7c:	e02a      	b.n	7dd4 <_usb_d_dev_out_next+0x2fc>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    7d7e:	230f      	movs	r3, #15
    7d80:	18fb      	adds	r3, r7, r3
    7d82:	781b      	ldrb	r3, [r3, #0]
    7d84:	2b00      	cmp	r3, #0
    7d86:	d008      	beq.n	7d9a <_usb_d_dev_out_next+0x2c2>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    7d88:	231f      	movs	r3, #31
    7d8a:	18fb      	adds	r3, r7, r3
    7d8c:	7819      	ldrb	r1, [r3, #0]
    7d8e:	6a3b      	ldr	r3, [r7, #32]
    7d90:	222d      	movs	r2, #45	; 0x2d
    7d92:	0018      	movs	r0, r3
    7d94:	4b22      	ldr	r3, [pc, #136]	; (7e20 <_usb_d_dev_out_next+0x348>)
    7d96:	4798      	blx	r3
    7d98:	e007      	b.n	7daa <_usb_d_dev_out_next+0x2d2>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    7d9a:	231f      	movs	r3, #31
    7d9c:	18fb      	adds	r3, r7, r3
    7d9e:	7819      	ldrb	r1, [r3, #0]
    7da0:	6a3b      	ldr	r3, [r7, #32]
    7da2:	2225      	movs	r2, #37	; 0x25
    7da4:	0018      	movs	r0, r3
    7da6:	4b1e      	ldr	r3, [pc, #120]	; (7e20 <_usb_d_dev_out_next+0x348>)
    7da8:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    7daa:	231f      	movs	r3, #31
    7dac:	18fb      	adds	r3, r7, r3
    7dae:	781b      	ldrb	r3, [r3, #0]
    7db0:	2b00      	cmp	r3, #0
    7db2:	d109      	bne.n	7dc8 <_usb_d_dev_out_next+0x2f0>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    7db4:	687b      	ldr	r3, [r7, #4]
    7db6:	68db      	ldr	r3, [r3, #12]
    7db8:	001a      	movs	r2, r3
    7dba:	231f      	movs	r3, #31
    7dbc:	18fb      	adds	r3, r7, r3
    7dbe:	781b      	ldrb	r3, [r3, #0]
    7dc0:	2100      	movs	r1, #0
    7dc2:	0018      	movs	r0, r3
    7dc4:	4b14      	ldr	r3, [pc, #80]	; (7e18 <_usb_d_dev_out_next+0x340>)
    7dc6:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    7dc8:	687b      	ldr	r3, [r7, #4]
    7dca:	2100      	movs	r1, #0
    7dcc:	0018      	movs	r0, r3
    7dce:	4b15      	ldr	r3, [pc, #84]	; (7e24 <_usb_d_dev_out_next+0x34c>)
    7dd0:	4798      	blx	r3
	return;
    7dd2:	e041      	b.n	7e58 <_usb_d_dev_out_next+0x380>

_out_rx_exec:
	if (!isr) {
    7dd4:	1cfb      	adds	r3, r7, #3
    7dd6:	781b      	ldrb	r3, [r3, #0]
    7dd8:	2201      	movs	r2, #1
    7dda:	4053      	eors	r3, r2
    7ddc:	b2db      	uxtb	r3, r3
    7dde:	2b00      	cmp	r3, #0
    7de0:	d032      	beq.n	7e48 <_usb_d_dev_out_next+0x370>
		if (is_ctrl) {
    7de2:	230f      	movs	r3, #15
    7de4:	18fb      	adds	r3, r7, r3
    7de6:	781b      	ldrb	r3, [r3, #0]
    7de8:	2b00      	cmp	r3, #0
    7dea:	d01f      	beq.n	7e2c <_usb_d_dev_out_next+0x354>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    7dec:	231f      	movs	r3, #31
    7dee:	18fb      	adds	r3, r7, r3
    7df0:	781b      	ldrb	r3, [r3, #0]
    7df2:	2101      	movs	r1, #1
    7df4:	0018      	movs	r0, r3
    7df6:	4b0c      	ldr	r3, [pc, #48]	; (7e28 <_usb_d_dev_out_next+0x350>)
    7df8:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    7dfa:	2325      	movs	r3, #37	; 0x25
    7dfc:	18fb      	adds	r3, r7, r3
    7dfe:	222d      	movs	r2, #45	; 0x2d
    7e00:	701a      	strb	r2, [r3, #0]
    7e02:	e017      	b.n	7e34 <_usb_d_dev_out_next+0x35c>
    7e04:	41005000 	.word	0x41005000
    7e08:	200003a8 	.word	0x200003a8
    7e0c:	000003ff 	.word	0x000003ff
    7e10:	000070e9 	.word	0x000070e9
    7e14:	0000ba45 	.word	0x0000ba45
    7e18:	0000711d 	.word	0x0000711d
    7e1c:	00007321 	.word	0x00007321
    7e20:	00006937 	.word	0x00006937
    7e24:	00008f9d 	.word	0x00008f9d
    7e28:	00007379 	.word	0x00007379
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    7e2c:	2325      	movs	r3, #37	; 0x25
    7e2e:	18fb      	adds	r3, r7, r3
    7e30:	2225      	movs	r2, #37	; 0x25
    7e32:	701a      	strb	r2, [r3, #0]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    7e34:	2325      	movs	r3, #37	; 0x25
    7e36:	18fb      	adds	r3, r7, r3
    7e38:	781a      	ldrb	r2, [r3, #0]
    7e3a:	231f      	movs	r3, #31
    7e3c:	18fb      	adds	r3, r7, r3
    7e3e:	7819      	ldrb	r1, [r3, #0]
    7e40:	6a3b      	ldr	r3, [r7, #32]
    7e42:	0018      	movs	r0, r3
    7e44:	4b06      	ldr	r3, [pc, #24]	; (7e60 <_usb_d_dev_out_next+0x388>)
    7e46:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    7e48:	231f      	movs	r3, #31
    7e4a:	18fb      	adds	r3, r7, r3
    7e4c:	781b      	ldrb	r3, [r3, #0]
    7e4e:	2201      	movs	r2, #1
    7e50:	2100      	movs	r1, #0
    7e52:	0018      	movs	r0, r3
    7e54:	4b03      	ldr	r3, [pc, #12]	; (7e64 <_usb_d_dev_out_next+0x38c>)
    7e56:	4798      	blx	r3
}
    7e58:	46bd      	mov	sp, r7
    7e5a:	b00b      	add	sp, #44	; 0x2c
    7e5c:	bd90      	pop	{r4, r7, pc}
    7e5e:	46c0      	nop			; (mov r8, r8)
    7e60:	00006901 	.word	0x00006901
    7e64:	0000741d 	.word	0x0000741d

00007e68 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    7e68:	b580      	push	{r7, lr}
    7e6a:	b084      	sub	sp, #16
    7e6c:	af00      	add	r7, sp, #0
    7e6e:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    7e70:	687b      	ldr	r3, [r7, #4]
    7e72:	7c9a      	ldrb	r2, [r3, #18]
    7e74:	230f      	movs	r3, #15
    7e76:	18fb      	adds	r3, r7, r3
    7e78:	210f      	movs	r1, #15
    7e7a:	400a      	ands	r2, r1
    7e7c:	701a      	strb	r2, [r3, #0]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7e7e:	687b      	ldr	r3, [r7, #4]
    7e80:	7cdb      	ldrb	r3, [r3, #19]
    7e82:	2207      	movs	r2, #7
    7e84:	4013      	ands	r3, r2
    7e86:	b2da      	uxtb	r2, r3
    7e88:	230e      	movs	r3, #14
    7e8a:	18fb      	adds	r3, r7, r3
    7e8c:	3a01      	subs	r2, #1
    7e8e:	4251      	negs	r1, r2
    7e90:	414a      	adcs	r2, r1
    7e92:	701a      	strb	r2, [r3, #0]

	if (!is_ctrl) {
    7e94:	230e      	movs	r3, #14
    7e96:	18fb      	adds	r3, r7, r3
    7e98:	781b      	ldrb	r3, [r3, #0]
    7e9a:	2201      	movs	r2, #1
    7e9c:	4053      	eors	r3, r2
    7e9e:	b2db      	uxtb	r3, r3
    7ea0:	2b00      	cmp	r3, #0
    7ea2:	d00c      	beq.n	7ebe <_usb_d_dev_handle_setup+0x56>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    7ea4:	230f      	movs	r3, #15
    7ea6:	18fb      	adds	r3, r7, r3
    7ea8:	781b      	ldrb	r3, [r3, #0]
    7eaa:	0018      	movs	r0, r3
    7eac:	4b27      	ldr	r3, [pc, #156]	; (7f4c <_usb_d_dev_handle_setup+0xe4>)
    7eae:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    7eb0:	230f      	movs	r3, #15
    7eb2:	18fb      	adds	r3, r7, r3
    7eb4:	781b      	ldrb	r3, [r3, #0]
    7eb6:	0018      	movs	r0, r3
    7eb8:	4b25      	ldr	r3, [pc, #148]	; (7f50 <_usb_d_dev_handle_setup+0xe8>)
    7eba:	4798      	blx	r3
		return;
    7ebc:	e042      	b.n	7f44 <_usb_d_dev_handle_setup+0xdc>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    7ebe:	687b      	ldr	r3, [r7, #4]
    7ec0:	7cdb      	ldrb	r3, [r3, #19]
    7ec2:	2240      	movs	r2, #64	; 0x40
    7ec4:	4013      	ands	r3, r2
    7ec6:	b2db      	uxtb	r3, r3
    7ec8:	2b00      	cmp	r3, #0
    7eca:	d014      	beq.n	7ef6 <_usb_d_dev_handle_setup+0x8e>
		ept->flags.bits.is_busy = 0;
    7ecc:	687b      	ldr	r3, [r7, #4]
    7ece:	7cda      	ldrb	r2, [r3, #19]
    7ed0:	2140      	movs	r1, #64	; 0x40
    7ed2:	438a      	bics	r2, r1
    7ed4:	74da      	strb	r2, [r3, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    7ed6:	230f      	movs	r3, #15
    7ed8:	18fb      	adds	r3, r7, r3
    7eda:	781b      	ldrb	r3, [r3, #0]
    7edc:	2200      	movs	r2, #0
    7ede:	2101      	movs	r1, #1
    7ee0:	0018      	movs	r0, r3
    7ee2:	4b1c      	ldr	r3, [pc, #112]	; (7f54 <_usb_d_dev_handle_setup+0xec>)
    7ee4:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    7ee6:	230f      	movs	r3, #15
    7ee8:	18fb      	adds	r3, r7, r3
    7eea:	781b      	ldrb	r3, [r3, #0]
    7eec:	2200      	movs	r2, #0
    7eee:	2100      	movs	r1, #0
    7ef0:	0018      	movs	r0, r3
    7ef2:	4b19      	ldr	r3, [pc, #100]	; (7f58 <_usb_d_dev_handle_setup+0xf0>)
    7ef4:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    7ef6:	687b      	ldr	r3, [r7, #4]
    7ef8:	7cda      	ldrb	r2, [r3, #19]
    7efa:	2108      	movs	r1, #8
    7efc:	438a      	bics	r2, r1
    7efe:	74da      	strb	r2, [r3, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    7f00:	230f      	movs	r3, #15
    7f02:	18fb      	adds	r3, r7, r3
    7f04:	781b      	ldrb	r3, [r3, #0]
    7f06:	2100      	movs	r1, #0
    7f08:	0018      	movs	r0, r3
    7f0a:	4b14      	ldr	r3, [pc, #80]	; (7f5c <_usb_d_dev_handle_setup+0xf4>)
    7f0c:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    7f0e:	230f      	movs	r3, #15
    7f10:	18fb      	adds	r3, r7, r3
    7f12:	781b      	ldrb	r3, [r3, #0]
    7f14:	2101      	movs	r1, #1
    7f16:	0018      	movs	r0, r3
    7f18:	4b10      	ldr	r3, [pc, #64]	; (7f5c <_usb_d_dev_handle_setup+0xf4>)
    7f1a:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    7f1c:	230f      	movs	r3, #15
    7f1e:	18fb      	adds	r3, r7, r3
    7f20:	781b      	ldrb	r3, [r3, #0]
    7f22:	216f      	movs	r1, #111	; 0x6f
    7f24:	0018      	movs	r0, r3
    7f26:	4b0e      	ldr	r3, [pc, #56]	; (7f60 <_usb_d_dev_handle_setup+0xf8>)
    7f28:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    7f2a:	230f      	movs	r3, #15
    7f2c:	18fb      	adds	r3, r7, r3
    7f2e:	781b      	ldrb	r3, [r3, #0]
    7f30:	216f      	movs	r1, #111	; 0x6f
    7f32:	0018      	movs	r0, r3
    7f34:	4b0b      	ldr	r3, [pc, #44]	; (7f64 <_usb_d_dev_handle_setup+0xfc>)
    7f36:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    7f38:	4b0b      	ldr	r3, [pc, #44]	; (7f68 <_usb_d_dev_handle_setup+0x100>)
    7f3a:	689b      	ldr	r3, [r3, #8]
    7f3c:	687a      	ldr	r2, [r7, #4]
    7f3e:	7c92      	ldrb	r2, [r2, #18]
    7f40:	0010      	movs	r0, r2
    7f42:	4798      	blx	r3
}
    7f44:	46bd      	mov	sp, r7
    7f46:	b004      	add	sp, #16
    7f48:	bd80      	pop	{r7, pc}
    7f4a:	46c0      	nop			; (mov r8, r8)
    7f4c:	00007059 	.word	0x00007059
    7f50:	00006ff9 	.word	0x00006ff9
    7f54:	000073b1 	.word	0x000073b1
    7f58:	0000741d 	.word	0x0000741d
    7f5c:	00007379 	.word	0x00007379
    7f60:	00006d9d 	.word	0x00006d9d
    7f64:	00006dfd 	.word	0x00006dfd
    7f68:	200002e0 	.word	0x200002e0

00007f6c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    7f6c:	b590      	push	{r4, r7, lr}
    7f6e:	b085      	sub	sp, #20
    7f70:	af00      	add	r7, sp, #0
    7f72:	6078      	str	r0, [r7, #4]
    7f74:	000a      	movs	r2, r1
    7f76:	1cfb      	adds	r3, r7, #3
    7f78:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    7f7a:	687b      	ldr	r3, [r7, #4]
    7f7c:	7c9a      	ldrb	r2, [r3, #18]
    7f7e:	230f      	movs	r3, #15
    7f80:	18fb      	adds	r3, r7, r3
    7f82:	210f      	movs	r1, #15
    7f84:	400a      	ands	r2, r1
    7f86:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    7f88:	1cfb      	adds	r3, r7, #3
    7f8a:	7819      	ldrb	r1, [r3, #0]
    7f8c:	230f      	movs	r3, #15
    7f8e:	18fb      	adds	r3, r7, r3
    7f90:	781b      	ldrb	r3, [r3, #0]
    7f92:	2200      	movs	r2, #0
    7f94:	0018      	movs	r0, r3
    7f96:	4b07      	ldr	r3, [pc, #28]	; (7fb4 <_usb_d_dev_handle_stall+0x48>)
    7f98:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    7f9a:	4b07      	ldr	r3, [pc, #28]	; (7fb8 <_usb_d_dev_handle_stall+0x4c>)
    7f9c:	691c      	ldr	r4, [r3, #16]
    7f9e:	687b      	ldr	r3, [r7, #4]
    7fa0:	7c98      	ldrb	r0, [r3, #18]
    7fa2:	687b      	ldr	r3, [r7, #4]
    7fa4:	689b      	ldr	r3, [r3, #8]
    7fa6:	001a      	movs	r2, r3
    7fa8:	2101      	movs	r1, #1
    7faa:	47a0      	blx	r4
}
    7fac:	46c0      	nop			; (mov r8, r8)
    7fae:	46bd      	mov	sp, r7
    7fb0:	b005      	add	sp, #20
    7fb2:	bd90      	pop	{r4, r7, pc}
    7fb4:	00006f99 	.word	0x00006f99
    7fb8:	200002e0 	.word	0x200002e0

00007fbc <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    7fbc:	b580      	push	{r7, lr}
    7fbe:	b088      	sub	sp, #32
    7fc0:	af00      	add	r7, sp, #0
    7fc2:	6078      	str	r0, [r7, #4]
    7fc4:	000a      	movs	r2, r1
    7fc6:	1cfb      	adds	r3, r7, #3
    7fc8:	701a      	strb	r2, [r3, #0]
	Usb *              hw      = USB;
    7fca:	4b78      	ldr	r3, [pc, #480]	; (81ac <_usb_d_dev_handle_trfail+0x1f0>)
    7fcc:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    7fce:	687b      	ldr	r3, [r7, #4]
    7fd0:	7c9a      	ldrb	r2, [r3, #18]
    7fd2:	231b      	movs	r3, #27
    7fd4:	18fb      	adds	r3, r7, r3
    7fd6:	210f      	movs	r1, #15
    7fd8:	400a      	ands	r2, r1
    7fda:	701a      	strb	r2, [r3, #0]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    7fdc:	2310      	movs	r3, #16
    7fde:	18fb      	adds	r3, r7, r3
    7fe0:	4a73      	ldr	r2, [pc, #460]	; (81b0 <_usb_d_dev_handle_trfail+0x1f4>)
    7fe2:	8812      	ldrh	r2, [r2, #0]
    7fe4:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    7fe6:	231b      	movs	r3, #27
    7fe8:	18fb      	adds	r3, r7, r3
    7fea:	781b      	ldrb	r3, [r3, #0]
    7fec:	015a      	lsls	r2, r3, #5
    7fee:	4b71      	ldr	r3, [pc, #452]	; (81b4 <_usb_d_dev_handle_trfail+0x1f8>)
    7ff0:	18d3      	adds	r3, r2, r3
    7ff2:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    7ff4:	1cfb      	adds	r3, r7, #3
    7ff6:	781b      	ldrb	r3, [r3, #0]
    7ff8:	2b00      	cmp	r3, #0
    7ffa:	d00a      	beq.n	8012 <_usb_d_dev_handle_trfail+0x56>
    7ffc:	231b      	movs	r3, #27
    7ffe:	18fb      	adds	r3, r7, r3
    8000:	781a      	ldrb	r2, [r3, #0]
    8002:	69fb      	ldr	r3, [r7, #28]
    8004:	0011      	movs	r1, r2
    8006:	0018      	movs	r0, r3
    8008:	4b6b      	ldr	r3, [pc, #428]	; (81b8 <_usb_d_dev_handle_trfail+0x1fc>)
    800a:	4798      	blx	r3
    800c:	0003      	movs	r3, r0
    800e:	001a      	movs	r2, r3
    8010:	e009      	b.n	8026 <_usb_d_dev_handle_trfail+0x6a>
    8012:	231b      	movs	r3, #27
    8014:	18fb      	adds	r3, r7, r3
    8016:	781a      	ldrb	r2, [r3, #0]
    8018:	69fb      	ldr	r3, [r7, #28]
    801a:	0011      	movs	r1, r2
    801c:	0018      	movs	r0, r3
    801e:	4b67      	ldr	r3, [pc, #412]	; (81bc <_usb_d_dev_handle_trfail+0x200>)
    8020:	4798      	blx	r3
    8022:	0003      	movs	r3, r0
    8024:	001a      	movs	r2, r3
    8026:	2313      	movs	r3, #19
    8028:	18fb      	adds	r3, r7, r3
    802a:	701a      	strb	r2, [r3, #0]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    802c:	687b      	ldr	r3, [r7, #4]
    802e:	7cdb      	ldrb	r3, [r3, #19]
    8030:	2207      	movs	r2, #7
    8032:	4013      	ands	r3, r2
    8034:	b2da      	uxtb	r2, r3
    8036:	2312      	movs	r3, #18
    8038:	18fb      	adds	r3, r7, r3
    803a:	3a01      	subs	r2, #1
    803c:	4251      	negs	r1, r2
    803e:	414a      	adcs	r2, r1
    8040:	701a      	strb	r2, [r3, #0]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    8042:	1cfb      	adds	r3, r7, #3
    8044:	781b      	ldrb	r3, [r3, #0]
    8046:	011b      	lsls	r3, r3, #4
    8048:	697a      	ldr	r2, [r7, #20]
    804a:	18d3      	adds	r3, r2, r3
    804c:	7a9b      	ldrb	r3, [r3, #10]
    804e:	b2da      	uxtb	r2, r3
    8050:	230c      	movs	r3, #12
    8052:	18fb      	adds	r3, r7, r3
    8054:	701a      	strb	r2, [r3, #0]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    8056:	2313      	movs	r3, #19
    8058:	18fb      	adds	r3, r7, r3
    805a:	781b      	ldrb	r3, [r3, #0]
    805c:	2b02      	cmp	r3, #2
    805e:	d133      	bne.n	80c8 <_usb_d_dev_handle_trfail+0x10c>
    8060:	230c      	movs	r3, #12
    8062:	18fb      	adds	r3, r7, r3
    8064:	781b      	ldrb	r3, [r3, #0]
    8066:	2201      	movs	r2, #1
    8068:	4013      	ands	r3, r2
    806a:	b2db      	uxtb	r3, r3
    806c:	2b00      	cmp	r3, #0
    806e:	d02b      	beq.n	80c8 <_usb_d_dev_handle_trfail+0x10c>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    8070:	1cfb      	adds	r3, r7, #3
    8072:	781b      	ldrb	r3, [r3, #0]
    8074:	011b      	lsls	r3, r3, #4
    8076:	697a      	ldr	r2, [r7, #20]
    8078:	18d2      	adds	r2, r2, r3
    807a:	7a93      	ldrb	r3, [r2, #10]
    807c:	2101      	movs	r1, #1
    807e:	438b      	bics	r3, r1
    8080:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8082:	1cfb      	adds	r3, r7, #3
    8084:	781b      	ldrb	r3, [r3, #0]
    8086:	2210      	movs	r2, #16
    8088:	18ba      	adds	r2, r7, r2
    808a:	5cd2      	ldrb	r2, [r2, r3]
    808c:	231b      	movs	r3, #27
    808e:	18fb      	adds	r3, r7, r3
    8090:	7819      	ldrb	r1, [r3, #0]
    8092:	69fb      	ldr	r3, [r7, #28]
    8094:	0018      	movs	r0, r3
    8096:	4b4a      	ldr	r3, [pc, #296]	; (81c0 <_usb_d_dev_handle_trfail+0x204>)
    8098:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    809a:	1cfb      	adds	r3, r7, #3
    809c:	781b      	ldrb	r3, [r3, #0]
    809e:	2210      	movs	r2, #16
    80a0:	18ba      	adds	r2, r7, r2
    80a2:	5cd2      	ldrb	r2, [r2, r3]
    80a4:	231b      	movs	r3, #27
    80a6:	18fb      	adds	r3, r7, r3
    80a8:	7819      	ldrb	r1, [r3, #0]
    80aa:	69fb      	ldr	r3, [r7, #28]
    80ac:	0018      	movs	r0, r3
    80ae:	4b45      	ldr	r3, [pc, #276]	; (81c4 <_usb_d_dev_handle_trfail+0x208>)
    80b0:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    80b2:	1cfb      	adds	r3, r7, #3
    80b4:	781b      	ldrb	r3, [r3, #0]
    80b6:	1e5a      	subs	r2, r3, #1
    80b8:	4193      	sbcs	r3, r2
    80ba:	b2d9      	uxtb	r1, r3
    80bc:	687b      	ldr	r3, [r7, #4]
    80be:	2204      	movs	r2, #4
    80c0:	0018      	movs	r0, r3
    80c2:	4b41      	ldr	r3, [pc, #260]	; (81c8 <_usb_d_dev_handle_trfail+0x20c>)
    80c4:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    80c6:	e06d      	b.n	81a4 <_usb_d_dev_handle_trfail+0x1e8>
	} else if (st.bit.ERRORFLOW) {
    80c8:	230c      	movs	r3, #12
    80ca:	18fb      	adds	r3, r7, r3
    80cc:	781b      	ldrb	r3, [r3, #0]
    80ce:	2202      	movs	r2, #2
    80d0:	4013      	ands	r3, r2
    80d2:	b2db      	uxtb	r3, r3
    80d4:	2b00      	cmp	r3, #0
    80d6:	d044      	beq.n	8162 <_usb_d_dev_handle_trfail+0x1a6>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    80d8:	1cfb      	adds	r3, r7, #3
    80da:	781b      	ldrb	r3, [r3, #0]
    80dc:	011b      	lsls	r3, r3, #4
    80de:	697a      	ldr	r2, [r7, #20]
    80e0:	18d2      	adds	r2, r2, r3
    80e2:	7a93      	ldrb	r3, [r2, #10]
    80e4:	2102      	movs	r1, #2
    80e6:	438b      	bics	r3, r1
    80e8:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    80ea:	1cfb      	adds	r3, r7, #3
    80ec:	781b      	ldrb	r3, [r3, #0]
    80ee:	2210      	movs	r2, #16
    80f0:	18ba      	adds	r2, r7, r2
    80f2:	5cd2      	ldrb	r2, [r2, r3]
    80f4:	231b      	movs	r3, #27
    80f6:	18fb      	adds	r3, r7, r3
    80f8:	7819      	ldrb	r1, [r3, #0]
    80fa:	69fb      	ldr	r3, [r7, #28]
    80fc:	0018      	movs	r0, r3
    80fe:	4b30      	ldr	r3, [pc, #192]	; (81c0 <_usb_d_dev_handle_trfail+0x204>)
    8100:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    8102:	1cfb      	adds	r3, r7, #3
    8104:	781b      	ldrb	r3, [r3, #0]
    8106:	2210      	movs	r2, #16
    8108:	18ba      	adds	r2, r7, r2
    810a:	5cd2      	ldrb	r2, [r2, r3]
    810c:	231b      	movs	r3, #27
    810e:	18fb      	adds	r3, r7, r3
    8110:	7819      	ldrb	r1, [r3, #0]
    8112:	69fb      	ldr	r3, [r7, #28]
    8114:	0018      	movs	r0, r3
    8116:	4b2b      	ldr	r3, [pc, #172]	; (81c4 <_usb_d_dev_handle_trfail+0x208>)
    8118:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    811a:	2312      	movs	r3, #18
    811c:	18fb      	adds	r3, r7, r3
    811e:	781b      	ldrb	r3, [r3, #0]
    8120:	2b00      	cmp	r3, #0
    8122:	d03f      	beq.n	81a4 <_usb_d_dev_handle_trfail+0x1e8>
    8124:	687b      	ldr	r3, [r7, #4]
    8126:	7cdb      	ldrb	r3, [r3, #19]
    8128:	2240      	movs	r2, #64	; 0x40
    812a:	4013      	ands	r3, r2
    812c:	b2db      	uxtb	r3, r3
    812e:	2b00      	cmp	r3, #0
    8130:	d038      	beq.n	81a4 <_usb_d_dev_handle_trfail+0x1e8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    8132:	687b      	ldr	r3, [r7, #4]
    8134:	7cdb      	ldrb	r3, [r3, #19]
    8136:	061b      	lsls	r3, r3, #24
    8138:	0fdb      	lsrs	r3, r3, #31
    813a:	b2db      	uxtb	r3, r3
    813c:	001a      	movs	r2, r3
    813e:	1cfb      	adds	r3, r7, #3
    8140:	781b      	ldrb	r3, [r3, #0]
    8142:	4293      	cmp	r3, r2
    8144:	d02e      	beq.n	81a4 <_usb_d_dev_handle_trfail+0x1e8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    8146:	687b      	ldr	r3, [r7, #4]
    8148:	7cdb      	ldrb	r3, [r3, #19]
    814a:	061b      	lsls	r3, r3, #24
    814c:	0fdb      	lsrs	r3, r3, #31
    814e:	b2db      	uxtb	r3, r3
    8150:	1e5a      	subs	r2, r3, #1
    8152:	4193      	sbcs	r3, r2
    8154:	b2d9      	uxtb	r1, r3
    8156:	687b      	ldr	r3, [r7, #4]
    8158:	2200      	movs	r2, #0
    815a:	0018      	movs	r0, r3
    815c:	4b1a      	ldr	r3, [pc, #104]	; (81c8 <_usb_d_dev_handle_trfail+0x20c>)
    815e:	4798      	blx	r3
}
    8160:	e020      	b.n	81a4 <_usb_d_dev_handle_trfail+0x1e8>
		_usbd_ep_clear_bank_status(epn, bank_n);
    8162:	1cfb      	adds	r3, r7, #3
    8164:	781a      	ldrb	r2, [r3, #0]
    8166:	231b      	movs	r3, #27
    8168:	18fb      	adds	r3, r7, r3
    816a:	781b      	ldrb	r3, [r3, #0]
    816c:	0011      	movs	r1, r2
    816e:	0018      	movs	r0, r3
    8170:	4b16      	ldr	r3, [pc, #88]	; (81cc <_usb_d_dev_handle_trfail+0x210>)
    8172:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8174:	1cfb      	adds	r3, r7, #3
    8176:	781b      	ldrb	r3, [r3, #0]
    8178:	2210      	movs	r2, #16
    817a:	18ba      	adds	r2, r7, r2
    817c:	5cd2      	ldrb	r2, [r2, r3]
    817e:	231b      	movs	r3, #27
    8180:	18fb      	adds	r3, r7, r3
    8182:	7819      	ldrb	r1, [r3, #0]
    8184:	69fb      	ldr	r3, [r7, #28]
    8186:	0018      	movs	r0, r3
    8188:	4b0d      	ldr	r3, [pc, #52]	; (81c0 <_usb_d_dev_handle_trfail+0x204>)
    818a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    818c:	1cfb      	adds	r3, r7, #3
    818e:	781b      	ldrb	r3, [r3, #0]
    8190:	2210      	movs	r2, #16
    8192:	18ba      	adds	r2, r7, r2
    8194:	5cd2      	ldrb	r2, [r2, r3]
    8196:	231b      	movs	r3, #27
    8198:	18fb      	adds	r3, r7, r3
    819a:	7819      	ldrb	r1, [r3, #0]
    819c:	69fb      	ldr	r3, [r7, #28]
    819e:	0018      	movs	r0, r3
    81a0:	4b08      	ldr	r3, [pc, #32]	; (81c4 <_usb_d_dev_handle_trfail+0x208>)
    81a2:	4798      	blx	r3
}
    81a4:	46c0      	nop			; (mov r8, r8)
    81a6:	46bd      	mov	sp, r7
    81a8:	b008      	add	sp, #32
    81aa:	bd80      	pop	{r7, pc}
    81ac:	41005000 	.word	0x41005000
    81b0:	0000c49c 	.word	0x0000c49c
    81b4:	200003a8 	.word	0x200003a8
    81b8:	000069ab 	.word	0x000069ab
    81bc:	0000696d 	.word	0x0000696d
    81c0:	00006813 	.word	0x00006813
    81c4:	00006937 	.word	0x00006937
    81c8:	00008fe9 	.word	0x00008fe9
    81cc:	00007379 	.word	0x00007379

000081d0 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    81d0:	b580      	push	{r7, lr}
    81d2:	b082      	sub	sp, #8
    81d4:	af00      	add	r7, sp, #0
    81d6:	6078      	str	r0, [r7, #4]
    81d8:	000a      	movs	r2, r1
    81da:	1cfb      	adds	r3, r7, #3
    81dc:	701a      	strb	r2, [r3, #0]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    81de:	1cfb      	adds	r3, r7, #3
    81e0:	781b      	ldrb	r3, [r3, #0]
    81e2:	2210      	movs	r2, #16
    81e4:	4013      	ands	r3, r2
    81e6:	d004      	beq.n	81f2 <_usb_d_dev_trans_setup_isr+0x22>
		_usb_d_dev_handle_setup(ept);
    81e8:	687b      	ldr	r3, [r7, #4]
    81ea:	0018      	movs	r0, r3
    81ec:	4b0d      	ldr	r3, [pc, #52]	; (8224 <_usb_d_dev_trans_setup_isr+0x54>)
    81ee:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    81f0:	e014      	b.n	821c <_usb_d_dev_trans_setup_isr+0x4c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    81f2:	1cfb      	adds	r3, r7, #3
    81f4:	781b      	ldrb	r3, [r3, #0]
    81f6:	2240      	movs	r2, #64	; 0x40
    81f8:	4013      	ands	r3, r2
    81fa:	d005      	beq.n	8208 <_usb_d_dev_trans_setup_isr+0x38>
		_usb_d_dev_handle_stall(ept, 1);
    81fc:	687b      	ldr	r3, [r7, #4]
    81fe:	2101      	movs	r1, #1
    8200:	0018      	movs	r0, r3
    8202:	4b09      	ldr	r3, [pc, #36]	; (8228 <_usb_d_dev_trans_setup_isr+0x58>)
    8204:	4798      	blx	r3
}
    8206:	e009      	b.n	821c <_usb_d_dev_trans_setup_isr+0x4c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8208:	1cfb      	adds	r3, r7, #3
    820a:	781b      	ldrb	r3, [r3, #0]
    820c:	2220      	movs	r2, #32
    820e:	4013      	ands	r3, r2
    8210:	d004      	beq.n	821c <_usb_d_dev_trans_setup_isr+0x4c>
		_usb_d_dev_handle_stall(ept, 0);
    8212:	687b      	ldr	r3, [r7, #4]
    8214:	2100      	movs	r1, #0
    8216:	0018      	movs	r0, r3
    8218:	4b03      	ldr	r3, [pc, #12]	; (8228 <_usb_d_dev_trans_setup_isr+0x58>)
    821a:	4798      	blx	r3
}
    821c:	46c0      	nop			; (mov r8, r8)
    821e:	46bd      	mov	sp, r7
    8220:	b002      	add	sp, #8
    8222:	bd80      	pop	{r7, pc}
    8224:	00007e69 	.word	0x00007e69
    8228:	00007f6d 	.word	0x00007f6d

0000822c <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    822c:	b580      	push	{r7, lr}
    822e:	b082      	sub	sp, #8
    8230:	af00      	add	r7, sp, #0
    8232:	6078      	str	r0, [r7, #4]
    8234:	000a      	movs	r2, r1
    8236:	1cfb      	adds	r3, r7, #3
    8238:	701a      	strb	r2, [r3, #0]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    823a:	1cfb      	adds	r3, r7, #3
    823c:	781b      	ldrb	r3, [r3, #0]
    823e:	2240      	movs	r2, #64	; 0x40
    8240:	4013      	ands	r3, r2
    8242:	d005      	beq.n	8250 <_usb_d_dev_trans_in_isr+0x24>
		_usb_d_dev_handle_stall(ept, 1);
    8244:	687b      	ldr	r3, [r7, #4]
    8246:	2101      	movs	r1, #1
    8248:	0018      	movs	r0, r3
    824a:	4b1c      	ldr	r3, [pc, #112]	; (82bc <_usb_d_dev_trans_in_isr+0x90>)
    824c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    824e:	e030      	b.n	82b2 <_usb_d_dev_trans_in_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8250:	1cfb      	adds	r3, r7, #3
    8252:	781b      	ldrb	r3, [r3, #0]
    8254:	2208      	movs	r2, #8
    8256:	4013      	ands	r3, r2
    8258:	d005      	beq.n	8266 <_usb_d_dev_trans_in_isr+0x3a>
		_usb_d_dev_handle_trfail(ept, 1);
    825a:	687b      	ldr	r3, [r7, #4]
    825c:	2101      	movs	r1, #1
    825e:	0018      	movs	r0, r3
    8260:	4b17      	ldr	r3, [pc, #92]	; (82c0 <_usb_d_dev_trans_in_isr+0x94>)
    8262:	4798      	blx	r3
}
    8264:	e025      	b.n	82b2 <_usb_d_dev_trans_in_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    8266:	1cfb      	adds	r3, r7, #3
    8268:	781b      	ldrb	r3, [r3, #0]
    826a:	2202      	movs	r2, #2
    826c:	4013      	ands	r3, r2
    826e:	d005      	beq.n	827c <_usb_d_dev_trans_in_isr+0x50>
		_usb_d_dev_in_next(ept, true);
    8270:	687b      	ldr	r3, [r7, #4]
    8272:	2101      	movs	r1, #1
    8274:	0018      	movs	r0, r3
    8276:	4b13      	ldr	r3, [pc, #76]	; (82c4 <_usb_d_dev_trans_in_isr+0x98>)
    8278:	4798      	blx	r3
}
    827a:	e01a      	b.n	82b2 <_usb_d_dev_trans_in_isr+0x86>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    827c:	687b      	ldr	r3, [r7, #4]
    827e:	7cdb      	ldrb	r3, [r3, #19]
    8280:	2207      	movs	r2, #7
    8282:	4013      	ands	r3, r2
    8284:	b2db      	uxtb	r3, r3
    8286:	2b01      	cmp	r3, #1
    8288:	d113      	bne.n	82b2 <_usb_d_dev_trans_in_isr+0x86>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    828a:	1cfb      	adds	r3, r7, #3
    828c:	781b      	ldrb	r3, [r3, #0]
    828e:	2204      	movs	r2, #4
    8290:	4013      	ands	r3, r2
    8292:	d005      	beq.n	82a0 <_usb_d_dev_trans_in_isr+0x74>
			_usb_d_dev_handle_trfail(ept, 0);
    8294:	687b      	ldr	r3, [r7, #4]
    8296:	2100      	movs	r1, #0
    8298:	0018      	movs	r0, r3
    829a:	4b09      	ldr	r3, [pc, #36]	; (82c0 <_usb_d_dev_trans_in_isr+0x94>)
    829c:	4798      	blx	r3
}
    829e:	e008      	b.n	82b2 <_usb_d_dev_trans_in_isr+0x86>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    82a0:	1cfb      	adds	r3, r7, #3
    82a2:	781b      	ldrb	r3, [r3, #0]
    82a4:	2210      	movs	r2, #16
    82a6:	4013      	ands	r3, r2
    82a8:	d003      	beq.n	82b2 <_usb_d_dev_trans_in_isr+0x86>
			_usb_d_dev_handle_setup(ept);
    82aa:	687b      	ldr	r3, [r7, #4]
    82ac:	0018      	movs	r0, r3
    82ae:	4b06      	ldr	r3, [pc, #24]	; (82c8 <_usb_d_dev_trans_in_isr+0x9c>)
    82b0:	4798      	blx	r3
}
    82b2:	46c0      	nop			; (mov r8, r8)
    82b4:	46bd      	mov	sp, r7
    82b6:	b002      	add	sp, #8
    82b8:	bd80      	pop	{r7, pc}
    82ba:	46c0      	nop			; (mov r8, r8)
    82bc:	00007f6d 	.word	0x00007f6d
    82c0:	00007fbd 	.word	0x00007fbd
    82c4:	00007839 	.word	0x00007839
    82c8:	00007e69 	.word	0x00007e69

000082cc <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    82cc:	b580      	push	{r7, lr}
    82ce:	b082      	sub	sp, #8
    82d0:	af00      	add	r7, sp, #0
    82d2:	6078      	str	r0, [r7, #4]
    82d4:	000a      	movs	r2, r1
    82d6:	1cfb      	adds	r3, r7, #3
    82d8:	701a      	strb	r2, [r3, #0]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    82da:	1cfb      	adds	r3, r7, #3
    82dc:	781b      	ldrb	r3, [r3, #0]
    82de:	2220      	movs	r2, #32
    82e0:	4013      	ands	r3, r2
    82e2:	d005      	beq.n	82f0 <_usb_d_dev_trans_out_isr+0x24>
		_usb_d_dev_handle_stall(ept, 0);
    82e4:	687b      	ldr	r3, [r7, #4]
    82e6:	2100      	movs	r1, #0
    82e8:	0018      	movs	r0, r3
    82ea:	4b1c      	ldr	r3, [pc, #112]	; (835c <_usb_d_dev_trans_out_isr+0x90>)
    82ec:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    82ee:	e030      	b.n	8352 <_usb_d_dev_trans_out_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    82f0:	1cfb      	adds	r3, r7, #3
    82f2:	781b      	ldrb	r3, [r3, #0]
    82f4:	2204      	movs	r2, #4
    82f6:	4013      	ands	r3, r2
    82f8:	d005      	beq.n	8306 <_usb_d_dev_trans_out_isr+0x3a>
		_usb_d_dev_handle_trfail(ept, 0);
    82fa:	687b      	ldr	r3, [r7, #4]
    82fc:	2100      	movs	r1, #0
    82fe:	0018      	movs	r0, r3
    8300:	4b17      	ldr	r3, [pc, #92]	; (8360 <_usb_d_dev_trans_out_isr+0x94>)
    8302:	4798      	blx	r3
}
    8304:	e025      	b.n	8352 <_usb_d_dev_trans_out_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    8306:	1cfb      	adds	r3, r7, #3
    8308:	781b      	ldrb	r3, [r3, #0]
    830a:	2201      	movs	r2, #1
    830c:	4013      	ands	r3, r2
    830e:	d005      	beq.n	831c <_usb_d_dev_trans_out_isr+0x50>
		_usb_d_dev_out_next(ept, true);
    8310:	687b      	ldr	r3, [r7, #4]
    8312:	2101      	movs	r1, #1
    8314:	0018      	movs	r0, r3
    8316:	4b13      	ldr	r3, [pc, #76]	; (8364 <_usb_d_dev_trans_out_isr+0x98>)
    8318:	4798      	blx	r3
}
    831a:	e01a      	b.n	8352 <_usb_d_dev_trans_out_isr+0x86>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    831c:	687b      	ldr	r3, [r7, #4]
    831e:	7cdb      	ldrb	r3, [r3, #19]
    8320:	2207      	movs	r2, #7
    8322:	4013      	ands	r3, r2
    8324:	b2db      	uxtb	r3, r3
    8326:	2b01      	cmp	r3, #1
    8328:	d113      	bne.n	8352 <_usb_d_dev_trans_out_isr+0x86>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    832a:	1cfb      	adds	r3, r7, #3
    832c:	781b      	ldrb	r3, [r3, #0]
    832e:	2208      	movs	r2, #8
    8330:	4013      	ands	r3, r2
    8332:	d005      	beq.n	8340 <_usb_d_dev_trans_out_isr+0x74>
			_usb_d_dev_handle_trfail(ept, 1);
    8334:	687b      	ldr	r3, [r7, #4]
    8336:	2101      	movs	r1, #1
    8338:	0018      	movs	r0, r3
    833a:	4b09      	ldr	r3, [pc, #36]	; (8360 <_usb_d_dev_trans_out_isr+0x94>)
    833c:	4798      	blx	r3
}
    833e:	e008      	b.n	8352 <_usb_d_dev_trans_out_isr+0x86>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8340:	1cfb      	adds	r3, r7, #3
    8342:	781b      	ldrb	r3, [r3, #0]
    8344:	2210      	movs	r2, #16
    8346:	4013      	ands	r3, r2
    8348:	d003      	beq.n	8352 <_usb_d_dev_trans_out_isr+0x86>
			_usb_d_dev_handle_setup(ept);
    834a:	687b      	ldr	r3, [r7, #4]
    834c:	0018      	movs	r0, r3
    834e:	4b06      	ldr	r3, [pc, #24]	; (8368 <_usb_d_dev_trans_out_isr+0x9c>)
    8350:	4798      	blx	r3
}
    8352:	46c0      	nop			; (mov r8, r8)
    8354:	46bd      	mov	sp, r7
    8356:	b002      	add	sp, #8
    8358:	bd80      	pop	{r7, pc}
    835a:	46c0      	nop			; (mov r8, r8)
    835c:	00007f6d 	.word	0x00007f6d
    8360:	00007fbd 	.word	0x00007fbd
    8364:	00007ad9 	.word	0x00007ad9
    8368:	00007e69 	.word	0x00007e69

0000836c <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    836c:	b580      	push	{r7, lr}
    836e:	b084      	sub	sp, #16
    8370:	af00      	add	r7, sp, #0
    8372:	6078      	str	r0, [r7, #4]
    8374:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    8376:	4b37      	ldr	r3, [pc, #220]	; (8454 <_usb_d_dev_handle_eps+0xe8>)
    8378:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    837a:	683b      	ldr	r3, [r7, #0]
    837c:	7c9a      	ldrb	r2, [r3, #18]
    837e:	230b      	movs	r3, #11
    8380:	18fb      	adds	r3, r7, r3
    8382:	210f      	movs	r1, #15
    8384:	400a      	ands	r2, r1
    8386:	701a      	strb	r2, [r3, #0]

	if (!(epint & (1u << epn))) {
    8388:	230b      	movs	r3, #11
    838a:	18fb      	adds	r3, r7, r3
    838c:	781b      	ldrb	r3, [r3, #0]
    838e:	2201      	movs	r2, #1
    8390:	409a      	lsls	r2, r3
    8392:	0013      	movs	r3, r2
    8394:	687a      	ldr	r2, [r7, #4]
    8396:	4013      	ands	r3, r2
    8398:	d057      	beq.n	844a <_usb_d_dev_handle_eps+0xde>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    839a:	230b      	movs	r3, #11
    839c:	18fb      	adds	r3, r7, r3
    839e:	781a      	ldrb	r2, [r3, #0]
    83a0:	230a      	movs	r3, #10
    83a2:	18fb      	adds	r3, r7, r3
    83a4:	68f9      	ldr	r1, [r7, #12]
    83a6:	3208      	adds	r2, #8
    83a8:	0152      	lsls	r2, r2, #5
    83aa:	188a      	adds	r2, r1, r2
    83ac:	3207      	adds	r2, #7
    83ae:	7812      	ldrb	r2, [r2, #0]
    83b0:	701a      	strb	r2, [r3, #0]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    83b2:	230b      	movs	r3, #11
    83b4:	18fb      	adds	r3, r7, r3
    83b6:	7819      	ldrb	r1, [r3, #0]
    83b8:	2309      	movs	r3, #9
    83ba:	18fb      	adds	r3, r7, r3
    83bc:	68f8      	ldr	r0, [r7, #12]
    83be:	220a      	movs	r2, #10
    83c0:	32ff      	adds	r2, #255	; 0xff
    83c2:	0149      	lsls	r1, r1, #5
    83c4:	1841      	adds	r1, r0, r1
    83c6:	188a      	adds	r2, r1, r2
    83c8:	7812      	ldrb	r2, [r2, #0]
    83ca:	701a      	strb	r2, [r3, #0]
	flags &= mask;
    83cc:	230a      	movs	r3, #10
    83ce:	18fb      	adds	r3, r7, r3
    83d0:	220a      	movs	r2, #10
    83d2:	18ba      	adds	r2, r7, r2
    83d4:	2109      	movs	r1, #9
    83d6:	1879      	adds	r1, r7, r1
    83d8:	7812      	ldrb	r2, [r2, #0]
    83da:	7809      	ldrb	r1, [r1, #0]
    83dc:	400a      	ands	r2, r1
    83de:	701a      	strb	r2, [r3, #0]
	if (flags) {
    83e0:	230a      	movs	r3, #10
    83e2:	18fb      	adds	r3, r7, r3
    83e4:	781b      	ldrb	r3, [r3, #0]
    83e6:	2b00      	cmp	r3, #0
    83e8:	d030      	beq.n	844c <_usb_d_dev_handle_eps+0xe0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    83ea:	683b      	ldr	r3, [r7, #0]
    83ec:	7cdb      	ldrb	r3, [r3, #19]
    83ee:	2207      	movs	r2, #7
    83f0:	4013      	ands	r3, r2
    83f2:	b2db      	uxtb	r3, r3
    83f4:	2b01      	cmp	r3, #1
    83f6:	d10f      	bne.n	8418 <_usb_d_dev_handle_eps+0xac>
    83f8:	683b      	ldr	r3, [r7, #0]
    83fa:	7cdb      	ldrb	r3, [r3, #19]
    83fc:	2240      	movs	r2, #64	; 0x40
    83fe:	4013      	ands	r3, r2
    8400:	b2db      	uxtb	r3, r3
    8402:	2b00      	cmp	r3, #0
    8404:	d108      	bne.n	8418 <_usb_d_dev_handle_eps+0xac>
			_usb_d_dev_trans_setup_isr(ept, flags);
    8406:	230a      	movs	r3, #10
    8408:	18fb      	adds	r3, r7, r3
    840a:	781a      	ldrb	r2, [r3, #0]
    840c:	683b      	ldr	r3, [r7, #0]
    840e:	0011      	movs	r1, r2
    8410:	0018      	movs	r0, r3
    8412:	4b11      	ldr	r3, [pc, #68]	; (8458 <_usb_d_dev_handle_eps+0xec>)
    8414:	4798      	blx	r3
    8416:	e019      	b.n	844c <_usb_d_dev_handle_eps+0xe0>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    8418:	683b      	ldr	r3, [r7, #0]
    841a:	7cdb      	ldrb	r3, [r3, #19]
    841c:	227f      	movs	r2, #127	; 0x7f
    841e:	4393      	bics	r3, r2
    8420:	b2db      	uxtb	r3, r3
    8422:	2b00      	cmp	r3, #0
    8424:	d008      	beq.n	8438 <_usb_d_dev_handle_eps+0xcc>
			_usb_d_dev_trans_in_isr(ept, flags);
    8426:	230a      	movs	r3, #10
    8428:	18fb      	adds	r3, r7, r3
    842a:	781a      	ldrb	r2, [r3, #0]
    842c:	683b      	ldr	r3, [r7, #0]
    842e:	0011      	movs	r1, r2
    8430:	0018      	movs	r0, r3
    8432:	4b0a      	ldr	r3, [pc, #40]	; (845c <_usb_d_dev_handle_eps+0xf0>)
    8434:	4798      	blx	r3
    8436:	e009      	b.n	844c <_usb_d_dev_handle_eps+0xe0>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    8438:	230a      	movs	r3, #10
    843a:	18fb      	adds	r3, r7, r3
    843c:	781a      	ldrb	r2, [r3, #0]
    843e:	683b      	ldr	r3, [r7, #0]
    8440:	0011      	movs	r1, r2
    8442:	0018      	movs	r0, r3
    8444:	4b06      	ldr	r3, [pc, #24]	; (8460 <_usb_d_dev_handle_eps+0xf4>)
    8446:	4798      	blx	r3
    8448:	e000      	b.n	844c <_usb_d_dev_handle_eps+0xe0>
		return;
    844a:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    844c:	46bd      	mov	sp, r7
    844e:	b004      	add	sp, #16
    8450:	bd80      	pop	{r7, pc}
    8452:	46c0      	nop			; (mov r8, r8)
    8454:	41005000 	.word	0x41005000
    8458:	000081d1 	.word	0x000081d1
    845c:	0000822d 	.word	0x0000822d
    8460:	000082cd 	.word	0x000082cd

00008464 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    8464:	b580      	push	{r7, lr}
    8466:	b084      	sub	sp, #16
    8468:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    846a:	4b1f      	ldr	r3, [pc, #124]	; (84e8 <_usb_d_dev_handler+0x84>)
    846c:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    846e:	1dbb      	adds	r3, r7, #6
    8470:	68ba      	ldr	r2, [r7, #8]
    8472:	8c12      	ldrh	r2, [r2, #32]
    8474:	801a      	strh	r2, [r3, #0]
	if (0 == epint) {
    8476:	1dbb      	adds	r3, r7, #6
    8478:	881b      	ldrh	r3, [r3, #0]
    847a:	2b00      	cmp	r3, #0
    847c:	d103      	bne.n	8486 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    847e:	4b1b      	ldr	r3, [pc, #108]	; (84ec <_usb_d_dev_handler+0x88>)
    8480:	4798      	blx	r3
    8482:	1e03      	subs	r3, r0, #0
    8484:	d12b      	bne.n	84de <_usb_d_dev_handler+0x7a>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    8486:	230f      	movs	r3, #15
    8488:	18fb      	adds	r3, r7, r3
    848a:	2200      	movs	r2, #0
    848c:	701a      	strb	r2, [r3, #0]
    848e:	e020      	b.n	84d2 <_usb_d_dev_handler+0x6e>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    8490:	230f      	movs	r3, #15
    8492:	18fb      	adds	r3, r7, r3
    8494:	781a      	ldrb	r2, [r3, #0]
    8496:	0013      	movs	r3, r2
    8498:	009b      	lsls	r3, r3, #2
    849a:	189b      	adds	r3, r3, r2
    849c:	009b      	lsls	r3, r3, #2
    849e:	3310      	adds	r3, #16
    84a0:	001a      	movs	r2, r3
    84a2:	4b13      	ldr	r3, [pc, #76]	; (84f0 <_usb_d_dev_handler+0x8c>)
    84a4:	18d3      	adds	r3, r2, r3
    84a6:	3304      	adds	r3, #4
    84a8:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    84aa:	683b      	ldr	r3, [r7, #0]
    84ac:	7c9b      	ldrb	r3, [r3, #18]
    84ae:	2bff      	cmp	r3, #255	; 0xff
    84b0:	d007      	beq.n	84c2 <_usb_d_dev_handler+0x5e>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    84b2:	1dbb      	adds	r3, r7, #6
    84b4:	881b      	ldrh	r3, [r3, #0]
    84b6:	683a      	ldr	r2, [r7, #0]
    84b8:	0011      	movs	r1, r2
    84ba:	0018      	movs	r0, r3
    84bc:	4b0d      	ldr	r3, [pc, #52]	; (84f4 <_usb_d_dev_handler+0x90>)
    84be:	4798      	blx	r3
    84c0:	e000      	b.n	84c4 <_usb_d_dev_handler+0x60>
			continue;
    84c2:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < USB_D_N_EP; i++) {
    84c4:	230f      	movs	r3, #15
    84c6:	18fb      	adds	r3, r7, r3
    84c8:	781a      	ldrb	r2, [r3, #0]
    84ca:	230f      	movs	r3, #15
    84cc:	18fb      	adds	r3, r7, r3
    84ce:	3201      	adds	r2, #1
    84d0:	701a      	strb	r2, [r3, #0]
    84d2:	230f      	movs	r3, #15
    84d4:	18fb      	adds	r3, r7, r3
    84d6:	781b      	ldrb	r3, [r3, #0]
    84d8:	2b08      	cmp	r3, #8
    84da:	d9d9      	bls.n	8490 <_usb_d_dev_handler+0x2c>
    84dc:	e000      	b.n	84e0 <_usb_d_dev_handler+0x7c>
			return;
    84de:	46c0      	nop			; (mov r8, r8)
	}
}
    84e0:	46bd      	mov	sp, r7
    84e2:	b004      	add	sp, #16
    84e4:	bd80      	pop	{r7, pc}
    84e6:	46c0      	nop			; (mov r8, r8)
    84e8:	41005000 	.word	0x41005000
    84ec:	0000776d 	.word	0x0000776d
    84f0:	200002e0 	.word	0x200002e0
    84f4:	0000836d 	.word	0x0000836d

000084f8 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    84f8:	b580      	push	{r7, lr}
    84fa:	b082      	sub	sp, #8
    84fc:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    84fe:	1dfb      	adds	r3, r7, #7
    8500:	2200      	movs	r2, #0
    8502:	701a      	strb	r2, [r3, #0]
    8504:	e02b      	b.n	855e <_usb_d_dev_reset_epts+0x66>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    8506:	1dfb      	adds	r3, r7, #7
    8508:	781a      	ldrb	r2, [r3, #0]
    850a:	0013      	movs	r3, r2
    850c:	009b      	lsls	r3, r3, #2
    850e:	189b      	adds	r3, r3, r2
    8510:	009b      	lsls	r3, r3, #2
    8512:	3310      	adds	r3, #16
    8514:	001a      	movs	r2, r3
    8516:	4b19      	ldr	r3, [pc, #100]	; (857c <_usb_d_dev_reset_epts+0x84>)
    8518:	18d3      	adds	r3, r2, r3
    851a:	3304      	adds	r3, #4
    851c:	2103      	movs	r1, #3
    851e:	0018      	movs	r0, r3
    8520:	4b17      	ldr	r3, [pc, #92]	; (8580 <_usb_d_dev_reset_epts+0x88>)
    8522:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    8524:	1dfb      	adds	r3, r7, #7
    8526:	781a      	ldrb	r2, [r3, #0]
    8528:	4914      	ldr	r1, [pc, #80]	; (857c <_usb_d_dev_reset_epts+0x84>)
    852a:	2026      	movs	r0, #38	; 0x26
    852c:	0013      	movs	r3, r2
    852e:	009b      	lsls	r3, r3, #2
    8530:	189b      	adds	r3, r3, r2
    8532:	009b      	lsls	r3, r3, #2
    8534:	18cb      	adds	r3, r1, r3
    8536:	181b      	adds	r3, r3, r0
    8538:	22ff      	movs	r2, #255	; 0xff
    853a:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    853c:	1dfb      	adds	r3, r7, #7
    853e:	781a      	ldrb	r2, [r3, #0]
    8540:	490e      	ldr	r1, [pc, #56]	; (857c <_usb_d_dev_reset_epts+0x84>)
    8542:	2027      	movs	r0, #39	; 0x27
    8544:	0013      	movs	r3, r2
    8546:	009b      	lsls	r3, r3, #2
    8548:	189b      	adds	r3, r3, r2
    854a:	009b      	lsls	r3, r3, #2
    854c:	18cb      	adds	r3, r1, r3
    854e:	181b      	adds	r3, r3, r0
    8550:	2200      	movs	r2, #0
    8552:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    8554:	1dfb      	adds	r3, r7, #7
    8556:	781a      	ldrb	r2, [r3, #0]
    8558:	1dfb      	adds	r3, r7, #7
    855a:	3201      	adds	r2, #1
    855c:	701a      	strb	r2, [r3, #0]
    855e:	1dfb      	adds	r3, r7, #7
    8560:	781b      	ldrb	r3, [r3, #0]
    8562:	2b08      	cmp	r3, #8
    8564:	d9cf      	bls.n	8506 <_usb_d_dev_reset_epts+0xe>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    8566:	4b07      	ldr	r3, [pc, #28]	; (8584 <_usb_d_dev_reset_epts+0x8c>)
    8568:	2260      	movs	r2, #96	; 0x60
    856a:	2100      	movs	r1, #0
    856c:	0018      	movs	r0, r3
    856e:	4b06      	ldr	r3, [pc, #24]	; (8588 <_usb_d_dev_reset_epts+0x90>)
    8570:	4798      	blx	r3
}
    8572:	46c0      	nop			; (mov r8, r8)
    8574:	46bd      	mov	sp, r7
    8576:	b002      	add	sp, #8
    8578:	bd80      	pop	{r7, pc}
    857a:	46c0      	nop			; (mov r8, r8)
    857c:	200002e0 	.word	0x200002e0
    8580:	00008f9d 	.word	0x00008f9d
    8584:	200003a8 	.word	0x200003a8
    8588:	0000ba57 	.word	0x0000ba57

0000858c <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    858c:	b580      	push	{r7, lr}
    858e:	b084      	sub	sp, #16
    8590:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    8592:	4b34      	ldr	r3, [pc, #208]	; (8664 <_usb_d_dev_init+0xd8>)
    8594:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    8596:	230b      	movs	r3, #11
    8598:	18fb      	adds	r3, r7, r3
    859a:	2201      	movs	r2, #1
    859c:	701a      	strb	r2, [r3, #0]
	const uint8_t spdconf[4] = {
    859e:	1d3b      	adds	r3, r7, #4
    85a0:	2204      	movs	r2, #4
    85a2:	701a      	strb	r2, [r3, #0]
    85a4:	1d3b      	adds	r3, r7, #4
    85a6:	2200      	movs	r2, #0
    85a8:	705a      	strb	r2, [r3, #1]
    85aa:	1d3b      	adds	r3, r7, #4
    85ac:	2200      	movs	r2, #0
    85ae:	709a      	strb	r2, [r3, #2]
    85b0:	1d3b      	adds	r3, r7, #4
    85b2:	2200      	movs	r2, #0
    85b4:	70da      	strb	r2, [r3, #3]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    85b6:	68fb      	ldr	r3, [r7, #12]
    85b8:	2101      	movs	r1, #1
    85ba:	0018      	movs	r0, r3
    85bc:	4b2a      	ldr	r3, [pc, #168]	; (8668 <_usb_d_dev_init+0xdc>)
    85be:	4798      	blx	r3
    85c0:	0003      	movs	r3, r0
    85c2:	001a      	movs	r2, r3
    85c4:	2301      	movs	r3, #1
    85c6:	4053      	eors	r3, r2
    85c8:	b2db      	uxtb	r3, r3
    85ca:	2b00      	cmp	r3, #0
    85cc:	d014      	beq.n	85f8 <_usb_d_dev_init+0x6c>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    85ce:	68fb      	ldr	r3, [r7, #12]
    85d0:	2102      	movs	r1, #2
    85d2:	0018      	movs	r0, r3
    85d4:	4b25      	ldr	r3, [pc, #148]	; (866c <_usb_d_dev_init+0xe0>)
    85d6:	4798      	blx	r3
    85d8:	1e03      	subs	r3, r0, #0
    85da:	d008      	beq.n	85ee <_usb_d_dev_init+0x62>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    85dc:	68fb      	ldr	r3, [r7, #12]
    85de:	0018      	movs	r0, r3
    85e0:	4b23      	ldr	r3, [pc, #140]	; (8670 <_usb_d_dev_init+0xe4>)
    85e2:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    85e4:	68fb      	ldr	r3, [r7, #12]
    85e6:	2102      	movs	r1, #2
    85e8:	0018      	movs	r0, r3
    85ea:	4b22      	ldr	r3, [pc, #136]	; (8674 <_usb_d_dev_init+0xe8>)
    85ec:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    85ee:	68fb      	ldr	r3, [r7, #12]
    85f0:	2101      	movs	r1, #1
    85f2:	0018      	movs	r0, r3
    85f4:	4b20      	ldr	r3, [pc, #128]	; (8678 <_usb_d_dev_init+0xec>)
    85f6:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    85f8:	68fb      	ldr	r3, [r7, #12]
    85fa:	2101      	movs	r1, #1
    85fc:	0018      	movs	r0, r3
    85fe:	4b1d      	ldr	r3, [pc, #116]	; (8674 <_usb_d_dev_init+0xe8>)
    8600:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    8602:	4b1e      	ldr	r3, [pc, #120]	; (867c <_usb_d_dev_init+0xf0>)
    8604:	4a1e      	ldr	r2, [pc, #120]	; (8680 <_usb_d_dev_init+0xf4>)
    8606:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    8608:	4b1c      	ldr	r3, [pc, #112]	; (867c <_usb_d_dev_init+0xf0>)
    860a:	4a1d      	ldr	r2, [pc, #116]	; (8680 <_usb_d_dev_init+0xf4>)
    860c:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    860e:	4b1b      	ldr	r3, [pc, #108]	; (867c <_usb_d_dev_init+0xf0>)
    8610:	4a1b      	ldr	r2, [pc, #108]	; (8680 <_usb_d_dev_init+0xf4>)
    8612:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    8614:	4b19      	ldr	r3, [pc, #100]	; (867c <_usb_d_dev_init+0xf0>)
    8616:	4a1a      	ldr	r2, [pc, #104]	; (8680 <_usb_d_dev_init+0xf4>)
    8618:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    861a:	4b18      	ldr	r3, [pc, #96]	; (867c <_usb_d_dev_init+0xf0>)
    861c:	4a18      	ldr	r2, [pc, #96]	; (8680 <_usb_d_dev_init+0xf4>)
    861e:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    8620:	4b18      	ldr	r3, [pc, #96]	; (8684 <_usb_d_dev_init+0xf8>)
    8622:	4798      	blx	r3

	_usb_load_calib();
    8624:	4b18      	ldr	r3, [pc, #96]	; (8688 <_usb_d_dev_init+0xfc>)
    8626:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    8628:	68fb      	ldr	r3, [r7, #12]
    862a:	2104      	movs	r1, #4
    862c:	0018      	movs	r0, r3
    862e:	4b12      	ldr	r3, [pc, #72]	; (8678 <_usb_d_dev_init+0xec>)
    8630:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    8632:	4a16      	ldr	r2, [pc, #88]	; (868c <_usb_d_dev_init+0x100>)
    8634:	68fb      	ldr	r3, [r7, #12]
    8636:	0011      	movs	r1, r2
    8638:	0018      	movs	r0, r3
    863a:	4b15      	ldr	r3, [pc, #84]	; (8690 <_usb_d_dev_init+0x104>)
    863c:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    863e:	230b      	movs	r3, #11
    8640:	18fb      	adds	r3, r7, r3
    8642:	781b      	ldrb	r3, [r3, #0]
    8644:	1d3a      	adds	r2, r7, #4
    8646:	5cd3      	ldrb	r3, [r2, r3]
    8648:	2201      	movs	r2, #1
    864a:	4313      	orrs	r3, r2
    864c:	b2db      	uxtb	r3, r3
    864e:	b29a      	uxth	r2, r3
    8650:	68fb      	ldr	r3, [r7, #12]
    8652:	0011      	movs	r1, r2
    8654:	0018      	movs	r0, r3
    8656:	4b0f      	ldr	r3, [pc, #60]	; (8694 <_usb_d_dev_init+0x108>)
    8658:	4798      	blx	r3

	return ERR_NONE;
    865a:	2300      	movs	r3, #0
}
    865c:	0018      	movs	r0, r3
    865e:	46bd      	mov	sp, r7
    8660:	b004      	add	sp, #16
    8662:	bd80      	pop	{r7, pc}
    8664:	41005000 	.word	0x41005000
    8668:	00006773 	.word	0x00006773
    866c:	00006b31 	.word	0x00006b31
    8670:	00006b01 	.word	0x00006b01
    8674:	00006749 	.word	0x00006749
    8678:	00006b79 	.word	0x00006b79
    867c:	200002e0 	.word	0x200002e0
    8680:	00006c3d 	.word	0x00006c3d
    8684:	000084f9 	.word	0x000084f9
    8688:	00006c51 	.word	0x00006c51
    868c:	200003a8 	.word	0x200003a8
    8690:	00006c25 	.word	0x00006c25
    8694:	00006be9 	.word	0x00006be9

00008698 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_IRQn);
	NVIC_ClearPendingIRQ(USB_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    8698:	b590      	push	{r4, r7, lr}
    869a:	b083      	sub	sp, #12
    869c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    869e:	4b18      	ldr	r3, [pc, #96]	; (8700 <_usb_d_dev_enable+0x68>)
    86a0:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    86a2:	687b      	ldr	r3, [r7, #4]
    86a4:	2103      	movs	r1, #3
    86a6:	0018      	movs	r0, r3
    86a8:	4b16      	ldr	r3, [pc, #88]	; (8704 <_usb_d_dev_enable+0x6c>)
    86aa:	4798      	blx	r3
    86ac:	1e03      	subs	r3, r0, #0
    86ae:	d002      	beq.n	86b6 <_usb_d_dev_enable+0x1e>
		return -USB_ERR_DENIED;
    86b0:	2311      	movs	r3, #17
    86b2:	425b      	negs	r3, r3
    86b4:	e01f      	b.n	86f6 <_usb_d_dev_enable+0x5e>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    86b6:	1cfc      	adds	r4, r7, #3
    86b8:	687b      	ldr	r3, [r7, #4]
    86ba:	0018      	movs	r0, r3
    86bc:	4b12      	ldr	r3, [pc, #72]	; (8708 <_usb_d_dev_enable+0x70>)
    86be:	4798      	blx	r3
    86c0:	0003      	movs	r3, r0
    86c2:	7023      	strb	r3, [r4, #0]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    86c4:	1cfb      	adds	r3, r7, #3
    86c6:	781b      	ldrb	r3, [r3, #0]
    86c8:	2202      	movs	r2, #2
    86ca:	4013      	ands	r3, r2
    86cc:	d109      	bne.n	86e2 <_usb_d_dev_enable+0x4a>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    86ce:	1cfb      	adds	r3, r7, #3
    86d0:	781b      	ldrb	r3, [r3, #0]
    86d2:	2202      	movs	r2, #2
    86d4:	4313      	orrs	r3, r2
    86d6:	b2da      	uxtb	r2, r3
    86d8:	687b      	ldr	r3, [r7, #4]
    86da:	0011      	movs	r1, r2
    86dc:	0018      	movs	r0, r3
    86de:	4b0b      	ldr	r3, [pc, #44]	; (870c <_usb_d_dev_enable+0x74>)
    86e0:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_IRQn);
    86e2:	2007      	movs	r0, #7
    86e4:	4b0a      	ldr	r3, [pc, #40]	; (8710 <_usb_d_dev_enable+0x78>)
    86e6:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    86e8:	4a0a      	ldr	r2, [pc, #40]	; (8714 <_usb_d_dev_enable+0x7c>)
    86ea:	687b      	ldr	r3, [r7, #4]
    86ec:	0011      	movs	r1, r2
    86ee:	0018      	movs	r0, r3
    86f0:	4b09      	ldr	r3, [pc, #36]	; (8718 <_usb_d_dev_enable+0x80>)
    86f2:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    86f4:	2300      	movs	r3, #0
}
    86f6:	0018      	movs	r0, r3
    86f8:	46bd      	mov	sp, r7
    86fa:	b003      	add	sp, #12
    86fc:	bd90      	pop	{r4, r7, pc}
    86fe:	46c0      	nop			; (mov r8, r8)
    8700:	41005000 	.word	0x41005000
    8704:	00006ac7 	.word	0x00006ac7
    8708:	00006ba5 	.word	0x00006ba5
    870c:	00006b79 	.word	0x00006b79
    8710:	000066b9 	.word	0x000066b9
    8714:	0000028d 	.word	0x0000028d
    8718:	00006a75 	.word	0x00006a75

0000871c <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    871c:	b580      	push	{r7, lr}
    871e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    8720:	4b03      	ldr	r3, [pc, #12]	; (8730 <_usb_d_dev_attach+0x14>)
    8722:	0018      	movs	r0, r3
    8724:	4b03      	ldr	r3, [pc, #12]	; (8734 <_usb_d_dev_attach+0x18>)
    8726:	4798      	blx	r3
}
    8728:	46c0      	nop			; (mov r8, r8)
    872a:	46bd      	mov	sp, r7
    872c:	bd80      	pop	{r7, pc}
    872e:	46c0      	nop			; (mov r8, r8)
    8730:	41005000 	.word	0x41005000
    8734:	00006bc9 	.word	0x00006bc9

00008738 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    8738:	b580      	push	{r7, lr}
    873a:	b082      	sub	sp, #8
    873c:	af00      	add	r7, sp, #0
    873e:	0002      	movs	r2, r0
    8740:	1dfb      	adds	r3, r7, #7
    8742:	701a      	strb	r2, [r3, #0]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    8744:	1dfb      	adds	r3, r7, #7
    8746:	781b      	ldrb	r3, [r3, #0]
    8748:	2280      	movs	r2, #128	; 0x80
    874a:	4252      	negs	r2, r2
    874c:	4313      	orrs	r3, r2
    874e:	b2db      	uxtb	r3, r3
    8750:	4a04      	ldr	r2, [pc, #16]	; (8764 <_usb_d_dev_set_address+0x2c>)
    8752:	0019      	movs	r1, r3
    8754:	0010      	movs	r0, r2
    8756:	4b04      	ldr	r3, [pc, #16]	; (8768 <_usb_d_dev_set_address+0x30>)
    8758:	4798      	blx	r3
}
    875a:	46c0      	nop			; (mov r8, r8)
    875c:	46bd      	mov	sp, r7
    875e:	b002      	add	sp, #8
    8760:	bd80      	pop	{r7, pc}
    8762:	46c0      	nop			; (mov r8, r8)
    8764:	41005000 	.word	0x41005000
    8768:	00006c07 	.word	0x00006c07

0000876c <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    876c:	b590      	push	{r4, r7, lr}
    876e:	b085      	sub	sp, #20
    8770:	af00      	add	r7, sp, #0
    8772:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    8774:	4b1c      	ldr	r3, [pc, #112]	; (87e8 <_usb_d_dev_trans_setup+0x7c>)
    8776:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8778:	687b      	ldr	r3, [r7, #4]
    877a:	7c9a      	ldrb	r2, [r3, #18]
    877c:	230b      	movs	r3, #11
    877e:	18fb      	adds	r3, r7, r3
    8780:	210f      	movs	r1, #15
    8782:	400a      	ands	r2, r1
    8784:	701a      	strb	r2, [r3, #0]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8786:	687b      	ldr	r3, [r7, #4]
    8788:	68db      	ldr	r3, [r3, #12]
    878a:	001a      	movs	r2, r3
    878c:	230b      	movs	r3, #11
    878e:	18fb      	adds	r3, r7, r3
    8790:	781b      	ldrb	r3, [r3, #0]
    8792:	2100      	movs	r1, #0
    8794:	0018      	movs	r0, r3
    8796:	4b15      	ldr	r3, [pc, #84]	; (87ec <_usb_d_dev_trans_setup+0x80>)
    8798:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    879a:	687b      	ldr	r3, [r7, #4]
    879c:	8a1b      	ldrh	r3, [r3, #16]
    879e:	001a      	movs	r2, r3
    87a0:	230b      	movs	r3, #11
    87a2:	18fb      	adds	r3, r7, r3
    87a4:	7818      	ldrb	r0, [r3, #0]
    87a6:	2300      	movs	r3, #0
    87a8:	2100      	movs	r1, #0
    87aa:	4c11      	ldr	r4, [pc, #68]	; (87f0 <_usb_d_dev_trans_setup+0x84>)
    87ac:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    87ae:	230b      	movs	r3, #11
    87b0:	18fb      	adds	r3, r7, r3
    87b2:	7819      	ldrb	r1, [r3, #0]
    87b4:	68fb      	ldr	r3, [r7, #12]
    87b6:	22b0      	movs	r2, #176	; 0xb0
    87b8:	0018      	movs	r0, r3
    87ba:	4b0e      	ldr	r3, [pc, #56]	; (87f4 <_usb_d_dev_trans_setup+0x88>)
    87bc:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    87be:	230b      	movs	r3, #11
    87c0:	18fb      	adds	r3, r7, r3
    87c2:	781b      	ldrb	r3, [r3, #0]
    87c4:	2200      	movs	r2, #0
    87c6:	2100      	movs	r1, #0
    87c8:	0018      	movs	r0, r3
    87ca:	4b0b      	ldr	r3, [pc, #44]	; (87f8 <_usb_d_dev_trans_setup+0x8c>)
    87cc:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    87ce:	230b      	movs	r3, #11
    87d0:	18fb      	adds	r3, r7, r3
    87d2:	7819      	ldrb	r1, [r3, #0]
    87d4:	68fb      	ldr	r3, [r7, #12]
    87d6:	2210      	movs	r2, #16
    87d8:	0018      	movs	r0, r3
    87da:	4b08      	ldr	r3, [pc, #32]	; (87fc <_usb_d_dev_trans_setup+0x90>)
    87dc:	4798      	blx	r3
}
    87de:	46c0      	nop			; (mov r8, r8)
    87e0:	46bd      	mov	sp, r7
    87e2:	b005      	add	sp, #20
    87e4:	bd90      	pop	{r4, r7, pc}
    87e6:	46c0      	nop			; (mov r8, r8)
    87e8:	41005000 	.word	0x41005000
    87ec:	0000711d 	.word	0x0000711d
    87f0:	00007321 	.word	0x00007321
    87f4:	000068a3 	.word	0x000068a3
    87f8:	0000741d 	.word	0x0000741d
    87fc:	00006901 	.word	0x00006901

00008800 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    8800:	b590      	push	{r4, r7, lr}
    8802:	b089      	sub	sp, #36	; 0x24
    8804:	af00      	add	r7, sp, #0
    8806:	0004      	movs	r4, r0
    8808:	0008      	movs	r0, r1
    880a:	0011      	movs	r1, r2
    880c:	1dfb      	adds	r3, r7, #7
    880e:	1c22      	adds	r2, r4, #0
    8810:	701a      	strb	r2, [r3, #0]
    8812:	1dbb      	adds	r3, r7, #6
    8814:	1c02      	adds	r2, r0, #0
    8816:	701a      	strb	r2, [r3, #0]
    8818:	1d3b      	adds	r3, r7, #4
    881a:	1c0a      	adds	r2, r1, #0
    881c:	801a      	strh	r2, [r3, #0]
	uint8_t               epn = USB_EP_GET_N(ep);
    881e:	231f      	movs	r3, #31
    8820:	18fb      	adds	r3, r7, r3
    8822:	1dfa      	adds	r2, r7, #7
    8824:	7812      	ldrb	r2, [r2, #0]
    8826:	210f      	movs	r1, #15
    8828:	400a      	ands	r2, r1
    882a:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(ep);
    882c:	1dfb      	adds	r3, r7, #7
    882e:	781b      	ldrb	r3, [r3, #0]
    8830:	2280      	movs	r2, #128	; 0x80
    8832:	401a      	ands	r2, r3
    8834:	231e      	movs	r3, #30
    8836:	18fb      	adds	r3, r7, r3
    8838:	1e51      	subs	r1, r2, #1
    883a:	418a      	sbcs	r2, r1
    883c:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    883e:	231e      	movs	r3, #30
    8840:	18fb      	adds	r3, r7, r3
    8842:	781a      	ldrb	r2, [r3, #0]
    8844:	231f      	movs	r3, #31
    8846:	18fb      	adds	r3, r7, r3
    8848:	781b      	ldrb	r3, [r3, #0]
    884a:	0011      	movs	r1, r2
    884c:	0018      	movs	r0, r3
    884e:	4b49      	ldr	r3, [pc, #292]	; (8974 <_usb_d_dev_ep_init+0x174>)
    8850:	4798      	blx	r3
    8852:	0003      	movs	r3, r0
    8854:	61bb      	str	r3, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    8856:	2317      	movs	r3, #23
    8858:	18fb      	adds	r3, r7, r3
    885a:	1dba      	adds	r2, r7, #6
    885c:	7812      	ldrb	r2, [r2, #0]
    885e:	2103      	movs	r1, #3
    8860:	400a      	ands	r2, r1
    8862:	701a      	strb	r2, [r3, #0]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    8864:	231f      	movs	r3, #31
    8866:	18fb      	adds	r3, r7, r3
    8868:	781a      	ldrb	r2, [r3, #0]
    886a:	0013      	movs	r3, r2
    886c:	005b      	lsls	r3, r3, #1
    886e:	189b      	adds	r3, r3, r2
    8870:	009b      	lsls	r3, r3, #2
    8872:	4a41      	ldr	r2, [pc, #260]	; (8978 <_usb_d_dev_ep_init+0x178>)
    8874:	189b      	adds	r3, r3, r2
    8876:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    8878:	231f      	movs	r3, #31
    887a:	18fb      	adds	r3, r7, r3
    887c:	781b      	ldrb	r3, [r3, #0]
    887e:	2b02      	cmp	r3, #2
    8880:	d902      	bls.n	8888 <_usb_d_dev_ep_init+0x88>
		return -USB_ERR_PARAM;
    8882:	2312      	movs	r3, #18
    8884:	425b      	negs	r3, r3
    8886:	e070      	b.n	896a <_usb_d_dev_ep_init+0x16a>
	}
	if (ept->ep != 0xFF) {
    8888:	69bb      	ldr	r3, [r7, #24]
    888a:	7c9b      	ldrb	r3, [r3, #18]
    888c:	2bff      	cmp	r3, #255	; 0xff
    888e:	d002      	beq.n	8896 <_usb_d_dev_ep_init+0x96>
		return -USB_ERR_REDO;
    8890:	2314      	movs	r3, #20
    8892:	425b      	negs	r3, r3
    8894:	e069      	b.n	896a <_usb_d_dev_ep_init+0x16a>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    8896:	2317      	movs	r3, #23
    8898:	18fb      	adds	r3, r7, r3
    889a:	781b      	ldrb	r3, [r3, #0]
    889c:	2b00      	cmp	r3, #0
    889e:	d123      	bne.n	88e8 <_usb_d_dev_ep_init+0xe8>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    88a0:	231e      	movs	r3, #30
    88a2:	18fb      	adds	r3, r7, r3
    88a4:	781b      	ldrb	r3, [r3, #0]
    88a6:	1e5a      	subs	r2, r3, #1
    88a8:	4193      	sbcs	r3, r2
    88aa:	b2db      	uxtb	r3, r3
    88ac:	2201      	movs	r2, #1
    88ae:	4053      	eors	r3, r2
    88b0:	b2db      	uxtb	r3, r3
    88b2:	1c1a      	adds	r2, r3, #0
    88b4:	2301      	movs	r3, #1
    88b6:	4013      	ands	r3, r2
    88b8:	b2da      	uxtb	r2, r3
    88ba:	231f      	movs	r3, #31
    88bc:	18fb      	adds	r3, r7, r3
    88be:	781b      	ldrb	r3, [r3, #0]
    88c0:	0011      	movs	r1, r2
    88c2:	0018      	movs	r0, r3
    88c4:	4b2b      	ldr	r3, [pc, #172]	; (8974 <_usb_d_dev_ep_init+0x174>)
    88c6:	4798      	blx	r3
    88c8:	0003      	movs	r3, r0
    88ca:	60fb      	str	r3, [r7, #12]
		if (ept_in->ep != 0xFF) {
    88cc:	68fb      	ldr	r3, [r7, #12]
    88ce:	7c9b      	ldrb	r3, [r3, #18]
    88d0:	2bff      	cmp	r3, #255	; 0xff
    88d2:	d002      	beq.n	88da <_usb_d_dev_ep_init+0xda>
			return -USB_ERR_REDO;
    88d4:	2314      	movs	r3, #20
    88d6:	425b      	negs	r3, r3
    88d8:	e047      	b.n	896a <_usb_d_dev_ep_init+0x16a>
		}
		if (pcfg->cache == NULL) {
    88da:	693b      	ldr	r3, [r7, #16]
    88dc:	681b      	ldr	r3, [r3, #0]
    88de:	2b00      	cmp	r3, #0
    88e0:	d102      	bne.n	88e8 <_usb_d_dev_ep_init+0xe8>
			return -USB_ERR_FUNC;
    88e2:	2313      	movs	r3, #19
    88e4:	425b      	negs	r3, r3
    88e6:	e040      	b.n	896a <_usb_d_dev_ep_init+0x16a>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    88e8:	231e      	movs	r3, #30
    88ea:	18fb      	adds	r3, r7, r3
    88ec:	781b      	ldrb	r3, [r3, #0]
    88ee:	2b00      	cmp	r3, #0
    88f0:	d005      	beq.n	88fe <_usb_d_dev_ep_init+0xfe>
    88f2:	693b      	ldr	r3, [r7, #16]
    88f4:	685b      	ldr	r3, [r3, #4]
    88f6:	1e5a      	subs	r2, r3, #1
    88f8:	4193      	sbcs	r3, r2
    88fa:	b2db      	uxtb	r3, r3
    88fc:	e004      	b.n	8908 <_usb_d_dev_ep_init+0x108>
    88fe:	693b      	ldr	r3, [r7, #16]
    8900:	681b      	ldr	r3, [r3, #0]
    8902:	1e5a      	subs	r2, r3, #1
    8904:	4193      	sbcs	r3, r2
    8906:	b2db      	uxtb	r3, r3
    8908:	2b00      	cmp	r3, #0
    890a:	d012      	beq.n	8932 <_usb_d_dev_ep_init+0x132>
    890c:	231e      	movs	r3, #30
    890e:	18fb      	adds	r3, r7, r3
    8910:	781b      	ldrb	r3, [r3, #0]
    8912:	2b00      	cmp	r3, #0
    8914:	d003      	beq.n	891e <_usb_d_dev_ep_init+0x11e>
    8916:	693b      	ldr	r3, [r7, #16]
    8918:	895b      	ldrh	r3, [r3, #10]
    891a:	001a      	movs	r2, r3
    891c:	e002      	b.n	8924 <_usb_d_dev_ep_init+0x124>
    891e:	693b      	ldr	r3, [r7, #16]
    8920:	891b      	ldrh	r3, [r3, #8]
    8922:	001a      	movs	r2, r3
    8924:	1d3b      	adds	r3, r7, #4
    8926:	881b      	ldrh	r3, [r3, #0]
    8928:	429a      	cmp	r2, r3
    892a:	da02      	bge.n	8932 <_usb_d_dev_ep_init+0x132>
		return -USB_ERR_FUNC;
    892c:	2313      	movs	r3, #19
    892e:	425b      	negs	r3, r3
    8930:	e01b      	b.n	896a <_usb_d_dev_ep_init+0x16a>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    8932:	231e      	movs	r3, #30
    8934:	18fb      	adds	r3, r7, r3
    8936:	781b      	ldrb	r3, [r3, #0]
    8938:	2b00      	cmp	r3, #0
    893a:	d002      	beq.n	8942 <_usb_d_dev_ep_init+0x142>
    893c:	693b      	ldr	r3, [r7, #16]
    893e:	685a      	ldr	r2, [r3, #4]
    8940:	e001      	b.n	8946 <_usb_d_dev_ep_init+0x146>
    8942:	693b      	ldr	r3, [r7, #16]
    8944:	681a      	ldr	r2, [r3, #0]
    8946:	69bb      	ldr	r3, [r7, #24]
    8948:	60da      	str	r2, [r3, #12]
	ept->size     = max_pkt_siz;
    894a:	69bb      	ldr	r3, [r7, #24]
    894c:	1d3a      	adds	r2, r7, #4
    894e:	8812      	ldrh	r2, [r2, #0]
    8950:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    8952:	2317      	movs	r3, #23
    8954:	18fb      	adds	r3, r7, r3
    8956:	781b      	ldrb	r3, [r3, #0]
    8958:	3301      	adds	r3, #1
    895a:	b2da      	uxtb	r2, r3
    895c:	69bb      	ldr	r3, [r7, #24]
    895e:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    8960:	69bb      	ldr	r3, [r7, #24]
    8962:	1dfa      	adds	r2, r7, #7
    8964:	7812      	ldrb	r2, [r2, #0]
    8966:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    8968:	2300      	movs	r3, #0
}
    896a:	0018      	movs	r0, r3
    896c:	46bd      	mov	sp, r7
    896e:	b009      	add	sp, #36	; 0x24
    8970:	bd90      	pop	{r4, r7, pc}
    8972:	46c0      	nop			; (mov r8, r8)
    8974:	000074fd 	.word	0x000074fd
    8978:	0000c478 	.word	0x0000c478

0000897c <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    897c:	b580      	push	{r7, lr}
    897e:	b086      	sub	sp, #24
    8980:	af00      	add	r7, sp, #0
    8982:	0002      	movs	r2, r0
    8984:	1dfb      	adds	r3, r7, #7
    8986:	701a      	strb	r2, [r3, #0]
	Usb *                 hw  = USB;
    8988:	4b39      	ldr	r3, [pc, #228]	; (8a70 <_usb_d_dev_ep_deinit+0xf4>)
    898a:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    898c:	2313      	movs	r3, #19
    898e:	18fb      	adds	r3, r7, r3
    8990:	1dfa      	adds	r2, r7, #7
    8992:	7812      	ldrb	r2, [r2, #0]
    8994:	210f      	movs	r1, #15
    8996:	400a      	ands	r2, r1
    8998:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(ep);
    899a:	1dfb      	adds	r3, r7, #7
    899c:	781b      	ldrb	r3, [r3, #0]
    899e:	2280      	movs	r2, #128	; 0x80
    89a0:	401a      	ands	r2, r3
    89a2:	2312      	movs	r3, #18
    89a4:	18fb      	adds	r3, r7, r3
    89a6:	1e51      	subs	r1, r2, #1
    89a8:	418a      	sbcs	r2, r1
    89aa:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    89ac:	2312      	movs	r3, #18
    89ae:	18fb      	adds	r3, r7, r3
    89b0:	781a      	ldrb	r2, [r3, #0]
    89b2:	2313      	movs	r3, #19
    89b4:	18fb      	adds	r3, r7, r3
    89b6:	781b      	ldrb	r3, [r3, #0]
    89b8:	0011      	movs	r1, r2
    89ba:	0018      	movs	r0, r3
    89bc:	4b2d      	ldr	r3, [pc, #180]	; (8a74 <_usb_d_dev_ep_deinit+0xf8>)
    89be:	4798      	blx	r3
    89c0:	0003      	movs	r3, r0
    89c2:	60fb      	str	r3, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    89c4:	2313      	movs	r3, #19
    89c6:	18fb      	adds	r3, r7, r3
    89c8:	781b      	ldrb	r3, [r3, #0]
    89ca:	2b02      	cmp	r3, #2
    89cc:	d84b      	bhi.n	8a66 <_usb_d_dev_ep_deinit+0xea>
    89ce:	68fb      	ldr	r3, [r7, #12]
    89d0:	7c9b      	ldrb	r3, [r3, #18]
    89d2:	2bff      	cmp	r3, #255	; 0xff
    89d4:	d047      	beq.n	8a66 <_usb_d_dev_ep_deinit+0xea>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    89d6:	2312      	movs	r3, #18
    89d8:	18fb      	adds	r3, r7, r3
    89da:	7819      	ldrb	r1, [r3, #0]
    89dc:	68fb      	ldr	r3, [r7, #12]
    89de:	2203      	movs	r2, #3
    89e0:	0018      	movs	r0, r3
    89e2:	4b25      	ldr	r3, [pc, #148]	; (8a78 <_usb_d_dev_ep_deinit+0xfc>)
    89e4:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    89e6:	68fb      	ldr	r3, [r7, #12]
    89e8:	7cdb      	ldrb	r3, [r3, #19]
    89ea:	2207      	movs	r2, #7
    89ec:	4013      	ands	r3, r2
    89ee:	b2db      	uxtb	r3, r3
    89f0:	2b01      	cmp	r3, #1
    89f2:	d107      	bne.n	8a04 <_usb_d_dev_ep_deinit+0x88>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    89f4:	1dfb      	adds	r3, r7, #7
    89f6:	781a      	ldrb	r2, [r3, #0]
    89f8:	697b      	ldr	r3, [r7, #20]
    89fa:	3208      	adds	r2, #8
    89fc:	0152      	lsls	r2, r2, #5
    89fe:	2100      	movs	r1, #0
    8a00:	54d1      	strb	r1, [r2, r3]
    8a02:	e029      	b.n	8a58 <_usb_d_dev_ep_deinit+0xdc>
	} else if (USB_EP_GET_DIR(ep)) {
    8a04:	1dfb      	adds	r3, r7, #7
    8a06:	781b      	ldrb	r3, [r3, #0]
    8a08:	b25b      	sxtb	r3, r3
    8a0a:	2b00      	cmp	r3, #0
    8a0c:	da14      	bge.n	8a38 <_usb_d_dev_ep_deinit+0xbc>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    8a0e:	1dfb      	adds	r3, r7, #7
    8a10:	781b      	ldrb	r3, [r3, #0]
    8a12:	220f      	movs	r2, #15
    8a14:	401a      	ands	r2, r3
    8a16:	1dfb      	adds	r3, r7, #7
    8a18:	781b      	ldrb	r3, [r3, #0]
    8a1a:	210f      	movs	r1, #15
    8a1c:	4019      	ands	r1, r3
    8a1e:	697b      	ldr	r3, [r7, #20]
    8a20:	3108      	adds	r1, #8
    8a22:	0149      	lsls	r1, r1, #5
    8a24:	5ccb      	ldrb	r3, [r1, r3]
    8a26:	b2db      	uxtb	r3, r3
    8a28:	2170      	movs	r1, #112	; 0x70
    8a2a:	438b      	bics	r3, r1
    8a2c:	b2d9      	uxtb	r1, r3
    8a2e:	697b      	ldr	r3, [r7, #20]
    8a30:	3208      	adds	r2, #8
    8a32:	0152      	lsls	r2, r2, #5
    8a34:	54d1      	strb	r1, [r2, r3]
    8a36:	e00f      	b.n	8a58 <_usb_d_dev_ep_deinit+0xdc>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    8a38:	1dfb      	adds	r3, r7, #7
    8a3a:	781a      	ldrb	r2, [r3, #0]
    8a3c:	1dfb      	adds	r3, r7, #7
    8a3e:	7819      	ldrb	r1, [r3, #0]
    8a40:	697b      	ldr	r3, [r7, #20]
    8a42:	3108      	adds	r1, #8
    8a44:	0149      	lsls	r1, r1, #5
    8a46:	5ccb      	ldrb	r3, [r1, r3]
    8a48:	b2db      	uxtb	r3, r3
    8a4a:	2107      	movs	r1, #7
    8a4c:	438b      	bics	r3, r1
    8a4e:	b2d9      	uxtb	r1, r3
    8a50:	697b      	ldr	r3, [r7, #20]
    8a52:	3208      	adds	r2, #8
    8a54:	0152      	lsls	r2, r2, #5
    8a56:	54d1      	strb	r1, [r2, r3]
	}
	ept->flags.u8 = 0;
    8a58:	68fb      	ldr	r3, [r7, #12]
    8a5a:	2200      	movs	r2, #0
    8a5c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    8a5e:	68fb      	ldr	r3, [r7, #12]
    8a60:	22ff      	movs	r2, #255	; 0xff
    8a62:	749a      	strb	r2, [r3, #18]
    8a64:	e000      	b.n	8a68 <_usb_d_dev_ep_deinit+0xec>
		return;
    8a66:	46c0      	nop			; (mov r8, r8)
}
    8a68:	46bd      	mov	sp, r7
    8a6a:	b006      	add	sp, #24
    8a6c:	bd80      	pop	{r7, pc}
    8a6e:	46c0      	nop			; (mov r8, r8)
    8a70:	41005000 	.word	0x41005000
    8a74:	000074fd 	.word	0x000074fd
    8a78:	00008fe9 	.word	0x00008fe9

00008a7c <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    8a7c:	b5b0      	push	{r4, r5, r7, lr}
    8a7e:	b088      	sub	sp, #32
    8a80:	af00      	add	r7, sp, #0
    8a82:	0002      	movs	r2, r0
    8a84:	1dfb      	adds	r3, r7, #7
    8a86:	701a      	strb	r2, [r3, #0]
	Usb *                 hw    = USB;
    8a88:	4b9c      	ldr	r3, [pc, #624]	; (8cfc <_usb_d_dev_ep_enable+0x280>)
    8a8a:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    8a8c:	231b      	movs	r3, #27
    8a8e:	18fb      	adds	r3, r7, r3
    8a90:	1dfa      	adds	r2, r7, #7
    8a92:	7812      	ldrb	r2, [r2, #0]
    8a94:	210f      	movs	r1, #15
    8a96:	400a      	ands	r2, r1
    8a98:	701a      	strb	r2, [r3, #0]
	bool                  dir   = USB_EP_GET_DIR(ep);
    8a9a:	1dfb      	adds	r3, r7, #7
    8a9c:	781b      	ldrb	r3, [r3, #0]
    8a9e:	2280      	movs	r2, #128	; 0x80
    8aa0:	401a      	ands	r2, r3
    8aa2:	231a      	movs	r3, #26
    8aa4:	18fb      	adds	r3, r7, r3
    8aa6:	1e51      	subs	r1, r2, #1
    8aa8:	418a      	sbcs	r2, r1
    8aaa:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    8aac:	231a      	movs	r3, #26
    8aae:	18fb      	adds	r3, r7, r3
    8ab0:	781a      	ldrb	r2, [r3, #0]
    8ab2:	231b      	movs	r3, #27
    8ab4:	18fb      	adds	r3, r7, r3
    8ab6:	781b      	ldrb	r3, [r3, #0]
    8ab8:	0011      	movs	r1, r2
    8aba:	0018      	movs	r0, r3
    8abc:	4b90      	ldr	r3, [pc, #576]	; (8d00 <_usb_d_dev_ep_enable+0x284>)
    8abe:	4798      	blx	r3
    8ac0:	0003      	movs	r3, r0
    8ac2:	617b      	str	r3, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    8ac4:	2313      	movs	r3, #19
    8ac6:	18fc      	adds	r4, r7, r3
    8ac8:	231b      	movs	r3, #27
    8aca:	18fb      	adds	r3, r7, r3
    8acc:	781a      	ldrb	r2, [r3, #0]
    8ace:	69fb      	ldr	r3, [r7, #28]
    8ad0:	0011      	movs	r1, r2
    8ad2:	0018      	movs	r0, r3
    8ad4:	4b8b      	ldr	r3, [pc, #556]	; (8d04 <_usb_d_dev_ep_enable+0x288>)
    8ad6:	4798      	blx	r3
    8ad8:	0003      	movs	r3, r0
    8ada:	7023      	strb	r3, [r4, #0]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8adc:	231b      	movs	r3, #27
    8ade:	18fb      	adds	r3, r7, r3
    8ae0:	781b      	ldrb	r3, [r3, #0]
    8ae2:	2b02      	cmp	r3, #2
    8ae4:	d803      	bhi.n	8aee <_usb_d_dev_ep_enable+0x72>
    8ae6:	697b      	ldr	r3, [r7, #20]
    8ae8:	7c9b      	ldrb	r3, [r3, #18]
    8aea:	2bff      	cmp	r3, #255	; 0xff
    8aec:	d102      	bne.n	8af4 <_usb_d_dev_ep_enable+0x78>
		return -USB_ERR_PARAM;
    8aee:	2312      	movs	r3, #18
    8af0:	425b      	negs	r3, r3
    8af2:	e0fe      	b.n	8cf2 <_usb_d_dev_ep_enable+0x276>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    8af4:	231b      	movs	r3, #27
    8af6:	18fb      	adds	r3, r7, r3
    8af8:	781b      	ldrb	r3, [r3, #0]
    8afa:	015a      	lsls	r2, r3, #5
    8afc:	4b82      	ldr	r3, [pc, #520]	; (8d08 <_usb_d_dev_ep_enable+0x28c>)
    8afe:	18d3      	adds	r3, r2, r3
    8b00:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    8b02:	697b      	ldr	r3, [r7, #20]
    8b04:	7cdb      	ldrb	r3, [r3, #19]
    8b06:	2207      	movs	r2, #7
    8b08:	4013      	ands	r3, r2
    8b0a:	b2db      	uxtb	r3, r3
    8b0c:	2b01      	cmp	r3, #1
    8b0e:	d15d      	bne.n	8bcc <_usb_d_dev_ep_enable+0x150>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    8b10:	2313      	movs	r3, #19
    8b12:	18fb      	adds	r3, r7, r3
    8b14:	781b      	ldrb	r3, [r3, #0]
    8b16:	2277      	movs	r2, #119	; 0x77
    8b18:	4013      	ands	r3, r2
    8b1a:	d002      	beq.n	8b22 <_usb_d_dev_ep_enable+0xa6>
			return -USB_ERR_REDO;
    8b1c:	2314      	movs	r3, #20
    8b1e:	425b      	negs	r3, r3
    8b20:	e0e7      	b.n	8cf2 <_usb_d_dev_ep_enable+0x276>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    8b22:	231b      	movs	r3, #27
    8b24:	18fb      	adds	r3, r7, r3
    8b26:	7819      	ldrb	r1, [r3, #0]
    8b28:	69fb      	ldr	r3, [r7, #28]
    8b2a:	2211      	movs	r2, #17
    8b2c:	0018      	movs	r0, r3
    8b2e:	4b77      	ldr	r3, [pc, #476]	; (8d0c <_usb_d_dev_ep_enable+0x290>)
    8b30:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8b32:	697b      	ldr	r3, [r7, #20]
    8b34:	8a1b      	ldrh	r3, [r3, #16]
    8b36:	039b      	lsls	r3, r3, #14
    8b38:	001a      	movs	r2, r3
    8b3a:	4b75      	ldr	r3, [pc, #468]	; (8d10 <_usb_d_dev_ep_enable+0x294>)
    8b3c:	401a      	ands	r2, r3
    8b3e:	0014      	movs	r4, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8b40:	697b      	ldr	r3, [r7, #20]
    8b42:	8a1b      	ldrh	r3, [r3, #16]
    8b44:	0018      	movs	r0, r3
    8b46:	4b73      	ldr	r3, [pc, #460]	; (8d14 <_usb_d_dev_ep_enable+0x298>)
    8b48:	4798      	blx	r3
    8b4a:	0003      	movs	r3, r0
    8b4c:	071b      	lsls	r3, r3, #28
    8b4e:	001a      	movs	r2, r3
    8b50:	23e0      	movs	r3, #224	; 0xe0
    8b52:	05db      	lsls	r3, r3, #23
    8b54:	4013      	ands	r3, r2
    8b56:	0022      	movs	r2, r4
    8b58:	431a      	orrs	r2, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8b5a:	68fb      	ldr	r3, [r7, #12]
    8b5c:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    8b5e:	68fb      	ldr	r3, [r7, #12]
    8b60:	3310      	adds	r3, #16
    8b62:	001c      	movs	r4, r3
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8b64:	697b      	ldr	r3, [r7, #20]
    8b66:	8a1b      	ldrh	r3, [r3, #16]
    8b68:	049b      	lsls	r3, r3, #18
    8b6a:	0c9d      	lsrs	r5, r3, #18
    8b6c:	697b      	ldr	r3, [r7, #20]
    8b6e:	8a1b      	ldrh	r3, [r3, #16]
    8b70:	0018      	movs	r0, r3
    8b72:	4b68      	ldr	r3, [pc, #416]	; (8d14 <_usb_d_dev_ep_enable+0x298>)
    8b74:	4798      	blx	r3
    8b76:	0003      	movs	r3, r0
    8b78:	071b      	lsls	r3, r3, #28
    8b7a:	001a      	movs	r2, r3
    8b7c:	23e0      	movs	r3, #224	; 0xe0
    8b7e:	05db      	lsls	r3, r3, #23
    8b80:	4013      	ands	r3, r2
    8b82:	432b      	orrs	r3, r5
    8b84:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    8b86:	231b      	movs	r3, #27
    8b88:	18fb      	adds	r3, r7, r3
    8b8a:	781b      	ldrb	r3, [r3, #0]
    8b8c:	2200      	movs	r2, #0
    8b8e:	2100      	movs	r1, #0
    8b90:	0018      	movs	r0, r3
    8b92:	4b61      	ldr	r3, [pc, #388]	; (8d18 <_usb_d_dev_ep_enable+0x29c>)
    8b94:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    8b96:	231b      	movs	r3, #27
    8b98:	18fb      	adds	r3, r7, r3
    8b9a:	781b      	ldrb	r3, [r3, #0]
    8b9c:	2200      	movs	r2, #0
    8b9e:	2101      	movs	r1, #1
    8ba0:	0018      	movs	r0, r3
    8ba2:	4b5e      	ldr	r3, [pc, #376]	; (8d1c <_usb_d_dev_ep_enable+0x2a0>)
    8ba4:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    8ba6:	231b      	movs	r3, #27
    8ba8:	18fb      	adds	r3, r7, r3
    8baa:	781b      	ldrb	r3, [r3, #0]
    8bac:	2100      	movs	r1, #0
    8bae:	0018      	movs	r0, r3
    8bb0:	4b5b      	ldr	r3, [pc, #364]	; (8d20 <_usb_d_dev_ep_enable+0x2a4>)
    8bb2:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    8bb4:	231b      	movs	r3, #27
    8bb6:	18fb      	adds	r3, r7, r3
    8bb8:	781b      	ldrb	r3, [r3, #0]
    8bba:	2101      	movs	r1, #1
    8bbc:	0018      	movs	r0, r3
    8bbe:	4b58      	ldr	r3, [pc, #352]	; (8d20 <_usb_d_dev_ep_enable+0x2a4>)
    8bc0:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    8bc2:	697b      	ldr	r3, [r7, #20]
    8bc4:	0018      	movs	r0, r3
    8bc6:	4b57      	ldr	r3, [pc, #348]	; (8d24 <_usb_d_dev_ep_enable+0x2a8>)
    8bc8:	4798      	blx	r3
    8bca:	e091      	b.n	8cf0 <_usb_d_dev_ep_enable+0x274>

	} else if (dir) {
    8bcc:	231a      	movs	r3, #26
    8bce:	18fb      	adds	r3, r7, r3
    8bd0:	781b      	ldrb	r3, [r3, #0]
    8bd2:	2b00      	cmp	r3, #0
    8bd4:	d047      	beq.n	8c66 <_usb_d_dev_ep_enable+0x1ea>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    8bd6:	2313      	movs	r3, #19
    8bd8:	18fb      	adds	r3, r7, r3
    8bda:	781b      	ldrb	r3, [r3, #0]
    8bdc:	2270      	movs	r2, #112	; 0x70
    8bde:	4013      	ands	r3, r2
    8be0:	d002      	beq.n	8be8 <_usb_d_dev_ep_enable+0x16c>
			return -USB_ERR_REDO;
    8be2:	2314      	movs	r3, #20
    8be4:	425b      	negs	r3, r3
    8be6:	e084      	b.n	8cf2 <_usb_d_dev_ep_enable+0x276>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    8be8:	697b      	ldr	r3, [r7, #20]
    8bea:	7cdb      	ldrb	r3, [r3, #19]
    8bec:	075b      	lsls	r3, r3, #29
    8bee:	0f5b      	lsrs	r3, r3, #29
    8bf0:	b2db      	uxtb	r3, r3
    8bf2:	011b      	lsls	r3, r3, #4
    8bf4:	b2db      	uxtb	r3, r3
    8bf6:	2270      	movs	r2, #112	; 0x70
    8bf8:	4013      	ands	r3, r2
    8bfa:	b2d9      	uxtb	r1, r3
    8bfc:	2313      	movs	r3, #19
    8bfe:	18fb      	adds	r3, r7, r3
    8c00:	2213      	movs	r2, #19
    8c02:	18ba      	adds	r2, r7, r2
    8c04:	7812      	ldrb	r2, [r2, #0]
    8c06:	430a      	orrs	r2, r1
    8c08:	701a      	strb	r2, [r3, #0]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    8c0a:	2313      	movs	r3, #19
    8c0c:	18fb      	adds	r3, r7, r3
    8c0e:	781a      	ldrb	r2, [r3, #0]
    8c10:	231b      	movs	r3, #27
    8c12:	18fb      	adds	r3, r7, r3
    8c14:	7819      	ldrb	r1, [r3, #0]
    8c16:	69fb      	ldr	r3, [r7, #28]
    8c18:	0018      	movs	r0, r3
    8c1a:	4b3c      	ldr	r3, [pc, #240]	; (8d0c <_usb_d_dev_ep_enable+0x290>)
    8c1c:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    8c1e:	68fb      	ldr	r3, [r7, #12]
    8c20:	3310      	adds	r3, #16
    8c22:	001c      	movs	r4, r3
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8c24:	697b      	ldr	r3, [r7, #20]
    8c26:	8a1b      	ldrh	r3, [r3, #16]
    8c28:	049b      	lsls	r3, r3, #18
    8c2a:	0c9d      	lsrs	r5, r3, #18
    8c2c:	697b      	ldr	r3, [r7, #20]
    8c2e:	8a1b      	ldrh	r3, [r3, #16]
    8c30:	0018      	movs	r0, r3
    8c32:	4b38      	ldr	r3, [pc, #224]	; (8d14 <_usb_d_dev_ep_enable+0x298>)
    8c34:	4798      	blx	r3
    8c36:	0003      	movs	r3, r0
    8c38:	071b      	lsls	r3, r3, #28
    8c3a:	001a      	movs	r2, r3
    8c3c:	23e0      	movs	r3, #224	; 0xe0
    8c3e:	05db      	lsls	r3, r3, #23
    8c40:	4013      	ands	r3, r2
    8c42:	432b      	orrs	r3, r5
    8c44:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    8c46:	231b      	movs	r3, #27
    8c48:	18fb      	adds	r3, r7, r3
    8c4a:	781b      	ldrb	r3, [r3, #0]
    8c4c:	2200      	movs	r2, #0
    8c4e:	2101      	movs	r1, #1
    8c50:	0018      	movs	r0, r3
    8c52:	4b32      	ldr	r3, [pc, #200]	; (8d1c <_usb_d_dev_ep_enable+0x2a0>)
    8c54:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    8c56:	231b      	movs	r3, #27
    8c58:	18fb      	adds	r3, r7, r3
    8c5a:	781b      	ldrb	r3, [r3, #0]
    8c5c:	2101      	movs	r1, #1
    8c5e:	0018      	movs	r0, r3
    8c60:	4b2f      	ldr	r3, [pc, #188]	; (8d20 <_usb_d_dev_ep_enable+0x2a4>)
    8c62:	4798      	blx	r3
    8c64:	e044      	b.n	8cf0 <_usb_d_dev_ep_enable+0x274>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    8c66:	2313      	movs	r3, #19
    8c68:	18fb      	adds	r3, r7, r3
    8c6a:	781b      	ldrb	r3, [r3, #0]
    8c6c:	2207      	movs	r2, #7
    8c6e:	4013      	ands	r3, r2
    8c70:	d002      	beq.n	8c78 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    8c72:	2314      	movs	r3, #20
    8c74:	425b      	negs	r3, r3
    8c76:	e03c      	b.n	8cf2 <_usb_d_dev_ep_enable+0x276>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    8c78:	697b      	ldr	r3, [r7, #20]
    8c7a:	7cdb      	ldrb	r3, [r3, #19]
    8c7c:	075b      	lsls	r3, r3, #29
    8c7e:	0f5b      	lsrs	r3, r3, #29
    8c80:	b2db      	uxtb	r3, r3
    8c82:	0019      	movs	r1, r3
    8c84:	2313      	movs	r3, #19
    8c86:	18fb      	adds	r3, r7, r3
    8c88:	2213      	movs	r2, #19
    8c8a:	18ba      	adds	r2, r7, r2
    8c8c:	7812      	ldrb	r2, [r2, #0]
    8c8e:	430a      	orrs	r2, r1
    8c90:	701a      	strb	r2, [r3, #0]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    8c92:	2313      	movs	r3, #19
    8c94:	18fb      	adds	r3, r7, r3
    8c96:	781a      	ldrb	r2, [r3, #0]
    8c98:	231b      	movs	r3, #27
    8c9a:	18fb      	adds	r3, r7, r3
    8c9c:	7819      	ldrb	r1, [r3, #0]
    8c9e:	69fb      	ldr	r3, [r7, #28]
    8ca0:	0018      	movs	r0, r3
    8ca2:	4b1a      	ldr	r3, [pc, #104]	; (8d0c <_usb_d_dev_ep_enable+0x290>)
    8ca4:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8ca6:	697b      	ldr	r3, [r7, #20]
    8ca8:	8a1b      	ldrh	r3, [r3, #16]
    8caa:	039b      	lsls	r3, r3, #14
    8cac:	001a      	movs	r2, r3
    8cae:	4b18      	ldr	r3, [pc, #96]	; (8d10 <_usb_d_dev_ep_enable+0x294>)
    8cb0:	401a      	ands	r2, r3
    8cb2:	0014      	movs	r4, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8cb4:	697b      	ldr	r3, [r7, #20]
    8cb6:	8a1b      	ldrh	r3, [r3, #16]
    8cb8:	0018      	movs	r0, r3
    8cba:	4b16      	ldr	r3, [pc, #88]	; (8d14 <_usb_d_dev_ep_enable+0x298>)
    8cbc:	4798      	blx	r3
    8cbe:	0003      	movs	r3, r0
    8cc0:	071b      	lsls	r3, r3, #28
    8cc2:	001a      	movs	r2, r3
    8cc4:	23e0      	movs	r3, #224	; 0xe0
    8cc6:	05db      	lsls	r3, r3, #23
    8cc8:	4013      	ands	r3, r2
    8cca:	0022      	movs	r2, r4
    8ccc:	431a      	orrs	r2, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8cce:	68fb      	ldr	r3, [r7, #12]
    8cd0:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    8cd2:	231b      	movs	r3, #27
    8cd4:	18fb      	adds	r3, r7, r3
    8cd6:	781b      	ldrb	r3, [r3, #0]
    8cd8:	2200      	movs	r2, #0
    8cda:	2100      	movs	r1, #0
    8cdc:	0018      	movs	r0, r3
    8cde:	4b0e      	ldr	r3, [pc, #56]	; (8d18 <_usb_d_dev_ep_enable+0x29c>)
    8ce0:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    8ce2:	231b      	movs	r3, #27
    8ce4:	18fb      	adds	r3, r7, r3
    8ce6:	781b      	ldrb	r3, [r3, #0]
    8ce8:	2100      	movs	r1, #0
    8cea:	0018      	movs	r0, r3
    8cec:	4b0c      	ldr	r3, [pc, #48]	; (8d20 <_usb_d_dev_ep_enable+0x2a4>)
    8cee:	4798      	blx	r3
	}

	return USB_OK;
    8cf0:	2300      	movs	r3, #0
}
    8cf2:	0018      	movs	r0, r3
    8cf4:	46bd      	mov	sp, r7
    8cf6:	b008      	add	sp, #32
    8cf8:	bdb0      	pop	{r4, r5, r7, pc}
    8cfa:	46c0      	nop			; (mov r8, r8)
    8cfc:	41005000 	.word	0x41005000
    8d00:	000074fd 	.word	0x000074fd
    8d04:	00006a1d 	.word	0x00006a1d
    8d08:	200003a8 	.word	0x200003a8
    8d0c:	000069ed 	.word	0x000069ed
    8d10:	0fffc000 	.word	0x0fffc000
    8d14:	00007489 	.word	0x00007489
    8d18:	0000741d 	.word	0x0000741d
    8d1c:	000073b1 	.word	0x000073b1
    8d20:	00007379 	.word	0x00007379
    8d24:	0000876d 	.word	0x0000876d

00008d28 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    8d28:	b580      	push	{r7, lr}
    8d2a:	b084      	sub	sp, #16
    8d2c:	af00      	add	r7, sp, #0
    8d2e:	6078      	str	r0, [r7, #4]
    8d30:	000a      	movs	r2, r1
    8d32:	1cfb      	adds	r3, r7, #3
    8d34:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8d36:	687b      	ldr	r3, [r7, #4]
    8d38:	7c9a      	ldrb	r2, [r3, #18]
    8d3a:	230f      	movs	r3, #15
    8d3c:	18fb      	adds	r3, r7, r3
    8d3e:	210f      	movs	r1, #15
    8d40:	400a      	ands	r2, r1
    8d42:	701a      	strb	r2, [r3, #0]
	return _usbd_ep_is_stalled(epn, dir);
    8d44:	1cfb      	adds	r3, r7, #3
    8d46:	781a      	ldrb	r2, [r3, #0]
    8d48:	230f      	movs	r3, #15
    8d4a:	18fb      	adds	r3, r7, r3
    8d4c:	781b      	ldrb	r3, [r3, #0]
    8d4e:	0011      	movs	r1, r2
    8d50:	0018      	movs	r0, r3
    8d52:	4b03      	ldr	r3, [pc, #12]	; (8d60 <_usb_d_dev_ep_stall_get+0x38>)
    8d54:	4798      	blx	r3
    8d56:	0003      	movs	r3, r0
}
    8d58:	0018      	movs	r0, r3
    8d5a:	46bd      	mov	sp, r7
    8d5c:	b004      	add	sp, #16
    8d5e:	bd80      	pop	{r7, pc}
    8d60:	00006ecd 	.word	0x00006ecd

00008d64 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    8d64:	b580      	push	{r7, lr}
    8d66:	b084      	sub	sp, #16
    8d68:	af00      	add	r7, sp, #0
    8d6a:	6078      	str	r0, [r7, #4]
    8d6c:	000a      	movs	r2, r1
    8d6e:	1cfb      	adds	r3, r7, #3
    8d70:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8d72:	687b      	ldr	r3, [r7, #4]
    8d74:	7c9a      	ldrb	r2, [r3, #18]
    8d76:	230f      	movs	r3, #15
    8d78:	18fb      	adds	r3, r7, r3
    8d7a:	210f      	movs	r1, #15
    8d7c:	400a      	ands	r2, r1
    8d7e:	701a      	strb	r2, [r3, #0]
	_usbd_ep_set_stall(epn, dir, true);
    8d80:	1cfb      	adds	r3, r7, #3
    8d82:	7819      	ldrb	r1, [r3, #0]
    8d84:	230f      	movs	r3, #15
    8d86:	18fb      	adds	r3, r7, r3
    8d88:	781b      	ldrb	r3, [r3, #0]
    8d8a:	2201      	movs	r2, #1
    8d8c:	0018      	movs	r0, r3
    8d8e:	4b0b      	ldr	r3, [pc, #44]	; (8dbc <_usb_d_dev_ep_stall_set+0x58>)
    8d90:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    8d92:	1cfb      	adds	r3, r7, #3
    8d94:	781b      	ldrb	r3, [r3, #0]
    8d96:	2220      	movs	r2, #32
    8d98:	409a      	lsls	r2, r3
    8d9a:	230f      	movs	r3, #15
    8d9c:	18fb      	adds	r3, r7, r3
    8d9e:	781b      	ldrb	r3, [r3, #0]
    8da0:	0011      	movs	r1, r2
    8da2:	0018      	movs	r0, r3
    8da4:	4b06      	ldr	r3, [pc, #24]	; (8dc0 <_usb_d_dev_ep_stall_set+0x5c>)
    8da6:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    8da8:	687b      	ldr	r3, [r7, #4]
    8daa:	7cda      	ldrb	r2, [r3, #19]
    8dac:	2108      	movs	r1, #8
    8dae:	430a      	orrs	r2, r1
    8db0:	74da      	strb	r2, [r3, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    8db2:	2300      	movs	r3, #0
}
    8db4:	0018      	movs	r0, r3
    8db6:	46bd      	mov	sp, r7
    8db8:	b004      	add	sp, #16
    8dba:	bd80      	pop	{r7, pc}
    8dbc:	00006e61 	.word	0x00006e61
    8dc0:	00006dcd 	.word	0x00006dcd

00008dc4 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    8dc4:	b590      	push	{r4, r7, lr}
    8dc6:	b085      	sub	sp, #20
    8dc8:	af00      	add	r7, sp, #0
    8dca:	6078      	str	r0, [r7, #4]
    8dcc:	000a      	movs	r2, r1
    8dce:	1cfb      	adds	r3, r7, #3
    8dd0:	701a      	strb	r2, [r3, #0]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    8dd2:	687b      	ldr	r3, [r7, #4]
    8dd4:	7c9a      	ldrb	r2, [r3, #18]
    8dd6:	230f      	movs	r3, #15
    8dd8:	18fb      	adds	r3, r7, r3
    8dda:	210f      	movs	r1, #15
    8ddc:	400a      	ands	r2, r1
    8dde:	701a      	strb	r2, [r3, #0]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    8de0:	1cfb      	adds	r3, r7, #3
    8de2:	781a      	ldrb	r2, [r3, #0]
    8de4:	230e      	movs	r3, #14
    8de6:	18fc      	adds	r4, r7, r3
    8de8:	230f      	movs	r3, #15
    8dea:	18fb      	adds	r3, r7, r3
    8dec:	781b      	ldrb	r3, [r3, #0]
    8dee:	0011      	movs	r1, r2
    8df0:	0018      	movs	r0, r3
    8df2:	4b31      	ldr	r3, [pc, #196]	; (8eb8 <_usb_d_dev_ep_stall_clr+0xf4>)
    8df4:	4798      	blx	r3
    8df6:	0003      	movs	r3, r0
    8df8:	7023      	strb	r3, [r4, #0]
	if (!is_stalled) {
    8dfa:	230e      	movs	r3, #14
    8dfc:	18fb      	adds	r3, r7, r3
    8dfe:	781b      	ldrb	r3, [r3, #0]
    8e00:	2201      	movs	r2, #1
    8e02:	4053      	eors	r3, r2
    8e04:	b2db      	uxtb	r3, r3
    8e06:	2b00      	cmp	r3, #0
    8e08:	d001      	beq.n	8e0e <_usb_d_dev_ep_stall_clr+0x4a>
		return ERR_NONE;
    8e0a:	2300      	movs	r3, #0
    8e0c:	e050      	b.n	8eb0 <_usb_d_dev_ep_stall_clr+0xec>
	}
	_usbd_ep_set_stall(epn, dir, false);
    8e0e:	1cfb      	adds	r3, r7, #3
    8e10:	7819      	ldrb	r1, [r3, #0]
    8e12:	230f      	movs	r3, #15
    8e14:	18fb      	adds	r3, r7, r3
    8e16:	781b      	ldrb	r3, [r3, #0]
    8e18:	2200      	movs	r2, #0
    8e1a:	0018      	movs	r0, r3
    8e1c:	4b27      	ldr	r3, [pc, #156]	; (8ebc <_usb_d_dev_ep_stall_clr+0xf8>)
    8e1e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    8e20:	1cfb      	adds	r3, r7, #3
    8e22:	781b      	ldrb	r3, [r3, #0]
    8e24:	2220      	movs	r2, #32
    8e26:	409a      	lsls	r2, r3
    8e28:	230f      	movs	r3, #15
    8e2a:	18fb      	adds	r3, r7, r3
    8e2c:	781b      	ldrb	r3, [r3, #0]
    8e2e:	0011      	movs	r1, r2
    8e30:	0018      	movs	r0, r3
    8e32:	4b23      	ldr	r3, [pc, #140]	; (8ec0 <_usb_d_dev_ep_stall_clr+0xfc>)
    8e34:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    8e36:	1cfb      	adds	r3, r7, #3
    8e38:	781a      	ldrb	r2, [r3, #0]
    8e3a:	230f      	movs	r3, #15
    8e3c:	18fb      	adds	r3, r7, r3
    8e3e:	781b      	ldrb	r3, [r3, #0]
    8e40:	0011      	movs	r1, r2
    8e42:	0018      	movs	r0, r3
    8e44:	4b1f      	ldr	r3, [pc, #124]	; (8ec4 <_usb_d_dev_ep_stall_clr+0x100>)
    8e46:	4798      	blx	r3
    8e48:	1e03      	subs	r3, r0, #0
    8e4a:	d011      	beq.n	8e70 <_usb_d_dev_ep_stall_clr+0xac>
		_usbd_ep_ack_stall(epn, dir);
    8e4c:	1cfb      	adds	r3, r7, #3
    8e4e:	781a      	ldrb	r2, [r3, #0]
    8e50:	230f      	movs	r3, #15
    8e52:	18fb      	adds	r3, r7, r3
    8e54:	781b      	ldrb	r3, [r3, #0]
    8e56:	0011      	movs	r1, r2
    8e58:	0018      	movs	r0, r3
    8e5a:	4b1b      	ldr	r3, [pc, #108]	; (8ec8 <_usb_d_dev_ep_stall_clr+0x104>)
    8e5c:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    8e5e:	1cfb      	adds	r3, r7, #3
    8e60:	7819      	ldrb	r1, [r3, #0]
    8e62:	230f      	movs	r3, #15
    8e64:	18fb      	adds	r3, r7, r3
    8e66:	781b      	ldrb	r3, [r3, #0]
    8e68:	2200      	movs	r2, #0
    8e6a:	0018      	movs	r0, r3
    8e6c:	4b17      	ldr	r3, [pc, #92]	; (8ecc <_usb_d_dev_ep_stall_clr+0x108>)
    8e6e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    8e70:	687b      	ldr	r3, [r7, #4]
    8e72:	7cdb      	ldrb	r3, [r3, #19]
    8e74:	2207      	movs	r2, #7
    8e76:	4013      	ands	r3, r2
    8e78:	b2db      	uxtb	r3, r3
    8e7a:	2b01      	cmp	r3, #1
    8e7c:	d112      	bne.n	8ea4 <_usb_d_dev_ep_stall_clr+0xe0>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    8e7e:	230f      	movs	r3, #15
    8e80:	18fb      	adds	r3, r7, r3
    8e82:	781b      	ldrb	r3, [r3, #0]
    8e84:	4a12      	ldr	r2, [pc, #72]	; (8ed0 <_usb_d_dev_ep_stall_clr+0x10c>)
    8e86:	0019      	movs	r1, r3
    8e88:	0010      	movs	r0, r2
    8e8a:	4b12      	ldr	r3, [pc, #72]	; (8ed4 <_usb_d_dev_ep_stall_clr+0x110>)
    8e8c:	4798      	blx	r3
    8e8e:	0003      	movs	r3, r0
    8e90:	001a      	movs	r2, r3
    8e92:	2330      	movs	r3, #48	; 0x30
    8e94:	4013      	ands	r3, r2
    8e96:	d10a      	bne.n	8eae <_usb_d_dev_ep_stall_clr+0xea>
			ept->flags.bits.is_stalled = 0;
    8e98:	687b      	ldr	r3, [r7, #4]
    8e9a:	7cda      	ldrb	r2, [r3, #19]
    8e9c:	2108      	movs	r1, #8
    8e9e:	438a      	bics	r2, r1
    8ea0:	74da      	strb	r2, [r3, #19]
    8ea2:	e004      	b.n	8eae <_usb_d_dev_ep_stall_clr+0xea>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    8ea4:	687b      	ldr	r3, [r7, #4]
    8ea6:	7cda      	ldrb	r2, [r3, #19]
    8ea8:	2108      	movs	r1, #8
    8eaa:	438a      	bics	r2, r1
    8eac:	74da      	strb	r2, [r3, #19]
	}
	return ERR_NONE;
    8eae:	2300      	movs	r3, #0
}
    8eb0:	0018      	movs	r0, r3
    8eb2:	46bd      	mov	sp, r7
    8eb4:	b005      	add	sp, #20
    8eb6:	bd90      	pop	{r4, r7, pc}
    8eb8:	00006ecd 	.word	0x00006ecd
    8ebc:	00006e61 	.word	0x00006e61
    8ec0:	00006dfd 	.word	0x00006dfd
    8ec4:	00006f19 	.word	0x00006f19
    8ec8:	00006f65 	.word	0x00006f65
    8ecc:	0000707d 	.word	0x0000707d
    8ed0:	41005000 	.word	0x41005000
    8ed4:	0000687b 	.word	0x0000687b

00008ed8 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    8ed8:	b580      	push	{r7, lr}
    8eda:	b086      	sub	sp, #24
    8edc:	af00      	add	r7, sp, #0
    8ede:	0002      	movs	r2, r0
    8ee0:	1dfb      	adds	r3, r7, #7
    8ee2:	701a      	strb	r2, [r3, #0]
    8ee4:	1dbb      	adds	r3, r7, #6
    8ee6:	1c0a      	adds	r2, r1, #0
    8ee8:	701a      	strb	r2, [r3, #0]
	uint8_t               epn = USB_EP_GET_N(ep);
    8eea:	2313      	movs	r3, #19
    8eec:	18fb      	adds	r3, r7, r3
    8eee:	1dfa      	adds	r2, r7, #7
    8ef0:	7812      	ldrb	r2, [r2, #0]
    8ef2:	210f      	movs	r1, #15
    8ef4:	400a      	ands	r2, r1
    8ef6:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(ep);
    8ef8:	1dfb      	adds	r3, r7, #7
    8efa:	781b      	ldrb	r3, [r3, #0]
    8efc:	2280      	movs	r2, #128	; 0x80
    8efe:	401a      	ands	r2, r3
    8f00:	2312      	movs	r3, #18
    8f02:	18fb      	adds	r3, r7, r3
    8f04:	1e51      	subs	r1, r2, #1
    8f06:	418a      	sbcs	r2, r1
    8f08:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    8f0a:	2312      	movs	r3, #18
    8f0c:	18fb      	adds	r3, r7, r3
    8f0e:	781a      	ldrb	r2, [r3, #0]
    8f10:	2313      	movs	r3, #19
    8f12:	18fb      	adds	r3, r7, r3
    8f14:	781b      	ldrb	r3, [r3, #0]
    8f16:	0011      	movs	r1, r2
    8f18:	0018      	movs	r0, r3
    8f1a:	4b1c      	ldr	r3, [pc, #112]	; (8f8c <_usb_d_dev_ep_stall+0xb4>)
    8f1c:	4798      	blx	r3
    8f1e:	0003      	movs	r3, r0
    8f20:	60fb      	str	r3, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    8f22:	2313      	movs	r3, #19
    8f24:	18fb      	adds	r3, r7, r3
    8f26:	781b      	ldrb	r3, [r3, #0]
    8f28:	2b02      	cmp	r3, #2
    8f2a:	d902      	bls.n	8f32 <_usb_d_dev_ep_stall+0x5a>
		return -USB_ERR_PARAM;
    8f2c:	2312      	movs	r3, #18
    8f2e:	425b      	negs	r3, r3
    8f30:	e028      	b.n	8f84 <_usb_d_dev_ep_stall+0xac>
	}

	if (USB_EP_STALL_SET == ctrl) {
    8f32:	1dbb      	adds	r3, r7, #6
    8f34:	781b      	ldrb	r3, [r3, #0]
    8f36:	2b01      	cmp	r3, #1
    8f38:	d10a      	bne.n	8f50 <_usb_d_dev_ep_stall+0x78>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    8f3a:	2312      	movs	r3, #18
    8f3c:	18fb      	adds	r3, r7, r3
    8f3e:	781a      	ldrb	r2, [r3, #0]
    8f40:	68fb      	ldr	r3, [r7, #12]
    8f42:	0011      	movs	r1, r2
    8f44:	0018      	movs	r0, r3
    8f46:	4b12      	ldr	r3, [pc, #72]	; (8f90 <_usb_d_dev_ep_stall+0xb8>)
    8f48:	4798      	blx	r3
    8f4a:	0003      	movs	r3, r0
    8f4c:	617b      	str	r3, [r7, #20]
    8f4e:	e018      	b.n	8f82 <_usb_d_dev_ep_stall+0xaa>
	} else if (USB_EP_STALL_CLR == ctrl) {
    8f50:	1dbb      	adds	r3, r7, #6
    8f52:	781b      	ldrb	r3, [r3, #0]
    8f54:	2b00      	cmp	r3, #0
    8f56:	d10a      	bne.n	8f6e <_usb_d_dev_ep_stall+0x96>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    8f58:	2312      	movs	r3, #18
    8f5a:	18fb      	adds	r3, r7, r3
    8f5c:	781a      	ldrb	r2, [r3, #0]
    8f5e:	68fb      	ldr	r3, [r7, #12]
    8f60:	0011      	movs	r1, r2
    8f62:	0018      	movs	r0, r3
    8f64:	4b0b      	ldr	r3, [pc, #44]	; (8f94 <_usb_d_dev_ep_stall+0xbc>)
    8f66:	4798      	blx	r3
    8f68:	0003      	movs	r3, r0
    8f6a:	617b      	str	r3, [r7, #20]
    8f6c:	e009      	b.n	8f82 <_usb_d_dev_ep_stall+0xaa>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    8f6e:	2312      	movs	r3, #18
    8f70:	18fb      	adds	r3, r7, r3
    8f72:	781a      	ldrb	r2, [r3, #0]
    8f74:	68fb      	ldr	r3, [r7, #12]
    8f76:	0011      	movs	r1, r2
    8f78:	0018      	movs	r0, r3
    8f7a:	4b07      	ldr	r3, [pc, #28]	; (8f98 <_usb_d_dev_ep_stall+0xc0>)
    8f7c:	4798      	blx	r3
    8f7e:	0003      	movs	r3, r0
    8f80:	617b      	str	r3, [r7, #20]
	}
	return rc;
    8f82:	697b      	ldr	r3, [r7, #20]
}
    8f84:	0018      	movs	r0, r3
    8f86:	46bd      	mov	sp, r7
    8f88:	b006      	add	sp, #24
    8f8a:	bd80      	pop	{r7, pc}
    8f8c:	000074fd 	.word	0x000074fd
    8f90:	00008d65 	.word	0x00008d65
    8f94:	00008dc5 	.word	0x00008dc5
    8f98:	00008d29 	.word	0x00008d29

00008f9c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    8f9c:	b590      	push	{r4, r7, lr}
    8f9e:	b083      	sub	sp, #12
    8fa0:	af00      	add	r7, sp, #0
    8fa2:	6078      	str	r0, [r7, #4]
    8fa4:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    8fa6:	687b      	ldr	r3, [r7, #4]
    8fa8:	7c9b      	ldrb	r3, [r3, #18]
    8faa:	2bff      	cmp	r3, #255	; 0xff
    8fac:	d015      	beq.n	8fda <_usb_d_dev_trans_done+0x3e>
    8fae:	687b      	ldr	r3, [r7, #4]
    8fb0:	7cdb      	ldrb	r3, [r3, #19]
    8fb2:	2240      	movs	r2, #64	; 0x40
    8fb4:	4013      	ands	r3, r2
    8fb6:	b2db      	uxtb	r3, r3
    8fb8:	2b00      	cmp	r3, #0
    8fba:	d00e      	beq.n	8fda <_usb_d_dev_trans_done+0x3e>
		return;
	}
	ept->flags.bits.is_busy = 0;
    8fbc:	687b      	ldr	r3, [r7, #4]
    8fbe:	7cda      	ldrb	r2, [r3, #19]
    8fc0:	2140      	movs	r1, #64	; 0x40
    8fc2:	438a      	bics	r2, r1
    8fc4:	74da      	strb	r2, [r3, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    8fc6:	4b07      	ldr	r3, [pc, #28]	; (8fe4 <_usb_d_dev_trans_done+0x48>)
    8fc8:	691c      	ldr	r4, [r3, #16]
    8fca:	687b      	ldr	r3, [r7, #4]
    8fcc:	7c98      	ldrb	r0, [r3, #18]
    8fce:	687b      	ldr	r3, [r7, #4]
    8fd0:	689a      	ldr	r2, [r3, #8]
    8fd2:	683b      	ldr	r3, [r7, #0]
    8fd4:	0019      	movs	r1, r3
    8fd6:	47a0      	blx	r4
    8fd8:	e000      	b.n	8fdc <_usb_d_dev_trans_done+0x40>
		return;
    8fda:	46c0      	nop			; (mov r8, r8)
}
    8fdc:	46bd      	mov	sp, r7
    8fde:	b003      	add	sp, #12
    8fe0:	bd90      	pop	{r4, r7, pc}
    8fe2:	46c0      	nop			; (mov r8, r8)
    8fe4:	200002e0 	.word	0x200002e0

00008fe8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    8fe8:	b580      	push	{r7, lr}
    8fea:	b086      	sub	sp, #24
    8fec:	af00      	add	r7, sp, #0
    8fee:	60f8      	str	r0, [r7, #12]
    8ff0:	607a      	str	r2, [r7, #4]
    8ff2:	230b      	movs	r3, #11
    8ff4:	18fb      	adds	r3, r7, r3
    8ff6:	1c0a      	adds	r2, r1, #0
    8ff8:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8ffa:	68fb      	ldr	r3, [r7, #12]
    8ffc:	7c9a      	ldrb	r2, [r3, #18]
    8ffe:	2317      	movs	r3, #23
    9000:	18fb      	adds	r3, r7, r3
    9002:	210f      	movs	r1, #15
    9004:	400a      	ands	r2, r1
    9006:	701a      	strb	r2, [r3, #0]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    9008:	2314      	movs	r3, #20
    900a:	18fb      	adds	r3, r7, r3
    900c:	4a25      	ldr	r2, [pc, #148]	; (90a4 <_usb_d_dev_trans_stop+0xbc>)
    900e:	8812      	ldrh	r2, [r2, #0]
    9010:	801a      	strh	r2, [r3, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9012:	68fb      	ldr	r3, [r7, #12]
    9014:	7c9b      	ldrb	r3, [r3, #18]
    9016:	2bff      	cmp	r3, #255	; 0xff
    9018:	d03f      	beq.n	909a <_usb_d_dev_trans_stop+0xb2>
    901a:	68fb      	ldr	r3, [r7, #12]
    901c:	7cdb      	ldrb	r3, [r3, #19]
    901e:	2240      	movs	r2, #64	; 0x40
    9020:	4013      	ands	r3, r2
    9022:	b2db      	uxtb	r3, r3
    9024:	2b00      	cmp	r3, #0
    9026:	d038      	beq.n	909a <_usb_d_dev_trans_stop+0xb2>
		return;
	}
	/* Stop transfer */
	if (dir) {
    9028:	230b      	movs	r3, #11
    902a:	18fb      	adds	r3, r7, r3
    902c:	781b      	ldrb	r3, [r3, #0]
    902e:	2b00      	cmp	r3, #0
    9030:	d008      	beq.n	9044 <_usb_d_dev_trans_stop+0x5c>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9032:	2317      	movs	r3, #23
    9034:	18fb      	adds	r3, r7, r3
    9036:	781b      	ldrb	r3, [r3, #0]
    9038:	2200      	movs	r2, #0
    903a:	2101      	movs	r1, #1
    903c:	0018      	movs	r0, r3
    903e:	4b1a      	ldr	r3, [pc, #104]	; (90a8 <_usb_d_dev_trans_stop+0xc0>)
    9040:	4798      	blx	r3
    9042:	e007      	b.n	9054 <_usb_d_dev_trans_stop+0x6c>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9044:	2317      	movs	r3, #23
    9046:	18fb      	adds	r3, r7, r3
    9048:	781b      	ldrb	r3, [r3, #0]
    904a:	2200      	movs	r2, #0
    904c:	2100      	movs	r1, #0
    904e:	0018      	movs	r0, r3
    9050:	4b16      	ldr	r3, [pc, #88]	; (90ac <_usb_d_dev_trans_stop+0xc4>)
    9052:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    9054:	230b      	movs	r3, #11
    9056:	18fb      	adds	r3, r7, r3
    9058:	781b      	ldrb	r3, [r3, #0]
    905a:	2214      	movs	r2, #20
    905c:	18ba      	adds	r2, r7, r2
    905e:	5cd3      	ldrb	r3, [r2, r3]
    9060:	001a      	movs	r2, r3
    9062:	2317      	movs	r3, #23
    9064:	18fb      	adds	r3, r7, r3
    9066:	781b      	ldrb	r3, [r3, #0]
    9068:	0011      	movs	r1, r2
    906a:	0018      	movs	r0, r3
    906c:	4b10      	ldr	r3, [pc, #64]	; (90b0 <_usb_d_dev_trans_stop+0xc8>)
    906e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    9070:	230b      	movs	r3, #11
    9072:	18fb      	adds	r3, r7, r3
    9074:	781b      	ldrb	r3, [r3, #0]
    9076:	2214      	movs	r2, #20
    9078:	18ba      	adds	r2, r7, r2
    907a:	5cd3      	ldrb	r3, [r2, r3]
    907c:	001a      	movs	r2, r3
    907e:	2317      	movs	r3, #23
    9080:	18fb      	adds	r3, r7, r3
    9082:	781b      	ldrb	r3, [r3, #0]
    9084:	0011      	movs	r1, r2
    9086:	0018      	movs	r0, r3
    9088:	4b0a      	ldr	r3, [pc, #40]	; (90b4 <_usb_d_dev_trans_stop+0xcc>)
    908a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    908c:	687a      	ldr	r2, [r7, #4]
    908e:	68fb      	ldr	r3, [r7, #12]
    9090:	0011      	movs	r1, r2
    9092:	0018      	movs	r0, r3
    9094:	4b08      	ldr	r3, [pc, #32]	; (90b8 <_usb_d_dev_trans_stop+0xd0>)
    9096:	4798      	blx	r3
    9098:	e000      	b.n	909c <_usb_d_dev_trans_stop+0xb4>
		return;
    909a:	46c0      	nop			; (mov r8, r8)
}
    909c:	46bd      	mov	sp, r7
    909e:	b006      	add	sp, #24
    90a0:	bd80      	pop	{r7, pc}
    90a2:	46c0      	nop			; (mov r8, r8)
    90a4:	0000c4a0 	.word	0x0000c4a0
    90a8:	000073b1 	.word	0x000073b1
    90ac:	0000741d 	.word	0x0000741d
    90b0:	00006d9d 	.word	0x00006d9d
    90b4:	00006dfd 	.word	0x00006dfd
    90b8:	00008f9d 	.word	0x00008f9d

000090bc <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    90bc:	b580      	push	{r7, lr}
    90be:	b086      	sub	sp, #24
    90c0:	af00      	add	r7, sp, #0
    90c2:	0002      	movs	r2, r0
    90c4:	6039      	str	r1, [r7, #0]
    90c6:	1dfb      	adds	r3, r7, #7
    90c8:	701a      	strb	r2, [r3, #0]
	uint8_t            epn   = USB_EP_GET_N(ep);
    90ca:	2317      	movs	r3, #23
    90cc:	18fb      	adds	r3, r7, r3
    90ce:	1dfa      	adds	r2, r7, #7
    90d0:	7812      	ldrb	r2, [r2, #0]
    90d2:	210f      	movs	r1, #15
    90d4:	400a      	ands	r2, r1
    90d6:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    90d8:	2317      	movs	r3, #23
    90da:	18fb      	adds	r3, r7, r3
    90dc:	781b      	ldrb	r3, [r3, #0]
    90de:	015a      	lsls	r2, r3, #5
    90e0:	4b25      	ldr	r3, [pc, #148]	; (9178 <_usb_d_dev_ep_read_req+0xbc>)
    90e2:	18d3      	adds	r3, r2, r3
    90e4:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    90e6:	693b      	ldr	r3, [r7, #16]
    90e8:	681b      	ldr	r3, [r3, #0]
    90ea:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    90ec:	693b      	ldr	r3, [r7, #16]
    90ee:	685b      	ldr	r3, [r3, #4]
    90f0:	049b      	lsls	r3, r3, #18
    90f2:	0c9b      	lsrs	r3, r3, #18
    90f4:	b29a      	uxth	r2, r3
    90f6:	230a      	movs	r3, #10
    90f8:	18fb      	adds	r3, r7, r3
    90fa:	801a      	strh	r2, [r3, #0]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    90fc:	2317      	movs	r3, #23
    90fe:	18fb      	adds	r3, r7, r3
    9100:	781b      	ldrb	r3, [r3, #0]
    9102:	2b02      	cmp	r3, #2
    9104:	d802      	bhi.n	910c <_usb_d_dev_ep_read_req+0x50>
    9106:	683b      	ldr	r3, [r7, #0]
    9108:	2b00      	cmp	r3, #0
    910a:	d102      	bne.n	9112 <_usb_d_dev_ep_read_req+0x56>
		return -USB_ERR_PARAM;
    910c:	2312      	movs	r3, #18
    910e:	425b      	negs	r3, r3
    9110:	e02d      	b.n	916e <_usb_d_dev_ep_read_req+0xb2>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9112:	2317      	movs	r3, #23
    9114:	18fb      	adds	r3, r7, r3
    9116:	781b      	ldrb	r3, [r3, #0]
    9118:	0018      	movs	r0, r3
    911a:	4b18      	ldr	r3, [pc, #96]	; (917c <_usb_d_dev_ep_read_req+0xc0>)
    911c:	4798      	blx	r3
    911e:	0003      	movs	r3, r0
    9120:	001a      	movs	r2, r3
    9122:	2301      	movs	r3, #1
    9124:	4053      	eors	r3, r2
    9126:	b2db      	uxtb	r3, r3
    9128:	2b00      	cmp	r3, #0
    912a:	d002      	beq.n	9132 <_usb_d_dev_ep_read_req+0x76>
		return -USB_ERR_FUNC;
    912c:	2313      	movs	r3, #19
    912e:	425b      	negs	r3, r3
    9130:	e01d      	b.n	916e <_usb_d_dev_ep_read_req+0xb2>
	}
	if (!_usbd_ep_is_setup(epn)) {
    9132:	2317      	movs	r3, #23
    9134:	18fb      	adds	r3, r7, r3
    9136:	781b      	ldrb	r3, [r3, #0]
    9138:	0018      	movs	r0, r3
    913a:	4b11      	ldr	r3, [pc, #68]	; (9180 <_usb_d_dev_ep_read_req+0xc4>)
    913c:	4798      	blx	r3
    913e:	0003      	movs	r3, r0
    9140:	001a      	movs	r2, r3
    9142:	2301      	movs	r3, #1
    9144:	4053      	eors	r3, r2
    9146:	b2db      	uxtb	r3, r3
    9148:	2b00      	cmp	r3, #0
    914a:	d001      	beq.n	9150 <_usb_d_dev_ep_read_req+0x94>
		return ERR_NONE;
    914c:	2300      	movs	r3, #0
    914e:	e00e      	b.n	916e <_usb_d_dev_ep_read_req+0xb2>
	}
	memcpy(req_buf, (void *)addr, 8);
    9150:	68f9      	ldr	r1, [r7, #12]
    9152:	683b      	ldr	r3, [r7, #0]
    9154:	2208      	movs	r2, #8
    9156:	0018      	movs	r0, r3
    9158:	4b0a      	ldr	r3, [pc, #40]	; (9184 <_usb_d_dev_ep_read_req+0xc8>)
    915a:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    915c:	2317      	movs	r3, #23
    915e:	18fb      	adds	r3, r7, r3
    9160:	781b      	ldrb	r3, [r3, #0]
    9162:	0018      	movs	r0, r3
    9164:	4b08      	ldr	r3, [pc, #32]	; (9188 <_usb_d_dev_ep_read_req+0xcc>)
    9166:	4798      	blx	r3

	return bytes;
    9168:	230a      	movs	r3, #10
    916a:	18fb      	adds	r3, r7, r3
    916c:	881b      	ldrh	r3, [r3, #0]
}
    916e:	0018      	movs	r0, r3
    9170:	46bd      	mov	sp, r7
    9172:	b006      	add	sp, #24
    9174:	bd80      	pop	{r7, pc}
    9176:	46c0      	nop			; (mov r8, r8)
    9178:	200003a8 	.word	0x200003a8
    917c:	00006e2d 	.word	0x00006e2d
    9180:	00007025 	.word	0x00007025
    9184:	0000ba45 	.word	0x0000ba45
    9188:	00007059 	.word	0x00007059

0000918c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    918c:	b580      	push	{r7, lr}
    918e:	b086      	sub	sp, #24
    9190:	af00      	add	r7, sp, #0
    9192:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    9194:	687b      	ldr	r3, [r7, #4]
    9196:	7a1a      	ldrb	r2, [r3, #8]
    9198:	2316      	movs	r3, #22
    919a:	18fb      	adds	r3, r7, r3
    919c:	210f      	movs	r1, #15
    919e:	400a      	ands	r2, r1
    91a0:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    91a2:	687b      	ldr	r3, [r7, #4]
    91a4:	7a1b      	ldrb	r3, [r3, #8]
    91a6:	001a      	movs	r2, r3
    91a8:	2380      	movs	r3, #128	; 0x80
    91aa:	401a      	ands	r2, r3
    91ac:	2315      	movs	r3, #21
    91ae:	18fb      	adds	r3, r7, r3
    91b0:	1e51      	subs	r1, r2, #1
    91b2:	418a      	sbcs	r2, r1
    91b4:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    91b6:	2315      	movs	r3, #21
    91b8:	18fb      	adds	r3, r7, r3
    91ba:	781a      	ldrb	r2, [r3, #0]
    91bc:	2316      	movs	r3, #22
    91be:	18fb      	adds	r3, r7, r3
    91c0:	781b      	ldrb	r3, [r3, #0]
    91c2:	0011      	movs	r1, r2
    91c4:	0018      	movs	r0, r3
    91c6:	4b75      	ldr	r3, [pc, #468]	; (939c <_usb_d_dev_ep_trans+0x210>)
    91c8:	4798      	blx	r3
    91ca:	0003      	movs	r3, r0
    91cc:	613b      	str	r3, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    91ce:	693b      	ldr	r3, [r7, #16]
    91d0:	8a1b      	ldrh	r3, [r3, #16]
    91d2:	4a73      	ldr	r2, [pc, #460]	; (93a0 <_usb_d_dev_ep_trans+0x214>)
    91d4:	4293      	cmp	r3, r2
    91d6:	d004      	beq.n	91e2 <_usb_d_dev_ep_trans+0x56>
    91d8:	693b      	ldr	r3, [r7, #16]
    91da:	8a1b      	ldrh	r3, [r3, #16]
    91dc:	3b01      	subs	r3, #1
    91de:	b29a      	uxth	r2, r3
    91e0:	e000      	b.n	91e4 <_usb_d_dev_ep_trans+0x58>
    91e2:	4a6f      	ldr	r2, [pc, #444]	; (93a0 <_usb_d_dev_ep_trans+0x214>)
    91e4:	230e      	movs	r3, #14
    91e6:	18fb      	adds	r3, r7, r3
    91e8:	801a      	strh	r2, [r3, #0]
	bool     size_n_aligned = (trans->size & size_mask);
    91ea:	687b      	ldr	r3, [r7, #4]
    91ec:	685b      	ldr	r3, [r3, #4]
    91ee:	220e      	movs	r2, #14
    91f0:	18ba      	adds	r2, r7, r2
    91f2:	8812      	ldrh	r2, [r2, #0]
    91f4:	401a      	ands	r2, r3
    91f6:	230d      	movs	r3, #13
    91f8:	18fb      	adds	r3, r7, r3
    91fa:	1e51      	subs	r1, r2, #1
    91fc:	418a      	sbcs	r2, r1
    91fe:	701a      	strb	r2, [r3, #0]

	bool use_cache = false;
    9200:	2317      	movs	r3, #23
    9202:	18fb      	adds	r3, r7, r3
    9204:	2200      	movs	r2, #0
    9206:	701a      	strb	r2, [r3, #0]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9208:	2316      	movs	r3, #22
    920a:	18fb      	adds	r3, r7, r3
    920c:	781b      	ldrb	r3, [r3, #0]
    920e:	2b02      	cmp	r3, #2
    9210:	d902      	bls.n	9218 <_usb_d_dev_ep_trans+0x8c>
		return -USB_ERR_PARAM;
    9212:	2312      	movs	r3, #18
    9214:	425b      	negs	r3, r3
    9216:	e0bc      	b.n	9392 <_usb_d_dev_ep_trans+0x206>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    9218:	687b      	ldr	r3, [r7, #4]
    921a:	681b      	ldr	r3, [r3, #0]
    921c:	001a      	movs	r2, r3
    921e:	4b61      	ldr	r3, [pc, #388]	; (93a4 <_usb_d_dev_ep_trans+0x218>)
    9220:	429a      	cmp	r2, r3
    9222:	d91c      	bls.n	925e <_usb_d_dev_ep_trans+0xd2>
    9224:	687b      	ldr	r3, [r7, #4]
    9226:	681b      	ldr	r3, [r3, #0]
    9228:	001a      	movs	r2, r3
    922a:	687b      	ldr	r3, [r7, #4]
    922c:	685b      	ldr	r3, [r3, #4]
    922e:	18d3      	adds	r3, r2, r3
    9230:	4a5d      	ldr	r2, [pc, #372]	; (93a8 <_usb_d_dev_ep_trans+0x21c>)
    9232:	4293      	cmp	r3, r2
    9234:	d813      	bhi.n	925e <_usb_d_dev_ep_trans+0xd2>
    9236:	687b      	ldr	r3, [r7, #4]
    9238:	681b      	ldr	r3, [r3, #0]
    923a:	001a      	movs	r2, r3
    923c:	2303      	movs	r3, #3
    923e:	4013      	ands	r3, r2
    9240:	d10d      	bne.n	925e <_usb_d_dev_ep_trans+0xd2>
	    || (!dir && (trans->size < ept->size))) {
    9242:	2315      	movs	r3, #21
    9244:	18fb      	adds	r3, r7, r3
    9246:	781b      	ldrb	r3, [r3, #0]
    9248:	2201      	movs	r2, #1
    924a:	4053      	eors	r3, r2
    924c:	b2db      	uxtb	r3, r3
    924e:	2b00      	cmp	r3, #0
    9250:	d010      	beq.n	9274 <_usb_d_dev_ep_trans+0xe8>
    9252:	687b      	ldr	r3, [r7, #4]
    9254:	685b      	ldr	r3, [r3, #4]
    9256:	693a      	ldr	r2, [r7, #16]
    9258:	8a12      	ldrh	r2, [r2, #16]
    925a:	4293      	cmp	r3, r2
    925c:	d20a      	bcs.n	9274 <_usb_d_dev_ep_trans+0xe8>
		if (!ept->cache) {
    925e:	693b      	ldr	r3, [r7, #16]
    9260:	68db      	ldr	r3, [r3, #12]
    9262:	2b00      	cmp	r3, #0
    9264:	d102      	bne.n	926c <_usb_d_dev_ep_trans+0xe0>
			return -USB_ERR_FUNC;
    9266:	2313      	movs	r3, #19
    9268:	425b      	negs	r3, r3
    926a:	e092      	b.n	9392 <_usb_d_dev_ep_trans+0x206>
		}
		/* Use cache all the time. */
		use_cache = true;
    926c:	2317      	movs	r3, #23
    926e:	18fb      	adds	r3, r7, r3
    9270:	2201      	movs	r2, #1
    9272:	701a      	strb	r2, [r3, #0]
	}
	if (!dir && size_n_aligned) {
    9274:	2315      	movs	r3, #21
    9276:	18fb      	adds	r3, r7, r3
    9278:	781b      	ldrb	r3, [r3, #0]
    927a:	2201      	movs	r2, #1
    927c:	4053      	eors	r3, r2
    927e:	b2db      	uxtb	r3, r3
    9280:	2b00      	cmp	r3, #0
    9282:	d00b      	beq.n	929c <_usb_d_dev_ep_trans+0x110>
    9284:	230d      	movs	r3, #13
    9286:	18fb      	adds	r3, r7, r3
    9288:	781b      	ldrb	r3, [r3, #0]
    928a:	2b00      	cmp	r3, #0
    928c:	d006      	beq.n	929c <_usb_d_dev_ep_trans+0x110>
		if (!ept->cache) {
    928e:	693b      	ldr	r3, [r7, #16]
    9290:	68db      	ldr	r3, [r3, #12]
    9292:	2b00      	cmp	r3, #0
    9294:	d102      	bne.n	929c <_usb_d_dev_ep_trans+0x110>
			return -USB_ERR_PARAM;
    9296:	2312      	movs	r3, #18
    9298:	425b      	negs	r3, r3
    929a:	e07a      	b.n	9392 <_usb_d_dev_ep_trans+0x206>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    929c:	693b      	ldr	r3, [r7, #16]
    929e:	7cdb      	ldrb	r3, [r3, #19]
    92a0:	2208      	movs	r2, #8
    92a2:	4013      	ands	r3, r2
    92a4:	b2db      	uxtb	r3, r3
    92a6:	2b00      	cmp	r3, #0
    92a8:	d001      	beq.n	92ae <_usb_d_dev_ep_trans+0x122>
		return USB_HALTED;
    92aa:	2302      	movs	r3, #2
    92ac:	e071      	b.n	9392 <_usb_d_dev_ep_trans+0x206>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    92ae:	2308      	movs	r3, #8
    92b0:	18fb      	adds	r3, r7, r3
    92b2:	0018      	movs	r0, r3
    92b4:	4b3d      	ldr	r3, [pc, #244]	; (93ac <_usb_d_dev_ep_trans+0x220>)
    92b6:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    92b8:	693b      	ldr	r3, [r7, #16]
    92ba:	7cdb      	ldrb	r3, [r3, #19]
    92bc:	2240      	movs	r2, #64	; 0x40
    92be:	4013      	ands	r3, r2
    92c0:	b2db      	uxtb	r3, r3
    92c2:	2b00      	cmp	r3, #0
    92c4:	d006      	beq.n	92d4 <_usb_d_dev_ep_trans+0x148>
		atomic_leave_critical(&flags);
    92c6:	2308      	movs	r3, #8
    92c8:	18fb      	adds	r3, r7, r3
    92ca:	0018      	movs	r0, r3
    92cc:	4b38      	ldr	r3, [pc, #224]	; (93b0 <_usb_d_dev_ep_trans+0x224>)
    92ce:	4798      	blx	r3
		return USB_BUSY;
    92d0:	2301      	movs	r3, #1
    92d2:	e05e      	b.n	9392 <_usb_d_dev_ep_trans+0x206>
	}
	ept->flags.bits.is_busy = 1;
    92d4:	693b      	ldr	r3, [r7, #16]
    92d6:	7cda      	ldrb	r2, [r3, #19]
    92d8:	2140      	movs	r1, #64	; 0x40
    92da:	430a      	orrs	r2, r1
    92dc:	74da      	strb	r2, [r3, #19]
	atomic_leave_critical(&flags);
    92de:	2308      	movs	r3, #8
    92e0:	18fb      	adds	r3, r7, r3
    92e2:	0018      	movs	r0, r3
    92e4:	4b32      	ldr	r3, [pc, #200]	; (93b0 <_usb_d_dev_ep_trans+0x224>)
    92e6:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    92e8:	687b      	ldr	r3, [r7, #4]
    92ea:	681a      	ldr	r2, [r3, #0]
    92ec:	693b      	ldr	r3, [r7, #16]
    92ee:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    92f0:	687b      	ldr	r3, [r7, #4]
    92f2:	685a      	ldr	r2, [r3, #4]
    92f4:	693b      	ldr	r3, [r7, #16]
    92f6:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    92f8:	693b      	ldr	r3, [r7, #16]
    92fa:	2200      	movs	r2, #0
    92fc:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    92fe:	693b      	ldr	r3, [r7, #16]
    9300:	2215      	movs	r2, #21
    9302:	18ba      	adds	r2, r7, r2
    9304:	7812      	ldrb	r2, [r2, #0]
    9306:	01d0      	lsls	r0, r2, #7
    9308:	7cda      	ldrb	r2, [r3, #19]
    930a:	217f      	movs	r1, #127	; 0x7f
    930c:	400a      	ands	r2, r1
    930e:	1c11      	adds	r1, r2, #0
    9310:	1c02      	adds	r2, r0, #0
    9312:	430a      	orrs	r2, r1
    9314:	74da      	strb	r2, [r3, #19]
	ept->flags.bits.use_cache = use_cache;
    9316:	693b      	ldr	r3, [r7, #16]
    9318:	2217      	movs	r2, #23
    931a:	18ba      	adds	r2, r7, r2
    931c:	7812      	ldrb	r2, [r2, #0]
    931e:	2101      	movs	r1, #1
    9320:	400a      	ands	r2, r1
    9322:	0150      	lsls	r0, r2, #5
    9324:	7cda      	ldrb	r2, [r3, #19]
    9326:	2120      	movs	r1, #32
    9328:	438a      	bics	r2, r1
    932a:	1c11      	adds	r1, r2, #0
    932c:	1c02      	adds	r2, r0, #0
    932e:	430a      	orrs	r2, r1
    9330:	74da      	strb	r2, [r3, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    9332:	687b      	ldr	r3, [r7, #4]
    9334:	7a5b      	ldrb	r3, [r3, #9]
    9336:	2b00      	cmp	r3, #0
    9338:	d009      	beq.n	934e <_usb_d_dev_ep_trans+0x1c2>
    933a:	230d      	movs	r3, #13
    933c:	18fb      	adds	r3, r7, r3
    933e:	781b      	ldrb	r3, [r3, #0]
    9340:	2201      	movs	r2, #1
    9342:	4053      	eors	r3, r2
    9344:	b2db      	uxtb	r3, r3
    9346:	2b00      	cmp	r3, #0
    9348:	d001      	beq.n	934e <_usb_d_dev_ep_trans+0x1c2>
    934a:	2301      	movs	r3, #1
    934c:	e000      	b.n	9350 <_usb_d_dev_ep_trans+0x1c4>
    934e:	2300      	movs	r3, #0
    9350:	b2db      	uxtb	r3, r3
    9352:	1c1a      	adds	r2, r3, #0
    9354:	2301      	movs	r3, #1
    9356:	4013      	ands	r3, r2
    9358:	b2da      	uxtb	r2, r3
    935a:	693b      	ldr	r3, [r7, #16]
    935c:	2101      	movs	r1, #1
    935e:	400a      	ands	r2, r1
    9360:	0110      	lsls	r0, r2, #4
    9362:	7cda      	ldrb	r2, [r3, #19]
    9364:	2110      	movs	r1, #16
    9366:	438a      	bics	r2, r1
    9368:	1c11      	adds	r1, r2, #0
    936a:	1c02      	adds	r2, r0, #0
    936c:	430a      	orrs	r2, r1
    936e:	74da      	strb	r2, [r3, #19]

	if (dir) {
    9370:	2315      	movs	r3, #21
    9372:	18fb      	adds	r3, r7, r3
    9374:	781b      	ldrb	r3, [r3, #0]
    9376:	2b00      	cmp	r3, #0
    9378:	d005      	beq.n	9386 <_usb_d_dev_ep_trans+0x1fa>
		_usb_d_dev_in_next(ept, false);
    937a:	693b      	ldr	r3, [r7, #16]
    937c:	2100      	movs	r1, #0
    937e:	0018      	movs	r0, r3
    9380:	4b0c      	ldr	r3, [pc, #48]	; (93b4 <_usb_d_dev_ep_trans+0x228>)
    9382:	4798      	blx	r3
    9384:	e004      	b.n	9390 <_usb_d_dev_ep_trans+0x204>
	} else {
		_usb_d_dev_out_next(ept, false);
    9386:	693b      	ldr	r3, [r7, #16]
    9388:	2100      	movs	r1, #0
    938a:	0018      	movs	r0, r3
    938c:	4b0a      	ldr	r3, [pc, #40]	; (93b8 <_usb_d_dev_ep_trans+0x22c>)
    938e:	4798      	blx	r3
	}

	return ERR_NONE;
    9390:	2300      	movs	r3, #0
}
    9392:	0018      	movs	r0, r3
    9394:	46bd      	mov	sp, r7
    9396:	b006      	add	sp, #24
    9398:	bd80      	pop	{r7, pc}
    939a:	46c0      	nop			; (mov r8, r8)
    939c:	000074fd 	.word	0x000074fd
    93a0:	000003ff 	.word	0x000003ff
    93a4:	1fffffff 	.word	0x1fffffff
    93a8:	20007fff 	.word	0x20007fff
    93ac:	00001615 	.word	0x00001615
    93b0:	00001637 	.word	0x00001637
    93b4:	00007839 	.word	0x00007839
    93b8:	00007ad9 	.word	0x00007ad9

000093bc <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    93bc:	b580      	push	{r7, lr}
    93be:	b084      	sub	sp, #16
    93c0:	af00      	add	r7, sp, #0
    93c2:	0002      	movs	r2, r0
    93c4:	6039      	str	r1, [r7, #0]
    93c6:	1dfb      	adds	r3, r7, #7
    93c8:	701a      	strb	r2, [r3, #0]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    93ca:	683b      	ldr	r3, [r7, #0]
    93cc:	2b00      	cmp	r3, #0
    93ce:	d001      	beq.n	93d4 <_usb_d_dev_register_callback+0x18>
    93d0:	683b      	ldr	r3, [r7, #0]
    93d2:	e000      	b.n	93d6 <_usb_d_dev_register_callback+0x1a>
    93d4:	4b0a      	ldr	r3, [pc, #40]	; (9400 <_usb_d_dev_register_callback+0x44>)
    93d6:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    93d8:	1dfb      	adds	r3, r7, #7
    93da:	781b      	ldrb	r3, [r3, #0]
    93dc:	2b01      	cmp	r3, #1
    93de:	d103      	bne.n	93e8 <_usb_d_dev_register_callback+0x2c>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    93e0:	4b08      	ldr	r3, [pc, #32]	; (9404 <_usb_d_dev_register_callback+0x48>)
    93e2:	68fa      	ldr	r2, [r7, #12]
    93e4:	605a      	str	r2, [r3, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    93e6:	e006      	b.n	93f6 <_usb_d_dev_register_callback+0x3a>
	} else if (type == USB_D_CB_SOF) {
    93e8:	1dfb      	adds	r3, r7, #7
    93ea:	781b      	ldrb	r3, [r3, #0]
    93ec:	2b00      	cmp	r3, #0
    93ee:	d102      	bne.n	93f6 <_usb_d_dev_register_callback+0x3a>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    93f0:	4b04      	ldr	r3, [pc, #16]	; (9404 <_usb_d_dev_register_callback+0x48>)
    93f2:	68fa      	ldr	r2, [r7, #12]
    93f4:	601a      	str	r2, [r3, #0]
}
    93f6:	46c0      	nop			; (mov r8, r8)
    93f8:	46bd      	mov	sp, r7
    93fa:	b004      	add	sp, #16
    93fc:	bd80      	pop	{r7, pc}
    93fe:	46c0      	nop			; (mov r8, r8)
    9400:	00006c3d 	.word	0x00006c3d
    9404:	200002e0 	.word	0x200002e0

00009408 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    9408:	b580      	push	{r7, lr}
    940a:	b084      	sub	sp, #16
    940c:	af00      	add	r7, sp, #0
    940e:	0002      	movs	r2, r0
    9410:	6039      	str	r1, [r7, #0]
    9412:	1dfb      	adds	r3, r7, #7
    9414:	701a      	strb	r2, [r3, #0]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9416:	683b      	ldr	r3, [r7, #0]
    9418:	2b00      	cmp	r3, #0
    941a:	d001      	beq.n	9420 <_usb_d_dev_register_ep_callback+0x18>
    941c:	683b      	ldr	r3, [r7, #0]
    941e:	e000      	b.n	9422 <_usb_d_dev_register_ep_callback+0x1a>
    9420:	4b0e      	ldr	r3, [pc, #56]	; (945c <_usb_d_dev_register_ep_callback+0x54>)
    9422:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    9424:	1dfb      	adds	r3, r7, #7
    9426:	781b      	ldrb	r3, [r3, #0]
    9428:	2b00      	cmp	r3, #0
    942a:	d103      	bne.n	9434 <_usb_d_dev_register_ep_callback+0x2c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    942c:	4b0c      	ldr	r3, [pc, #48]	; (9460 <_usb_d_dev_register_ep_callback+0x58>)
    942e:	68fa      	ldr	r2, [r7, #12]
    9430:	609a      	str	r2, [r3, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    9432:	e00e      	b.n	9452 <_usb_d_dev_register_ep_callback+0x4a>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    9434:	1dfb      	adds	r3, r7, #7
    9436:	781b      	ldrb	r3, [r3, #0]
    9438:	2b01      	cmp	r3, #1
    943a:	d103      	bne.n	9444 <_usb_d_dev_register_ep_callback+0x3c>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    943c:	4b08      	ldr	r3, [pc, #32]	; (9460 <_usb_d_dev_register_ep_callback+0x58>)
    943e:	68fa      	ldr	r2, [r7, #12]
    9440:	60da      	str	r2, [r3, #12]
}
    9442:	e006      	b.n	9452 <_usb_d_dev_register_ep_callback+0x4a>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    9444:	1dfb      	adds	r3, r7, #7
    9446:	781b      	ldrb	r3, [r3, #0]
    9448:	2b02      	cmp	r3, #2
    944a:	d102      	bne.n	9452 <_usb_d_dev_register_ep_callback+0x4a>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    944c:	4b04      	ldr	r3, [pc, #16]	; (9460 <_usb_d_dev_register_ep_callback+0x58>)
    944e:	68fa      	ldr	r2, [r7, #12]
    9450:	611a      	str	r2, [r3, #16]
}
    9452:	46c0      	nop			; (mov r8, r8)
    9454:	46bd      	mov	sp, r7
    9456:	b004      	add	sp, #16
    9458:	bd80      	pop	{r7, pc}
    945a:	46c0      	nop			; (mov r8, r8)
    945c:	00006c3d 	.word	0x00006c3d
    9460:	200002e0 	.word	0x200002e0

00009464 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    9464:	b580      	push	{r7, lr}
    9466:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    9468:	4b02      	ldr	r3, [pc, #8]	; (9474 <USB_Handler+0x10>)
    946a:	4798      	blx	r3
}
    946c:	46c0      	nop			; (mov r8, r8)
    946e:	46bd      	mov	sp, r7
    9470:	bd80      	pop	{r7, pc}
    9472:	46c0      	nop			; (mov r8, r8)
    9474:	00008465 	.word	0x00008465

00009478 <hri_port_set_OUT_reg>:
{
    9478:	b580      	push	{r7, lr}
    947a:	b084      	sub	sp, #16
    947c:	af00      	add	r7, sp, #0
    947e:	60f8      	str	r0, [r7, #12]
    9480:	607a      	str	r2, [r7, #4]
    9482:	230b      	movs	r3, #11
    9484:	18fb      	adds	r3, r7, r3
    9486:	1c0a      	adds	r2, r1, #0
    9488:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    948a:	230b      	movs	r3, #11
    948c:	18fb      	adds	r3, r7, r3
    948e:	781b      	ldrb	r3, [r3, #0]
    9490:	68fa      	ldr	r2, [r7, #12]
    9492:	01db      	lsls	r3, r3, #7
    9494:	18d3      	adds	r3, r2, r3
    9496:	3318      	adds	r3, #24
    9498:	687a      	ldr	r2, [r7, #4]
    949a:	601a      	str	r2, [r3, #0]
}
    949c:	46c0      	nop			; (mov r8, r8)
    949e:	46bd      	mov	sp, r7
    94a0:	b004      	add	sp, #16
    94a2:	bd80      	pop	{r7, pc}

000094a4 <hri_port_clear_OUT_reg>:
{
    94a4:	b580      	push	{r7, lr}
    94a6:	b084      	sub	sp, #16
    94a8:	af00      	add	r7, sp, #0
    94aa:	60f8      	str	r0, [r7, #12]
    94ac:	607a      	str	r2, [r7, #4]
    94ae:	230b      	movs	r3, #11
    94b0:	18fb      	adds	r3, r7, r3
    94b2:	1c0a      	adds	r2, r1, #0
    94b4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    94b6:	230b      	movs	r3, #11
    94b8:	18fb      	adds	r3, r7, r3
    94ba:	781b      	ldrb	r3, [r3, #0]
    94bc:	68fa      	ldr	r2, [r7, #12]
    94be:	01db      	lsls	r3, r3, #7
    94c0:	18d3      	adds	r3, r2, r3
    94c2:	3314      	adds	r3, #20
    94c4:	687a      	ldr	r2, [r7, #4]
    94c6:	601a      	str	r2, [r3, #0]
}
    94c8:	46c0      	nop			; (mov r8, r8)
    94ca:	46bd      	mov	sp, r7
    94cc:	b004      	add	sp, #16
    94ce:	bd80      	pop	{r7, pc}

000094d0 <hri_port_toggle_OUT_reg>:
{
    94d0:	b580      	push	{r7, lr}
    94d2:	b084      	sub	sp, #16
    94d4:	af00      	add	r7, sp, #0
    94d6:	60f8      	str	r0, [r7, #12]
    94d8:	607a      	str	r2, [r7, #4]
    94da:	230b      	movs	r3, #11
    94dc:	18fb      	adds	r3, r7, r3
    94de:	1c0a      	adds	r2, r1, #0
    94e0:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    94e2:	230b      	movs	r3, #11
    94e4:	18fb      	adds	r3, r7, r3
    94e6:	781b      	ldrb	r3, [r3, #0]
    94e8:	68fa      	ldr	r2, [r7, #12]
    94ea:	01db      	lsls	r3, r3, #7
    94ec:	18d3      	adds	r3, r2, r3
    94ee:	331c      	adds	r3, #28
    94f0:	687a      	ldr	r2, [r7, #4]
    94f2:	601a      	str	r2, [r3, #0]
}
    94f4:	46c0      	nop			; (mov r8, r8)
    94f6:	46bd      	mov	sp, r7
    94f8:	b004      	add	sp, #16
    94fa:	bd80      	pop	{r7, pc}

000094fc <_gpio_set_level>:
{
    94fc:	b580      	push	{r7, lr}
    94fe:	b082      	sub	sp, #8
    9500:	af00      	add	r7, sp, #0
    9502:	6039      	str	r1, [r7, #0]
    9504:	0011      	movs	r1, r2
    9506:	1dfb      	adds	r3, r7, #7
    9508:	1c02      	adds	r2, r0, #0
    950a:	701a      	strb	r2, [r3, #0]
    950c:	1dbb      	adds	r3, r7, #6
    950e:	1c0a      	adds	r2, r1, #0
    9510:	701a      	strb	r2, [r3, #0]
	if (level) {
    9512:	1dbb      	adds	r3, r7, #6
    9514:	781b      	ldrb	r3, [r3, #0]
    9516:	2b00      	cmp	r3, #0
    9518:	d008      	beq.n	952c <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    951a:	683a      	ldr	r2, [r7, #0]
    951c:	1dfb      	adds	r3, r7, #7
    951e:	7819      	ldrb	r1, [r3, #0]
    9520:	23c0      	movs	r3, #192	; 0xc0
    9522:	05db      	lsls	r3, r3, #23
    9524:	0018      	movs	r0, r3
    9526:	4b07      	ldr	r3, [pc, #28]	; (9544 <_gpio_set_level+0x48>)
    9528:	4798      	blx	r3
}
    952a:	e007      	b.n	953c <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    952c:	683a      	ldr	r2, [r7, #0]
    952e:	1dfb      	adds	r3, r7, #7
    9530:	7819      	ldrb	r1, [r3, #0]
    9532:	23c0      	movs	r3, #192	; 0xc0
    9534:	05db      	lsls	r3, r3, #23
    9536:	0018      	movs	r0, r3
    9538:	4b03      	ldr	r3, [pc, #12]	; (9548 <_gpio_set_level+0x4c>)
    953a:	4798      	blx	r3
}
    953c:	46c0      	nop			; (mov r8, r8)
    953e:	46bd      	mov	sp, r7
    9540:	b002      	add	sp, #8
    9542:	bd80      	pop	{r7, pc}
    9544:	00009479 	.word	0x00009479
    9548:	000094a5 	.word	0x000094a5

0000954c <_gpio_toggle_level>:
{
    954c:	b580      	push	{r7, lr}
    954e:	b082      	sub	sp, #8
    9550:	af00      	add	r7, sp, #0
    9552:	0002      	movs	r2, r0
    9554:	6039      	str	r1, [r7, #0]
    9556:	1dfb      	adds	r3, r7, #7
    9558:	701a      	strb	r2, [r3, #0]
	hri_port_toggle_OUT_reg(PORT_IOBUS, port, mask);
    955a:	683a      	ldr	r2, [r7, #0]
    955c:	1dfb      	adds	r3, r7, #7
    955e:	7819      	ldrb	r1, [r3, #0]
    9560:	23c0      	movs	r3, #192	; 0xc0
    9562:	05db      	lsls	r3, r3, #23
    9564:	0018      	movs	r0, r3
    9566:	4b03      	ldr	r3, [pc, #12]	; (9574 <_gpio_toggle_level+0x28>)
    9568:	4798      	blx	r3
}
    956a:	46c0      	nop			; (mov r8, r8)
    956c:	46bd      	mov	sp, r7
    956e:	b002      	add	sp, #8
    9570:	bd80      	pop	{r7, pc}
    9572:	46c0      	nop			; (mov r8, r8)
    9574:	000094d1 	.word	0x000094d1

00009578 <gpio_set_pin_level>:
{
    9578:	b580      	push	{r7, lr}
    957a:	b082      	sub	sp, #8
    957c:	af00      	add	r7, sp, #0
    957e:	0002      	movs	r2, r0
    9580:	1dfb      	adds	r3, r7, #7
    9582:	701a      	strb	r2, [r3, #0]
    9584:	1dbb      	adds	r3, r7, #6
    9586:	1c0a      	adds	r2, r1, #0
    9588:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    958a:	1dfb      	adds	r3, r7, #7
    958c:	781b      	ldrb	r3, [r3, #0]
    958e:	095b      	lsrs	r3, r3, #5
    9590:	b2d8      	uxtb	r0, r3
    9592:	1dfb      	adds	r3, r7, #7
    9594:	781b      	ldrb	r3, [r3, #0]
    9596:	221f      	movs	r2, #31
    9598:	4013      	ands	r3, r2
    959a:	2201      	movs	r2, #1
    959c:	409a      	lsls	r2, r3
    959e:	0011      	movs	r1, r2
    95a0:	1dbb      	adds	r3, r7, #6
    95a2:	781b      	ldrb	r3, [r3, #0]
    95a4:	001a      	movs	r2, r3
    95a6:	4b03      	ldr	r3, [pc, #12]	; (95b4 <gpio_set_pin_level+0x3c>)
    95a8:	4798      	blx	r3
}
    95aa:	46c0      	nop			; (mov r8, r8)
    95ac:	46bd      	mov	sp, r7
    95ae:	b002      	add	sp, #8
    95b0:	bd80      	pop	{r7, pc}
    95b2:	46c0      	nop			; (mov r8, r8)
    95b4:	000094fd 	.word	0x000094fd

000095b8 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
    95b8:	b580      	push	{r7, lr}
    95ba:	b082      	sub	sp, #8
    95bc:	af00      	add	r7, sp, #0
    95be:	0002      	movs	r2, r0
    95c0:	1dfb      	adds	r3, r7, #7
    95c2:	701a      	strb	r2, [r3, #0]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    95c4:	1dfb      	adds	r3, r7, #7
    95c6:	781b      	ldrb	r3, [r3, #0]
    95c8:	095b      	lsrs	r3, r3, #5
    95ca:	b2d8      	uxtb	r0, r3
    95cc:	1dfb      	adds	r3, r7, #7
    95ce:	781b      	ldrb	r3, [r3, #0]
    95d0:	221f      	movs	r2, #31
    95d2:	4013      	ands	r3, r2
    95d4:	2201      	movs	r2, #1
    95d6:	409a      	lsls	r2, r3
    95d8:	0013      	movs	r3, r2
    95da:	0019      	movs	r1, r3
    95dc:	4b02      	ldr	r3, [pc, #8]	; (95e8 <gpio_toggle_pin_level+0x30>)
    95de:	4798      	blx	r3
}
    95e0:	46c0      	nop			; (mov r8, r8)
    95e2:	46bd      	mov	sp, r7
    95e4:	b002      	add	sp, #8
    95e6:	bd80      	pop	{r7, pc}
    95e8:	0000954d 	.word	0x0000954d

000095ec <lcdBacklight>:
 *
 * Created: 4/9/2020 2:00:52 PM
 *  Author: Glenn
 */

void lcdBacklight(bool onoff)	{
    95ec:	b580      	push	{r7, lr}
    95ee:	b082      	sub	sp, #8
    95f0:	af00      	add	r7, sp, #0
    95f2:	0002      	movs	r2, r0
    95f4:	1dfb      	adds	r3, r7, #7
    95f6:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(LCD_PWREN,	onoff);
    95f8:	1dfb      	adds	r3, r7, #7
    95fa:	781b      	ldrb	r3, [r3, #0]
    95fc:	0019      	movs	r1, r3
    95fe:	201c      	movs	r0, #28
    9600:	4b02      	ldr	r3, [pc, #8]	; (960c <lcdBacklight+0x20>)
    9602:	4798      	blx	r3
}
    9604:	46c0      	nop			; (mov r8, r8)
    9606:	46bd      	mov	sp, r7
    9608:	b002      	add	sp, #8
    960a:	bd80      	pop	{r7, pc}
    960c:	00009579 	.word	0x00009579

00009610 <lcdOn>:

void lcdOn(bool onoff)		{		// turns lcd on
    9610:	b580      	push	{r7, lr}
    9612:	b082      	sub	sp, #8
    9614:	af00      	add	r7, sp, #0
    9616:	0002      	movs	r2, r0
    9618:	1dfb      	adds	r3, r7, #7
    961a:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(LCD_BACKLIGHT_PWM, onoff);
    961c:	1dfb      	adds	r3, r7, #7
    961e:	781b      	ldrb	r3, [r3, #0]
    9620:	0019      	movs	r1, r3
    9622:	200e      	movs	r0, #14
    9624:	4b04      	ldr	r3, [pc, #16]	; (9638 <lcdOn+0x28>)
    9626:	4798      	blx	r3
	delay_ms(50);
    9628:	2032      	movs	r0, #50	; 0x32
    962a:	4b04      	ldr	r3, [pc, #16]	; (963c <lcdOn+0x2c>)
    962c:	4798      	blx	r3
}
    962e:	46c0      	nop			; (mov r8, r8)
    9630:	46bd      	mov	sp, r7
    9632:	b002      	add	sp, #8
    9634:	bd80      	pop	{r7, pc}
    9636:	46c0      	nop			; (mov r8, r8)
    9638:	00009579 	.word	0x00009579
    963c:	000016b9 	.word	0x000016b9

00009640 <lcdLoadNibble>:

void lcdLoadNibble(char c, bool upper) {
    9640:	b580      	push	{r7, lr}
    9642:	b082      	sub	sp, #8
    9644:	af00      	add	r7, sp, #0
    9646:	0002      	movs	r2, r0
    9648:	1dfb      	adds	r3, r7, #7
    964a:	701a      	strb	r2, [r3, #0]
    964c:	1dbb      	adds	r3, r7, #6
    964e:	1c0a      	adds	r2, r1, #0
    9650:	701a      	strb	r2, [r3, #0]
	if (upper)
    9652:	1dbb      	adds	r3, r7, #6
    9654:	781b      	ldrb	r3, [r3, #0]
    9656:	2b00      	cmp	r3, #0
    9658:	d004      	beq.n	9664 <lcdLoadNibble+0x24>
		c = c >> 4;
    965a:	1dfb      	adds	r3, r7, #7
    965c:	1dfa      	adds	r2, r7, #7
    965e:	7812      	ldrb	r2, [r2, #0]
    9660:	0912      	lsrs	r2, r2, #4
    9662:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(LCD_DB4, c & 0x01);
    9664:	1dfb      	adds	r3, r7, #7
    9666:	781b      	ldrb	r3, [r3, #0]
    9668:	2201      	movs	r2, #1
    966a:	4013      	ands	r3, r2
    966c:	1e5a      	subs	r2, r3, #1
    966e:	4193      	sbcs	r3, r2
    9670:	b2db      	uxtb	r3, r3
    9672:	0019      	movs	r1, r3
    9674:	202c      	movs	r0, #44	; 0x2c
    9676:	4b1b      	ldr	r3, [pc, #108]	; (96e4 <lcdLoadNibble+0xa4>)
    9678:	4798      	blx	r3
	c = c >> 1;
    967a:	1dfb      	adds	r3, r7, #7
    967c:	1dfa      	adds	r2, r7, #7
    967e:	7812      	ldrb	r2, [r2, #0]
    9680:	0852      	lsrs	r2, r2, #1
    9682:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(LCD_DB5, c & 0x01);
    9684:	1dfb      	adds	r3, r7, #7
    9686:	781b      	ldrb	r3, [r3, #0]
    9688:	2201      	movs	r2, #1
    968a:	4013      	ands	r3, r2
    968c:	1e5a      	subs	r2, r3, #1
    968e:	4193      	sbcs	r3, r2
    9690:	b2db      	uxtb	r3, r3
    9692:	0019      	movs	r1, r3
    9694:	202d      	movs	r0, #45	; 0x2d
    9696:	4b13      	ldr	r3, [pc, #76]	; (96e4 <lcdLoadNibble+0xa4>)
    9698:	4798      	blx	r3
	c = c >> 1;
    969a:	1dfb      	adds	r3, r7, #7
    969c:	1dfa      	adds	r2, r7, #7
    969e:	7812      	ldrb	r2, [r2, #0]
    96a0:	0852      	lsrs	r2, r2, #1
    96a2:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(LCD_DB6, c & 0x01);
    96a4:	1dfb      	adds	r3, r7, #7
    96a6:	781b      	ldrb	r3, [r3, #0]
    96a8:	2201      	movs	r2, #1
    96aa:	4013      	ands	r3, r2
    96ac:	1e5a      	subs	r2, r3, #1
    96ae:	4193      	sbcs	r3, r2
    96b0:	b2db      	uxtb	r3, r3
    96b2:	0019      	movs	r1, r3
    96b4:	202e      	movs	r0, #46	; 0x2e
    96b6:	4b0b      	ldr	r3, [pc, #44]	; (96e4 <lcdLoadNibble+0xa4>)
    96b8:	4798      	blx	r3
	c = c >> 1;
    96ba:	1dfb      	adds	r3, r7, #7
    96bc:	1dfa      	adds	r2, r7, #7
    96be:	7812      	ldrb	r2, [r2, #0]
    96c0:	0852      	lsrs	r2, r2, #1
    96c2:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(LCD_DB7, c & 0x01);
    96c4:	1dfb      	adds	r3, r7, #7
    96c6:	781b      	ldrb	r3, [r3, #0]
    96c8:	2201      	movs	r2, #1
    96ca:	4013      	ands	r3, r2
    96cc:	1e5a      	subs	r2, r3, #1
    96ce:	4193      	sbcs	r3, r2
    96d0:	b2db      	uxtb	r3, r3
    96d2:	0019      	movs	r1, r3
    96d4:	202f      	movs	r0, #47	; 0x2f
    96d6:	4b03      	ldr	r3, [pc, #12]	; (96e4 <lcdLoadNibble+0xa4>)
    96d8:	4798      	blx	r3
}
    96da:	46c0      	nop			; (mov r8, r8)
    96dc:	46bd      	mov	sp, r7
    96de:	b002      	add	sp, #8
    96e0:	bd80      	pop	{r7, pc}
    96e2:	46c0      	nop			; (mov r8, r8)
    96e4:	00009579 	.word	0x00009579

000096e8 <lcdPulse>:

void lcdPulse() {
    96e8:	b580      	push	{r7, lr}
    96ea:	af00      	add	r7, sp, #0
	gpio_set_pin_level(LCD_E, LCDENABLE);	// E = 1;
    96ec:	2101      	movs	r1, #1
    96ee:	2028      	movs	r0, #40	; 0x28
    96f0:	4b08      	ldr	r3, [pc, #32]	; (9714 <lcdPulse+0x2c>)
    96f2:	4798      	blx	r3
	gpio_toggle_pin_level(LED_GREEN);
    96f4:	2014      	movs	r0, #20
    96f6:	4b08      	ldr	r3, [pc, #32]	; (9718 <lcdPulse+0x30>)
    96f8:	4798      	blx	r3
	delay_us(1); //enable pulse width >= 300ns
    96fa:	2001      	movs	r0, #1
    96fc:	4b07      	ldr	r3, [pc, #28]	; (971c <lcdPulse+0x34>)
    96fe:	4798      	blx	r3
	gpio_set_pin_level(LCD_E, LCDDISABLE);		//	E = 0; //Clock enable: falling edge
    9700:	2100      	movs	r1, #0
    9702:	2028      	movs	r0, #40	; 0x28
    9704:	4b03      	ldr	r3, [pc, #12]	; (9714 <lcdPulse+0x2c>)
    9706:	4798      	blx	r3
	gpio_toggle_pin_level(LED_GREEN);
    9708:	2014      	movs	r0, #20
    970a:	4b03      	ldr	r3, [pc, #12]	; (9718 <lcdPulse+0x30>)
    970c:	4798      	blx	r3
}
    970e:	46c0      	nop			; (mov r8, r8)
    9710:	46bd      	mov	sp, r7
    9712:	bd80      	pop	{r7, pc}
    9714:	00009579 	.word	0x00009579
    9718:	000095b9 	.word	0x000095b9
    971c:	00001681 	.word	0x00001681

00009720 <lcdCommand>:

void lcdCommand(uint8_t b) {
    9720:	b580      	push	{r7, lr}
    9722:	b082      	sub	sp, #8
    9724:	af00      	add	r7, sp, #0
    9726:	0002      	movs	r2, r0
    9728:	1dfb      	adds	r3, r7, #7
    972a:	701a      	strb	r2, [r3, #0]
	lcdLoadNibble(b, UPPERBYTE);									// P1 = i; //put half the data on output Port;
    972c:	1dfb      	adds	r3, r7, #7
    972e:	781b      	ldrb	r3, [r3, #0]
    9730:	2101      	movs	r1, #1
    9732:	0018      	movs	r0, r3
    9734:	4b10      	ldr	r3, [pc, #64]	; (9778 <lcdCommand+0x58>)
    9736:	4798      	blx	r3
	gpio_set_pin_level(LCD_RS, LCDCOMMAND);	//	D_I =0; //D/I=LOW : send instruction
    9738:	2100      	movs	r1, #0
    973a:	2027      	movs	r0, #39	; 0x27
    973c:	4b0f      	ldr	r3, [pc, #60]	; (977c <lcdCommand+0x5c>)
    973e:	4798      	blx	r3
	gpio_set_pin_level(LCD_RW, LCDWRITE);	//	R_W =0; //R/W=LOW : Write
    9740:	2100      	movs	r1, #0
    9742:	2029      	movs	r0, #41	; 0x29
    9744:	4b0d      	ldr	r3, [pc, #52]	; (977c <lcdCommand+0x5c>)
    9746:	4798      	blx	r3
	delay_us(50);
    9748:	2032      	movs	r0, #50	; 0x32
    974a:	4b0d      	ldr	r3, [pc, #52]	; (9780 <lcdCommand+0x60>)
    974c:	4798      	blx	r3
	lcdPulse(); //Send lower 4 bits
    974e:	4b0d      	ldr	r3, [pc, #52]	; (9784 <lcdCommand+0x64>)
    9750:	4798      	blx	r3
	lcdLoadNibble(b, LOWERBYTE);									// P1 = i; //put half the data on output Port
    9752:	1dfb      	adds	r3, r7, #7
    9754:	781b      	ldrb	r3, [r3, #0]
    9756:	2100      	movs	r1, #0
    9758:	0018      	movs	r0, r3
    975a:	4b07      	ldr	r3, [pc, #28]	; (9778 <lcdCommand+0x58>)
    975c:	4798      	blx	r3
	delay_us(50);
    975e:	2032      	movs	r0, #50	; 0x32
    9760:	4b07      	ldr	r3, [pc, #28]	; (9780 <lcdCommand+0x60>)
    9762:	4798      	blx	r3
	lcdPulse(); //Send upper 4 bits
    9764:	4b07      	ldr	r3, [pc, #28]	; (9784 <lcdCommand+0x64>)
    9766:	4798      	blx	r3
	delay_ms(1);
    9768:	2001      	movs	r0, #1
    976a:	4b07      	ldr	r3, [pc, #28]	; (9788 <lcdCommand+0x68>)
    976c:	4798      	blx	r3
}
    976e:	46c0      	nop			; (mov r8, r8)
    9770:	46bd      	mov	sp, r7
    9772:	b002      	add	sp, #8
    9774:	bd80      	pop	{r7, pc}
    9776:	46c0      	nop			; (mov r8, r8)
    9778:	00009641 	.word	0x00009641
    977c:	00009579 	.word	0x00009579
    9780:	00001681 	.word	0x00001681
    9784:	000096e9 	.word	0x000096e9
    9788:	000016b9 	.word	0x000016b9

0000978c <lcdWriteChar>:

void lcdWriteChar(uint8_t c) {
    978c:	b580      	push	{r7, lr}
    978e:	b082      	sub	sp, #8
    9790:	af00      	add	r7, sp, #0
    9792:	0002      	movs	r2, r0
    9794:	1dfb      	adds	r3, r7, #7
    9796:	701a      	strb	r2, [r3, #0]
	lcdLoadNibble(c, UPPERBYTE);        // i; //put data on output port
    9798:	1dfb      	adds	r3, r7, #7
    979a:	781b      	ldrb	r3, [r3, #0]
    979c:	2101      	movs	r1, #1
    979e:	0018      	movs	r0, r3
    97a0:	4b10      	ldr	r3, [pc, #64]	; (97e4 <lcdWriteChar+0x58>)
    97a2:	4798      	blx	r3
	gpio_set_pin_level(LCD_RS, LCDDATA);	//	D_I =1; //D/I=HIGH : send data
    97a4:	2101      	movs	r1, #1
    97a6:	2027      	movs	r0, #39	; 0x27
    97a8:	4b0f      	ldr	r3, [pc, #60]	; (97e8 <lcdWriteChar+0x5c>)
    97aa:	4798      	blx	r3
	gpio_set_pin_level(LCD_RW, LCDWRITE);	//	R_W =0; //R/W=LOW : Write
    97ac:	2100      	movs	r1, #0
    97ae:	2029      	movs	r0, #41	; 0x29
    97b0:	4b0d      	ldr	r3, [pc, #52]	; (97e8 <lcdWriteChar+0x5c>)
    97b2:	4798      	blx	r3
	delay_us(50);
    97b4:	2032      	movs	r0, #50	; 0x32
    97b6:	4b0d      	ldr	r3, [pc, #52]	; (97ec <lcdWriteChar+0x60>)
    97b8:	4798      	blx	r3
	lcdPulse(); //Clock lower 4 bits
    97ba:	4b0d      	ldr	r3, [pc, #52]	; (97f0 <lcdWriteChar+0x64>)
    97bc:	4798      	blx	r3
	lcdLoadNibble(c, LOWERBYTE);         // i; //put data on output Port
    97be:	1dfb      	adds	r3, r7, #7
    97c0:	781b      	ldrb	r3, [r3, #0]
    97c2:	2100      	movs	r1, #0
    97c4:	0018      	movs	r0, r3
    97c6:	4b07      	ldr	r3, [pc, #28]	; (97e4 <lcdWriteChar+0x58>)
    97c8:	4798      	blx	r3
	delay_us(50);
    97ca:	2032      	movs	r0, #50	; 0x32
    97cc:	4b07      	ldr	r3, [pc, #28]	; (97ec <lcdWriteChar+0x60>)
    97ce:	4798      	blx	r3
	lcdPulse(); //Clock upper 4 bits
    97d0:	4b07      	ldr	r3, [pc, #28]	; (97f0 <lcdWriteChar+0x64>)
    97d2:	4798      	blx	r3
	delay_ms(1);
    97d4:	2001      	movs	r0, #1
    97d6:	4b07      	ldr	r3, [pc, #28]	; (97f4 <lcdWriteChar+0x68>)
    97d8:	4798      	blx	r3
}
    97da:	46c0      	nop			; (mov r8, r8)
    97dc:	46bd      	mov	sp, r7
    97de:	b002      	add	sp, #8
    97e0:	bd80      	pop	{r7, pc}
    97e2:	46c0      	nop			; (mov r8, r8)
    97e4:	00009641 	.word	0x00009641
    97e8:	00009579 	.word	0x00009579
    97ec:	00001681 	.word	0x00001681
    97f0:	000096e9 	.word	0x000096e9
    97f4:	000016b9 	.word	0x000016b9

000097f8 <lcdClear>:

void lcdClear() {
    97f8:	b580      	push	{r7, lr}
    97fa:	af00      	add	r7, sp, #0
	lcdCommand(LCD_CLEARDISPLAY);		// clear display
    97fc:	2001      	movs	r0, #1
    97fe:	4b04      	ldr	r3, [pc, #16]	; (9810 <lcdClear+0x18>)
    9800:	4798      	blx	r3
	delay_ms(1);				// needs extra time
    9802:	2001      	movs	r0, #1
    9804:	4b03      	ldr	r3, [pc, #12]	; (9814 <lcdClear+0x1c>)
    9806:	4798      	blx	r3
}
    9808:	46c0      	nop			; (mov r8, r8)
    980a:	46bd      	mov	sp, r7
    980c:	bd80      	pop	{r7, pc}
    980e:	46c0      	nop			; (mov r8, r8)
    9810:	00009721 	.word	0x00009721
    9814:	000016b9 	.word	0x000016b9

00009818 <lcdGoToPos>:
void lcdCR() {				// returns active character position to beginning of line
	lcdCommand(LCD_RETURNHOME);
	delay_ms(1);				// needs extra time
}

void lcdGoToPos(uint8_t line, uint8_t pos) {			// move cursor to line and character position
    9818:	b580      	push	{r7, lr}
    981a:	b082      	sub	sp, #8
    981c:	af00      	add	r7, sp, #0
    981e:	0002      	movs	r2, r0
    9820:	1dfb      	adds	r3, r7, #7
    9822:	701a      	strb	r2, [r3, #0]
    9824:	1dbb      	adds	r3, r7, #6
    9826:	1c0a      	adds	r2, r1, #0
    9828:	701a      	strb	r2, [r3, #0]
	lcdCommand(LCD_SETDDRAMADDR + pos + LINELEN*line);
    982a:	1dfb      	adds	r3, r7, #7
    982c:	781b      	ldrb	r3, [r3, #0]
    982e:	2228      	movs	r2, #40	; 0x28
    9830:	4353      	muls	r3, r2
    9832:	b2da      	uxtb	r2, r3
    9834:	1dbb      	adds	r3, r7, #6
    9836:	781b      	ldrb	r3, [r3, #0]
    9838:	18d3      	adds	r3, r2, r3
    983a:	b2db      	uxtb	r3, r3
    983c:	3b80      	subs	r3, #128	; 0x80
    983e:	b2db      	uxtb	r3, r3
    9840:	0018      	movs	r0, r3
    9842:	4b04      	ldr	r3, [pc, #16]	; (9854 <lcdGoToPos+0x3c>)
    9844:	4798      	blx	r3
	delay_ms(1);				// needs extra time
    9846:	2001      	movs	r0, #1
    9848:	4b03      	ldr	r3, [pc, #12]	; (9858 <lcdGoToPos+0x40>)
    984a:	4798      	blx	r3
}
    984c:	46c0      	nop			; (mov r8, r8)
    984e:	46bd      	mov	sp, r7
    9850:	b002      	add	sp, #8
    9852:	bd80      	pop	{r7, pc}
    9854:	00009721 	.word	0x00009721
    9858:	000016b9 	.word	0x000016b9

0000985c <lcdGoToLine>:

void lcdGoToLine(uint8_t line)	{				// moves cursor to beginning of selected line (0-1)
    985c:	b580      	push	{r7, lr}
    985e:	b082      	sub	sp, #8
    9860:	af00      	add	r7, sp, #0
    9862:	0002      	movs	r2, r0
    9864:	1dfb      	adds	r3, r7, #7
    9866:	701a      	strb	r2, [r3, #0]
	lcdGoToPos(line, 0);
    9868:	1dfb      	adds	r3, r7, #7
    986a:	781b      	ldrb	r3, [r3, #0]
    986c:	2100      	movs	r1, #0
    986e:	0018      	movs	r0, r3
    9870:	4b02      	ldr	r3, [pc, #8]	; (987c <lcdGoToLine+0x20>)
    9872:	4798      	blx	r3
}
    9874:	46c0      	nop			; (mov r8, r8)
    9876:	46bd      	mov	sp, r7
    9878:	b002      	add	sp, #8
    987a:	bd80      	pop	{r7, pc}
    987c:	00009819 	.word	0x00009819

00009880 <lcdWriteText>:

void lcdWriteText(char *s) {							// write a string at current location
    9880:	b580      	push	{r7, lr}
    9882:	b084      	sub	sp, #16
    9884:	af00      	add	r7, sp, #0
    9886:	6078      	str	r0, [r7, #4]
	for(int i=0; s[i] != '\0'; i++)
    9888:	2300      	movs	r3, #0
    988a:	60fb      	str	r3, [r7, #12]
    988c:	e013      	b.n	98b6 <lcdWriteText+0x36>
		if ('\n' == s[i])
    988e:	68fb      	ldr	r3, [r7, #12]
    9890:	687a      	ldr	r2, [r7, #4]
    9892:	18d3      	adds	r3, r2, r3
    9894:	781b      	ldrb	r3, [r3, #0]
    9896:	2b0a      	cmp	r3, #10
    9898:	d103      	bne.n	98a2 <lcdWriteText+0x22>
			lcdGoToLine(1);
    989a:	2001      	movs	r0, #1
    989c:	4b0b      	ldr	r3, [pc, #44]	; (98cc <lcdWriteText+0x4c>)
    989e:	4798      	blx	r3
    98a0:	e006      	b.n	98b0 <lcdWriteText+0x30>
		else
			lcdWriteChar(s[i]);
    98a2:	68fb      	ldr	r3, [r7, #12]
    98a4:	687a      	ldr	r2, [r7, #4]
    98a6:	18d3      	adds	r3, r2, r3
    98a8:	781b      	ldrb	r3, [r3, #0]
    98aa:	0018      	movs	r0, r3
    98ac:	4b08      	ldr	r3, [pc, #32]	; (98d0 <lcdWriteText+0x50>)
    98ae:	4798      	blx	r3
	for(int i=0; s[i] != '\0'; i++)
    98b0:	68fb      	ldr	r3, [r7, #12]
    98b2:	3301      	adds	r3, #1
    98b4:	60fb      	str	r3, [r7, #12]
    98b6:	68fb      	ldr	r3, [r7, #12]
    98b8:	687a      	ldr	r2, [r7, #4]
    98ba:	18d3      	adds	r3, r2, r3
    98bc:	781b      	ldrb	r3, [r3, #0]
    98be:	2b00      	cmp	r3, #0
    98c0:	d1e5      	bne.n	988e <lcdWriteText+0xe>
}
    98c2:	46c0      	nop			; (mov r8, r8)
    98c4:	46bd      	mov	sp, r7
    98c6:	b004      	add	sp, #16
    98c8:	bd80      	pop	{r7, pc}
    98ca:	46c0      	nop			; (mov r8, r8)
    98cc:	0000985d 	.word	0x0000985d
    98d0:	0000978d 	.word	0x0000978d

000098d4 <lcdWriteCharPos>:
void lcdWriteLine(char *s, uint8_t line) {		// lines are 0 and 1
	lcdGoToLine(line);
	lcdWriteText(s);
}

void lcdWriteCharPos(uint8_t c, uint8_t line, uint8_t pos) {		// lines are 0 and 1, character position is 0-7
    98d4:	b590      	push	{r4, r7, lr}
    98d6:	b083      	sub	sp, #12
    98d8:	af00      	add	r7, sp, #0
    98da:	0004      	movs	r4, r0
    98dc:	0008      	movs	r0, r1
    98de:	0011      	movs	r1, r2
    98e0:	1dfb      	adds	r3, r7, #7
    98e2:	1c22      	adds	r2, r4, #0
    98e4:	701a      	strb	r2, [r3, #0]
    98e6:	1dbb      	adds	r3, r7, #6
    98e8:	1c02      	adds	r2, r0, #0
    98ea:	701a      	strb	r2, [r3, #0]
    98ec:	1d7b      	adds	r3, r7, #5
    98ee:	1c0a      	adds	r2, r1, #0
    98f0:	701a      	strb	r2, [r3, #0]
	lcdGoToPos(line, pos);
    98f2:	1d7b      	adds	r3, r7, #5
    98f4:	781a      	ldrb	r2, [r3, #0]
    98f6:	1dbb      	adds	r3, r7, #6
    98f8:	781b      	ldrb	r3, [r3, #0]
    98fa:	0011      	movs	r1, r2
    98fc:	0018      	movs	r0, r3
    98fe:	4b05      	ldr	r3, [pc, #20]	; (9914 <lcdWriteCharPos+0x40>)
    9900:	4798      	blx	r3
	lcdWriteChar(c);
    9902:	1dfb      	adds	r3, r7, #7
    9904:	781b      	ldrb	r3, [r3, #0]
    9906:	0018      	movs	r0, r3
    9908:	4b03      	ldr	r3, [pc, #12]	; (9918 <lcdWriteCharPos+0x44>)
    990a:	4798      	blx	r3
}
    990c:	46c0      	nop			; (mov r8, r8)
    990e:	46bd      	mov	sp, r7
    9910:	b003      	add	sp, #12
    9912:	bd90      	pop	{r4, r7, pc}
    9914:	00009819 	.word	0x00009819
    9918:	0000978d 	.word	0x0000978d

0000991c <lcdInit>:
void lcdWriteTextPos(char *s, uint8_t line, uint8_t pos) {		// lines are 0 and 1, character position is 0-7
	lcdGoToPos(line, pos);
	lcdWriteText(s);
}

void lcdInit() {
    991c:	b580      	push	{r7, lr}
    991e:	af00      	add	r7, sp, #0
	#define LCD_DB5 GPIO(GPIO_PORTB, 13)
	#define LCD_DB6 GPIO(GPIO_PORTB, 14)
	#define LCD_DB7 GPIO(GPIO_PORTB, 15)
*/
	// turn on the LCD
	gpio_set_pin_level(LCD_CONTRAST_PWM, false);	// currently set by potentiometer
    9920:	2100      	movs	r1, #0
    9922:	200f      	movs	r0, #15
    9924:	4b1f      	ldr	r3, [pc, #124]	; (99a4 <lcdInit+0x88>)
    9926:	4798      	blx	r3
	lcdBacklight(true);
    9928:	2001      	movs	r0, #1
    992a:	4b1f      	ldr	r3, [pc, #124]	; (99a8 <lcdInit+0x8c>)
    992c:	4798      	blx	r3
	lcdOn(true);
    992e:	2001      	movs	r0, #1
    9930:	4b1e      	ldr	r3, [pc, #120]	; (99ac <lcdInit+0x90>)
    9932:	4798      	blx	r3

	// wake this mofo up
	gpio_set_pin_level(LCD_RS, LCDCOMMAND);	//	D_I =0; //D/I=LOW : send instruction
    9934:	2100      	movs	r1, #0
    9936:	2027      	movs	r0, #39	; 0x27
    9938:	4b1a      	ldr	r3, [pc, #104]	; (99a4 <lcdInit+0x88>)
    993a:	4798      	blx	r3
	gpio_set_pin_level(LCD_RW, LCDWRITE);	//	R_W =0; //R/W=LOW : Write
    993c:	2100      	movs	r1, #0
    993e:	2029      	movs	r0, #41	; 0x29
    9940:	4b18      	ldr	r3, [pc, #96]	; (99a4 <lcdInit+0x88>)
    9942:	4798      	blx	r3
	delay_ms(5);
    9944:	2005      	movs	r0, #5
    9946:	4b1a      	ldr	r3, [pc, #104]	; (99b0 <lcdInit+0x94>)
    9948:	4798      	blx	r3
	lcdLoadNibble(0x30, UPPERBYTE);									// P1 = i; //put half the data on output Port;
    994a:	2101      	movs	r1, #1
    994c:	2030      	movs	r0, #48	; 0x30
    994e:	4b19      	ldr	r3, [pc, #100]	; (99b4 <lcdInit+0x98>)
    9950:	4798      	blx	r3
	lcdPulse(); //Send lower 4 bits				// we are in 8 bit mode here so toggle 3 times to get attention
    9952:	4b19      	ldr	r3, [pc, #100]	; (99b8 <lcdInit+0x9c>)
    9954:	4798      	blx	r3
	delay_ms(5);
    9956:	2005      	movs	r0, #5
    9958:	4b15      	ldr	r3, [pc, #84]	; (99b0 <lcdInit+0x94>)
    995a:	4798      	blx	r3
	lcdPulse(); //Send lower 4 bits
    995c:	4b16      	ldr	r3, [pc, #88]	; (99b8 <lcdInit+0x9c>)
    995e:	4798      	blx	r3
	delay_ms(5);
    9960:	2005      	movs	r0, #5
    9962:	4b13      	ldr	r3, [pc, #76]	; (99b0 <lcdInit+0x94>)
    9964:	4798      	blx	r3
	lcdPulse(); //Send lower 4 bits
    9966:	4b14      	ldr	r3, [pc, #80]	; (99b8 <lcdInit+0x9c>)
    9968:	4798      	blx	r3
	delay_ms(5);
    996a:	2005      	movs	r0, #5
    996c:	4b10      	ldr	r3, [pc, #64]	; (99b0 <lcdInit+0x94>)
    996e:	4798      	blx	r3
	lcdLoadNibble(LCD_FUNCTIONSET | LCD_4BITMODE, UPPERBYTE);				// now set to 4 bit mode
    9970:	2101      	movs	r1, #1
    9972:	2020      	movs	r0, #32
    9974:	4b0f      	ldr	r3, [pc, #60]	; (99b4 <lcdInit+0x98>)
    9976:	4798      	blx	r3
	delay_ms(5);
    9978:	2005      	movs	r0, #5
    997a:	4b0d      	ldr	r3, [pc, #52]	; (99b0 <lcdInit+0x94>)
    997c:	4798      	blx	r3
	lcdPulse();
    997e:	4b0e      	ldr	r3, [pc, #56]	; (99b8 <lcdInit+0x9c>)
    9980:	4798      	blx	r3

	lcdCommand(LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE);		// 4 bit, 2 line
    9982:	2028      	movs	r0, #40	; 0x28
    9984:	4b0d      	ldr	r3, [pc, #52]	; (99bc <lcdInit+0xa0>)
    9986:	4798      	blx	r3
	lcdCommand(LCD_CURSORSHIFT);		// don't display cursor or shift
    9988:	2010      	movs	r0, #16
    998a:	4b0c      	ldr	r3, [pc, #48]	; (99bc <lcdInit+0xa0>)
    998c:	4798      	blx	r3
	lcdCommand(LCD_DISPLAYCONTROL | LCD_DISPLAYON);		// turns display on, no cursor
    998e:	200c      	movs	r0, #12
    9990:	4b0a      	ldr	r3, [pc, #40]	; (99bc <lcdInit+0xa0>)
    9992:	4798      	blx	r3
	lcdCommand(LCD_ENTRYMODESET | LCD_ENTRYLEFT);		// entry Mode. move left to right
    9994:	2006      	movs	r0, #6
    9996:	4b09      	ldr	r3, [pc, #36]	; (99bc <lcdInit+0xa0>)
    9998:	4798      	blx	r3
	lcdClear();
    999a:	4b09      	ldr	r3, [pc, #36]	; (99c0 <lcdInit+0xa4>)
    999c:	4798      	blx	r3
}
    999e:	46c0      	nop			; (mov r8, r8)
    99a0:	46bd      	mov	sp, r7
    99a2:	bd80      	pop	{r7, pc}
    99a4:	00009579 	.word	0x00009579
    99a8:	000095ed 	.word	0x000095ed
    99ac:	00009611 	.word	0x00009611
    99b0:	000016b9 	.word	0x000016b9
    99b4:	00009641 	.word	0x00009641
    99b8:	000096e9 	.word	0x000096e9
    99bc:	00009721 	.word	0x00009721
    99c0:	000097f9 	.word	0x000097f9

000099c4 <hri_port_set_OUT_reg>:
{
    99c4:	b580      	push	{r7, lr}
    99c6:	b084      	sub	sp, #16
    99c8:	af00      	add	r7, sp, #0
    99ca:	60f8      	str	r0, [r7, #12]
    99cc:	607a      	str	r2, [r7, #4]
    99ce:	230b      	movs	r3, #11
    99d0:	18fb      	adds	r3, r7, r3
    99d2:	1c0a      	adds	r2, r1, #0
    99d4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    99d6:	230b      	movs	r3, #11
    99d8:	18fb      	adds	r3, r7, r3
    99da:	781b      	ldrb	r3, [r3, #0]
    99dc:	68fa      	ldr	r2, [r7, #12]
    99de:	01db      	lsls	r3, r3, #7
    99e0:	18d3      	adds	r3, r2, r3
    99e2:	3318      	adds	r3, #24
    99e4:	687a      	ldr	r2, [r7, #4]
    99e6:	601a      	str	r2, [r3, #0]
}
    99e8:	46c0      	nop			; (mov r8, r8)
    99ea:	46bd      	mov	sp, r7
    99ec:	b004      	add	sp, #16
    99ee:	bd80      	pop	{r7, pc}

000099f0 <hri_port_clear_OUT_reg>:
{
    99f0:	b580      	push	{r7, lr}
    99f2:	b084      	sub	sp, #16
    99f4:	af00      	add	r7, sp, #0
    99f6:	60f8      	str	r0, [r7, #12]
    99f8:	607a      	str	r2, [r7, #4]
    99fa:	230b      	movs	r3, #11
    99fc:	18fb      	adds	r3, r7, r3
    99fe:	1c0a      	adds	r2, r1, #0
    9a00:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9a02:	230b      	movs	r3, #11
    9a04:	18fb      	adds	r3, r7, r3
    9a06:	781b      	ldrb	r3, [r3, #0]
    9a08:	68fa      	ldr	r2, [r7, #12]
    9a0a:	01db      	lsls	r3, r3, #7
    9a0c:	18d3      	adds	r3, r2, r3
    9a0e:	3314      	adds	r3, #20
    9a10:	687a      	ldr	r2, [r7, #4]
    9a12:	601a      	str	r2, [r3, #0]
}
    9a14:	46c0      	nop			; (mov r8, r8)
    9a16:	46bd      	mov	sp, r7
    9a18:	b004      	add	sp, #16
    9a1a:	bd80      	pop	{r7, pc}

00009a1c <hri_port_toggle_OUT_reg>:
{
    9a1c:	b580      	push	{r7, lr}
    9a1e:	b084      	sub	sp, #16
    9a20:	af00      	add	r7, sp, #0
    9a22:	60f8      	str	r0, [r7, #12]
    9a24:	607a      	str	r2, [r7, #4]
    9a26:	230b      	movs	r3, #11
    9a28:	18fb      	adds	r3, r7, r3
    9a2a:	1c0a      	adds	r2, r1, #0
    9a2c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    9a2e:	230b      	movs	r3, #11
    9a30:	18fb      	adds	r3, r7, r3
    9a32:	781b      	ldrb	r3, [r3, #0]
    9a34:	68fa      	ldr	r2, [r7, #12]
    9a36:	01db      	lsls	r3, r3, #7
    9a38:	18d3      	adds	r3, r2, r3
    9a3a:	331c      	adds	r3, #28
    9a3c:	687a      	ldr	r2, [r7, #4]
    9a3e:	601a      	str	r2, [r3, #0]
}
    9a40:	46c0      	nop			; (mov r8, r8)
    9a42:	46bd      	mov	sp, r7
    9a44:	b004      	add	sp, #16
    9a46:	bd80      	pop	{r7, pc}

00009a48 <_gpio_set_level>:
{
    9a48:	b580      	push	{r7, lr}
    9a4a:	b082      	sub	sp, #8
    9a4c:	af00      	add	r7, sp, #0
    9a4e:	6039      	str	r1, [r7, #0]
    9a50:	0011      	movs	r1, r2
    9a52:	1dfb      	adds	r3, r7, #7
    9a54:	1c02      	adds	r2, r0, #0
    9a56:	701a      	strb	r2, [r3, #0]
    9a58:	1dbb      	adds	r3, r7, #6
    9a5a:	1c0a      	adds	r2, r1, #0
    9a5c:	701a      	strb	r2, [r3, #0]
	if (level) {
    9a5e:	1dbb      	adds	r3, r7, #6
    9a60:	781b      	ldrb	r3, [r3, #0]
    9a62:	2b00      	cmp	r3, #0
    9a64:	d008      	beq.n	9a78 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    9a66:	683a      	ldr	r2, [r7, #0]
    9a68:	1dfb      	adds	r3, r7, #7
    9a6a:	7819      	ldrb	r1, [r3, #0]
    9a6c:	23c0      	movs	r3, #192	; 0xc0
    9a6e:	05db      	lsls	r3, r3, #23
    9a70:	0018      	movs	r0, r3
    9a72:	4b07      	ldr	r3, [pc, #28]	; (9a90 <_gpio_set_level+0x48>)
    9a74:	4798      	blx	r3
}
    9a76:	e007      	b.n	9a88 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    9a78:	683a      	ldr	r2, [r7, #0]
    9a7a:	1dfb      	adds	r3, r7, #7
    9a7c:	7819      	ldrb	r1, [r3, #0]
    9a7e:	23c0      	movs	r3, #192	; 0xc0
    9a80:	05db      	lsls	r3, r3, #23
    9a82:	0018      	movs	r0, r3
    9a84:	4b03      	ldr	r3, [pc, #12]	; (9a94 <_gpio_set_level+0x4c>)
    9a86:	4798      	blx	r3
}
    9a88:	46c0      	nop			; (mov r8, r8)
    9a8a:	46bd      	mov	sp, r7
    9a8c:	b002      	add	sp, #8
    9a8e:	bd80      	pop	{r7, pc}
    9a90:	000099c5 	.word	0x000099c5
    9a94:	000099f1 	.word	0x000099f1

00009a98 <_gpio_toggle_level>:
{
    9a98:	b580      	push	{r7, lr}
    9a9a:	b082      	sub	sp, #8
    9a9c:	af00      	add	r7, sp, #0
    9a9e:	0002      	movs	r2, r0
    9aa0:	6039      	str	r1, [r7, #0]
    9aa2:	1dfb      	adds	r3, r7, #7
    9aa4:	701a      	strb	r2, [r3, #0]
	hri_port_toggle_OUT_reg(PORT_IOBUS, port, mask);
    9aa6:	683a      	ldr	r2, [r7, #0]
    9aa8:	1dfb      	adds	r3, r7, #7
    9aaa:	7819      	ldrb	r1, [r3, #0]
    9aac:	23c0      	movs	r3, #192	; 0xc0
    9aae:	05db      	lsls	r3, r3, #23
    9ab0:	0018      	movs	r0, r3
    9ab2:	4b03      	ldr	r3, [pc, #12]	; (9ac0 <_gpio_toggle_level+0x28>)
    9ab4:	4798      	blx	r3
}
    9ab6:	46c0      	nop			; (mov r8, r8)
    9ab8:	46bd      	mov	sp, r7
    9aba:	b002      	add	sp, #8
    9abc:	bd80      	pop	{r7, pc}
    9abe:	46c0      	nop			; (mov r8, r8)
    9ac0:	00009a1d 	.word	0x00009a1d

00009ac4 <gpio_set_pin_level>:
{
    9ac4:	b580      	push	{r7, lr}
    9ac6:	b082      	sub	sp, #8
    9ac8:	af00      	add	r7, sp, #0
    9aca:	0002      	movs	r2, r0
    9acc:	1dfb      	adds	r3, r7, #7
    9ace:	701a      	strb	r2, [r3, #0]
    9ad0:	1dbb      	adds	r3, r7, #6
    9ad2:	1c0a      	adds	r2, r1, #0
    9ad4:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    9ad6:	1dfb      	adds	r3, r7, #7
    9ad8:	781b      	ldrb	r3, [r3, #0]
    9ada:	095b      	lsrs	r3, r3, #5
    9adc:	b2d8      	uxtb	r0, r3
    9ade:	1dfb      	adds	r3, r7, #7
    9ae0:	781b      	ldrb	r3, [r3, #0]
    9ae2:	221f      	movs	r2, #31
    9ae4:	4013      	ands	r3, r2
    9ae6:	2201      	movs	r2, #1
    9ae8:	409a      	lsls	r2, r3
    9aea:	0011      	movs	r1, r2
    9aec:	1dbb      	adds	r3, r7, #6
    9aee:	781b      	ldrb	r3, [r3, #0]
    9af0:	001a      	movs	r2, r3
    9af2:	4b03      	ldr	r3, [pc, #12]	; (9b00 <gpio_set_pin_level+0x3c>)
    9af4:	4798      	blx	r3
}
    9af6:	46c0      	nop			; (mov r8, r8)
    9af8:	46bd      	mov	sp, r7
    9afa:	b002      	add	sp, #8
    9afc:	bd80      	pop	{r7, pc}
    9afe:	46c0      	nop			; (mov r8, r8)
    9b00:	00009a49 	.word	0x00009a49

00009b04 <gpio_toggle_pin_level>:
{
    9b04:	b580      	push	{r7, lr}
    9b06:	b082      	sub	sp, #8
    9b08:	af00      	add	r7, sp, #0
    9b0a:	0002      	movs	r2, r0
    9b0c:	1dfb      	adds	r3, r7, #7
    9b0e:	701a      	strb	r2, [r3, #0]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    9b10:	1dfb      	adds	r3, r7, #7
    9b12:	781b      	ldrb	r3, [r3, #0]
    9b14:	095b      	lsrs	r3, r3, #5
    9b16:	b2d8      	uxtb	r0, r3
    9b18:	1dfb      	adds	r3, r7, #7
    9b1a:	781b      	ldrb	r3, [r3, #0]
    9b1c:	221f      	movs	r2, #31
    9b1e:	4013      	ands	r3, r2
    9b20:	2201      	movs	r2, #1
    9b22:	409a      	lsls	r2, r3
    9b24:	0013      	movs	r3, r2
    9b26:	0019      	movs	r1, r3
    9b28:	4b02      	ldr	r3, [pc, #8]	; (9b34 <gpio_toggle_pin_level+0x30>)
    9b2a:	4798      	blx	r3
}
    9b2c:	46c0      	nop			; (mov r8, r8)
    9b2e:	46bd      	mov	sp, r7
    9b30:	b002      	add	sp, #8
    9b32:	bd80      	pop	{r7, pc}
    9b34:	00009a99 	.word	0x00009a99

00009b38 <main>:
uint32_t ledTimer;
uint32_t debounceTimer;		// free running timer
uint8_t  buffer[50];
char textline[40];				// string used for output to USB

int main(void) {
    9b38:	b580      	push	{r7, lr}
    9b3a:	b084      	sub	sp, #16
    9b3c:	af00      	add	r7, sp, #0
	atmel_start_init();		// sets all the gpio and usb
    9b3e:	4b65      	ldr	r3, [pc, #404]	; (9cd4 <main+0x19c>)
    9b40:	4798      	blx	r3

	// init timers
	TIMER_0_task1.interval = 1;
    9b42:	4b65      	ldr	r3, [pc, #404]	; (9cd8 <main+0x1a0>)
    9b44:	2201      	movs	r2, #1
    9b46:	609a      	str	r2, [r3, #8]
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
    9b48:	4b63      	ldr	r3, [pc, #396]	; (9cd8 <main+0x1a0>)
    9b4a:	4a64      	ldr	r2, [pc, #400]	; (9cdc <main+0x1a4>)
    9b4c:	60da      	str	r2, [r3, #12]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    9b4e:	4b62      	ldr	r3, [pc, #392]	; (9cd8 <main+0x1a0>)
    9b50:	2201      	movs	r2, #1
    9b52:	741a      	strb	r2, [r3, #16]
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    9b54:	4a60      	ldr	r2, [pc, #384]	; (9cd8 <main+0x1a0>)
    9b56:	4b62      	ldr	r3, [pc, #392]	; (9ce0 <main+0x1a8>)
    9b58:	0011      	movs	r1, r2
    9b5a:	0018      	movs	r0, r3
    9b5c:	4b61      	ldr	r3, [pc, #388]	; (9ce4 <main+0x1ac>)
    9b5e:	4798      	blx	r3
	timer_start(&TIMER_0);
    9b60:	4b5f      	ldr	r3, [pc, #380]	; (9ce0 <main+0x1a8>)
    9b62:	0018      	movs	r0, r3
    9b64:	4b60      	ldr	r3, [pc, #384]	; (9ce8 <main+0x1b0>)
    9b66:	4798      	blx	r3

	lcdInit();			// turn and initialize LCD
    9b68:	4b60      	ldr	r3, [pc, #384]	; (9cec <main+0x1b4>)
    9b6a:	4798      	blx	r3
	// greeting
	lcdWriteText("GeoDuck!\n1.0");
    9b6c:	4b60      	ldr	r3, [pc, #384]	; (9cf0 <main+0x1b8>)
    9b6e:	0018      	movs	r0, r3
    9b70:	4b60      	ldr	r3, [pc, #384]	; (9cf4 <main+0x1bc>)
    9b72:	4798      	blx	r3

	ledTimer = LED_INTERVAL;
    9b74:	4b60      	ldr	r3, [pc, #384]	; (9cf8 <main+0x1c0>)
    9b76:	22fa      	movs	r2, #250	; 0xfa
    9b78:	0092      	lsls	r2, r2, #2
    9b7a:	601a      	str	r2, [r3, #0]

	// get the USART handle
	usart_sync_get_io_descriptor(&USART_0, &io_USART_0);
    9b7c:	4a5f      	ldr	r2, [pc, #380]	; (9cfc <main+0x1c4>)
    9b7e:	4b60      	ldr	r3, [pc, #384]	; (9d00 <main+0x1c8>)
    9b80:	0011      	movs	r1, r2
    9b82:	0018      	movs	r0, r3
    9b84:	4b5f      	ldr	r3, [pc, #380]	; (9d04 <main+0x1cc>)
    9b86:	4798      	blx	r3
	usart_sync_enable(&USART_0);
    9b88:	4b5d      	ldr	r3, [pc, #372]	; (9d00 <main+0x1c8>)
    9b8a:	0018      	movs	r0, r3
    9b8c:	4b5e      	ldr	r3, [pc, #376]	; (9d08 <main+0x1d0>)
    9b8e:	4798      	blx	r3

	// fire up the GPS
//	gpsUart_Setup();

	// turn on servo power
	gpio_set_pin_level(SERVO_PWREN, true);
    9b90:	2101      	movs	r1, #1
    9b92:	2037      	movs	r0, #55	; 0x37
    9b94:	4b5d      	ldr	r3, [pc, #372]	; (9d0c <main+0x1d4>)
    9b96:	4798      	blx	r3

	// initialize servo pwm
	pwm_set_parameters(&PWM_SERVO, 20000, 1600);
    9b98:	23c8      	movs	r3, #200	; 0xc8
    9b9a:	00da      	lsls	r2, r3, #3
    9b9c:	495c      	ldr	r1, [pc, #368]	; (9d10 <main+0x1d8>)
    9b9e:	4b5d      	ldr	r3, [pc, #372]	; (9d14 <main+0x1dc>)
    9ba0:	0018      	movs	r0, r3
    9ba2:	4b5d      	ldr	r3, [pc, #372]	; (9d18 <main+0x1e0>)
    9ba4:	4798      	blx	r3
	pwm_enable(&PWM_SERVO);
    9ba6:	4b5b      	ldr	r3, [pc, #364]	; (9d14 <main+0x1dc>)
    9ba8:	0018      	movs	r0, r3
    9baa:	4b5c      	ldr	r3, [pc, #368]	; (9d1c <main+0x1e4>)
    9bac:	4798      	blx	r3
	delay_ms(500);
    9bae:	23fa      	movs	r3, #250	; 0xfa
    9bb0:	005b      	lsls	r3, r3, #1
    9bb2:	0018      	movs	r0, r3
    9bb4:	4b5a      	ldr	r3, [pc, #360]	; (9d20 <main+0x1e8>)
    9bb6:	4798      	blx	r3

	pwm_set_parameters(&PWM_SERVO, 20000, 1200);
    9bb8:	2396      	movs	r3, #150	; 0x96
    9bba:	00da      	lsls	r2, r3, #3
    9bbc:	4954      	ldr	r1, [pc, #336]	; (9d10 <main+0x1d8>)
    9bbe:	4b55      	ldr	r3, [pc, #340]	; (9d14 <main+0x1dc>)
    9bc0:	0018      	movs	r0, r3
    9bc2:	4b55      	ldr	r3, [pc, #340]	; (9d18 <main+0x1e0>)
    9bc4:	4798      	blx	r3
	pwm_enable(&PWM_SERVO);
    9bc6:	4b53      	ldr	r3, [pc, #332]	; (9d14 <main+0x1dc>)
    9bc8:	0018      	movs	r0, r3
    9bca:	4b54      	ldr	r3, [pc, #336]	; (9d1c <main+0x1e4>)
    9bcc:	4798      	blx	r3
	delay_ms(500);
    9bce:	23fa      	movs	r3, #250	; 0xfa
    9bd0:	005b      	lsls	r3, r3, #1
    9bd2:	0018      	movs	r0, r3
    9bd4:	4b52      	ldr	r3, [pc, #328]	; (9d20 <main+0x1e8>)
    9bd6:	4798      	blx	r3

	pwm_set_parameters(&PWM_SERVO, 20000, 1400);
    9bd8:	23af      	movs	r3, #175	; 0xaf
    9bda:	00da      	lsls	r2, r3, #3
    9bdc:	494c      	ldr	r1, [pc, #304]	; (9d10 <main+0x1d8>)
    9bde:	4b4d      	ldr	r3, [pc, #308]	; (9d14 <main+0x1dc>)
    9be0:	0018      	movs	r0, r3
    9be2:	4b4d      	ldr	r3, [pc, #308]	; (9d18 <main+0x1e0>)
    9be4:	4798      	blx	r3
	pwm_enable(&PWM_SERVO);
    9be6:	4b4b      	ldr	r3, [pc, #300]	; (9d14 <main+0x1dc>)
    9be8:	0018      	movs	r0, r3
    9bea:	4b4c      	ldr	r3, [pc, #304]	; (9d1c <main+0x1e4>)
    9bec:	4798      	blx	r3

	// turn on motor power - must set all three to HIGH
	gpio_set_pin_level(MOTOR_PWREN, true);
    9bee:	2101      	movs	r1, #1
    9bf0:	2036      	movs	r0, #54	; 0x36
    9bf2:	4b46      	ldr	r3, [pc, #280]	; (9d0c <main+0x1d4>)
    9bf4:	4798      	blx	r3
	gpio_set_pin_level(MOTOR_SLEEP, true);
    9bf6:	2101      	movs	r1, #1
    9bf8:	2012      	movs	r0, #18
    9bfa:	4b44      	ldr	r3, [pc, #272]	; (9d0c <main+0x1d4>)
    9bfc:	4798      	blx	r3
	gpio_set_pin_level(MOTOR_MODE, true);
    9bfe:	2101      	movs	r1, #1
    9c00:	2013      	movs	r0, #19
    9c02:	4b42      	ldr	r3, [pc, #264]	; (9d0c <main+0x1d4>)
    9c04:	4798      	blx	r3
	delay_ms(100);
    9c06:	2064      	movs	r0, #100	; 0x64
    9c08:	4b45      	ldr	r3, [pc, #276]	; (9d20 <main+0x1e8>)
    9c0a:	4798      	blx	r3

	// this manual pulsing works
	int i;
	gpio_set_pin_level(MOTOR_IN2, false);
    9c0c:	2100      	movs	r1, #0
    9c0e:	2011      	movs	r0, #17
    9c10:	4b3e      	ldr	r3, [pc, #248]	; (9d0c <main+0x1d4>)
    9c12:	4798      	blx	r3
	for (i=0; i<500; i++) {
    9c14:	2300      	movs	r3, #0
    9c16:	60fb      	str	r3, [r7, #12]
    9c18:	e012      	b.n	9c40 <main+0x108>
		gpio_set_pin_level(MOTOR_IN1, true);
    9c1a:	2101      	movs	r1, #1
    9c1c:	2010      	movs	r0, #16
    9c1e:	4b3b      	ldr	r3, [pc, #236]	; (9d0c <main+0x1d4>)
    9c20:	4798      	blx	r3
//		gpio_set_pin_level(MOTOR_IN2, false);
		delay_us(1);
    9c22:	2001      	movs	r0, #1
    9c24:	4b3f      	ldr	r3, [pc, #252]	; (9d24 <main+0x1ec>)
    9c26:	4798      	blx	r3
		gpio_set_pin_level(MOTOR_IN1, false);
    9c28:	2100      	movs	r1, #0
    9c2a:	2010      	movs	r0, #16
    9c2c:	4b37      	ldr	r3, [pc, #220]	; (9d0c <main+0x1d4>)
    9c2e:	4798      	blx	r3
//		gpio_set_pin_level(MOTOR_IN2, true);
		delay_us(800);
    9c30:	23c8      	movs	r3, #200	; 0xc8
    9c32:	009b      	lsls	r3, r3, #2
    9c34:	0018      	movs	r0, r3
    9c36:	4b3b      	ldr	r3, [pc, #236]	; (9d24 <main+0x1ec>)
    9c38:	4798      	blx	r3
	for (i=0; i<500; i++) {
    9c3a:	68fb      	ldr	r3, [r7, #12]
    9c3c:	3301      	adds	r3, #1
    9c3e:	60fb      	str	r3, [r7, #12]
    9c40:	68fa      	ldr	r2, [r7, #12]
    9c42:	23f4      	movs	r3, #244	; 0xf4
    9c44:	33ff      	adds	r3, #255	; 0xff
    9c46:	429a      	cmp	r2, r3
    9c48:	dde7      	ble.n	9c1a <main+0xe2>
	pwm_enable(&PWM_MOTOR1);
	delay_ms(500);
#endif

	// clear screen to get ready for application
	lcdClear();
    9c4a:	4b37      	ldr	r3, [pc, #220]	; (9d28 <main+0x1f0>)
    9c4c:	4798      	blx	r3

	// turn on tail light
	gpio_set_pin_level(TAIL_LED, true);
    9c4e:	2101      	movs	r1, #1
    9c50:	2006      	movs	r0, #6
    9c52:	4b2e      	ldr	r3, [pc, #184]	; (9d0c <main+0x1d4>)
    9c54:	4798      	blx	r3

	while (1)	{
		// check for user input
		for (int i=0; i<NUM_BUTTONS; i++) {
    9c56:	2300      	movs	r3, #0
    9c58:	60bb      	str	r3, [r7, #8]
    9c5a:	e02c      	b.n	9cb6 <main+0x17e>
			bool newButtonState;

			if (readswitch(i, &newButtonState)) {
    9c5c:	68bb      	ldr	r3, [r7, #8]
    9c5e:	b2db      	uxtb	r3, r3
    9c60:	1dfa      	adds	r2, r7, #7
    9c62:	0011      	movs	r1, r2
    9c64:	0018      	movs	r0, r3
    9c66:	4b31      	ldr	r3, [pc, #196]	; (9d2c <main+0x1f4>)
    9c68:	4798      	blx	r3
    9c6a:	1e03      	subs	r3, r0, #0
    9c6c:	d020      	beq.n	9cb0 <main+0x178>
				if (!newButtonState)
    9c6e:	1dfb      	adds	r3, r7, #7
    9c70:	781b      	ldrb	r3, [r3, #0]
    9c72:	2201      	movs	r2, #1
    9c74:	4053      	eors	r3, r2
    9c76:	b2db      	uxtb	r3, r3
    9c78:	2b00      	cmp	r3, #0
    9c7a:	d00e      	beq.n	9c9a <main+0x162>
					lcdWriteCharPos(('0'+i), 1, 1+2*i);
    9c7c:	68bb      	ldr	r3, [r7, #8]
    9c7e:	b2db      	uxtb	r3, r3
    9c80:	3330      	adds	r3, #48	; 0x30
    9c82:	b2d8      	uxtb	r0, r3
    9c84:	68bb      	ldr	r3, [r7, #8]
    9c86:	b2db      	uxtb	r3, r3
    9c88:	18db      	adds	r3, r3, r3
    9c8a:	b2db      	uxtb	r3, r3
    9c8c:	3301      	adds	r3, #1
    9c8e:	b2db      	uxtb	r3, r3
    9c90:	001a      	movs	r2, r3
    9c92:	2101      	movs	r1, #1
    9c94:	4b26      	ldr	r3, [pc, #152]	; (9d30 <main+0x1f8>)
    9c96:	4798      	blx	r3
    9c98:	e00a      	b.n	9cb0 <main+0x178>
				else
					lcdWriteCharPos(' ', 1, 1+2*i);
    9c9a:	68bb      	ldr	r3, [r7, #8]
    9c9c:	b2db      	uxtb	r3, r3
    9c9e:	18db      	adds	r3, r3, r3
    9ca0:	b2db      	uxtb	r3, r3
    9ca2:	3301      	adds	r3, #1
    9ca4:	b2db      	uxtb	r3, r3
    9ca6:	001a      	movs	r2, r3
    9ca8:	2101      	movs	r1, #1
    9caa:	2020      	movs	r0, #32
    9cac:	4b20      	ldr	r3, [pc, #128]	; (9d30 <main+0x1f8>)
    9cae:	4798      	blx	r3
		for (int i=0; i<NUM_BUTTONS; i++) {
    9cb0:	68bb      	ldr	r3, [r7, #8]
    9cb2:	3301      	adds	r3, #1
    9cb4:	60bb      	str	r3, [r7, #8]
    9cb6:	68bb      	ldr	r3, [r7, #8]
    9cb8:	2b03      	cmp	r3, #3
    9cba:	ddcf      	ble.n	9c5c <main+0x124>
			} // if
		} // for

		if (ledTimer == 0) {
    9cbc:	4b0e      	ldr	r3, [pc, #56]	; (9cf8 <main+0x1c0>)
    9cbe:	681b      	ldr	r3, [r3, #0]
    9cc0:	2b00      	cmp	r3, #0
    9cc2:	d1c8      	bne.n	9c56 <main+0x11e>
			ledTimer = LED_INTERVAL;
    9cc4:	4b0c      	ldr	r3, [pc, #48]	; (9cf8 <main+0x1c0>)
    9cc6:	22fa      	movs	r2, #250	; 0xfa
    9cc8:	0092      	lsls	r2, r2, #2
    9cca:	601a      	str	r2, [r3, #0]
			gpio_toggle_pin_level(LED_RED);
    9ccc:	2023      	movs	r0, #35	; 0x23
    9cce:	4b19      	ldr	r3, [pc, #100]	; (9d34 <main+0x1fc>)
    9cd0:	4798      	blx	r3
		for (int i=0; i<NUM_BUTTONS; i++) {
    9cd2:	e7c0      	b.n	9c56 <main+0x11e>
    9cd4:	00000115 	.word	0x00000115
    9cd8:	2000062c 	.word	0x2000062c
    9cdc:	00009d39 	.word	0x00009d39
    9ce0:	200005c0 	.word	0x200005c0
    9ce4:	00001d4d 	.word	0x00001d4d
    9ce8:	00001cfd 	.word	0x00001cfd
    9cec:	0000991d 	.word	0x0000991d
    9cf0:	0000c4a4 	.word	0x0000c4a4
    9cf4:	00009881 	.word	0x00009881
    9cf8:	20000628 	.word	0x20000628
    9cfc:	20000668 	.word	0x20000668
    9d00:	20000594 	.word	0x20000594
    9d04:	00002085 	.word	0x00002085
    9d08:	00002049 	.word	0x00002049
    9d0c:	00009ac5 	.word	0x00009ac5
    9d10:	00004e20 	.word	0x00004e20
    9d14:	20000560 	.word	0x20000560
    9d18:	00001a15 	.word	0x00001a15
    9d1c:	000019c5 	.word	0x000019c5
    9d20:	000016b9 	.word	0x000016b9
    9d24:	00001681 	.word	0x00001681
    9d28:	000097f9 	.word	0x000097f9
    9d2c:	00009ea1 	.word	0x00009ea1
    9d30:	000098d5 	.word	0x000098d5
    9d34:	00009b05 	.word	0x00009b05

00009d38 <TIMER_0_task1_cb>:
	} // while
}	// main

// timer task runs every ms
void TIMER_0_task1_cb(const struct timer_task *const timer_task)
{
    9d38:	b580      	push	{r7, lr}
    9d3a:	b082      	sub	sp, #8
    9d3c:	af00      	add	r7, sp, #0
    9d3e:	6078      	str	r0, [r7, #4]
	debounceTimer++;
    9d40:	4b08      	ldr	r3, [pc, #32]	; (9d64 <TIMER_0_task1_cb+0x2c>)
    9d42:	681b      	ldr	r3, [r3, #0]
    9d44:	1c5a      	adds	r2, r3, #1
    9d46:	4b07      	ldr	r3, [pc, #28]	; (9d64 <TIMER_0_task1_cb+0x2c>)
    9d48:	601a      	str	r2, [r3, #0]
	if (ledTimer != 0) --ledTimer;
    9d4a:	4b07      	ldr	r3, [pc, #28]	; (9d68 <TIMER_0_task1_cb+0x30>)
    9d4c:	681b      	ldr	r3, [r3, #0]
    9d4e:	2b00      	cmp	r3, #0
    9d50:	d004      	beq.n	9d5c <TIMER_0_task1_cb+0x24>
    9d52:	4b05      	ldr	r3, [pc, #20]	; (9d68 <TIMER_0_task1_cb+0x30>)
    9d54:	681b      	ldr	r3, [r3, #0]
    9d56:	1e5a      	subs	r2, r3, #1
    9d58:	4b03      	ldr	r3, [pc, #12]	; (9d68 <TIMER_0_task1_cb+0x30>)
    9d5a:	601a      	str	r2, [r3, #0]
}
    9d5c:	46c0      	nop			; (mov r8, r8)
    9d5e:	46bd      	mov	sp, r7
    9d60:	b002      	add	sp, #8
    9d62:	bd80      	pop	{r7, pc}
    9d64:	200005dc 	.word	0x200005dc
    9d68:	20000628 	.word	0x20000628

00009d6c <hri_port_read_DIR_reg>:
{
    9d6c:	b580      	push	{r7, lr}
    9d6e:	b082      	sub	sp, #8
    9d70:	af00      	add	r7, sp, #0
    9d72:	6078      	str	r0, [r7, #4]
    9d74:	000a      	movs	r2, r1
    9d76:	1cfb      	adds	r3, r7, #3
    9d78:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    9d7a:	1cfb      	adds	r3, r7, #3
    9d7c:	781a      	ldrb	r2, [r3, #0]
    9d7e:	687b      	ldr	r3, [r7, #4]
    9d80:	01d2      	lsls	r2, r2, #7
    9d82:	58d3      	ldr	r3, [r2, r3]
}
    9d84:	0018      	movs	r0, r3
    9d86:	46bd      	mov	sp, r7
    9d88:	b002      	add	sp, #8
    9d8a:	bd80      	pop	{r7, pc}

00009d8c <hri_port_read_OUT_reg>:
{
    9d8c:	b580      	push	{r7, lr}
    9d8e:	b082      	sub	sp, #8
    9d90:	af00      	add	r7, sp, #0
    9d92:	6078      	str	r0, [r7, #4]
    9d94:	000a      	movs	r2, r1
    9d96:	1cfb      	adds	r3, r7, #3
    9d98:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    9d9a:	1cfb      	adds	r3, r7, #3
    9d9c:	781b      	ldrb	r3, [r3, #0]
    9d9e:	687a      	ldr	r2, [r7, #4]
    9da0:	01db      	lsls	r3, r3, #7
    9da2:	18d3      	adds	r3, r2, r3
    9da4:	3310      	adds	r3, #16
    9da6:	681b      	ldr	r3, [r3, #0]
}
    9da8:	0018      	movs	r0, r3
    9daa:	46bd      	mov	sp, r7
    9dac:	b002      	add	sp, #8
    9dae:	bd80      	pop	{r7, pc}

00009db0 <hri_port_read_IN_reg>:
{
    9db0:	b580      	push	{r7, lr}
    9db2:	b082      	sub	sp, #8
    9db4:	af00      	add	r7, sp, #0
    9db6:	6078      	str	r0, [r7, #4]
    9db8:	000a      	movs	r2, r1
    9dba:	1cfb      	adds	r3, r7, #3
    9dbc:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    9dbe:	1cfb      	adds	r3, r7, #3
    9dc0:	781b      	ldrb	r3, [r3, #0]
    9dc2:	687a      	ldr	r2, [r7, #4]
    9dc4:	01db      	lsls	r3, r3, #7
    9dc6:	18d3      	adds	r3, r2, r3
    9dc8:	3320      	adds	r3, #32
    9dca:	681b      	ldr	r3, [r3, #0]
}
    9dcc:	0018      	movs	r0, r3
    9dce:	46bd      	mov	sp, r7
    9dd0:	b002      	add	sp, #8
    9dd2:	bd80      	pop	{r7, pc}

00009dd4 <_gpio_get_level>:
{
    9dd4:	b580      	push	{r7, lr}
    9dd6:	b086      	sub	sp, #24
    9dd8:	af00      	add	r7, sp, #0
    9dda:	0002      	movs	r2, r0
    9ddc:	1dfb      	adds	r3, r7, #7
    9dde:	701a      	strb	r2, [r3, #0]
	CRITICAL_SECTION_ENTER();
    9de0:	230c      	movs	r3, #12
    9de2:	18fb      	adds	r3, r7, r3
    9de4:	0018      	movs	r0, r3
    9de6:	4b18      	ldr	r3, [pc, #96]	; (9e48 <_gpio_get_level+0x74>)
    9de8:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);
    9dea:	1dfb      	adds	r3, r7, #7
    9dec:	781a      	ldrb	r2, [r3, #0]
    9dee:	23c0      	movs	r3, #192	; 0xc0
    9df0:	05db      	lsls	r3, r3, #23
    9df2:	0011      	movs	r1, r2
    9df4:	0018      	movs	r0, r3
    9df6:	4b15      	ldr	r3, [pc, #84]	; (9e4c <_gpio_get_level+0x78>)
    9df8:	4798      	blx	r3
    9dfa:	0003      	movs	r3, r0
    9dfc:	617b      	str	r3, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    9dfe:	1dfb      	adds	r3, r7, #7
    9e00:	781b      	ldrb	r3, [r3, #0]
    9e02:	4a13      	ldr	r2, [pc, #76]	; (9e50 <_gpio_get_level+0x7c>)
    9e04:	0019      	movs	r1, r3
    9e06:	0010      	movs	r0, r2
    9e08:	4b12      	ldr	r3, [pc, #72]	; (9e54 <_gpio_get_level+0x80>)
    9e0a:	4798      	blx	r3
    9e0c:	0002      	movs	r2, r0
    9e0e:	697b      	ldr	r3, [r7, #20]
    9e10:	43db      	mvns	r3, r3
    9e12:	4013      	ands	r3, r2
    9e14:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    9e16:	1dfb      	adds	r3, r7, #7
    9e18:	781a      	ldrb	r2, [r3, #0]
    9e1a:	23c0      	movs	r3, #192	; 0xc0
    9e1c:	05db      	lsls	r3, r3, #23
    9e1e:	0011      	movs	r1, r2
    9e20:	0018      	movs	r0, r3
    9e22:	4b0d      	ldr	r3, [pc, #52]	; (9e58 <_gpio_get_level+0x84>)
    9e24:	4798      	blx	r3
    9e26:	0002      	movs	r2, r0
    9e28:	697b      	ldr	r3, [r7, #20]
    9e2a:	4013      	ands	r3, r2
    9e2c:	693a      	ldr	r2, [r7, #16]
    9e2e:	4313      	orrs	r3, r2
    9e30:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
    9e32:	230c      	movs	r3, #12
    9e34:	18fb      	adds	r3, r7, r3
    9e36:	0018      	movs	r0, r3
    9e38:	4b08      	ldr	r3, [pc, #32]	; (9e5c <_gpio_get_level+0x88>)
    9e3a:	4798      	blx	r3
	return tmp;
    9e3c:	693b      	ldr	r3, [r7, #16]
}
    9e3e:	0018      	movs	r0, r3
    9e40:	46bd      	mov	sp, r7
    9e42:	b006      	add	sp, #24
    9e44:	bd80      	pop	{r7, pc}
    9e46:	46c0      	nop			; (mov r8, r8)
    9e48:	00001615 	.word	0x00001615
    9e4c:	00009d6d 	.word	0x00009d6d
    9e50:	41004400 	.word	0x41004400
    9e54:	00009db1 	.word	0x00009db1
    9e58:	00009d8d 	.word	0x00009d8d
    9e5c:	00001637 	.word	0x00001637

00009e60 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    9e60:	b580      	push	{r7, lr}
    9e62:	b082      	sub	sp, #8
    9e64:	af00      	add	r7, sp, #0
    9e66:	0002      	movs	r2, r0
    9e68:	1dfb      	adds	r3, r7, #7
    9e6a:	701a      	strb	r2, [r3, #0]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    9e6c:	1dfb      	adds	r3, r7, #7
    9e6e:	781b      	ldrb	r3, [r3, #0]
    9e70:	095b      	lsrs	r3, r3, #5
    9e72:	b2db      	uxtb	r3, r3
    9e74:	0018      	movs	r0, r3
    9e76:	4b09      	ldr	r3, [pc, #36]	; (9e9c <gpio_get_pin_level+0x3c>)
    9e78:	4798      	blx	r3
    9e7a:	0001      	movs	r1, r0
    9e7c:	1dfb      	adds	r3, r7, #7
    9e7e:	781b      	ldrb	r3, [r3, #0]
    9e80:	221f      	movs	r2, #31
    9e82:	4013      	ands	r3, r2
    9e84:	2201      	movs	r2, #1
    9e86:	409a      	lsls	r2, r3
    9e88:	0013      	movs	r3, r2
    9e8a:	400b      	ands	r3, r1
    9e8c:	1e5a      	subs	r2, r3, #1
    9e8e:	4193      	sbcs	r3, r2
    9e90:	b2db      	uxtb	r3, r3
}
    9e92:	0018      	movs	r0, r3
    9e94:	46bd      	mov	sp, r7
    9e96:	b002      	add	sp, #8
    9e98:	bd80      	pop	{r7, pc}
    9e9a:	46c0      	nop			; (mov r8, r8)
    9e9c:	00009dd5 	.word	0x00009dd5

00009ea0 <readswitch>:
} buttonUnionType;

// reads and debounces a momentary switch
// returns true if switch has changed
// also returns the current state as a variable
bool readswitch(uint8_t buttonPin, bool *current_state) {
    9ea0:	b590      	push	{r4, r7, lr}
    9ea2:	b087      	sub	sp, #28
    9ea4:	af00      	add	r7, sp, #0
    9ea6:	0002      	movs	r2, r0
    9ea8:	6039      	str	r1, [r7, #0]
    9eaa:	1dfb      	adds	r3, r7, #7
    9eac:	701a      	strb	r2, [r3, #0]
	static bool initialized = false;
	static buttonUnionType buttonUnion[NUM_BUTTONS];
	const unsigned long debounceDelay = 50;    // the debounce time in ms; increase if the output flickers
    9eae:	2332      	movs	r3, #50	; 0x32
    9eb0:	613b      	str	r3, [r7, #16]
	bool reading;
	bool changed = false;
    9eb2:	230f      	movs	r3, #15
    9eb4:	18fb      	adds	r3, r7, r3
    9eb6:	2200      	movs	r2, #0
    9eb8:	701a      	strb	r2, [r3, #0]

	if (!initialized) {
    9eba:	4b74      	ldr	r3, [pc, #464]	; (a08c <readswitch+0x1ec>)
    9ebc:	781b      	ldrb	r3, [r3, #0]
    9ebe:	2201      	movs	r2, #1
    9ec0:	4053      	eors	r3, r2
    9ec2:	b2db      	uxtb	r3, r3
    9ec4:	2b00      	cmp	r3, #0
    9ec6:	d035      	beq.n	9f34 <readswitch+0x94>
		// initialize
		buttonUnion[LCD_BUTTON_L].whichButton = UI_BUTTON1;
    9ec8:	4b71      	ldr	r3, [pc, #452]	; (a090 <readswitch+0x1f0>)
    9eca:	2224      	movs	r2, #36	; 0x24
    9ecc:	601a      	str	r2, [r3, #0]
		buttonUnion[LCD_BUTTON_M].whichButton = UI_BUTTON2;
    9ece:	4b70      	ldr	r3, [pc, #448]	; (a090 <readswitch+0x1f0>)
    9ed0:	2225      	movs	r2, #37	; 0x25
    9ed2:	60da      	str	r2, [r3, #12]
		buttonUnion[LCD_BUTTON_R].whichButton = UI_BUTTON3;
    9ed4:	4b6e      	ldr	r3, [pc, #440]	; (a090 <readswitch+0x1f0>)
    9ed6:	2226      	movs	r2, #38	; 0x26
    9ed8:	619a      	str	r2, [r3, #24]
		buttonUnion[GO_BUTTON].whichButton = BUTTON;
    9eda:	4b6d      	ldr	r3, [pc, #436]	; (a090 <readswitch+0x1f0>)
    9edc:	2205      	movs	r2, #5
    9ede:	625a      	str	r2, [r3, #36]	; 0x24

		for (int i=0; i<NUM_BUTTONS; i++) {
    9ee0:	2300      	movs	r3, #0
    9ee2:	617b      	str	r3, [r7, #20]
    9ee4:	e020      	b.n	9f28 <readswitch+0x88>
			buttonUnion[i].buttonState = true;
    9ee6:	496a      	ldr	r1, [pc, #424]	; (a090 <readswitch+0x1f0>)
    9ee8:	697a      	ldr	r2, [r7, #20]
    9eea:	0013      	movs	r3, r2
    9eec:	005b      	lsls	r3, r3, #1
    9eee:	189b      	adds	r3, r3, r2
    9ef0:	009b      	lsls	r3, r3, #2
    9ef2:	18cb      	adds	r3, r1, r3
    9ef4:	3304      	adds	r3, #4
    9ef6:	2201      	movs	r2, #1
    9ef8:	701a      	strb	r2, [r3, #0]
			buttonUnion[i].lastButtonState = true;
    9efa:	4965      	ldr	r1, [pc, #404]	; (a090 <readswitch+0x1f0>)
    9efc:	697a      	ldr	r2, [r7, #20]
    9efe:	0013      	movs	r3, r2
    9f00:	005b      	lsls	r3, r3, #1
    9f02:	189b      	adds	r3, r3, r2
    9f04:	009b      	lsls	r3, r3, #2
    9f06:	18cb      	adds	r3, r1, r3
    9f08:	3305      	adds	r3, #5
    9f0a:	2201      	movs	r2, #1
    9f0c:	701a      	strb	r2, [r3, #0]
			buttonUnion[i].lastDebounceTime = 0;
    9f0e:	4960      	ldr	r1, [pc, #384]	; (a090 <readswitch+0x1f0>)
    9f10:	697a      	ldr	r2, [r7, #20]
    9f12:	0013      	movs	r3, r2
    9f14:	005b      	lsls	r3, r3, #1
    9f16:	189b      	adds	r3, r3, r2
    9f18:	009b      	lsls	r3, r3, #2
    9f1a:	18cb      	adds	r3, r1, r3
    9f1c:	3308      	adds	r3, #8
    9f1e:	2200      	movs	r2, #0
    9f20:	601a      	str	r2, [r3, #0]
		for (int i=0; i<NUM_BUTTONS; i++) {
    9f22:	697b      	ldr	r3, [r7, #20]
    9f24:	3301      	adds	r3, #1
    9f26:	617b      	str	r3, [r7, #20]
    9f28:	697b      	ldr	r3, [r7, #20]
    9f2a:	2b03      	cmp	r3, #3
    9f2c:	dddb      	ble.n	9ee6 <readswitch+0x46>
		} // for

		initialized = true;
    9f2e:	4b57      	ldr	r3, [pc, #348]	; (a08c <readswitch+0x1ec>)
    9f30:	2201      	movs	r2, #1
    9f32:	701a      	strb	r2, [r3, #0]
	}

	// save the official state right now
	*current_state = buttonUnion[buttonPin].buttonState;
    9f34:	1dfb      	adds	r3, r7, #7
    9f36:	781a      	ldrb	r2, [r3, #0]
    9f38:	4955      	ldr	r1, [pc, #340]	; (a090 <readswitch+0x1f0>)
    9f3a:	0013      	movs	r3, r2
    9f3c:	005b      	lsls	r3, r3, #1
    9f3e:	189b      	adds	r3, r3, r2
    9f40:	009b      	lsls	r3, r3, #2
    9f42:	18cb      	adds	r3, r1, r3
    9f44:	3304      	adds	r3, #4
    9f46:	781a      	ldrb	r2, [r3, #0]
    9f48:	683b      	ldr	r3, [r7, #0]
    9f4a:	701a      	strb	r2, [r3, #0]

	// read the state of the switch
	reading = gpio_get_pin_level(buttonUnion[buttonPin].whichButton);
    9f4c:	1dfb      	adds	r3, r7, #7
    9f4e:	781a      	ldrb	r2, [r3, #0]
    9f50:	494f      	ldr	r1, [pc, #316]	; (a090 <readswitch+0x1f0>)
    9f52:	0013      	movs	r3, r2
    9f54:	005b      	lsls	r3, r3, #1
    9f56:	189b      	adds	r3, r3, r2
    9f58:	009b      	lsls	r3, r3, #2
    9f5a:	585b      	ldr	r3, [r3, r1]
    9f5c:	b2db      	uxtb	r3, r3
    9f5e:	220e      	movs	r2, #14
    9f60:	18bc      	adds	r4, r7, r2
    9f62:	0018      	movs	r0, r3
    9f64:	4b4b      	ldr	r3, [pc, #300]	; (a094 <readswitch+0x1f4>)
    9f66:	4798      	blx	r3
    9f68:	0003      	movs	r3, r0
    9f6a:	7023      	strb	r3, [r4, #0]

#if VERBOSE
	if (false == reading) {
    9f6c:	230e      	movs	r3, #14
    9f6e:	18fb      	adds	r3, r7, r3
    9f70:	781b      	ldrb	r3, [r3, #0]
    9f72:	2201      	movs	r2, #1
    9f74:	4053      	eors	r3, r2
    9f76:	b2db      	uxtb	r3, r3
    9f78:	2b00      	cmp	r3, #0
    9f7a:	d010      	beq.n	9f9e <readswitch+0xfe>
		sprintf(textline, "pressed %d\r\n", buttonPin);
    9f7c:	1dfb      	adds	r3, r7, #7
    9f7e:	781a      	ldrb	r2, [r3, #0]
    9f80:	4945      	ldr	r1, [pc, #276]	; (a098 <readswitch+0x1f8>)
    9f82:	4b46      	ldr	r3, [pc, #280]	; (a09c <readswitch+0x1fc>)
    9f84:	0018      	movs	r0, r3
    9f86:	4b46      	ldr	r3, [pc, #280]	; (a0a0 <readswitch+0x200>)
    9f88:	4798      	blx	r3
		USB_PRINT(textline);
    9f8a:	4b44      	ldr	r3, [pc, #272]	; (a09c <readswitch+0x1fc>)
    9f8c:	0018      	movs	r0, r3
    9f8e:	4b45      	ldr	r3, [pc, #276]	; (a0a4 <readswitch+0x204>)
    9f90:	4798      	blx	r3
    9f92:	0002      	movs	r2, r0
    9f94:	4b41      	ldr	r3, [pc, #260]	; (a09c <readswitch+0x1fc>)
    9f96:	0011      	movs	r1, r2
    9f98:	0018      	movs	r0, r3
    9f9a:	4b43      	ldr	r3, [pc, #268]	; (a0a8 <readswitch+0x208>)
    9f9c:	4798      	blx	r3
	// check to see if you just pressed the button
	// (i.e. the input went from LOW to HIGH), and you've waited long enough
	// since the last press to ignore any noise:

	// If the switch changed, due to noise or pressing:
	if (reading != buttonUnion[buttonPin].lastButtonState) {
    9f9e:	1dfb      	adds	r3, r7, #7
    9fa0:	781a      	ldrb	r2, [r3, #0]
    9fa2:	493b      	ldr	r1, [pc, #236]	; (a090 <readswitch+0x1f0>)
    9fa4:	0013      	movs	r3, r2
    9fa6:	005b      	lsls	r3, r3, #1
    9fa8:	189b      	adds	r3, r3, r2
    9faa:	009b      	lsls	r3, r3, #2
    9fac:	18cb      	adds	r3, r1, r3
    9fae:	3305      	adds	r3, #5
    9fb0:	781b      	ldrb	r3, [r3, #0]
    9fb2:	220e      	movs	r2, #14
    9fb4:	18ba      	adds	r2, r7, r2
    9fb6:	7812      	ldrb	r2, [r2, #0]
    9fb8:	429a      	cmp	r2, r3
    9fba:	d00b      	beq.n	9fd4 <readswitch+0x134>
		// reset the debouncing timer
		buttonUnion[buttonPin].lastDebounceTime = debounceTimer;
    9fbc:	1dfb      	adds	r3, r7, #7
    9fbe:	781a      	ldrb	r2, [r3, #0]
    9fc0:	4b3a      	ldr	r3, [pc, #232]	; (a0ac <readswitch+0x20c>)
    9fc2:	6819      	ldr	r1, [r3, #0]
    9fc4:	4832      	ldr	r0, [pc, #200]	; (a090 <readswitch+0x1f0>)
    9fc6:	0013      	movs	r3, r2
    9fc8:	005b      	lsls	r3, r3, #1
    9fca:	189b      	adds	r3, r3, r2
    9fcc:	009b      	lsls	r3, r3, #2
    9fce:	18c3      	adds	r3, r0, r3
    9fd0:	3308      	adds	r3, #8
    9fd2:	6019      	str	r1, [r3, #0]
	}

	if ((debounceTimer - buttonUnion[buttonPin].lastDebounceTime) > debounceDelay) {
    9fd4:	4b35      	ldr	r3, [pc, #212]	; (a0ac <readswitch+0x20c>)
    9fd6:	6819      	ldr	r1, [r3, #0]
    9fd8:	1dfb      	adds	r3, r7, #7
    9fda:	781a      	ldrb	r2, [r3, #0]
    9fdc:	482c      	ldr	r0, [pc, #176]	; (a090 <readswitch+0x1f0>)
    9fde:	0013      	movs	r3, r2
    9fe0:	005b      	lsls	r3, r3, #1
    9fe2:	189b      	adds	r3, r3, r2
    9fe4:	009b      	lsls	r3, r3, #2
    9fe6:	18c3      	adds	r3, r0, r3
    9fe8:	3308      	adds	r3, #8
    9fea:	681b      	ldr	r3, [r3, #0]
    9fec:	1aca      	subs	r2, r1, r3
    9fee:	693b      	ldr	r3, [r7, #16]
    9ff0:	429a      	cmp	r2, r3
    9ff2:	d918      	bls.n	a026 <readswitch+0x186>
		// whatever the reading is at, it's been there for longer than the debounce
		// delay, so take it as the new official state
		buttonUnion[buttonPin].lastDebounceTime = debounceTimer;
    9ff4:	1dfb      	adds	r3, r7, #7
    9ff6:	781a      	ldrb	r2, [r3, #0]
    9ff8:	4b2c      	ldr	r3, [pc, #176]	; (a0ac <readswitch+0x20c>)
    9ffa:	6819      	ldr	r1, [r3, #0]
    9ffc:	4824      	ldr	r0, [pc, #144]	; (a090 <readswitch+0x1f0>)
    9ffe:	0013      	movs	r3, r2
    a000:	005b      	lsls	r3, r3, #1
    a002:	189b      	adds	r3, r3, r2
    a004:	009b      	lsls	r3, r3, #2
    a006:	18c3      	adds	r3, r0, r3
    a008:	3308      	adds	r3, #8
    a00a:	6019      	str	r1, [r3, #0]
		buttonUnion[buttonPin].buttonState = reading;
    a00c:	1dfb      	adds	r3, r7, #7
    a00e:	781a      	ldrb	r2, [r3, #0]
    a010:	491f      	ldr	r1, [pc, #124]	; (a090 <readswitch+0x1f0>)
    a012:	0013      	movs	r3, r2
    a014:	005b      	lsls	r3, r3, #1
    a016:	189b      	adds	r3, r3, r2
    a018:	009b      	lsls	r3, r3, #2
    a01a:	18cb      	adds	r3, r1, r3
    a01c:	3304      	adds	r3, #4
    a01e:	220e      	movs	r2, #14
    a020:	18ba      	adds	r2, r7, r2
    a022:	7812      	ldrb	r2, [r2, #0]
    a024:	701a      	strb	r2, [r3, #0]
	}

	// compare saved buttonState with new official buttonState
	changed = *current_state != buttonUnion[buttonPin].buttonState;
    a026:	683b      	ldr	r3, [r7, #0]
    a028:	7819      	ldrb	r1, [r3, #0]
    a02a:	1dfb      	adds	r3, r7, #7
    a02c:	781a      	ldrb	r2, [r3, #0]
    a02e:	4818      	ldr	r0, [pc, #96]	; (a090 <readswitch+0x1f0>)
    a030:	0013      	movs	r3, r2
    a032:	005b      	lsls	r3, r3, #1
    a034:	189b      	adds	r3, r3, r2
    a036:	009b      	lsls	r3, r3, #2
    a038:	18c3      	adds	r3, r0, r3
    a03a:	3304      	adds	r3, #4
    a03c:	781a      	ldrb	r2, [r3, #0]
    a03e:	230f      	movs	r3, #15
    a040:	18fb      	adds	r3, r7, r3
    a042:	1a8a      	subs	r2, r1, r2
    a044:	1e51      	subs	r1, r2, #1
    a046:	418a      	sbcs	r2, r1
    a048:	701a      	strb	r2, [r3, #0]

	// assign the new official buttonState
	*current_state = buttonUnion[buttonPin].buttonState;
    a04a:	1dfb      	adds	r3, r7, #7
    a04c:	781a      	ldrb	r2, [r3, #0]
    a04e:	4910      	ldr	r1, [pc, #64]	; (a090 <readswitch+0x1f0>)
    a050:	0013      	movs	r3, r2
    a052:	005b      	lsls	r3, r3, #1
    a054:	189b      	adds	r3, r3, r2
    a056:	009b      	lsls	r3, r3, #2
    a058:	18cb      	adds	r3, r1, r3
    a05a:	3304      	adds	r3, #4
    a05c:	781a      	ldrb	r2, [r3, #0]
    a05e:	683b      	ldr	r3, [r7, #0]
    a060:	701a      	strb	r2, [r3, #0]

	// save the reading. Next time through the loop, it'll be the lastButtonState
	buttonUnion[buttonPin].lastButtonState = reading;
    a062:	1dfb      	adds	r3, r7, #7
    a064:	781a      	ldrb	r2, [r3, #0]
    a066:	490a      	ldr	r1, [pc, #40]	; (a090 <readswitch+0x1f0>)
    a068:	0013      	movs	r3, r2
    a06a:	005b      	lsls	r3, r3, #1
    a06c:	189b      	adds	r3, r3, r2
    a06e:	009b      	lsls	r3, r3, #2
    a070:	18cb      	adds	r3, r1, r3
    a072:	3305      	adds	r3, #5
    a074:	220e      	movs	r2, #14
    a076:	18ba      	adds	r2, r7, r2
    a078:	7812      	ldrb	r2, [r2, #0]
    a07a:	701a      	strb	r2, [r3, #0]

	return (changed);
    a07c:	230f      	movs	r3, #15
    a07e:	18fb      	adds	r3, r7, r3
    a080:	781b      	ldrb	r3, [r3, #0]
}
    a082:	0018      	movs	r0, r3
    a084:	46bd      	mov	sp, r7
    a086:	b007      	add	sp, #28
    a088:	bd90      	pop	{r4, r7, pc}
    a08a:	46c0      	nop			; (mov r8, r8)
    a08c:	20000408 	.word	0x20000408
    a090:	2000040c 	.word	0x2000040c
    a094:	00009e61 	.word	0x00009e61
    a098:	0000c4b4 	.word	0x0000c4b4
    a09c:	20000640 	.word	0x20000640
    a0a0:	0000ba69 	.word	0x0000ba69
    a0a4:	0000baad 	.word	0x0000baad
    a0a8:	0000a681 	.word	0x0000a681
    a0ac:	200005dc 	.word	0x200005dc

0000a0b0 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    a0b0:	b580      	push	{r7, lr}
    a0b2:	b082      	sub	sp, #8
    a0b4:	af00      	add	r7, sp, #0
    a0b6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    a0b8:	687b      	ldr	r3, [r7, #4]
    a0ba:	781b      	ldrb	r3, [r3, #0]
    a0bc:	b29a      	uxth	r2, r3
    a0be:	687b      	ldr	r3, [r7, #4]
    a0c0:	3301      	adds	r3, #1
    a0c2:	781b      	ldrb	r3, [r3, #0]
    a0c4:	b29b      	uxth	r3, r3
    a0c6:	021b      	lsls	r3, r3, #8
    a0c8:	b29b      	uxth	r3, r3
    a0ca:	18d3      	adds	r3, r2, r3
    a0cc:	b29b      	uxth	r3, r3
}
    a0ce:	0018      	movs	r0, r3
    a0d0:	46bd      	mov	sp, r7
    a0d2:	b002      	add	sp, #8
    a0d4:	bd80      	pop	{r7, pc}

0000a0d6 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    a0d6:	b580      	push	{r7, lr}
    a0d8:	b082      	sub	sp, #8
    a0da:	af00      	add	r7, sp, #0
    a0dc:	6078      	str	r0, [r7, #4]
	return desc[0];
    a0de:	687b      	ldr	r3, [r7, #4]
    a0e0:	781b      	ldrb	r3, [r3, #0]
}
    a0e2:	0018      	movs	r0, r3
    a0e4:	46bd      	mov	sp, r7
    a0e6:	b002      	add	sp, #8
    a0e8:	bd80      	pop	{r7, pc}
	...

0000a0ec <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    a0ec:	b580      	push	{r7, lr}
    a0ee:	b082      	sub	sp, #8
    a0f0:	af00      	add	r7, sp, #0
    a0f2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    a0f4:	687b      	ldr	r3, [r7, #4]
    a0f6:	0018      	movs	r0, r3
    a0f8:	4b04      	ldr	r3, [pc, #16]	; (a10c <usb_desc_next+0x20>)
    a0fa:	4798      	blx	r3
    a0fc:	0003      	movs	r3, r0
    a0fe:	001a      	movs	r2, r3
    a100:	687b      	ldr	r3, [r7, #4]
    a102:	189b      	adds	r3, r3, r2
}
    a104:	0018      	movs	r0, r3
    a106:	46bd      	mov	sp, r7
    a108:	b002      	add	sp, #8
    a10a:	bd80      	pop	{r7, pc}
    a10c:	0000a0d7 	.word	0x0000a0d7

0000a110 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    a110:	b580      	push	{r7, lr}
    a112:	b08c      	sub	sp, #48	; 0x30
    a114:	af00      	add	r7, sp, #0
    a116:	6078      	str	r0, [r7, #4]
    a118:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    a11a:	687b      	ldr	r3, [r7, #4]
    a11c:	689b      	ldr	r3, [r3, #8]
    a11e:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    a120:	683b      	ldr	r3, [r7, #0]
    a122:	681b      	ldr	r3, [r3, #0]
    a124:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    a126:	2327      	movs	r3, #39	; 0x27
    a128:	18fb      	adds	r3, r7, r3
    a12a:	2200      	movs	r2, #0
    a12c:	701a      	strb	r2, [r3, #0]
    a12e:	e0b7      	b.n	a2a0 <cdcdf_acm_enable+0x190>
		if (NULL == ifc) {
    a130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a132:	2b00      	cmp	r3, #0
    a134:	d102      	bne.n	a13c <cdcdf_acm_enable+0x2c>
			return ERR_NOT_FOUND;
    a136:	230a      	movs	r3, #10
    a138:	425b      	negs	r3, r3
    a13a:	e0bb      	b.n	a2b4 <cdcdf_acm_enable+0x1a4>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    a13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a13e:	789a      	ldrb	r2, [r3, #2]
    a140:	230c      	movs	r3, #12
    a142:	18fb      	adds	r3, r7, r3
    a144:	709a      	strb	r2, [r3, #2]
		ifc_desc.bInterfaceClass  = ifc[5];
    a146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a148:	795a      	ldrb	r2, [r3, #5]
    a14a:	230c      	movs	r3, #12
    a14c:	18fb      	adds	r3, r7, r3
    a14e:	715a      	strb	r2, [r3, #5]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    a150:	230c      	movs	r3, #12
    a152:	18fb      	adds	r3, r7, r3
    a154:	795b      	ldrb	r3, [r3, #5]
    a156:	2b02      	cmp	r3, #2
    a158:	d004      	beq.n	a164 <cdcdf_acm_enable+0x54>
    a15a:	230c      	movs	r3, #12
    a15c:	18fb      	adds	r3, r7, r3
    a15e:	795b      	ldrb	r3, [r3, #5]
    a160:	2b0a      	cmp	r3, #10
    a162:	d129      	bne.n	a1b8 <cdcdf_acm_enable+0xa8>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    a164:	2327      	movs	r3, #39	; 0x27
    a166:	18fb      	adds	r3, r7, r3
    a168:	781b      	ldrb	r3, [r3, #0]
    a16a:	6a3a      	ldr	r2, [r7, #32]
    a16c:	5cd2      	ldrb	r2, [r2, r3]
    a16e:	230c      	movs	r3, #12
    a170:	18fb      	adds	r3, r7, r3
    a172:	789b      	ldrb	r3, [r3, #2]
    a174:	429a      	cmp	r2, r3
    a176:	d102      	bne.n	a17e <cdcdf_acm_enable+0x6e>
				return ERR_ALREADY_INITIALIZED;
    a178:	2312      	movs	r3, #18
    a17a:	425b      	negs	r3, r3
    a17c:	e09a      	b.n	a2b4 <cdcdf_acm_enable+0x1a4>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    a17e:	2327      	movs	r3, #39	; 0x27
    a180:	18fb      	adds	r3, r7, r3
    a182:	781b      	ldrb	r3, [r3, #0]
    a184:	6a3a      	ldr	r2, [r7, #32]
    a186:	5cd3      	ldrb	r3, [r2, r3]
    a188:	2bff      	cmp	r3, #255	; 0xff
    a18a:	d002      	beq.n	a192 <cdcdf_acm_enable+0x82>
				return ERR_NO_RESOURCE;
    a18c:	231c      	movs	r3, #28
    a18e:	425b      	negs	r3, r3
    a190:	e090      	b.n	a2b4 <cdcdf_acm_enable+0x1a4>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    a192:	2327      	movs	r3, #39	; 0x27
    a194:	18fb      	adds	r3, r7, r3
    a196:	781b      	ldrb	r3, [r3, #0]
    a198:	220c      	movs	r2, #12
    a19a:	18ba      	adds	r2, r7, r2
    a19c:	7891      	ldrb	r1, [r2, #2]
    a19e:	6a3a      	ldr	r2, [r7, #32]
    a1a0:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    a1a2:	46c0      	nop			; (mov r8, r8)
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    a1a4:	683b      	ldr	r3, [r7, #0]
    a1a6:	6859      	ldr	r1, [r3, #4]
    a1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a1aa:	2205      	movs	r2, #5
    a1ac:	0018      	movs	r0, r3
    a1ae:	4b43      	ldr	r3, [pc, #268]	; (a2bc <cdcdf_acm_enable+0x1ac>)
    a1b0:	4798      	blx	r3
    a1b2:	0003      	movs	r3, r0
    a1b4:	62bb      	str	r3, [r7, #40]	; 0x28
		while (NULL != ep) {
    a1b6:	e05c      	b.n	a272 <cdcdf_acm_enable+0x162>
			return ERR_NOT_FOUND;
    a1b8:	230a      	movs	r3, #10
    a1ba:	425b      	negs	r3, r3
    a1bc:	e07a      	b.n	a2b4 <cdcdf_acm_enable+0x1a4>
			ep_desc.bEndpointAddress = ep[2];
    a1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a1c0:	789a      	ldrb	r2, [r3, #2]
    a1c2:	2318      	movs	r3, #24
    a1c4:	18fb      	adds	r3, r7, r3
    a1c6:	709a      	strb	r2, [r3, #2]
			ep_desc.bmAttributes     = ep[3];
    a1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a1ca:	78da      	ldrb	r2, [r3, #3]
    a1cc:	2318      	movs	r3, #24
    a1ce:	18fb      	adds	r3, r7, r3
    a1d0:	70da      	strb	r2, [r3, #3]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    a1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a1d4:	3304      	adds	r3, #4
    a1d6:	0018      	movs	r0, r3
    a1d8:	4b39      	ldr	r3, [pc, #228]	; (a2c0 <cdcdf_acm_enable+0x1b0>)
    a1da:	4798      	blx	r3
    a1dc:	0003      	movs	r3, r0
    a1de:	001a      	movs	r2, r3
    a1e0:	2318      	movs	r3, #24
    a1e2:	18fb      	adds	r3, r7, r3
    a1e4:	809a      	strh	r2, [r3, #4]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a1e6:	2318      	movs	r3, #24
    a1e8:	18fb      	adds	r3, r7, r3
    a1ea:	7898      	ldrb	r0, [r3, #2]
    a1ec:	2318      	movs	r3, #24
    a1ee:	18fb      	adds	r3, r7, r3
    a1f0:	78d9      	ldrb	r1, [r3, #3]
    a1f2:	2318      	movs	r3, #24
    a1f4:	18fb      	adds	r3, r7, r3
    a1f6:	889b      	ldrh	r3, [r3, #4]
    a1f8:	001a      	movs	r2, r3
    a1fa:	4b32      	ldr	r3, [pc, #200]	; (a2c4 <cdcdf_acm_enable+0x1b4>)
    a1fc:	4798      	blx	r3
    a1fe:	1e03      	subs	r3, r0, #0
    a200:	d002      	beq.n	a208 <cdcdf_acm_enable+0xf8>
				return ERR_NOT_INITIALIZED;
    a202:	2314      	movs	r3, #20
    a204:	425b      	negs	r3, r3
    a206:	e055      	b.n	a2b4 <cdcdf_acm_enable+0x1a4>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a208:	2318      	movs	r3, #24
    a20a:	18fb      	adds	r3, r7, r3
    a20c:	789b      	ldrb	r3, [r3, #2]
    a20e:	b25b      	sxtb	r3, r3
    a210:	2b00      	cmp	r3, #0
    a212:	da13      	bge.n	a23c <cdcdf_acm_enable+0x12c>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    a214:	2327      	movs	r3, #39	; 0x27
    a216:	18fb      	adds	r3, r7, r3
    a218:	781b      	ldrb	r3, [r3, #0]
    a21a:	2218      	movs	r2, #24
    a21c:	18ba      	adds	r2, r7, r2
    a21e:	7891      	ldrb	r1, [r2, #2]
    a220:	6a3a      	ldr	r2, [r7, #32]
    a222:	18d3      	adds	r3, r2, r3
    a224:	1c0a      	adds	r2, r1, #0
    a226:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    a228:	2327      	movs	r3, #39	; 0x27
    a22a:	18fb      	adds	r3, r7, r3
    a22c:	781b      	ldrb	r3, [r3, #0]
    a22e:	6a3a      	ldr	r2, [r7, #32]
    a230:	18d3      	adds	r3, r2, r3
    a232:	789b      	ldrb	r3, [r3, #2]
    a234:	0018      	movs	r0, r3
    a236:	4b24      	ldr	r3, [pc, #144]	; (a2c8 <cdcdf_acm_enable+0x1b8>)
    a238:	4798      	blx	r3
    a23a:	e009      	b.n	a250 <cdcdf_acm_enable+0x140>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    a23c:	2318      	movs	r3, #24
    a23e:	18fb      	adds	r3, r7, r3
    a240:	789a      	ldrb	r2, [r3, #2]
    a242:	6a3b      	ldr	r3, [r7, #32]
    a244:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    a246:	6a3b      	ldr	r3, [r7, #32]
    a248:	791b      	ldrb	r3, [r3, #4]
    a24a:	0018      	movs	r0, r3
    a24c:	4b1e      	ldr	r3, [pc, #120]	; (a2c8 <cdcdf_acm_enable+0x1b8>)
    a24e:	4798      	blx	r3
			}
			desc->sod = ep;
    a250:	683b      	ldr	r3, [r7, #0]
    a252:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a254:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a256:	683b      	ldr	r3, [r7, #0]
    a258:	681b      	ldr	r3, [r3, #0]
    a25a:	0018      	movs	r0, r3
    a25c:	4b1b      	ldr	r3, [pc, #108]	; (a2cc <cdcdf_acm_enable+0x1bc>)
    a25e:	4798      	blx	r3
    a260:	0002      	movs	r2, r0
    a262:	683b      	ldr	r3, [r7, #0]
    a264:	685b      	ldr	r3, [r3, #4]
    a266:	0019      	movs	r1, r3
    a268:	0010      	movs	r0, r2
    a26a:	4b19      	ldr	r3, [pc, #100]	; (a2d0 <cdcdf_acm_enable+0x1c0>)
    a26c:	4798      	blx	r3
    a26e:	0003      	movs	r3, r0
    a270:	62bb      	str	r3, [r7, #40]	; 0x28
		while (NULL != ep) {
    a272:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a274:	2b00      	cmp	r3, #0
    a276:	d1a2      	bne.n	a1be <cdcdf_acm_enable+0xae>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    a278:	683b      	ldr	r3, [r7, #0]
    a27a:	681b      	ldr	r3, [r3, #0]
    a27c:	0018      	movs	r0, r3
    a27e:	4b13      	ldr	r3, [pc, #76]	; (a2cc <cdcdf_acm_enable+0x1bc>)
    a280:	4798      	blx	r3
    a282:	683b      	ldr	r3, [r7, #0]
    a284:	685b      	ldr	r3, [r3, #4]
    a286:	2204      	movs	r2, #4
    a288:	0019      	movs	r1, r3
    a28a:	4b0c      	ldr	r3, [pc, #48]	; (a2bc <cdcdf_acm_enable+0x1ac>)
    a28c:	4798      	blx	r3
    a28e:	0003      	movs	r3, r0
    a290:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    a292:	2327      	movs	r3, #39	; 0x27
    a294:	18fb      	adds	r3, r7, r3
    a296:	781a      	ldrb	r2, [r3, #0]
    a298:	2327      	movs	r3, #39	; 0x27
    a29a:	18fb      	adds	r3, r7, r3
    a29c:	3201      	adds	r2, #1
    a29e:	701a      	strb	r2, [r3, #0]
    a2a0:	2327      	movs	r3, #39	; 0x27
    a2a2:	18fb      	adds	r3, r7, r3
    a2a4:	781b      	ldrb	r3, [r3, #0]
    a2a6:	2b01      	cmp	r3, #1
    a2a8:	d800      	bhi.n	a2ac <cdcdf_acm_enable+0x19c>
    a2aa:	e741      	b.n	a130 <cdcdf_acm_enable+0x20>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    a2ac:	4b09      	ldr	r3, [pc, #36]	; (a2d4 <cdcdf_acm_enable+0x1c4>)
    a2ae:	2201      	movs	r2, #1
    a2b0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    a2b2:	2300      	movs	r3, #0
}
    a2b4:	0018      	movs	r0, r3
    a2b6:	46bd      	mov	sp, r7
    a2b8:	b00c      	add	sp, #48	; 0x30
    a2ba:	bd80      	pop	{r7, pc}
    a2bc:	0000b695 	.word	0x0000b695
    a2c0:	0000a0b1 	.word	0x0000a0b1
    a2c4:	00002805 	.word	0x00002805
    a2c8:	00002931 	.word	0x00002931
    a2cc:	0000a0ed 	.word	0x0000a0ed
    a2d0:	0000b6f9 	.word	0x0000b6f9
    a2d4:	20000448 	.word	0x20000448

0000a2d8 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    a2d8:	b580      	push	{r7, lr}
    a2da:	b088      	sub	sp, #32
    a2dc:	af00      	add	r7, sp, #0
    a2de:	6078      	str	r0, [r7, #4]
    a2e0:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    a2e2:	687b      	ldr	r3, [r7, #4]
    a2e4:	689b      	ldr	r3, [r3, #8]
    a2e6:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    a2e8:	683b      	ldr	r3, [r7, #0]
    a2ea:	2b00      	cmp	r3, #0
    a2ec:	d012      	beq.n	a314 <cdcdf_acm_disable+0x3c>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a2ee:	683b      	ldr	r3, [r7, #0]
    a2f0:	681b      	ldr	r3, [r3, #0]
    a2f2:	795a      	ldrb	r2, [r3, #5]
    a2f4:	230c      	movs	r3, #12
    a2f6:	18fb      	adds	r3, r7, r3
    a2f8:	715a      	strb	r2, [r3, #5]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    a2fa:	230c      	movs	r3, #12
    a2fc:	18fb      	adds	r3, r7, r3
    a2fe:	795b      	ldrb	r3, [r3, #5]
    a300:	2b02      	cmp	r3, #2
    a302:	d007      	beq.n	a314 <cdcdf_acm_disable+0x3c>
    a304:	230c      	movs	r3, #12
    a306:	18fb      	adds	r3, r7, r3
    a308:	795b      	ldrb	r3, [r3, #5]
    a30a:	2b0a      	cmp	r3, #10
    a30c:	d002      	beq.n	a314 <cdcdf_acm_disable+0x3c>
			return ERR_NOT_FOUND;
    a30e:	230a      	movs	r3, #10
    a310:	425b      	negs	r3, r3
    a312:	e047      	b.n	a3a4 <cdcdf_acm_disable+0xcc>
		}
	}

	for (i = 0; i < 2; i++) {
    a314:	231f      	movs	r3, #31
    a316:	18fb      	adds	r3, r7, r3
    a318:	2200      	movs	r2, #0
    a31a:	701a      	strb	r2, [r3, #0]
    a31c:	e02d      	b.n	a37a <cdcdf_acm_disable+0xa2>
		if (func_data->func_iface[i] == 0xFF) {
    a31e:	231f      	movs	r3, #31
    a320:	18fb      	adds	r3, r7, r3
    a322:	781b      	ldrb	r3, [r3, #0]
    a324:	69ba      	ldr	r2, [r7, #24]
    a326:	5cd3      	ldrb	r3, [r2, r3]
    a328:	2bff      	cmp	r3, #255	; 0xff
    a32a:	d01e      	beq.n	a36a <cdcdf_acm_disable+0x92>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    a32c:	231f      	movs	r3, #31
    a32e:	18fb      	adds	r3, r7, r3
    a330:	781b      	ldrb	r3, [r3, #0]
    a332:	69ba      	ldr	r2, [r7, #24]
    a334:	21ff      	movs	r1, #255	; 0xff
    a336:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    a338:	231f      	movs	r3, #31
    a33a:	18fb      	adds	r3, r7, r3
    a33c:	781b      	ldrb	r3, [r3, #0]
    a33e:	69ba      	ldr	r2, [r7, #24]
    a340:	18d3      	adds	r3, r2, r3
    a342:	789b      	ldrb	r3, [r3, #2]
    a344:	2bff      	cmp	r3, #255	; 0xff
    a346:	d011      	beq.n	a36c <cdcdf_acm_disable+0x94>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    a348:	231f      	movs	r3, #31
    a34a:	18fb      	adds	r3, r7, r3
    a34c:	781b      	ldrb	r3, [r3, #0]
    a34e:	69ba      	ldr	r2, [r7, #24]
    a350:	18d3      	adds	r3, r2, r3
    a352:	789b      	ldrb	r3, [r3, #2]
    a354:	0018      	movs	r0, r3
    a356:	4b15      	ldr	r3, [pc, #84]	; (a3ac <cdcdf_acm_disable+0xd4>)
    a358:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    a35a:	231f      	movs	r3, #31
    a35c:	18fb      	adds	r3, r7, r3
    a35e:	781b      	ldrb	r3, [r3, #0]
    a360:	69ba      	ldr	r2, [r7, #24]
    a362:	18d3      	adds	r3, r2, r3
    a364:	22ff      	movs	r2, #255	; 0xff
    a366:	709a      	strb	r2, [r3, #2]
    a368:	e000      	b.n	a36c <cdcdf_acm_disable+0x94>
			continue;
    a36a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < 2; i++) {
    a36c:	231f      	movs	r3, #31
    a36e:	18fb      	adds	r3, r7, r3
    a370:	781a      	ldrb	r2, [r3, #0]
    a372:	231f      	movs	r3, #31
    a374:	18fb      	adds	r3, r7, r3
    a376:	3201      	adds	r2, #1
    a378:	701a      	strb	r2, [r3, #0]
    a37a:	231f      	movs	r3, #31
    a37c:	18fb      	adds	r3, r7, r3
    a37e:	781b      	ldrb	r3, [r3, #0]
    a380:	2b01      	cmp	r3, #1
    a382:	d9cc      	bls.n	a31e <cdcdf_acm_disable+0x46>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    a384:	69bb      	ldr	r3, [r7, #24]
    a386:	791b      	ldrb	r3, [r3, #4]
    a388:	2bff      	cmp	r3, #255	; 0xff
    a38a:	d007      	beq.n	a39c <cdcdf_acm_disable+0xc4>
		usb_d_ep_deinit(func_data->func_ep_out);
    a38c:	69bb      	ldr	r3, [r7, #24]
    a38e:	791b      	ldrb	r3, [r3, #4]
    a390:	0018      	movs	r0, r3
    a392:	4b06      	ldr	r3, [pc, #24]	; (a3ac <cdcdf_acm_disable+0xd4>)
    a394:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a396:	69bb      	ldr	r3, [r7, #24]
    a398:	22ff      	movs	r2, #255	; 0xff
    a39a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    a39c:	4b04      	ldr	r3, [pc, #16]	; (a3b0 <cdcdf_acm_disable+0xd8>)
    a39e:	2200      	movs	r2, #0
    a3a0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    a3a2:	2300      	movs	r3, #0
}
    a3a4:	0018      	movs	r0, r3
    a3a6:	46bd      	mov	sp, r7
    a3a8:	b008      	add	sp, #32
    a3aa:	bd80      	pop	{r7, pc}
    a3ac:	000028d1 	.word	0x000028d1
    a3b0:	20000448 	.word	0x20000448

0000a3b4 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    a3b4:	b580      	push	{r7, lr}
    a3b6:	b084      	sub	sp, #16
    a3b8:	af00      	add	r7, sp, #0
    a3ba:	60f8      	str	r0, [r7, #12]
    a3bc:	607a      	str	r2, [r7, #4]
    a3be:	230b      	movs	r3, #11
    a3c0:	18fb      	adds	r3, r7, r3
    a3c2:	1c0a      	adds	r2, r1, #0
    a3c4:	701a      	strb	r2, [r3, #0]
	switch (ctrl) {
    a3c6:	230b      	movs	r3, #11
    a3c8:	18fb      	adds	r3, r7, r3
    a3ca:	781b      	ldrb	r3, [r3, #0]
    a3cc:	2b01      	cmp	r3, #1
    a3ce:	d00b      	beq.n	a3e8 <cdcdf_acm_ctrl+0x34>
    a3d0:	2b02      	cmp	r3, #2
    a3d2:	d011      	beq.n	a3f8 <cdcdf_acm_ctrl+0x44>
    a3d4:	2b00      	cmp	r3, #0
    a3d6:	d112      	bne.n	a3fe <cdcdf_acm_ctrl+0x4a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    a3d8:	687a      	ldr	r2, [r7, #4]
    a3da:	68fb      	ldr	r3, [r7, #12]
    a3dc:	0011      	movs	r1, r2
    a3de:	0018      	movs	r0, r3
    a3e0:	4b0a      	ldr	r3, [pc, #40]	; (a40c <cdcdf_acm_ctrl+0x58>)
    a3e2:	4798      	blx	r3
    a3e4:	0003      	movs	r3, r0
    a3e6:	e00c      	b.n	a402 <cdcdf_acm_ctrl+0x4e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    a3e8:	687a      	ldr	r2, [r7, #4]
    a3ea:	68fb      	ldr	r3, [r7, #12]
    a3ec:	0011      	movs	r1, r2
    a3ee:	0018      	movs	r0, r3
    a3f0:	4b07      	ldr	r3, [pc, #28]	; (a410 <cdcdf_acm_ctrl+0x5c>)
    a3f2:	4798      	blx	r3
    a3f4:	0003      	movs	r3, r0
    a3f6:	e004      	b.n	a402 <cdcdf_acm_ctrl+0x4e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    a3f8:	231b      	movs	r3, #27
    a3fa:	425b      	negs	r3, r3
    a3fc:	e001      	b.n	a402 <cdcdf_acm_ctrl+0x4e>

	default:
		return ERR_INVALID_ARG;
    a3fe:	230d      	movs	r3, #13
    a400:	425b      	negs	r3, r3
	}
}
    a402:	0018      	movs	r0, r3
    a404:	46bd      	mov	sp, r7
    a406:	b004      	add	sp, #16
    a408:	bd80      	pop	{r7, pc}
    a40a:	46c0      	nop			; (mov r8, r8)
    a40c:	0000a111 	.word	0x0000a111
    a410:	0000a2d9 	.word	0x0000a2d9

0000a414 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a414:	b590      	push	{r4, r7, lr}
    a416:	b087      	sub	sp, #28
    a418:	af00      	add	r7, sp, #0
    a41a:	6039      	str	r1, [r7, #0]
    a41c:	0011      	movs	r1, r2
    a41e:	1dfb      	adds	r3, r7, #7
    a420:	1c02      	adds	r2, r0, #0
    a422:	701a      	strb	r2, [r3, #0]
    a424:	1dbb      	adds	r3, r7, #6
    a426:	1c0a      	adds	r2, r1, #0
    a428:	701a      	strb	r2, [r3, #0]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    a42a:	2316      	movs	r3, #22
    a42c:	18fa      	adds	r2, r7, r3
    a42e:	683b      	ldr	r3, [r7, #0]
    a430:	7999      	ldrb	r1, [r3, #6]
    a432:	79db      	ldrb	r3, [r3, #7]
    a434:	021b      	lsls	r3, r3, #8
    a436:	430b      	orrs	r3, r1
    a438:	8013      	strh	r3, [r2, #0]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    a43a:	4b2f      	ldr	r3, [pc, #188]	; (a4f8 <cdcdf_acm_set_req+0xe4>)
    a43c:	4798      	blx	r3
    a43e:	0003      	movs	r3, r0
    a440:	613b      	str	r3, [r7, #16]

	switch (req->bRequest) {
    a442:	683b      	ldr	r3, [r7, #0]
    a444:	785b      	ldrb	r3, [r3, #1]
    a446:	2b20      	cmp	r3, #32
    a448:	d002      	beq.n	a450 <cdcdf_acm_set_req+0x3c>
    a44a:	2b22      	cmp	r3, #34	; 0x22
    a44c:	d037      	beq.n	a4be <cdcdf_acm_set_req+0xaa>
    a44e:	e04c      	b.n	a4ea <cdcdf_acm_set_req+0xd6>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    a450:	2316      	movs	r3, #22
    a452:	18fb      	adds	r3, r7, r3
    a454:	881b      	ldrh	r3, [r3, #0]
    a456:	2b07      	cmp	r3, #7
    a458:	d002      	beq.n	a460 <cdcdf_acm_set_req+0x4c>
			return ERR_INVALID_DATA;
    a45a:	2301      	movs	r3, #1
    a45c:	425b      	negs	r3, r3
    a45e:	e046      	b.n	a4ee <cdcdf_acm_set_req+0xda>
		}
		if (USB_SETUP_STAGE == stage) {
    a460:	1dbb      	adds	r3, r7, #6
    a462:	781b      	ldrb	r3, [r3, #0]
    a464:	2b00      	cmp	r3, #0
    a466:	d10a      	bne.n	a47e <cdcdf_acm_set_req+0x6a>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    a468:	2316      	movs	r3, #22
    a46a:	18fb      	adds	r3, r7, r3
    a46c:	881a      	ldrh	r2, [r3, #0]
    a46e:	6939      	ldr	r1, [r7, #16]
    a470:	1dfb      	adds	r3, r7, #7
    a472:	7818      	ldrb	r0, [r3, #0]
    a474:	2300      	movs	r3, #0
    a476:	4c21      	ldr	r4, [pc, #132]	; (a4fc <cdcdf_acm_set_req+0xe8>)
    a478:	47a0      	blx	r4
    a47a:	0003      	movs	r3, r0
    a47c:	e037      	b.n	a4ee <cdcdf_acm_set_req+0xda>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    a47e:	2308      	movs	r3, #8
    a480:	18fa      	adds	r2, r7, r3
    a482:	693b      	ldr	r3, [r7, #16]
    a484:	0010      	movs	r0, r2
    a486:	0019      	movs	r1, r3
    a488:	2307      	movs	r3, #7
    a48a:	001a      	movs	r2, r3
    a48c:	4b1c      	ldr	r3, [pc, #112]	; (a500 <cdcdf_acm_set_req+0xec>)
    a48e:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    a490:	4b1c      	ldr	r3, [pc, #112]	; (a504 <cdcdf_acm_set_req+0xf0>)
    a492:	681b      	ldr	r3, [r3, #0]
    a494:	2b00      	cmp	r3, #0
    a496:	d007      	beq.n	a4a8 <cdcdf_acm_set_req+0x94>
    a498:	4b1a      	ldr	r3, [pc, #104]	; (a504 <cdcdf_acm_set_req+0xf0>)
    a49a:	681b      	ldr	r3, [r3, #0]
    a49c:	2208      	movs	r2, #8
    a49e:	18ba      	adds	r2, r7, r2
    a4a0:	0010      	movs	r0, r2
    a4a2:	4798      	blx	r3
    a4a4:	1e03      	subs	r3, r0, #0
    a4a6:	d008      	beq.n	a4ba <cdcdf_acm_set_req+0xa6>
				usbd_cdc_line_coding = line_coding_tmp;
    a4a8:	4b17      	ldr	r3, [pc, #92]	; (a508 <cdcdf_acm_set_req+0xf4>)
    a4aa:	2208      	movs	r2, #8
    a4ac:	18ba      	adds	r2, r7, r2
    a4ae:	6811      	ldr	r1, [r2, #0]
    a4b0:	6019      	str	r1, [r3, #0]
    a4b2:	8891      	ldrh	r1, [r2, #4]
    a4b4:	8099      	strh	r1, [r3, #4]
    a4b6:	7992      	ldrb	r2, [r2, #6]
    a4b8:	719a      	strb	r2, [r3, #6]
			}
			return ERR_NONE;
    a4ba:	2300      	movs	r3, #0
    a4bc:	e017      	b.n	a4ee <cdcdf_acm_set_req+0xda>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    a4be:	2300      	movs	r3, #0
    a4c0:	2200      	movs	r2, #0
    a4c2:	2100      	movs	r1, #0
    a4c4:	2000      	movs	r0, #0
    a4c6:	4c0d      	ldr	r4, [pc, #52]	; (a4fc <cdcdf_acm_set_req+0xe8>)
    a4c8:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    a4ca:	4b10      	ldr	r3, [pc, #64]	; (a50c <cdcdf_acm_set_req+0xf8>)
    a4cc:	681b      	ldr	r3, [r3, #0]
    a4ce:	2b00      	cmp	r3, #0
    a4d0:	d009      	beq.n	a4e6 <cdcdf_acm_set_req+0xd2>
			cdcdf_acm_notify_state(req->wValue);
    a4d2:	4b0e      	ldr	r3, [pc, #56]	; (a50c <cdcdf_acm_set_req+0xf8>)
    a4d4:	681a      	ldr	r2, [r3, #0]
    a4d6:	683b      	ldr	r3, [r7, #0]
    a4d8:	7899      	ldrb	r1, [r3, #2]
    a4da:	78db      	ldrb	r3, [r3, #3]
    a4dc:	021b      	lsls	r3, r3, #8
    a4de:	430b      	orrs	r3, r1
    a4e0:	b29b      	uxth	r3, r3
    a4e2:	0018      	movs	r0, r3
    a4e4:	4790      	blx	r2
		}
		return ERR_NONE;
    a4e6:	2300      	movs	r3, #0
    a4e8:	e001      	b.n	a4ee <cdcdf_acm_set_req+0xda>
	default:
		return ERR_INVALID_ARG;
    a4ea:	230d      	movs	r3, #13
    a4ec:	425b      	negs	r3, r3
	}
}
    a4ee:	0018      	movs	r0, r3
    a4f0:	46bd      	mov	sp, r7
    a4f2:	b007      	add	sp, #28
    a4f4:	bd90      	pop	{r4, r7, pc}
    a4f6:	46c0      	nop			; (mov r8, r8)
    a4f8:	0000b5a5 	.word	0x0000b5a5
    a4fc:	0000b3dd 	.word	0x0000b3dd
    a500:	0000ba45 	.word	0x0000ba45
    a504:	2000045c 	.word	0x2000045c
    a508:	20000450 	.word	0x20000450
    a50c:	20000458 	.word	0x20000458

0000a510 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a510:	b590      	push	{r4, r7, lr}
    a512:	b085      	sub	sp, #20
    a514:	af00      	add	r7, sp, #0
    a516:	6039      	str	r1, [r7, #0]
    a518:	0011      	movs	r1, r2
    a51a:	1dfb      	adds	r3, r7, #7
    a51c:	1c02      	adds	r2, r0, #0
    a51e:	701a      	strb	r2, [r3, #0]
    a520:	1dbb      	adds	r3, r7, #6
    a522:	1c0a      	adds	r2, r1, #0
    a524:	701a      	strb	r2, [r3, #0]
	uint16_t len = req->wLength;
    a526:	230e      	movs	r3, #14
    a528:	18fa      	adds	r2, r7, r3
    a52a:	683b      	ldr	r3, [r7, #0]
    a52c:	7999      	ldrb	r1, [r3, #6]
    a52e:	79db      	ldrb	r3, [r3, #7]
    a530:	021b      	lsls	r3, r3, #8
    a532:	430b      	orrs	r3, r1
    a534:	8013      	strh	r3, [r2, #0]

	if (USB_DATA_STAGE == stage) {
    a536:	1dbb      	adds	r3, r7, #6
    a538:	781b      	ldrb	r3, [r3, #0]
    a53a:	2b01      	cmp	r3, #1
    a53c:	d101      	bne.n	a542 <cdcdf_acm_get_req+0x32>
		return ERR_NONE;
    a53e:	2300      	movs	r3, #0
    a540:	e018      	b.n	a574 <cdcdf_acm_get_req+0x64>
	}

	switch (req->bRequest) {
    a542:	683b      	ldr	r3, [r7, #0]
    a544:	785b      	ldrb	r3, [r3, #1]
    a546:	2b21      	cmp	r3, #33	; 0x21
    a548:	d112      	bne.n	a570 <cdcdf_acm_get_req+0x60>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    a54a:	230e      	movs	r3, #14
    a54c:	18fb      	adds	r3, r7, r3
    a54e:	881b      	ldrh	r3, [r3, #0]
    a550:	2b07      	cmp	r3, #7
    a552:	d002      	beq.n	a55a <cdcdf_acm_get_req+0x4a>
			return ERR_INVALID_DATA;
    a554:	2301      	movs	r3, #1
    a556:	425b      	negs	r3, r3
    a558:	e00c      	b.n	a574 <cdcdf_acm_get_req+0x64>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    a55a:	230e      	movs	r3, #14
    a55c:	18fb      	adds	r3, r7, r3
    a55e:	881a      	ldrh	r2, [r3, #0]
    a560:	4906      	ldr	r1, [pc, #24]	; (a57c <cdcdf_acm_get_req+0x6c>)
    a562:	1dfb      	adds	r3, r7, #7
    a564:	7818      	ldrb	r0, [r3, #0]
    a566:	2300      	movs	r3, #0
    a568:	4c05      	ldr	r4, [pc, #20]	; (a580 <cdcdf_acm_get_req+0x70>)
    a56a:	47a0      	blx	r4
    a56c:	0003      	movs	r3, r0
    a56e:	e001      	b.n	a574 <cdcdf_acm_get_req+0x64>
	default:
		return ERR_INVALID_ARG;
    a570:	230d      	movs	r3, #13
    a572:	425b      	negs	r3, r3
	}
}
    a574:	0018      	movs	r0, r3
    a576:	46bd      	mov	sp, r7
    a578:	b005      	add	sp, #20
    a57a:	bd90      	pop	{r4, r7, pc}
    a57c:	20000450 	.word	0x20000450
    a580:	0000b3dd 	.word	0x0000b3dd

0000a584 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a584:	b580      	push	{r7, lr}
    a586:	b082      	sub	sp, #8
    a588:	af00      	add	r7, sp, #0
    a58a:	6039      	str	r1, [r7, #0]
    a58c:	0011      	movs	r1, r2
    a58e:	1dfb      	adds	r3, r7, #7
    a590:	1c02      	adds	r2, r0, #0
    a592:	701a      	strb	r2, [r3, #0]
    a594:	1dbb      	adds	r3, r7, #6
    a596:	1c0a      	adds	r2, r1, #0
    a598:	701a      	strb	r2, [r3, #0]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a59a:	683b      	ldr	r3, [r7, #0]
    a59c:	781b      	ldrb	r3, [r3, #0]
    a59e:	095b      	lsrs	r3, r3, #5
    a5a0:	b2db      	uxtb	r3, r3
    a5a2:	001a      	movs	r2, r3
    a5a4:	2303      	movs	r3, #3
    a5a6:	4013      	ands	r3, r2
    a5a8:	2b01      	cmp	r3, #1
    a5aa:	d002      	beq.n	a5b2 <cdcdf_acm_req+0x2e>
		return ERR_NOT_FOUND;
    a5ac:	230a      	movs	r3, #10
    a5ae:	425b      	negs	r3, r3
    a5b0:	e030      	b.n	a614 <cdcdf_acm_req+0x90>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    a5b2:	683b      	ldr	r3, [r7, #0]
    a5b4:	791a      	ldrb	r2, [r3, #4]
    a5b6:	795b      	ldrb	r3, [r3, #5]
    a5b8:	021b      	lsls	r3, r3, #8
    a5ba:	4313      	orrs	r3, r2
    a5bc:	b29a      	uxth	r2, r3
    a5be:	4b17      	ldr	r3, [pc, #92]	; (a61c <cdcdf_acm_req+0x98>)
    a5c0:	781b      	ldrb	r3, [r3, #0]
    a5c2:	b29b      	uxth	r3, r3
    a5c4:	429a      	cmp	r2, r3
    a5c6:	d00a      	beq.n	a5de <cdcdf_acm_req+0x5a>
    a5c8:	683b      	ldr	r3, [r7, #0]
    a5ca:	791a      	ldrb	r2, [r3, #4]
    a5cc:	795b      	ldrb	r3, [r3, #5]
    a5ce:	021b      	lsls	r3, r3, #8
    a5d0:	4313      	orrs	r3, r2
    a5d2:	b29a      	uxth	r2, r3
    a5d4:	4b11      	ldr	r3, [pc, #68]	; (a61c <cdcdf_acm_req+0x98>)
    a5d6:	785b      	ldrb	r3, [r3, #1]
    a5d8:	b29b      	uxth	r3, r3
    a5da:	429a      	cmp	r2, r3
    a5dc:	d118      	bne.n	a610 <cdcdf_acm_req+0x8c>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    a5de:	683b      	ldr	r3, [r7, #0]
    a5e0:	781b      	ldrb	r3, [r3, #0]
    a5e2:	b25b      	sxtb	r3, r3
    a5e4:	2b00      	cmp	r3, #0
    a5e6:	da09      	bge.n	a5fc <cdcdf_acm_req+0x78>
			return cdcdf_acm_get_req(ep, req, stage);
    a5e8:	1dbb      	adds	r3, r7, #6
    a5ea:	781a      	ldrb	r2, [r3, #0]
    a5ec:	6839      	ldr	r1, [r7, #0]
    a5ee:	1dfb      	adds	r3, r7, #7
    a5f0:	781b      	ldrb	r3, [r3, #0]
    a5f2:	0018      	movs	r0, r3
    a5f4:	4b0a      	ldr	r3, [pc, #40]	; (a620 <cdcdf_acm_req+0x9c>)
    a5f6:	4798      	blx	r3
    a5f8:	0003      	movs	r3, r0
    a5fa:	e00b      	b.n	a614 <cdcdf_acm_req+0x90>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    a5fc:	1dbb      	adds	r3, r7, #6
    a5fe:	781a      	ldrb	r2, [r3, #0]
    a600:	6839      	ldr	r1, [r7, #0]
    a602:	1dfb      	adds	r3, r7, #7
    a604:	781b      	ldrb	r3, [r3, #0]
    a606:	0018      	movs	r0, r3
    a608:	4b06      	ldr	r3, [pc, #24]	; (a624 <cdcdf_acm_req+0xa0>)
    a60a:	4798      	blx	r3
    a60c:	0003      	movs	r3, r0
    a60e:	e001      	b.n	a614 <cdcdf_acm_req+0x90>
		}
	} else {
		return ERR_NOT_FOUND;
    a610:	230a      	movs	r3, #10
    a612:	425b      	negs	r3, r3
	}
}
    a614:	0018      	movs	r0, r3
    a616:	46bd      	mov	sp, r7
    a618:	b002      	add	sp, #8
    a61a:	bd80      	pop	{r7, pc}
    a61c:	20000448 	.word	0x20000448
    a620:	0000a511 	.word	0x0000a511
    a624:	0000a415 	.word	0x0000a415

0000a628 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    a628:	b580      	push	{r7, lr}
    a62a:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    a62c:	4b0d      	ldr	r3, [pc, #52]	; (a664 <cdcdf_acm_init+0x3c>)
    a62e:	4798      	blx	r3
    a630:	0003      	movs	r3, r0
    a632:	2b01      	cmp	r3, #1
    a634:	d902      	bls.n	a63c <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    a636:	2311      	movs	r3, #17
    a638:	425b      	negs	r3, r3
    a63a:	e00f      	b.n	a65c <cdcdf_acm_init+0x34>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    a63c:	4b0a      	ldr	r3, [pc, #40]	; (a668 <cdcdf_acm_init+0x40>)
    a63e:	4a0b      	ldr	r2, [pc, #44]	; (a66c <cdcdf_acm_init+0x44>)
    a640:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    a642:	4b09      	ldr	r3, [pc, #36]	; (a668 <cdcdf_acm_init+0x40>)
    a644:	4a0a      	ldr	r2, [pc, #40]	; (a670 <cdcdf_acm_init+0x48>)
    a646:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    a648:	4b07      	ldr	r3, [pc, #28]	; (a668 <cdcdf_acm_init+0x40>)
    a64a:	0018      	movs	r0, r3
    a64c:	4b09      	ldr	r3, [pc, #36]	; (a674 <cdcdf_acm_init+0x4c>)
    a64e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    a650:	4b09      	ldr	r3, [pc, #36]	; (a678 <cdcdf_acm_init+0x50>)
    a652:	0019      	movs	r1, r3
    a654:	2001      	movs	r0, #1
    a656:	4b09      	ldr	r3, [pc, #36]	; (a67c <cdcdf_acm_init+0x54>)
    a658:	4798      	blx	r3
	return ERR_NONE;
    a65a:	2300      	movs	r3, #0
}
    a65c:	0018      	movs	r0, r3
    a65e:	46bd      	mov	sp, r7
    a660:	bd80      	pop	{r7, pc}
    a662:	46c0      	nop			; (mov r8, r8)
    a664:	0000b5b9 	.word	0x0000b5b9
    a668:	2000043c 	.word	0x2000043c
    a66c:	0000a3b5 	.word	0x0000a3b5
    a670:	20000448 	.word	0x20000448
    a674:	0000b51d 	.word	0x0000b51d
    a678:	2000009c 	.word	0x2000009c
    a67c:	0000b439 	.word	0x0000b439

0000a680 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    a680:	b590      	push	{r4, r7, lr}
    a682:	b083      	sub	sp, #12
    a684:	af00      	add	r7, sp, #0
    a686:	6078      	str	r0, [r7, #4]
    a688:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    a68a:	4b0c      	ldr	r3, [pc, #48]	; (a6bc <cdcdf_acm_write+0x3c>)
    a68c:	4798      	blx	r3
    a68e:	0003      	movs	r3, r0
    a690:	001a      	movs	r2, r3
    a692:	2301      	movs	r3, #1
    a694:	4053      	eors	r3, r2
    a696:	b2db      	uxtb	r3, r3
    a698:	2b00      	cmp	r3, #0
    a69a:	d002      	beq.n	a6a2 <cdcdf_acm_write+0x22>
		return ERR_DENIED;
    a69c:	2311      	movs	r3, #17
    a69e:	425b      	negs	r3, r3
    a6a0:	e007      	b.n	a6b2 <cdcdf_acm_write+0x32>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    a6a2:	4b07      	ldr	r3, [pc, #28]	; (a6c0 <cdcdf_acm_write+0x40>)
    a6a4:	78d8      	ldrb	r0, [r3, #3]
    a6a6:	683a      	ldr	r2, [r7, #0]
    a6a8:	6879      	ldr	r1, [r7, #4]
    a6aa:	2301      	movs	r3, #1
    a6ac:	4c05      	ldr	r4, [pc, #20]	; (a6c4 <cdcdf_acm_write+0x44>)
    a6ae:	47a0      	blx	r4
    a6b0:	0003      	movs	r3, r0
}
    a6b2:	0018      	movs	r0, r3
    a6b4:	46bd      	mov	sp, r7
    a6b6:	b003      	add	sp, #12
    a6b8:	bd90      	pop	{r4, r7, pc}
    a6ba:	46c0      	nop			; (mov r8, r8)
    a6bc:	0000a6c9 	.word	0x0000a6c9
    a6c0:	20000448 	.word	0x20000448
    a6c4:	0000b3dd 	.word	0x0000b3dd

0000a6c8 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    a6c8:	b580      	push	{r7, lr}
    a6ca:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    a6cc:	4b02      	ldr	r3, [pc, #8]	; (a6d8 <cdcdf_acm_is_enabled+0x10>)
    a6ce:	795b      	ldrb	r3, [r3, #5]
}
    a6d0:	0018      	movs	r0, r3
    a6d2:	46bd      	mov	sp, r7
    a6d4:	bd80      	pop	{r7, pc}
    a6d6:	46c0      	nop			; (mov r8, r8)
    a6d8:	20000448 	.word	0x20000448

0000a6dc <usb_get_u16>:
{
    a6dc:	b580      	push	{r7, lr}
    a6de:	b082      	sub	sp, #8
    a6e0:	af00      	add	r7, sp, #0
    a6e2:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    a6e4:	687b      	ldr	r3, [r7, #4]
    a6e6:	781b      	ldrb	r3, [r3, #0]
    a6e8:	b29a      	uxth	r2, r3
    a6ea:	687b      	ldr	r3, [r7, #4]
    a6ec:	3301      	adds	r3, #1
    a6ee:	781b      	ldrb	r3, [r3, #0]
    a6f0:	b29b      	uxth	r3, r3
    a6f2:	021b      	lsls	r3, r3, #8
    a6f4:	b29b      	uxth	r3, r3
    a6f6:	18d3      	adds	r3, r2, r3
    a6f8:	b29b      	uxth	r3, r3
}
    a6fa:	0018      	movs	r0, r3
    a6fc:	46bd      	mov	sp, r7
    a6fe:	b002      	add	sp, #8
    a700:	bd80      	pop	{r7, pc}

0000a702 <usb_desc_len>:
{
    a702:	b580      	push	{r7, lr}
    a704:	b082      	sub	sp, #8
    a706:	af00      	add	r7, sp, #0
    a708:	6078      	str	r0, [r7, #4]
	return desc[0];
    a70a:	687b      	ldr	r3, [r7, #4]
    a70c:	781b      	ldrb	r3, [r3, #0]
}
    a70e:	0018      	movs	r0, r3
    a710:	46bd      	mov	sp, r7
    a712:	b002      	add	sp, #8
    a714:	bd80      	pop	{r7, pc}
	...

0000a718 <usb_desc_next>:
{
    a718:	b580      	push	{r7, lr}
    a71a:	b082      	sub	sp, #8
    a71c:	af00      	add	r7, sp, #0
    a71e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    a720:	687b      	ldr	r3, [r7, #4]
    a722:	0018      	movs	r0, r3
    a724:	4b04      	ldr	r3, [pc, #16]	; (a738 <usb_desc_next+0x20>)
    a726:	4798      	blx	r3
    a728:	0003      	movs	r3, r0
    a72a:	001a      	movs	r2, r3
    a72c:	687b      	ldr	r3, [r7, #4]
    a72e:	189b      	adds	r3, r3, r2
}
    a730:	0018      	movs	r0, r3
    a732:	46bd      	mov	sp, r7
    a734:	b002      	add	sp, #8
    a736:	bd80      	pop	{r7, pc}
    a738:	0000a703 	.word	0x0000a703

0000a73c <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    a73c:	b580      	push	{r7, lr}
    a73e:	b082      	sub	sp, #8
    a740:	af00      	add	r7, sp, #0
    a742:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    a744:	687b      	ldr	r3, [r7, #4]
    a746:	3302      	adds	r3, #2
    a748:	0018      	movs	r0, r3
    a74a:	4b03      	ldr	r3, [pc, #12]	; (a758 <usb_cfg_desc_total_len+0x1c>)
    a74c:	4798      	blx	r3
    a74e:	0003      	movs	r3, r0
}
    a750:	0018      	movs	r0, r3
    a752:	46bd      	mov	sp, r7
    a754:	b002      	add	sp, #8
    a756:	bd80      	pop	{r7, pc}
    a758:	0000a6dd 	.word	0x0000a6dd

0000a75c <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    a75c:	b590      	push	{r4, r7, lr}
    a75e:	b085      	sub	sp, #20
    a760:	af00      	add	r7, sp, #0
    a762:	0002      	movs	r2, r0
    a764:	6039      	str	r1, [r7, #0]
    a766:	1dfb      	adds	r3, r7, #7
    a768:	701a      	strb	r2, [r3, #0]
	uint8_t *dev_desc = NULL;
    a76a:	2300      	movs	r3, #0
    a76c:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    a76e:	230a      	movs	r3, #10
    a770:	18fa      	adds	r2, r7, r3
    a772:	683b      	ldr	r3, [r7, #0]
    a774:	7999      	ldrb	r1, [r3, #6]
    a776:	79db      	ldrb	r3, [r3, #7]
    a778:	021b      	lsls	r3, r3, #8
    a77a:	430b      	orrs	r3, r1
    a77c:	8013      	strh	r3, [r2, #0]
	if (length > 0x12) {
    a77e:	230a      	movs	r3, #10
    a780:	18fb      	adds	r3, r7, r3
    a782:	881b      	ldrh	r3, [r3, #0]
    a784:	2b12      	cmp	r3, #18
    a786:	d903      	bls.n	a790 <usbdc_get_dev_desc+0x34>
		length = 0x12;
    a788:	230a      	movs	r3, #10
    a78a:	18fb      	adds	r3, r7, r3
    a78c:	2212      	movs	r2, #18
    a78e:	801a      	strh	r2, [r3, #0]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    a790:	68fb      	ldr	r3, [r7, #12]
    a792:	2b00      	cmp	r3, #0
    a794:	d10b      	bne.n	a7ae <usbdc_get_dev_desc+0x52>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    a796:	4b11      	ldr	r3, [pc, #68]	; (a7dc <usbdc_get_dev_desc+0x80>)
    a798:	681b      	ldr	r3, [r3, #0]
    a79a:	6818      	ldr	r0, [r3, #0]
    a79c:	4b0f      	ldr	r3, [pc, #60]	; (a7dc <usbdc_get_dev_desc+0x80>)
    a79e:	681b      	ldr	r3, [r3, #0]
    a7a0:	685b      	ldr	r3, [r3, #4]
    a7a2:	2201      	movs	r2, #1
    a7a4:	0019      	movs	r1, r3
    a7a6:	4b0e      	ldr	r3, [pc, #56]	; (a7e0 <usbdc_get_dev_desc+0x84>)
    a7a8:	4798      	blx	r3
    a7aa:	0003      	movs	r3, r0
    a7ac:	60fb      	str	r3, [r7, #12]
	}
	if (!dev_desc) {
    a7ae:	68fb      	ldr	r3, [r7, #12]
    a7b0:	2b00      	cmp	r3, #0
    a7b2:	d101      	bne.n	a7b8 <usbdc_get_dev_desc+0x5c>
		return false;
    a7b4:	2300      	movs	r3, #0
    a7b6:	e00d      	b.n	a7d4 <usbdc_get_dev_desc+0x78>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    a7b8:	230a      	movs	r3, #10
    a7ba:	18fb      	adds	r3, r7, r3
    a7bc:	881a      	ldrh	r2, [r3, #0]
    a7be:	68f9      	ldr	r1, [r7, #12]
    a7c0:	1dfb      	adds	r3, r7, #7
    a7c2:	7818      	ldrb	r0, [r3, #0]
    a7c4:	2300      	movs	r3, #0
    a7c6:	4c07      	ldr	r4, [pc, #28]	; (a7e4 <usbdc_get_dev_desc+0x88>)
    a7c8:	47a0      	blx	r4
    a7ca:	1e03      	subs	r3, r0, #0
    a7cc:	d001      	beq.n	a7d2 <usbdc_get_dev_desc+0x76>
		return false;
    a7ce:	2300      	movs	r3, #0
    a7d0:	e000      	b.n	a7d4 <usbdc_get_dev_desc+0x78>
	}
	return true;
    a7d2:	2301      	movs	r3, #1
}
    a7d4:	0018      	movs	r0, r3
    a7d6:	46bd      	mov	sp, r7
    a7d8:	b005      	add	sp, #20
    a7da:	bd90      	pop	{r4, r7, pc}
    a7dc:	20000460 	.word	0x20000460
    a7e0:	0000b695 	.word	0x0000b695
    a7e4:	0000b3dd 	.word	0x0000b3dd

0000a7e8 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    a7e8:	b590      	push	{r4, r7, lr}
    a7ea:	b087      	sub	sp, #28
    a7ec:	af00      	add	r7, sp, #0
    a7ee:	0002      	movs	r2, r0
    a7f0:	6039      	str	r1, [r7, #0]
    a7f2:	1dfb      	adds	r3, r7, #7
    a7f4:	701a      	strb	r2, [r3, #0]
	uint8_t *cfg_desc = NULL;
    a7f6:	2300      	movs	r3, #0
    a7f8:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    a7fa:	2312      	movs	r3, #18
    a7fc:	18fa      	adds	r2, r7, r3
    a7fe:	683b      	ldr	r3, [r7, #0]
    a800:	7999      	ldrb	r1, [r3, #6]
    a802:	79db      	ldrb	r3, [r3, #7]
    a804:	021b      	lsls	r3, r3, #8
    a806:	430b      	orrs	r3, r1
    a808:	8013      	strh	r3, [r2, #0]
	uint8_t  index    = req->wValue & 0x00FF;
    a80a:	683b      	ldr	r3, [r7, #0]
    a80c:	789a      	ldrb	r2, [r3, #2]
    a80e:	78db      	ldrb	r3, [r3, #3]
    a810:	021b      	lsls	r3, r3, #8
    a812:	4313      	orrs	r3, r2
    a814:	b29a      	uxth	r2, r3
    a816:	2310      	movs	r3, #16
    a818:	18fb      	adds	r3, r7, r3
    a81a:	701a      	strb	r2, [r3, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a81c:	2312      	movs	r3, #18
    a81e:	18fb      	adds	r3, r7, r3
    a820:	881b      	ldrh	r3, [r3, #0]
    a822:	4a28      	ldr	r2, [pc, #160]	; (a8c4 <usbdc_get_cfg_desc+0xdc>)
    a824:	7f12      	ldrb	r2, [r2, #28]
    a826:	3a01      	subs	r2, #1
    a828:	401a      	ands	r2, r3
    a82a:	2311      	movs	r3, #17
    a82c:	18fb      	adds	r3, r7, r3
    a82e:	4251      	negs	r1, r2
    a830:	414a      	adcs	r2, r1
    a832:	701a      	strb	r2, [r3, #0]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    a834:	697b      	ldr	r3, [r7, #20]
    a836:	2b00      	cmp	r3, #0
    a838:	d10f      	bne.n	a85a <usbdc_get_cfg_desc+0x72>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    a83a:	4b22      	ldr	r3, [pc, #136]	; (a8c4 <usbdc_get_cfg_desc+0xdc>)
    a83c:	681b      	ldr	r3, [r3, #0]
    a83e:	6818      	ldr	r0, [r3, #0]
    a840:	4b20      	ldr	r3, [pc, #128]	; (a8c4 <usbdc_get_cfg_desc+0xdc>)
    a842:	681b      	ldr	r3, [r3, #0]
    a844:	6859      	ldr	r1, [r3, #4]
    a846:	2310      	movs	r3, #16
    a848:	18fb      	adds	r3, r7, r3
    a84a:	781b      	ldrb	r3, [r3, #0]
    a84c:	3301      	adds	r3, #1
    a84e:	b2db      	uxtb	r3, r3
    a850:	001a      	movs	r2, r3
    a852:	4b1d      	ldr	r3, [pc, #116]	; (a8c8 <usbdc_get_cfg_desc+0xe0>)
    a854:	4798      	blx	r3
    a856:	0003      	movs	r3, r0
    a858:	617b      	str	r3, [r7, #20]
	}
	if (NULL == cfg_desc) {
    a85a:	697b      	ldr	r3, [r7, #20]
    a85c:	2b00      	cmp	r3, #0
    a85e:	d101      	bne.n	a864 <usbdc_get_cfg_desc+0x7c>
		return false;
    a860:	2300      	movs	r3, #0
    a862:	e02b      	b.n	a8bc <usbdc_get_cfg_desc+0xd4>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    a864:	230e      	movs	r3, #14
    a866:	18fc      	adds	r4, r7, r3
    a868:	697b      	ldr	r3, [r7, #20]
    a86a:	0018      	movs	r0, r3
    a86c:	4b17      	ldr	r3, [pc, #92]	; (a8cc <usbdc_get_cfg_desc+0xe4>)
    a86e:	4798      	blx	r3
    a870:	0003      	movs	r3, r0
    a872:	8023      	strh	r3, [r4, #0]
	if (length <= total_len) {
    a874:	2312      	movs	r3, #18
    a876:	18fa      	adds	r2, r7, r3
    a878:	230e      	movs	r3, #14
    a87a:	18fb      	adds	r3, r7, r3
    a87c:	8812      	ldrh	r2, [r2, #0]
    a87e:	881b      	ldrh	r3, [r3, #0]
    a880:	429a      	cmp	r2, r3
    a882:	d804      	bhi.n	a88e <usbdc_get_cfg_desc+0xa6>
		need_zlp = false;
    a884:	2311      	movs	r3, #17
    a886:	18fb      	adds	r3, r7, r3
    a888:	2200      	movs	r2, #0
    a88a:	701a      	strb	r2, [r3, #0]
    a88c:	e005      	b.n	a89a <usbdc_get_cfg_desc+0xb2>
	} else {
		length = total_len;
    a88e:	2312      	movs	r3, #18
    a890:	18fb      	adds	r3, r7, r3
    a892:	220e      	movs	r2, #14
    a894:	18ba      	adds	r2, r7, r2
    a896:	8812      	ldrh	r2, [r2, #0]
    a898:	801a      	strh	r2, [r3, #0]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    a89a:	2312      	movs	r3, #18
    a89c:	18fb      	adds	r3, r7, r3
    a89e:	881a      	ldrh	r2, [r3, #0]
    a8a0:	2311      	movs	r3, #17
    a8a2:	18fb      	adds	r3, r7, r3
    a8a4:	781c      	ldrb	r4, [r3, #0]
    a8a6:	6979      	ldr	r1, [r7, #20]
    a8a8:	1dfb      	adds	r3, r7, #7
    a8aa:	7818      	ldrb	r0, [r3, #0]
    a8ac:	0023      	movs	r3, r4
    a8ae:	4c08      	ldr	r4, [pc, #32]	; (a8d0 <usbdc_get_cfg_desc+0xe8>)
    a8b0:	47a0      	blx	r4
    a8b2:	1e03      	subs	r3, r0, #0
    a8b4:	d001      	beq.n	a8ba <usbdc_get_cfg_desc+0xd2>
		return false;
    a8b6:	2300      	movs	r3, #0
    a8b8:	e000      	b.n	a8bc <usbdc_get_cfg_desc+0xd4>
	}
	return true;
    a8ba:	2301      	movs	r3, #1
}
    a8bc:	0018      	movs	r0, r3
    a8be:	46bd      	mov	sp, r7
    a8c0:	b007      	add	sp, #28
    a8c2:	bd90      	pop	{r4, r7, pc}
    a8c4:	20000460 	.word	0x20000460
    a8c8:	0000b765 	.word	0x0000b765
    a8cc:	0000a73d 	.word	0x0000a73d
    a8d0:	0000b3dd 	.word	0x0000b3dd

0000a8d4 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    a8d4:	b590      	push	{r4, r7, lr}
    a8d6:	b085      	sub	sp, #20
    a8d8:	af00      	add	r7, sp, #0
    a8da:	0002      	movs	r2, r0
    a8dc:	6039      	str	r1, [r7, #0]
    a8de:	1dfb      	adds	r3, r7, #7
    a8e0:	701a      	strb	r2, [r3, #0]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    a8e2:	230e      	movs	r3, #14
    a8e4:	18fa      	adds	r2, r7, r3
    a8e6:	683b      	ldr	r3, [r7, #0]
    a8e8:	7999      	ldrb	r1, [r3, #6]
    a8ea:	79db      	ldrb	r3, [r3, #7]
    a8ec:	021b      	lsls	r3, r3, #8
    a8ee:	430b      	orrs	r3, r1
    a8f0:	8013      	strh	r3, [r2, #0]
	uint8_t  index    = req->wValue & 0x00FF;
    a8f2:	683b      	ldr	r3, [r7, #0]
    a8f4:	789a      	ldrb	r2, [r3, #2]
    a8f6:	78db      	ldrb	r3, [r3, #3]
    a8f8:	021b      	lsls	r3, r3, #8
    a8fa:	4313      	orrs	r3, r2
    a8fc:	b29a      	uxth	r2, r3
    a8fe:	230c      	movs	r3, #12
    a900:	18fb      	adds	r3, r7, r3
    a902:	701a      	strb	r2, [r3, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a904:	230e      	movs	r3, #14
    a906:	18fb      	adds	r3, r7, r3
    a908:	881b      	ldrh	r3, [r3, #0]
    a90a:	4a21      	ldr	r2, [pc, #132]	; (a990 <usbdc_get_str_desc+0xbc>)
    a90c:	7f12      	ldrb	r2, [r2, #28]
    a90e:	3a01      	subs	r2, #1
    a910:	401a      	ands	r2, r3
    a912:	230d      	movs	r3, #13
    a914:	18fb      	adds	r3, r7, r3
    a916:	4251      	negs	r1, r2
    a918:	414a      	adcs	r2, r1
    a91a:	701a      	strb	r2, [r3, #0]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    a91c:	4b1c      	ldr	r3, [pc, #112]	; (a990 <usbdc_get_str_desc+0xbc>)
    a91e:	681b      	ldr	r3, [r3, #0]
    a920:	6818      	ldr	r0, [r3, #0]
    a922:	4b1b      	ldr	r3, [pc, #108]	; (a990 <usbdc_get_str_desc+0xbc>)
    a924:	681b      	ldr	r3, [r3, #0]
    a926:	6859      	ldr	r1, [r3, #4]
    a928:	230c      	movs	r3, #12
    a92a:	18fb      	adds	r3, r7, r3
    a92c:	781b      	ldrb	r3, [r3, #0]
    a92e:	001a      	movs	r2, r3
    a930:	4b18      	ldr	r3, [pc, #96]	; (a994 <usbdc_get_str_desc+0xc0>)
    a932:	4798      	blx	r3
    a934:	0003      	movs	r3, r0
    a936:	60bb      	str	r3, [r7, #8]
	if (NULL == str_desc) {
    a938:	68bb      	ldr	r3, [r7, #8]
    a93a:	2b00      	cmp	r3, #0
    a93c:	d101      	bne.n	a942 <usbdc_get_str_desc+0x6e>
		return false;
    a93e:	2300      	movs	r3, #0
    a940:	e022      	b.n	a988 <usbdc_get_str_desc+0xb4>
	}
	if (length <= str_desc[0]) {
    a942:	68bb      	ldr	r3, [r7, #8]
    a944:	781b      	ldrb	r3, [r3, #0]
    a946:	b29b      	uxth	r3, r3
    a948:	220e      	movs	r2, #14
    a94a:	18ba      	adds	r2, r7, r2
    a94c:	8812      	ldrh	r2, [r2, #0]
    a94e:	429a      	cmp	r2, r3
    a950:	d804      	bhi.n	a95c <usbdc_get_str_desc+0x88>
		need_zlp = false;
    a952:	230d      	movs	r3, #13
    a954:	18fb      	adds	r3, r7, r3
    a956:	2200      	movs	r2, #0
    a958:	701a      	strb	r2, [r3, #0]
    a95a:	e004      	b.n	a966 <usbdc_get_str_desc+0x92>
	} else {
		length = str_desc[0];
    a95c:	68bb      	ldr	r3, [r7, #8]
    a95e:	781a      	ldrb	r2, [r3, #0]
    a960:	230e      	movs	r3, #14
    a962:	18fb      	adds	r3, r7, r3
    a964:	801a      	strh	r2, [r3, #0]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    a966:	230e      	movs	r3, #14
    a968:	18fb      	adds	r3, r7, r3
    a96a:	881a      	ldrh	r2, [r3, #0]
    a96c:	230d      	movs	r3, #13
    a96e:	18fb      	adds	r3, r7, r3
    a970:	781c      	ldrb	r4, [r3, #0]
    a972:	68b9      	ldr	r1, [r7, #8]
    a974:	1dfb      	adds	r3, r7, #7
    a976:	7818      	ldrb	r0, [r3, #0]
    a978:	0023      	movs	r3, r4
    a97a:	4c07      	ldr	r4, [pc, #28]	; (a998 <usbdc_get_str_desc+0xc4>)
    a97c:	47a0      	blx	r4
    a97e:	1e03      	subs	r3, r0, #0
    a980:	d001      	beq.n	a986 <usbdc_get_str_desc+0xb2>
		return false;
    a982:	2300      	movs	r3, #0
    a984:	e000      	b.n	a988 <usbdc_get_str_desc+0xb4>
	}
	return true;
    a986:	2301      	movs	r3, #1
}
    a988:	0018      	movs	r0, r3
    a98a:	46bd      	mov	sp, r7
    a98c:	b005      	add	sp, #20
    a98e:	bd90      	pop	{r4, r7, pc}
    a990:	20000460 	.word	0x20000460
    a994:	0000b7e9 	.word	0x0000b7e9
    a998:	0000b3dd 	.word	0x0000b3dd

0000a99c <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    a99c:	b580      	push	{r7, lr}
    a99e:	b084      	sub	sp, #16
    a9a0:	af00      	add	r7, sp, #0
    a9a2:	0002      	movs	r2, r0
    a9a4:	6039      	str	r1, [r7, #0]
    a9a6:	1dfb      	adds	r3, r7, #7
    a9a8:	701a      	strb	r2, [r3, #0]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    a9aa:	683b      	ldr	r3, [r7, #0]
    a9ac:	789a      	ldrb	r2, [r3, #2]
    a9ae:	78db      	ldrb	r3, [r3, #3]
    a9b0:	021b      	lsls	r3, r3, #8
    a9b2:	4313      	orrs	r3, r2
    a9b4:	b29b      	uxth	r3, r3
    a9b6:	0a1b      	lsrs	r3, r3, #8
    a9b8:	b29a      	uxth	r2, r3
    a9ba:	230f      	movs	r3, #15
    a9bc:	18fb      	adds	r3, r7, r3
    a9be:	701a      	strb	r2, [r3, #0]
	switch (type) {
    a9c0:	230f      	movs	r3, #15
    a9c2:	18fb      	adds	r3, r7, r3
    a9c4:	781b      	ldrb	r3, [r3, #0]
    a9c6:	2b02      	cmp	r3, #2
    a9c8:	d00f      	beq.n	a9ea <usbdc_get_desc_req+0x4e>
    a9ca:	2b03      	cmp	r3, #3
    a9cc:	d016      	beq.n	a9fc <usbdc_get_desc_req+0x60>
    a9ce:	2b01      	cmp	r3, #1
    a9d0:	d002      	beq.n	a9d8 <usbdc_get_desc_req+0x3c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    a9d2:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    a9d4:	2300      	movs	r3, #0
    a9d6:	e019      	b.n	aa0c <usbdc_get_desc_req+0x70>
		return usbdc_get_dev_desc(ep, req);
    a9d8:	683a      	ldr	r2, [r7, #0]
    a9da:	1dfb      	adds	r3, r7, #7
    a9dc:	781b      	ldrb	r3, [r3, #0]
    a9de:	0011      	movs	r1, r2
    a9e0:	0018      	movs	r0, r3
    a9e2:	4b0c      	ldr	r3, [pc, #48]	; (aa14 <usbdc_get_desc_req+0x78>)
    a9e4:	4798      	blx	r3
    a9e6:	0003      	movs	r3, r0
    a9e8:	e010      	b.n	aa0c <usbdc_get_desc_req+0x70>
		return usbdc_get_cfg_desc(ep, req);
    a9ea:	683a      	ldr	r2, [r7, #0]
    a9ec:	1dfb      	adds	r3, r7, #7
    a9ee:	781b      	ldrb	r3, [r3, #0]
    a9f0:	0011      	movs	r1, r2
    a9f2:	0018      	movs	r0, r3
    a9f4:	4b08      	ldr	r3, [pc, #32]	; (aa18 <usbdc_get_desc_req+0x7c>)
    a9f6:	4798      	blx	r3
    a9f8:	0003      	movs	r3, r0
    a9fa:	e007      	b.n	aa0c <usbdc_get_desc_req+0x70>
		return usbdc_get_str_desc(ep, req);
    a9fc:	683a      	ldr	r2, [r7, #0]
    a9fe:	1dfb      	adds	r3, r7, #7
    aa00:	781b      	ldrb	r3, [r3, #0]
    aa02:	0011      	movs	r1, r2
    aa04:	0018      	movs	r0, r3
    aa06:	4b05      	ldr	r3, [pc, #20]	; (aa1c <usbdc_get_desc_req+0x80>)
    aa08:	4798      	blx	r3
    aa0a:	0003      	movs	r3, r0
}
    aa0c:	0018      	movs	r0, r3
    aa0e:	46bd      	mov	sp, r7
    aa10:	b004      	add	sp, #16
    aa12:	bd80      	pop	{r7, pc}
    aa14:	0000a75d 	.word	0x0000a75d
    aa18:	0000a7e9 	.word	0x0000a7e9
    aa1c:	0000a8d5 	.word	0x0000a8d5

0000aa20 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    aa20:	b590      	push	{r4, r7, lr}
    aa22:	b085      	sub	sp, #20
    aa24:	af00      	add	r7, sp, #0
    aa26:	0002      	movs	r2, r0
    aa28:	6039      	str	r1, [r7, #0]
    aa2a:	1dfb      	adds	r3, r7, #7
    aa2c:	701a      	strb	r2, [r3, #0]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    aa2e:	683b      	ldr	r3, [r7, #0]
    aa30:	781b      	ldrb	r3, [r3, #0]
    aa32:	001a      	movs	r2, r3
    aa34:	231f      	movs	r3, #31
    aa36:	4013      	ands	r3, r2
    aa38:	d41e      	bmi.n	aa78 <usbdc_get_status_req+0x58>
    aa3a:	2b01      	cmp	r3, #1
    aa3c:	dd02      	ble.n	aa44 <usbdc_get_status_req+0x24>
    aa3e:	2b02      	cmp	r3, #2
    aa40:	d003      	beq.n	aa4a <usbdc_get_status_req+0x2a>
    aa42:	e019      	b.n	aa78 <usbdc_get_status_req+0x58>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    aa44:	2300      	movs	r3, #0
    aa46:	60fb      	str	r3, [r7, #12]
		break;
    aa48:	e018      	b.n	aa7c <usbdc_get_status_req+0x5c>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    aa4a:	683b      	ldr	r3, [r7, #0]
    aa4c:	791a      	ldrb	r2, [r3, #4]
    aa4e:	795b      	ldrb	r3, [r3, #5]
    aa50:	021b      	lsls	r3, r3, #8
    aa52:	4313      	orrs	r3, r2
    aa54:	b29b      	uxth	r3, r3
    aa56:	b2db      	uxtb	r3, r3
    aa58:	2102      	movs	r1, #2
    aa5a:	0018      	movs	r0, r3
    aa5c:	4b12      	ldr	r3, [pc, #72]	; (aaa8 <usbdc_get_status_req+0x88>)
    aa5e:	4798      	blx	r3
    aa60:	0003      	movs	r3, r0
    aa62:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    aa64:	68fb      	ldr	r3, [r7, #12]
    aa66:	2b00      	cmp	r3, #0
    aa68:	da01      	bge.n	aa6e <usbdc_get_status_req+0x4e>
			return false;
    aa6a:	2300      	movs	r3, #0
    aa6c:	e017      	b.n	aa9e <usbdc_get_status_req+0x7e>
		}
		st = st & 0x1;
    aa6e:	68fb      	ldr	r3, [r7, #12]
    aa70:	2201      	movs	r2, #1
    aa72:	4013      	ands	r3, r2
    aa74:	60fb      	str	r3, [r7, #12]
		break;
    aa76:	e001      	b.n	aa7c <usbdc_get_status_req+0x5c>
	default:
		return false;
    aa78:	2300      	movs	r3, #0
    aa7a:	e010      	b.n	aa9e <usbdc_get_status_req+0x7e>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    aa7c:	4b0b      	ldr	r3, [pc, #44]	; (aaac <usbdc_get_status_req+0x8c>)
    aa7e:	695b      	ldr	r3, [r3, #20]
    aa80:	220c      	movs	r2, #12
    aa82:	18b9      	adds	r1, r7, r2
    aa84:	2202      	movs	r2, #2
    aa86:	0018      	movs	r0, r3
    aa88:	4b09      	ldr	r3, [pc, #36]	; (aab0 <usbdc_get_status_req+0x90>)
    aa8a:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    aa8c:	4b07      	ldr	r3, [pc, #28]	; (aaac <usbdc_get_status_req+0x8c>)
    aa8e:	6959      	ldr	r1, [r3, #20]
    aa90:	1dfb      	adds	r3, r7, #7
    aa92:	7818      	ldrb	r0, [r3, #0]
    aa94:	2300      	movs	r3, #0
    aa96:	2202      	movs	r2, #2
    aa98:	4c06      	ldr	r4, [pc, #24]	; (aab4 <usbdc_get_status_req+0x94>)
    aa9a:	47a0      	blx	r4
	return true;
    aa9c:	2301      	movs	r3, #1
}
    aa9e:	0018      	movs	r0, r3
    aaa0:	46bd      	mov	sp, r7
    aaa2:	b005      	add	sp, #20
    aaa4:	bd90      	pop	{r4, r7, pc}
    aaa6:	46c0      	nop			; (mov r8, r8)
    aaa8:	00002be9 	.word	0x00002be9
    aaac:	20000460 	.word	0x20000460
    aab0:	0000ba45 	.word	0x0000ba45
    aab4:	0000b3dd 	.word	0x0000b3dd

0000aab8 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    aab8:	b590      	push	{r4, r7, lr}
    aaba:	b085      	sub	sp, #20
    aabc:	af00      	add	r7, sp, #0
    aabe:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    aac0:	4b21      	ldr	r3, [pc, #132]	; (ab48 <usbdc_get_interface+0x90>)
    aac2:	691b      	ldr	r3, [r3, #16]
    aac4:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    aac6:	4b20      	ldr	r3, [pc, #128]	; (ab48 <usbdc_get_interface+0x90>)
    aac8:	7f5b      	ldrb	r3, [r3, #29]
    aaca:	0019      	movs	r1, r3
    aacc:	687b      	ldr	r3, [r7, #4]
    aace:	791a      	ldrb	r2, [r3, #4]
    aad0:	795b      	ldrb	r3, [r3, #5]
    aad2:	021b      	lsls	r3, r3, #8
    aad4:	4313      	orrs	r3, r2
    aad6:	b29b      	uxth	r3, r3
    aad8:	4119      	asrs	r1, r3
    aada:	000b      	movs	r3, r1
    aadc:	2201      	movs	r2, #1
    aade:	4013      	ands	r3, r2
    aae0:	d129      	bne.n	ab36 <usbdc_get_interface+0x7e>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    aae2:	4b19      	ldr	r3, [pc, #100]	; (ab48 <usbdc_get_interface+0x90>)
    aae4:	695b      	ldr	r3, [r3, #20]
    aae6:	2200      	movs	r2, #0
    aae8:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    aaea:	4b17      	ldr	r3, [pc, #92]	; (ab48 <usbdc_get_interface+0x90>)
    aaec:	6959      	ldr	r1, [r3, #20]
    aaee:	2300      	movs	r3, #0
    aaf0:	2201      	movs	r2, #1
    aaf2:	2000      	movs	r0, #0
    aaf4:	4c15      	ldr	r4, [pc, #84]	; (ab4c <usbdc_get_interface+0x94>)
    aaf6:	47a0      	blx	r4
		return true;
    aaf8:	2301      	movs	r3, #1
    aafa:	e020      	b.n	ab3e <usbdc_get_interface+0x86>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    aafc:	68fb      	ldr	r3, [r7, #12]
    aafe:	685b      	ldr	r3, [r3, #4]
    ab00:	687a      	ldr	r2, [r7, #4]
    ab02:	68f8      	ldr	r0, [r7, #12]
    ab04:	2102      	movs	r1, #2
    ab06:	4798      	blx	r3
    ab08:	0003      	movs	r3, r0
    ab0a:	60bb      	str	r3, [r7, #8]
    ab0c:	68bb      	ldr	r3, [r7, #8]
    ab0e:	2b00      	cmp	r3, #0
    ab10:	da03      	bge.n	ab1a <usbdc_get_interface+0x62>
			func = func->next;
    ab12:	68fb      	ldr	r3, [r7, #12]
    ab14:	681b      	ldr	r3, [r3, #0]
    ab16:	60fb      	str	r3, [r7, #12]
    ab18:	e00d      	b.n	ab36 <usbdc_get_interface+0x7e>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    ab1a:	4b0b      	ldr	r3, [pc, #44]	; (ab48 <usbdc_get_interface+0x90>)
    ab1c:	695b      	ldr	r3, [r3, #20]
    ab1e:	68ba      	ldr	r2, [r7, #8]
    ab20:	b2d2      	uxtb	r2, r2
    ab22:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ab24:	4b08      	ldr	r3, [pc, #32]	; (ab48 <usbdc_get_interface+0x90>)
    ab26:	6959      	ldr	r1, [r3, #20]
    ab28:	2300      	movs	r3, #0
    ab2a:	2201      	movs	r2, #1
    ab2c:	2000      	movs	r0, #0
    ab2e:	4c07      	ldr	r4, [pc, #28]	; (ab4c <usbdc_get_interface+0x94>)
    ab30:	47a0      	blx	r4
			return true;
    ab32:	2301      	movs	r3, #1
    ab34:	e003      	b.n	ab3e <usbdc_get_interface+0x86>
	while (NULL != func) {
    ab36:	68fb      	ldr	r3, [r7, #12]
    ab38:	2b00      	cmp	r3, #0
    ab3a:	d1df      	bne.n	aafc <usbdc_get_interface+0x44>
		}
	}
	return false;
    ab3c:	2300      	movs	r3, #0
}
    ab3e:	0018      	movs	r0, r3
    ab40:	46bd      	mov	sp, r7
    ab42:	b005      	add	sp, #20
    ab44:	bd90      	pop	{r4, r7, pc}
    ab46:	46c0      	nop			; (mov r8, r8)
    ab48:	20000460 	.word	0x20000460
    ab4c:	0000b3dd 	.word	0x0000b3dd

0000ab50 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    ab50:	b590      	push	{r4, r7, lr}
    ab52:	b083      	sub	sp, #12
    ab54:	af00      	add	r7, sp, #0
    ab56:	0002      	movs	r2, r0
    ab58:	6039      	str	r1, [r7, #0]
    ab5a:	1dfb      	adds	r3, r7, #7
    ab5c:	701a      	strb	r2, [r3, #0]
	switch (req->bRequest) {
    ab5e:	683b      	ldr	r3, [r7, #0]
    ab60:	785b      	ldrb	r3, [r3, #1]
    ab62:	2b06      	cmp	r3, #6
    ab64:	d008      	beq.n	ab78 <usbdc_get_req+0x28>
    ab66:	dc02      	bgt.n	ab6e <usbdc_get_req+0x1e>
    ab68:	2b00      	cmp	r3, #0
    ab6a:	d01d      	beq.n	aba8 <usbdc_get_req+0x58>
    ab6c:	e02b      	b.n	abc6 <usbdc_get_req+0x76>
    ab6e:	2b08      	cmp	r3, #8
    ab70:	d00b      	beq.n	ab8a <usbdc_get_req+0x3a>
    ab72:	2b0a      	cmp	r3, #10
    ab74:	d021      	beq.n	abba <usbdc_get_req+0x6a>
    ab76:	e026      	b.n	abc6 <usbdc_get_req+0x76>
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    ab78:	683a      	ldr	r2, [r7, #0]
    ab7a:	1dfb      	adds	r3, r7, #7
    ab7c:	781b      	ldrb	r3, [r3, #0]
    ab7e:	0011      	movs	r1, r2
    ab80:	0018      	movs	r0, r3
    ab82:	4b13      	ldr	r3, [pc, #76]	; (abd0 <usbdc_get_req+0x80>)
    ab84:	4798      	blx	r3
    ab86:	0003      	movs	r3, r0
    ab88:	e01e      	b.n	abc8 <usbdc_get_req+0x78>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    ab8a:	4b12      	ldr	r3, [pc, #72]	; (abd4 <usbdc_get_req+0x84>)
    ab8c:	695b      	ldr	r3, [r3, #20]
    ab8e:	4a11      	ldr	r2, [pc, #68]	; (abd4 <usbdc_get_req+0x84>)
    ab90:	7ed2      	ldrb	r2, [r2, #27]
    ab92:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    ab94:	4b0f      	ldr	r3, [pc, #60]	; (abd4 <usbdc_get_req+0x84>)
    ab96:	6959      	ldr	r1, [r3, #20]
    ab98:	1dfb      	adds	r3, r7, #7
    ab9a:	7818      	ldrb	r0, [r3, #0]
    ab9c:	2300      	movs	r3, #0
    ab9e:	2201      	movs	r2, #1
    aba0:	4c0d      	ldr	r4, [pc, #52]	; (abd8 <usbdc_get_req+0x88>)
    aba2:	47a0      	blx	r4
		return true;
    aba4:	2301      	movs	r3, #1
    aba6:	e00f      	b.n	abc8 <usbdc_get_req+0x78>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    aba8:	683a      	ldr	r2, [r7, #0]
    abaa:	1dfb      	adds	r3, r7, #7
    abac:	781b      	ldrb	r3, [r3, #0]
    abae:	0011      	movs	r1, r2
    abb0:	0018      	movs	r0, r3
    abb2:	4b0a      	ldr	r3, [pc, #40]	; (abdc <usbdc_get_req+0x8c>)
    abb4:	4798      	blx	r3
    abb6:	0003      	movs	r3, r0
    abb8:	e006      	b.n	abc8 <usbdc_get_req+0x78>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    abba:	683b      	ldr	r3, [r7, #0]
    abbc:	0018      	movs	r0, r3
    abbe:	4b08      	ldr	r3, [pc, #32]	; (abe0 <usbdc_get_req+0x90>)
    abc0:	4798      	blx	r3
    abc2:	0003      	movs	r3, r0
    abc4:	e000      	b.n	abc8 <usbdc_get_req+0x78>
	default:
		return false;
    abc6:	2300      	movs	r3, #0
	}
}
    abc8:	0018      	movs	r0, r3
    abca:	46bd      	mov	sp, r7
    abcc:	b003      	add	sp, #12
    abce:	bd90      	pop	{r4, r7, pc}
    abd0:	0000a99d 	.word	0x0000a99d
    abd4:	20000460 	.word	0x20000460
    abd8:	0000b3dd 	.word	0x0000b3dd
    abdc:	0000aa21 	.word	0x0000aa21
    abe0:	0000aab9 	.word	0x0000aab9

0000abe4 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    abe4:	b590      	push	{r4, r7, lr}
    abe6:	b083      	sub	sp, #12
    abe8:	af00      	add	r7, sp, #0
    abea:	0002      	movs	r2, r0
    abec:	6039      	str	r1, [r7, #0]
    abee:	1dfb      	adds	r3, r7, #7
    abf0:	701a      	strb	r2, [r3, #0]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    abf2:	683b      	ldr	r3, [r7, #0]
    abf4:	781b      	ldrb	r3, [r3, #0]
    abf6:	001a      	movs	r2, r3
    abf8:	231f      	movs	r3, #31
    abfa:	4013      	ands	r3, r2
    abfc:	2b02      	cmp	r3, #2
    abfe:	d11d      	bne.n	ac3c <usbdc_clear_ftr_req+0x58>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    ac00:	683b      	ldr	r3, [r7, #0]
    ac02:	799a      	ldrb	r2, [r3, #6]
    ac04:	79db      	ldrb	r3, [r3, #7]
    ac06:	021b      	lsls	r3, r3, #8
    ac08:	4313      	orrs	r3, r2
    ac0a:	b29b      	uxth	r3, r3
    ac0c:	2b00      	cmp	r3, #0
    ac0e:	d001      	beq.n	ac14 <usbdc_clear_ftr_req+0x30>
			return false;
    ac10:	2300      	movs	r3, #0
    ac12:	e014      	b.n	ac3e <usbdc_clear_ftr_req+0x5a>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    ac14:	683b      	ldr	r3, [r7, #0]
    ac16:	791a      	ldrb	r2, [r3, #4]
    ac18:	795b      	ldrb	r3, [r3, #5]
    ac1a:	021b      	lsls	r3, r3, #8
    ac1c:	4313      	orrs	r3, r2
    ac1e:	b29b      	uxth	r3, r3
    ac20:	b2db      	uxtb	r3, r3
    ac22:	2100      	movs	r1, #0
    ac24:	0018      	movs	r0, r3
    ac26:	4b08      	ldr	r3, [pc, #32]	; (ac48 <usbdc_clear_ftr_req+0x64>)
    ac28:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    ac2a:	1dfb      	adds	r3, r7, #7
    ac2c:	7818      	ldrb	r0, [r3, #0]
    ac2e:	2301      	movs	r3, #1
    ac30:	2200      	movs	r2, #0
    ac32:	2100      	movs	r1, #0
    ac34:	4c05      	ldr	r4, [pc, #20]	; (ac4c <usbdc_clear_ftr_req+0x68>)
    ac36:	47a0      	blx	r4
		return true;
    ac38:	2301      	movs	r3, #1
    ac3a:	e000      	b.n	ac3e <usbdc_clear_ftr_req+0x5a>
	default:
		return false;
    ac3c:	2300      	movs	r3, #0
	}
}
    ac3e:	0018      	movs	r0, r3
    ac40:	46bd      	mov	sp, r7
    ac42:	b003      	add	sp, #12
    ac44:	bd90      	pop	{r4, r7, pc}
    ac46:	46c0      	nop			; (mov r8, r8)
    ac48:	00002be9 	.word	0x00002be9
    ac4c:	0000b3dd 	.word	0x0000b3dd

0000ac50 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    ac50:	b590      	push	{r4, r7, lr}
    ac52:	b083      	sub	sp, #12
    ac54:	af00      	add	r7, sp, #0
    ac56:	0002      	movs	r2, r0
    ac58:	6039      	str	r1, [r7, #0]
    ac5a:	1dfb      	adds	r3, r7, #7
    ac5c:	701a      	strb	r2, [r3, #0]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ac5e:	683b      	ldr	r3, [r7, #0]
    ac60:	781b      	ldrb	r3, [r3, #0]
    ac62:	001a      	movs	r2, r3
    ac64:	231f      	movs	r3, #31
    ac66:	4013      	ands	r3, r2
    ac68:	2b02      	cmp	r3, #2
    ac6a:	d11d      	bne.n	aca8 <usbdc_set_ftr_req+0x58>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    ac6c:	683b      	ldr	r3, [r7, #0]
    ac6e:	799a      	ldrb	r2, [r3, #6]
    ac70:	79db      	ldrb	r3, [r3, #7]
    ac72:	021b      	lsls	r3, r3, #8
    ac74:	4313      	orrs	r3, r2
    ac76:	b29b      	uxth	r3, r3
    ac78:	2b00      	cmp	r3, #0
    ac7a:	d001      	beq.n	ac80 <usbdc_set_ftr_req+0x30>
			return false;
    ac7c:	2300      	movs	r3, #0
    ac7e:	e014      	b.n	acaa <usbdc_set_ftr_req+0x5a>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    ac80:	683b      	ldr	r3, [r7, #0]
    ac82:	791a      	ldrb	r2, [r3, #4]
    ac84:	795b      	ldrb	r3, [r3, #5]
    ac86:	021b      	lsls	r3, r3, #8
    ac88:	4313      	orrs	r3, r2
    ac8a:	b29b      	uxth	r3, r3
    ac8c:	b2db      	uxtb	r3, r3
    ac8e:	2101      	movs	r1, #1
    ac90:	0018      	movs	r0, r3
    ac92:	4b08      	ldr	r3, [pc, #32]	; (acb4 <usbdc_set_ftr_req+0x64>)
    ac94:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    ac96:	1dfb      	adds	r3, r7, #7
    ac98:	7818      	ldrb	r0, [r3, #0]
    ac9a:	2301      	movs	r3, #1
    ac9c:	2200      	movs	r2, #0
    ac9e:	2100      	movs	r1, #0
    aca0:	4c05      	ldr	r4, [pc, #20]	; (acb8 <usbdc_set_ftr_req+0x68>)
    aca2:	47a0      	blx	r4
		return true;
    aca4:	2301      	movs	r3, #1
    aca6:	e000      	b.n	acaa <usbdc_set_ftr_req+0x5a>
	default:
		return false;
    aca8:	2300      	movs	r3, #0
	}
}
    acaa:	0018      	movs	r0, r3
    acac:	46bd      	mov	sp, r7
    acae:	b003      	add	sp, #12
    acb0:	bd90      	pop	{r4, r7, pc}
    acb2:	46c0      	nop			; (mov r8, r8)
    acb4:	00002be9 	.word	0x00002be9
    acb8:	0000b3dd 	.word	0x0000b3dd

0000acbc <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    acbc:	b580      	push	{r7, lr}
    acbe:	b082      	sub	sp, #8
    acc0:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    acc2:	4b0a      	ldr	r3, [pc, #40]	; (acec <usbdc_unconfig+0x30>)
    acc4:	691b      	ldr	r3, [r3, #16]
    acc6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    acc8:	e008      	b.n	acdc <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    acca:	687b      	ldr	r3, [r7, #4]
    accc:	685b      	ldr	r3, [r3, #4]
    acce:	6878      	ldr	r0, [r7, #4]
    acd0:	2200      	movs	r2, #0
    acd2:	2101      	movs	r1, #1
    acd4:	4798      	blx	r3
		func = func->next;
    acd6:	687b      	ldr	r3, [r7, #4]
    acd8:	681b      	ldr	r3, [r3, #0]
    acda:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    acdc:	687b      	ldr	r3, [r7, #4]
    acde:	2b00      	cmp	r3, #0
    ace0:	d1f3      	bne.n	acca <usbdc_unconfig+0xe>
	}
}
    ace2:	46c0      	nop			; (mov r8, r8)
    ace4:	46bd      	mov	sp, r7
    ace6:	b002      	add	sp, #8
    ace8:	bd80      	pop	{r7, pc}
    acea:	46c0      	nop			; (mov r8, r8)
    acec:	20000460 	.word	0x20000460

0000acf0 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    acf0:	b590      	push	{r4, r7, lr}
    acf2:	b089      	sub	sp, #36	; 0x24
    acf4:	af00      	add	r7, sp, #0
    acf6:	0002      	movs	r2, r0
    acf8:	1dfb      	adds	r3, r7, #7
    acfa:	701a      	strb	r2, [r3, #0]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    acfc:	2300      	movs	r3, #0
    acfe:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    ad00:	2317      	movs	r3, #23
    ad02:	18fb      	adds	r3, r7, r3
    ad04:	22ff      	movs	r2, #255	; 0xff
    ad06:	701a      	strb	r2, [r3, #0]

	if (cfg_value == 0) {
    ad08:	1dfb      	adds	r3, r7, #7
    ad0a:	781b      	ldrb	r3, [r3, #0]
    ad0c:	2b00      	cmp	r3, #0
    ad0e:	d103      	bne.n	ad18 <usbdc_set_config+0x28>
		usbdc_unconfig();
    ad10:	4b3e      	ldr	r3, [pc, #248]	; (ae0c <usbdc_set_config+0x11c>)
    ad12:	4798      	blx	r3
		return true;
    ad14:	2301      	movs	r3, #1
    ad16:	e075      	b.n	ae04 <usbdc_set_config+0x114>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    ad18:	69bb      	ldr	r3, [r7, #24]
    ad1a:	2b00      	cmp	r3, #0
    ad1c:	d10c      	bne.n	ad38 <usbdc_set_config+0x48>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    ad1e:	4b3c      	ldr	r3, [pc, #240]	; (ae10 <usbdc_set_config+0x120>)
    ad20:	681b      	ldr	r3, [r3, #0]
    ad22:	6818      	ldr	r0, [r3, #0]
    ad24:	4b3a      	ldr	r3, [pc, #232]	; (ae10 <usbdc_set_config+0x120>)
    ad26:	681b      	ldr	r3, [r3, #0]
    ad28:	6859      	ldr	r1, [r3, #4]
    ad2a:	1dfb      	adds	r3, r7, #7
    ad2c:	781b      	ldrb	r3, [r3, #0]
    ad2e:	001a      	movs	r2, r3
    ad30:	4b38      	ldr	r3, [pc, #224]	; (ae14 <usbdc_set_config+0x124>)
    ad32:	4798      	blx	r3
    ad34:	0003      	movs	r3, r0
    ad36:	61bb      	str	r3, [r7, #24]
	}
	if (NULL == cfg_desc) {
    ad38:	69bb      	ldr	r3, [r7, #24]
    ad3a:	2b00      	cmp	r3, #0
    ad3c:	d101      	bne.n	ad42 <usbdc_set_config+0x52>
		return false;
    ad3e:	2300      	movs	r3, #0
    ad40:	e060      	b.n	ae04 <usbdc_set_config+0x114>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    ad42:	2314      	movs	r3, #20
    ad44:	18fc      	adds	r4, r7, r3
    ad46:	69bb      	ldr	r3, [r7, #24]
    ad48:	0018      	movs	r0, r3
    ad4a:	4b33      	ldr	r3, [pc, #204]	; (ae18 <usbdc_set_config+0x128>)
    ad4c:	4798      	blx	r3
    ad4e:	0003      	movs	r3, r0
    ad50:	8023      	strh	r3, [r4, #0]
	desc.eod  = cfg_desc + total_len;
    ad52:	2314      	movs	r3, #20
    ad54:	18fb      	adds	r3, r7, r3
    ad56:	881b      	ldrh	r3, [r3, #0]
    ad58:	69ba      	ldr	r2, [r7, #24]
    ad5a:	18d2      	adds	r2, r2, r3
    ad5c:	230c      	movs	r3, #12
    ad5e:	18fb      	adds	r3, r7, r3
    ad60:	605a      	str	r2, [r3, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    ad62:	230c      	movs	r3, #12
    ad64:	18fb      	adds	r3, r7, r3
    ad66:	6859      	ldr	r1, [r3, #4]
    ad68:	69bb      	ldr	r3, [r7, #24]
    ad6a:	2204      	movs	r2, #4
    ad6c:	0018      	movs	r0, r3
    ad6e:	4b2b      	ldr	r3, [pc, #172]	; (ae1c <usbdc_set_config+0x12c>)
    ad70:	4798      	blx	r3
    ad72:	0002      	movs	r2, r0
    ad74:	230c      	movs	r3, #12
    ad76:	18fb      	adds	r3, r7, r3
    ad78:	601a      	str	r2, [r3, #0]

	while (NULL != desc.sod) {
    ad7a:	e03d      	b.n	adf8 <usbdc_set_config+0x108>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    ad7c:	230c      	movs	r3, #12
    ad7e:	18fb      	adds	r3, r7, r3
    ad80:	681b      	ldr	r3, [r3, #0]
    ad82:	3302      	adds	r3, #2
    ad84:	781b      	ldrb	r3, [r3, #0]
    ad86:	2217      	movs	r2, #23
    ad88:	18ba      	adds	r2, r7, r2
    ad8a:	7812      	ldrb	r2, [r2, #0]
    ad8c:	429a      	cmp	r2, r3
    ad8e:	d01b      	beq.n	adc8 <usbdc_set_config+0xd8>
			last_iface = desc.sod[2];
    ad90:	230c      	movs	r3, #12
    ad92:	18fb      	adds	r3, r7, r3
    ad94:	681a      	ldr	r2, [r3, #0]
    ad96:	2317      	movs	r3, #23
    ad98:	18fb      	adds	r3, r7, r3
    ad9a:	7892      	ldrb	r2, [r2, #2]
    ad9c:	701a      	strb	r2, [r3, #0]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    ad9e:	4b1c      	ldr	r3, [pc, #112]	; (ae10 <usbdc_set_config+0x120>)
    ada0:	691b      	ldr	r3, [r3, #16]
    ada2:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    ada4:	e00b      	b.n	adbe <usbdc_set_config+0xce>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    ada6:	69fb      	ldr	r3, [r7, #28]
    ada8:	685b      	ldr	r3, [r3, #4]
    adaa:	220c      	movs	r2, #12
    adac:	18ba      	adds	r2, r7, r2
    adae:	69f8      	ldr	r0, [r7, #28]
    adb0:	2100      	movs	r1, #0
    adb2:	4798      	blx	r3
    adb4:	1e03      	subs	r3, r0, #0
    adb6:	d006      	beq.n	adc6 <usbdc_set_config+0xd6>
					func = func->next;
    adb8:	69fb      	ldr	r3, [r7, #28]
    adba:	681b      	ldr	r3, [r3, #0]
    adbc:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    adbe:	69fb      	ldr	r3, [r7, #28]
    adc0:	2b00      	cmp	r3, #0
    adc2:	d1f0      	bne.n	ada6 <usbdc_set_config+0xb6>
    adc4:	e000      	b.n	adc8 <usbdc_set_config+0xd8>
				} else {
					break;
    adc6:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    adc8:	230c      	movs	r3, #12
    adca:	18fb      	adds	r3, r7, r3
    adcc:	681b      	ldr	r3, [r3, #0]
    adce:	0018      	movs	r0, r3
    add0:	4b13      	ldr	r3, [pc, #76]	; (ae20 <usbdc_set_config+0x130>)
    add2:	4798      	blx	r3
    add4:	0002      	movs	r2, r0
    add6:	230c      	movs	r3, #12
    add8:	18fb      	adds	r3, r7, r3
    adda:	601a      	str	r2, [r3, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    addc:	230c      	movs	r3, #12
    adde:	18fb      	adds	r3, r7, r3
    ade0:	6818      	ldr	r0, [r3, #0]
    ade2:	230c      	movs	r3, #12
    ade4:	18fb      	adds	r3, r7, r3
    ade6:	685b      	ldr	r3, [r3, #4]
    ade8:	2204      	movs	r2, #4
    adea:	0019      	movs	r1, r3
    adec:	4b0b      	ldr	r3, [pc, #44]	; (ae1c <usbdc_set_config+0x12c>)
    adee:	4798      	blx	r3
    adf0:	0002      	movs	r2, r0
    adf2:	230c      	movs	r3, #12
    adf4:	18fb      	adds	r3, r7, r3
    adf6:	601a      	str	r2, [r3, #0]
	while (NULL != desc.sod) {
    adf8:	230c      	movs	r3, #12
    adfa:	18fb      	adds	r3, r7, r3
    adfc:	681b      	ldr	r3, [r3, #0]
    adfe:	2b00      	cmp	r3, #0
    ae00:	d1bc      	bne.n	ad7c <usbdc_set_config+0x8c>
	}
	return true;
    ae02:	2301      	movs	r3, #1
}
    ae04:	0018      	movs	r0, r3
    ae06:	46bd      	mov	sp, r7
    ae08:	b009      	add	sp, #36	; 0x24
    ae0a:	bd90      	pop	{r4, r7, pc}
    ae0c:	0000acbd 	.word	0x0000acbd
    ae10:	20000460 	.word	0x20000460
    ae14:	0000b765 	.word	0x0000b765
    ae18:	0000a73d 	.word	0x0000a73d
    ae1c:	0000b695 	.word	0x0000b695
    ae20:	0000a719 	.word	0x0000a719

0000ae24 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    ae24:	b580      	push	{r7, lr}
    ae26:	b082      	sub	sp, #8
    ae28:	af00      	add	r7, sp, #0
    ae2a:	0002      	movs	r2, r0
    ae2c:	1dfb      	adds	r3, r7, #7
    ae2e:	701a      	strb	r2, [r3, #0]
	usb_d_set_address(addr);
    ae30:	1dfb      	adds	r3, r7, #7
    ae32:	781b      	ldrb	r3, [r3, #0]
    ae34:	0018      	movs	r0, r3
    ae36:	4b03      	ldr	r3, [pc, #12]	; (ae44 <usbdc_set_address+0x20>)
    ae38:	4798      	blx	r3
}
    ae3a:	46c0      	nop			; (mov r8, r8)
    ae3c:	46bd      	mov	sp, r7
    ae3e:	b002      	add	sp, #8
    ae40:	bd80      	pop	{r7, pc}
    ae42:	46c0      	nop			; (mov r8, r8)
    ae44:	000027b5 	.word	0x000027b5

0000ae48 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    ae48:	b590      	push	{r4, r7, lr}
    ae4a:	b087      	sub	sp, #28
    ae4c:	af00      	add	r7, sp, #0
    ae4e:	0002      	movs	r2, r0
    ae50:	1dbb      	adds	r3, r7, #6
    ae52:	801a      	strh	r2, [r3, #0]
    ae54:	1d3b      	adds	r3, r7, #4
    ae56:	1c0a      	adds	r2, r1, #0
    ae58:	801a      	strh	r2, [r3, #0]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    ae5a:	2300      	movs	r3, #0
    ae5c:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    ae5e:	693b      	ldr	r3, [r7, #16]
    ae60:	2b00      	cmp	r3, #0
    ae62:	d10c      	bne.n	ae7e <usbdc_set_interface+0x36>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    ae64:	4b4f      	ldr	r3, [pc, #316]	; (afa4 <usbdc_set_interface+0x15c>)
    ae66:	681b      	ldr	r3, [r3, #0]
    ae68:	6818      	ldr	r0, [r3, #0]
    ae6a:	4b4e      	ldr	r3, [pc, #312]	; (afa4 <usbdc_set_interface+0x15c>)
    ae6c:	681b      	ldr	r3, [r3, #0]
    ae6e:	6859      	ldr	r1, [r3, #4]
    ae70:	4b4c      	ldr	r3, [pc, #304]	; (afa4 <usbdc_set_interface+0x15c>)
    ae72:	7edb      	ldrb	r3, [r3, #27]
    ae74:	001a      	movs	r2, r3
    ae76:	4b4c      	ldr	r3, [pc, #304]	; (afa8 <usbdc_set_interface+0x160>)
    ae78:	4798      	blx	r3
    ae7a:	0003      	movs	r3, r0
    ae7c:	613b      	str	r3, [r7, #16]
	}
	if (NULL == ifc) {
    ae7e:	693b      	ldr	r3, [r7, #16]
    ae80:	2b00      	cmp	r3, #0
    ae82:	d101      	bne.n	ae88 <usbdc_set_interface+0x40>
		return false;
    ae84:	2300      	movs	r3, #0
    ae86:	e088      	b.n	af9a <usbdc_set_interface+0x152>
	}
	desc.sod = ifc;
    ae88:	2308      	movs	r3, #8
    ae8a:	18fb      	adds	r3, r7, r3
    ae8c:	693a      	ldr	r2, [r7, #16]
    ae8e:	601a      	str	r2, [r3, #0]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    ae90:	693b      	ldr	r3, [r7, #16]
    ae92:	0018      	movs	r0, r3
    ae94:	4b45      	ldr	r3, [pc, #276]	; (afac <usbdc_set_interface+0x164>)
    ae96:	4798      	blx	r3
    ae98:	0003      	movs	r3, r0
    ae9a:	001a      	movs	r2, r3
    ae9c:	693b      	ldr	r3, [r7, #16]
    ae9e:	189a      	adds	r2, r3, r2
    aea0:	2308      	movs	r3, #8
    aea2:	18fb      	adds	r3, r7, r3
    aea4:	605a      	str	r2, [r3, #4]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    aea6:	2308      	movs	r3, #8
    aea8:	18fb      	adds	r3, r7, r3
    aeaa:	6818      	ldr	r0, [r3, #0]
    aeac:	2308      	movs	r3, #8
    aeae:	18fb      	adds	r3, r7, r3
    aeb0:	685b      	ldr	r3, [r3, #4]
    aeb2:	2204      	movs	r2, #4
    aeb4:	0019      	movs	r1, r3
    aeb6:	4b3e      	ldr	r3, [pc, #248]	; (afb0 <usbdc_set_interface+0x168>)
    aeb8:	4798      	blx	r3
    aeba:	0003      	movs	r3, r0
    aebc:	613b      	str	r3, [r7, #16]
    aebe:	693b      	ldr	r3, [r7, #16]
    aec0:	2b00      	cmp	r3, #0
    aec2:	d11c      	bne.n	aefe <usbdc_set_interface+0xb6>
		return false;
    aec4:	2300      	movs	r3, #0
    aec6:	e068      	b.n	af9a <usbdc_set_interface+0x152>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    aec8:	2308      	movs	r3, #8
    aeca:	18fb      	adds	r3, r7, r3
    aecc:	681b      	ldr	r3, [r3, #0]
    aece:	0018      	movs	r0, r3
    aed0:	4b38      	ldr	r3, [pc, #224]	; (afb4 <usbdc_set_interface+0x16c>)
    aed2:	4798      	blx	r3
    aed4:	0002      	movs	r2, r0
    aed6:	2308      	movs	r3, #8
    aed8:	18fb      	adds	r3, r7, r3
    aeda:	601a      	str	r2, [r3, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    aedc:	2308      	movs	r3, #8
    aede:	18fb      	adds	r3, r7, r3
    aee0:	6818      	ldr	r0, [r3, #0]
    aee2:	2308      	movs	r3, #8
    aee4:	18fb      	adds	r3, r7, r3
    aee6:	685b      	ldr	r3, [r3, #4]
    aee8:	2204      	movs	r2, #4
    aeea:	0019      	movs	r1, r3
    aeec:	4b30      	ldr	r3, [pc, #192]	; (afb0 <usbdc_set_interface+0x168>)
    aeee:	4798      	blx	r3
    aef0:	0003      	movs	r3, r0
    aef2:	613b      	str	r3, [r7, #16]
		if (NULL == ifc) {
    aef4:	693b      	ldr	r3, [r7, #16]
    aef6:	2b00      	cmp	r3, #0
    aef8:	d101      	bne.n	aefe <usbdc_set_interface+0xb6>
			return false;
    aefa:	2300      	movs	r3, #0
    aefc:	e04d      	b.n	af9a <usbdc_set_interface+0x152>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    aefe:	693b      	ldr	r3, [r7, #16]
    af00:	3302      	adds	r3, #2
    af02:	781b      	ldrb	r3, [r3, #0]
    af04:	b29b      	uxth	r3, r3
    af06:	1d3a      	adds	r2, r7, #4
    af08:	8812      	ldrh	r2, [r2, #0]
    af0a:	429a      	cmp	r2, r3
    af0c:	d1dc      	bne.n	aec8 <usbdc_set_interface+0x80>
    af0e:	693b      	ldr	r3, [r7, #16]
    af10:	3303      	adds	r3, #3
    af12:	781b      	ldrb	r3, [r3, #0]
    af14:	b29b      	uxth	r3, r3
    af16:	1dba      	adds	r2, r7, #6
    af18:	8812      	ldrh	r2, [r2, #0]
    af1a:	429a      	cmp	r2, r3
    af1c:	d1d4      	bne.n	aec8 <usbdc_set_interface+0x80>
		}
	}

	desc.sod = ifc;
    af1e:	2308      	movs	r3, #8
    af20:	18fb      	adds	r3, r7, r3
    af22:	693a      	ldr	r2, [r7, #16]
    af24:	601a      	str	r2, [r3, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    af26:	4b1f      	ldr	r3, [pc, #124]	; (afa4 <usbdc_set_interface+0x15c>)
    af28:	691b      	ldr	r3, [r3, #16]
    af2a:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    af2c:	e031      	b.n	af92 <usbdc_set_interface+0x14a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    af2e:	697b      	ldr	r3, [r7, #20]
    af30:	685b      	ldr	r3, [r3, #4]
    af32:	2208      	movs	r2, #8
    af34:	18ba      	adds	r2, r7, r2
    af36:	6978      	ldr	r0, [r7, #20]
    af38:	2101      	movs	r1, #1
    af3a:	4798      	blx	r3
    af3c:	1e03      	subs	r3, r0, #0
    af3e:	d003      	beq.n	af48 <usbdc_set_interface+0x100>
			func = func->next;
    af40:	697b      	ldr	r3, [r7, #20]
    af42:	681b      	ldr	r3, [r3, #0]
    af44:	617b      	str	r3, [r7, #20]
    af46:	e024      	b.n	af92 <usbdc_set_interface+0x14a>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    af48:	697b      	ldr	r3, [r7, #20]
    af4a:	685b      	ldr	r3, [r3, #4]
    af4c:	2208      	movs	r2, #8
    af4e:	18ba      	adds	r2, r7, r2
    af50:	6978      	ldr	r0, [r7, #20]
    af52:	2100      	movs	r1, #0
    af54:	4798      	blx	r3
    af56:	1e03      	subs	r3, r0, #0
    af58:	d119      	bne.n	af8e <usbdc_set_interface+0x146>
			if (alt_set) {
    af5a:	1dbb      	adds	r3, r7, #6
    af5c:	881b      	ldrh	r3, [r3, #0]
    af5e:	2b00      	cmp	r3, #0
    af60:	d00d      	beq.n	af7e <usbdc_set_interface+0x136>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    af62:	4b10      	ldr	r3, [pc, #64]	; (afa4 <usbdc_set_interface+0x15c>)
    af64:	7f5b      	ldrb	r3, [r3, #29]
    af66:	b25a      	sxtb	r2, r3
    af68:	1d3b      	adds	r3, r7, #4
    af6a:	881b      	ldrh	r3, [r3, #0]
    af6c:	2101      	movs	r1, #1
    af6e:	4099      	lsls	r1, r3
    af70:	000b      	movs	r3, r1
    af72:	b25b      	sxtb	r3, r3
    af74:	4313      	orrs	r3, r2
    af76:	b25b      	sxtb	r3, r3
    af78:	b2da      	uxtb	r2, r3
    af7a:	4b0a      	ldr	r3, [pc, #40]	; (afa4 <usbdc_set_interface+0x15c>)
    af7c:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    af7e:	2300      	movs	r3, #0
    af80:	2200      	movs	r2, #0
    af82:	2100      	movs	r1, #0
    af84:	2000      	movs	r0, #0
    af86:	4c0c      	ldr	r4, [pc, #48]	; (afb8 <usbdc_set_interface+0x170>)
    af88:	47a0      	blx	r4
			return true;
    af8a:	2301      	movs	r3, #1
    af8c:	e005      	b.n	af9a <usbdc_set_interface+0x152>
		} else {
			return false;
    af8e:	2300      	movs	r3, #0
    af90:	e003      	b.n	af9a <usbdc_set_interface+0x152>
	while (NULL != func) {
    af92:	697b      	ldr	r3, [r7, #20]
    af94:	2b00      	cmp	r3, #0
    af96:	d1ca      	bne.n	af2e <usbdc_set_interface+0xe6>
		}
	}

	return false;
    af98:	2300      	movs	r3, #0
}
    af9a:	0018      	movs	r0, r3
    af9c:	46bd      	mov	sp, r7
    af9e:	b007      	add	sp, #28
    afa0:	bd90      	pop	{r4, r7, pc}
    afa2:	46c0      	nop			; (mov r8, r8)
    afa4:	20000460 	.word	0x20000460
    afa8:	0000b765 	.word	0x0000b765
    afac:	0000a73d 	.word	0x0000a73d
    afb0:	0000b695 	.word	0x0000b695
    afb4:	0000a719 	.word	0x0000a719
    afb8:	0000b3dd 	.word	0x0000b3dd

0000afbc <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    afbc:	b590      	push	{r4, r7, lr}
    afbe:	b083      	sub	sp, #12
    afc0:	af00      	add	r7, sp, #0
    afc2:	0002      	movs	r2, r0
    afc4:	6039      	str	r1, [r7, #0]
    afc6:	1dfb      	adds	r3, r7, #7
    afc8:	701a      	strb	r2, [r3, #0]
	switch (req->bRequest) {
    afca:	683b      	ldr	r3, [r7, #0]
    afcc:	785b      	ldrb	r3, [r3, #1]
    afce:	2b0b      	cmp	r3, #11
    afd0:	d852      	bhi.n	b078 <usbdc_set_req+0xbc>
    afd2:	009a      	lsls	r2, r3, #2
    afd4:	4b2b      	ldr	r3, [pc, #172]	; (b084 <usbdc_set_req+0xc8>)
    afd6:	18d3      	adds	r3, r2, r3
    afd8:	681b      	ldr	r3, [r3, #0]
    afda:	469f      	mov	pc, r3
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    afdc:	1dfb      	adds	r3, r7, #7
    afde:	7818      	ldrb	r0, [r3, #0]
    afe0:	2301      	movs	r3, #1
    afe2:	2200      	movs	r2, #0
    afe4:	2100      	movs	r1, #0
    afe6:	4c28      	ldr	r4, [pc, #160]	; (b088 <usbdc_set_req+0xcc>)
    afe8:	47a0      	blx	r4
    afea:	0003      	movs	r3, r0
    afec:	425a      	negs	r2, r3
    afee:	4153      	adcs	r3, r2
    aff0:	b2db      	uxtb	r3, r3
    aff2:	e042      	b.n	b07a <usbdc_set_req+0xbe>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    aff4:	683b      	ldr	r3, [r7, #0]
    aff6:	789a      	ldrb	r2, [r3, #2]
    aff8:	78db      	ldrb	r3, [r3, #3]
    affa:	021b      	lsls	r3, r3, #8
    affc:	4313      	orrs	r3, r2
    affe:	b29b      	uxth	r3, r3
    b000:	b2db      	uxtb	r3, r3
    b002:	0018      	movs	r0, r3
    b004:	4b21      	ldr	r3, [pc, #132]	; (b08c <usbdc_set_req+0xd0>)
    b006:	4798      	blx	r3
    b008:	0003      	movs	r3, r0
    b00a:	001a      	movs	r2, r3
    b00c:	2301      	movs	r3, #1
    b00e:	4053      	eors	r3, r2
    b010:	b2db      	uxtb	r3, r3
    b012:	2b00      	cmp	r3, #0
    b014:	d001      	beq.n	b01a <usbdc_set_req+0x5e>
			return false;
    b016:	2300      	movs	r3, #0
    b018:	e02f      	b.n	b07a <usbdc_set_req+0xbe>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    b01a:	1dfb      	adds	r3, r7, #7
    b01c:	7818      	ldrb	r0, [r3, #0]
    b01e:	2301      	movs	r3, #1
    b020:	2200      	movs	r2, #0
    b022:	2100      	movs	r1, #0
    b024:	4c18      	ldr	r4, [pc, #96]	; (b088 <usbdc_set_req+0xcc>)
    b026:	47a0      	blx	r4
    b028:	0003      	movs	r3, r0
    b02a:	425a      	negs	r2, r3
    b02c:	4153      	adcs	r3, r2
    b02e:	b2db      	uxtb	r3, r3
    b030:	e023      	b.n	b07a <usbdc_set_req+0xbe>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    b032:	683a      	ldr	r2, [r7, #0]
    b034:	1dfb      	adds	r3, r7, #7
    b036:	781b      	ldrb	r3, [r3, #0]
    b038:	0011      	movs	r1, r2
    b03a:	0018      	movs	r0, r3
    b03c:	4b14      	ldr	r3, [pc, #80]	; (b090 <usbdc_set_req+0xd4>)
    b03e:	4798      	blx	r3
    b040:	0003      	movs	r3, r0
    b042:	e01a      	b.n	b07a <usbdc_set_req+0xbe>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    b044:	683a      	ldr	r2, [r7, #0]
    b046:	1dfb      	adds	r3, r7, #7
    b048:	781b      	ldrb	r3, [r3, #0]
    b04a:	0011      	movs	r1, r2
    b04c:	0018      	movs	r0, r3
    b04e:	4b11      	ldr	r3, [pc, #68]	; (b094 <usbdc_set_req+0xd8>)
    b050:	4798      	blx	r3
    b052:	0003      	movs	r3, r0
    b054:	e011      	b.n	b07a <usbdc_set_req+0xbe>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    b056:	683b      	ldr	r3, [r7, #0]
    b058:	789a      	ldrb	r2, [r3, #2]
    b05a:	78db      	ldrb	r3, [r3, #3]
    b05c:	021b      	lsls	r3, r3, #8
    b05e:	4313      	orrs	r3, r2
    b060:	b298      	uxth	r0, r3
    b062:	683b      	ldr	r3, [r7, #0]
    b064:	791a      	ldrb	r2, [r3, #4]
    b066:	795b      	ldrb	r3, [r3, #5]
    b068:	021b      	lsls	r3, r3, #8
    b06a:	4313      	orrs	r3, r2
    b06c:	b29b      	uxth	r3, r3
    b06e:	0019      	movs	r1, r3
    b070:	4b09      	ldr	r3, [pc, #36]	; (b098 <usbdc_set_req+0xdc>)
    b072:	4798      	blx	r3
    b074:	0003      	movs	r3, r0
    b076:	e000      	b.n	b07a <usbdc_set_req+0xbe>
	default:
		return false;
    b078:	2300      	movs	r3, #0
	}
}
    b07a:	0018      	movs	r0, r3
    b07c:	46bd      	mov	sp, r7
    b07e:	b003      	add	sp, #12
    b080:	bd90      	pop	{r4, r7, pc}
    b082:	46c0      	nop			; (mov r8, r8)
    b084:	0000c4c4 	.word	0x0000c4c4
    b088:	0000b3dd 	.word	0x0000b3dd
    b08c:	0000acf1 	.word	0x0000acf1
    b090:	0000abe5 	.word	0x0000abe5
    b094:	0000ac51 	.word	0x0000ac51
    b098:	0000ae49 	.word	0x0000ae49

0000b09c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    b09c:	b580      	push	{r7, lr}
    b09e:	b082      	sub	sp, #8
    b0a0:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    b0a2:	4b0a      	ldr	r3, [pc, #40]	; (b0cc <usbdc_sof_notify+0x30>)
    b0a4:	685b      	ldr	r3, [r3, #4]
    b0a6:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    b0a8:	e009      	b.n	b0be <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    b0aa:	687b      	ldr	r3, [r7, #4]
    b0ac:	685b      	ldr	r3, [r3, #4]
    b0ae:	2b00      	cmp	r3, #0
    b0b0:	d002      	beq.n	b0b8 <usbdc_sof_notify+0x1c>
			sof->cb();
    b0b2:	687b      	ldr	r3, [r7, #4]
    b0b4:	685b      	ldr	r3, [r3, #4]
    b0b6:	4798      	blx	r3
		}
		sof = sof->next;
    b0b8:	687b      	ldr	r3, [r7, #4]
    b0ba:	681b      	ldr	r3, [r3, #0]
    b0bc:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    b0be:	687b      	ldr	r3, [r7, #4]
    b0c0:	2b00      	cmp	r3, #0
    b0c2:	d1f2      	bne.n	b0aa <usbdc_sof_notify+0xe>
	}
}
    b0c4:	46c0      	nop			; (mov r8, r8)
    b0c6:	46bd      	mov	sp, r7
    b0c8:	b002      	add	sp, #8
    b0ca:	bd80      	pop	{r7, pc}
    b0cc:	20000460 	.word	0x20000460

0000b0d0 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    b0d0:	b580      	push	{r7, lr}
    b0d2:	b084      	sub	sp, #16
    b0d4:	af00      	add	r7, sp, #0
    b0d6:	0002      	movs	r2, r0
    b0d8:	6039      	str	r1, [r7, #0]
    b0da:	1dfb      	adds	r3, r7, #7
    b0dc:	701a      	strb	r2, [r3, #0]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    b0de:	4b0c      	ldr	r3, [pc, #48]	; (b110 <usbdc_change_notify+0x40>)
    b0e0:	68db      	ldr	r3, [r3, #12]
    b0e2:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    b0e4:	e00d      	b.n	b102 <usbdc_change_notify+0x32>
		if (NULL != cg->cb) {
    b0e6:	68fb      	ldr	r3, [r7, #12]
    b0e8:	685b      	ldr	r3, [r3, #4]
    b0ea:	2b00      	cmp	r3, #0
    b0ec:	d006      	beq.n	b0fc <usbdc_change_notify+0x2c>
			cg->cb(change, value);
    b0ee:	68fb      	ldr	r3, [r7, #12]
    b0f0:	685b      	ldr	r3, [r3, #4]
    b0f2:	6839      	ldr	r1, [r7, #0]
    b0f4:	1dfa      	adds	r2, r7, #7
    b0f6:	7812      	ldrb	r2, [r2, #0]
    b0f8:	0010      	movs	r0, r2
    b0fa:	4798      	blx	r3
		}
		cg = cg->next;
    b0fc:	68fb      	ldr	r3, [r7, #12]
    b0fe:	681b      	ldr	r3, [r3, #0]
    b100:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    b102:	68fb      	ldr	r3, [r7, #12]
    b104:	2b00      	cmp	r3, #0
    b106:	d1ee      	bne.n	b0e6 <usbdc_change_notify+0x16>
	}
}
    b108:	46c0      	nop			; (mov r8, r8)
    b10a:	46bd      	mov	sp, r7
    b10c:	b004      	add	sp, #16
    b10e:	bd80      	pop	{r7, pc}
    b110:	20000460 	.word	0x20000460

0000b114 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b114:	b590      	push	{r4, r7, lr}
    b116:	b085      	sub	sp, #20
    b118:	af00      	add	r7, sp, #0
    b11a:	6039      	str	r1, [r7, #0]
    b11c:	0011      	movs	r1, r2
    b11e:	1dfb      	adds	r3, r7, #7
    b120:	1c02      	adds	r2, r0, #0
    b122:	701a      	strb	r2, [r3, #0]
    b124:	1dbb      	adds	r3, r7, #6
    b126:	1c0a      	adds	r2, r1, #0
    b128:	701a      	strb	r2, [r3, #0]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    b12a:	4b14      	ldr	r3, [pc, #80]	; (b17c <usbdc_request_handler+0x68>)
    b12c:	689b      	ldr	r3, [r3, #8]
    b12e:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    b130:	e01c      	b.n	b16c <usbdc_request_handler+0x58>
		if (NULL != h->cb) {
    b132:	68fb      	ldr	r3, [r7, #12]
    b134:	685b      	ldr	r3, [r3, #4]
    b136:	2b00      	cmp	r3, #0
    b138:	d015      	beq.n	b166 <usbdc_request_handler+0x52>
			rc = h->cb(ep, req, stage);
    b13a:	68fb      	ldr	r3, [r7, #12]
    b13c:	685b      	ldr	r3, [r3, #4]
    b13e:	1dba      	adds	r2, r7, #6
    b140:	7814      	ldrb	r4, [r2, #0]
    b142:	6839      	ldr	r1, [r7, #0]
    b144:	1dfa      	adds	r2, r7, #7
    b146:	7810      	ldrb	r0, [r2, #0]
    b148:	0022      	movs	r2, r4
    b14a:	4798      	blx	r3
    b14c:	0003      	movs	r3, r0
    b14e:	60bb      	str	r3, [r7, #8]
			if (0 == rc) {
    b150:	68bb      	ldr	r3, [r7, #8]
    b152:	2b00      	cmp	r3, #0
    b154:	d101      	bne.n	b15a <usbdc_request_handler+0x46>
				return true;
    b156:	2301      	movs	r3, #1
    b158:	e00c      	b.n	b174 <usbdc_request_handler+0x60>
			} else if (ERR_NOT_FOUND != rc) {
    b15a:	68bb      	ldr	r3, [r7, #8]
    b15c:	330a      	adds	r3, #10
    b15e:	d002      	beq.n	b166 <usbdc_request_handler+0x52>
				return -1;
    b160:	2301      	movs	r3, #1
    b162:	425b      	negs	r3, r3
    b164:	e006      	b.n	b174 <usbdc_request_handler+0x60>
			}
		}
		h = h->next;
    b166:	68fb      	ldr	r3, [r7, #12]
    b168:	681b      	ldr	r3, [r3, #0]
    b16a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    b16c:	68fb      	ldr	r3, [r7, #12]
    b16e:	2b00      	cmp	r3, #0
    b170:	d1df      	bne.n	b132 <usbdc_request_handler+0x1e>
	}
	return false;
    b172:	2300      	movs	r3, #0
}
    b174:	0018      	movs	r0, r3
    b176:	46bd      	mov	sp, r7
    b178:	b005      	add	sp, #20
    b17a:	bd90      	pop	{r4, r7, pc}
    b17c:	20000460 	.word	0x20000460

0000b180 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    b180:	b580      	push	{r7, lr}
    b182:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    b184:	4b02      	ldr	r3, [pc, #8]	; (b190 <usbd_sof_cb+0x10>)
    b186:	4798      	blx	r3
}
    b188:	46c0      	nop			; (mov r8, r8)
    b18a:	46bd      	mov	sp, r7
    b18c:	bd80      	pop	{r7, pc}
    b18e:	46c0      	nop			; (mov r8, r8)
    b190:	0000b09d 	.word	0x0000b09d

0000b194 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    b194:	b580      	push	{r7, lr}
    b196:	b082      	sub	sp, #8
    b198:	af00      	add	r7, sp, #0
    b19a:	0002      	movs	r2, r0
    b19c:	6039      	str	r1, [r7, #0]
    b19e:	1dfb      	adds	r3, r7, #7
    b1a0:	701a      	strb	r2, [r3, #0]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    b1a2:	6839      	ldr	r1, [r7, #0]
    b1a4:	1dfb      	adds	r3, r7, #7
    b1a6:	781b      	ldrb	r3, [r3, #0]
    b1a8:	2200      	movs	r2, #0
    b1aa:	0018      	movs	r0, r3
    b1ac:	4b16      	ldr	r3, [pc, #88]	; (b208 <usbdc_cb_ctl_req+0x74>)
    b1ae:	4798      	blx	r3
    b1b0:	0003      	movs	r3, r0
    b1b2:	1c5a      	adds	r2, r3, #1
    b1b4:	d00b      	beq.n	b1ce <usbdc_cb_ctl_req+0x3a>
    b1b6:	2b01      	cmp	r3, #1
    b1b8:	d007      	beq.n	b1ca <usbdc_cb_ctl_req+0x36>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    b1ba:	46c0      	nop			; (mov r8, r8)
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    b1bc:	683b      	ldr	r3, [r7, #0]
    b1be:	781b      	ldrb	r3, [r3, #0]
    b1c0:	001a      	movs	r2, r3
    b1c2:	23e0      	movs	r3, #224	; 0xe0
    b1c4:	4013      	ands	r3, r2
    b1c6:	d007      	beq.n	b1d8 <usbdc_cb_ctl_req+0x44>
    b1c8:	e003      	b.n	b1d2 <usbdc_cb_ctl_req+0x3e>
		return true;
    b1ca:	2301      	movs	r3, #1
    b1cc:	e017      	b.n	b1fe <usbdc_cb_ctl_req+0x6a>
		return false;
    b1ce:	2300      	movs	r3, #0
    b1d0:	e015      	b.n	b1fe <usbdc_cb_ctl_req+0x6a>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    b1d2:	2b80      	cmp	r3, #128	; 0x80
    b1d4:	d009      	beq.n	b1ea <usbdc_cb_ctl_req+0x56>
    b1d6:	e011      	b.n	b1fc <usbdc_cb_ctl_req+0x68>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    b1d8:	683a      	ldr	r2, [r7, #0]
    b1da:	1dfb      	adds	r3, r7, #7
    b1dc:	781b      	ldrb	r3, [r3, #0]
    b1de:	0011      	movs	r1, r2
    b1e0:	0018      	movs	r0, r3
    b1e2:	4b0a      	ldr	r3, [pc, #40]	; (b20c <usbdc_cb_ctl_req+0x78>)
    b1e4:	4798      	blx	r3
    b1e6:	0003      	movs	r3, r0
    b1e8:	e009      	b.n	b1fe <usbdc_cb_ctl_req+0x6a>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    b1ea:	683a      	ldr	r2, [r7, #0]
    b1ec:	1dfb      	adds	r3, r7, #7
    b1ee:	781b      	ldrb	r3, [r3, #0]
    b1f0:	0011      	movs	r1, r2
    b1f2:	0018      	movs	r0, r3
    b1f4:	4b06      	ldr	r3, [pc, #24]	; (b210 <usbdc_cb_ctl_req+0x7c>)
    b1f6:	4798      	blx	r3
    b1f8:	0003      	movs	r3, r0
    b1fa:	e000      	b.n	b1fe <usbdc_cb_ctl_req+0x6a>
	default:
		return false;
    b1fc:	2300      	movs	r3, #0
	}
}
    b1fe:	0018      	movs	r0, r3
    b200:	46bd      	mov	sp, r7
    b202:	b002      	add	sp, #8
    b204:	bd80      	pop	{r7, pc}
    b206:	46c0      	nop			; (mov r8, r8)
    b208:	0000b115 	.word	0x0000b115
    b20c:	0000afbd 	.word	0x0000afbd
    b210:	0000ab51 	.word	0x0000ab51

0000b214 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    b214:	b580      	push	{r7, lr}
    b216:	b082      	sub	sp, #8
    b218:	af00      	add	r7, sp, #0
    b21a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    b21c:	687b      	ldr	r3, [r7, #4]
    b21e:	781b      	ldrb	r3, [r3, #0]
    b220:	2b00      	cmp	r3, #0
    b222:	d141      	bne.n	b2a8 <usbdc_ctrl_status_end+0x94>
		return;
	}
	switch (req->bRequest) {
    b224:	687b      	ldr	r3, [r7, #4]
    b226:	785b      	ldrb	r3, [r3, #1]
    b228:	2b05      	cmp	r3, #5
    b22a:	d01f      	beq.n	b26c <usbdc_ctrl_status_end+0x58>
    b22c:	2b09      	cmp	r3, #9
    b22e:	d000      	beq.n	b232 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    b230:	e03b      	b.n	b2aa <usbdc_ctrl_status_end+0x96>
		usbdc.cfg_value = req->wValue;
    b232:	687b      	ldr	r3, [r7, #4]
    b234:	789a      	ldrb	r2, [r3, #2]
    b236:	78db      	ldrb	r3, [r3, #3]
    b238:	021b      	lsls	r3, r3, #8
    b23a:	4313      	orrs	r3, r2
    b23c:	b29b      	uxth	r3, r3
    b23e:	b2da      	uxtb	r2, r3
    b240:	4b1b      	ldr	r3, [pc, #108]	; (b2b0 <usbdc_ctrl_status_end+0x9c>)
    b242:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    b244:	687b      	ldr	r3, [r7, #4]
    b246:	789a      	ldrb	r2, [r3, #2]
    b248:	78db      	ldrb	r3, [r3, #3]
    b24a:	021b      	lsls	r3, r3, #8
    b24c:	4313      	orrs	r3, r2
    b24e:	b29b      	uxth	r3, r3
    b250:	2b00      	cmp	r3, #0
    b252:	d001      	beq.n	b258 <usbdc_ctrl_status_end+0x44>
    b254:	2204      	movs	r2, #4
    b256:	e000      	b.n	b25a <usbdc_ctrl_status_end+0x46>
    b258:	2203      	movs	r2, #3
    b25a:	4b15      	ldr	r3, [pc, #84]	; (b2b0 <usbdc_ctrl_status_end+0x9c>)
    b25c:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    b25e:	4b14      	ldr	r3, [pc, #80]	; (b2b0 <usbdc_ctrl_status_end+0x9c>)
    b260:	7e9b      	ldrb	r3, [r3, #26]
    b262:	0019      	movs	r1, r3
    b264:	2001      	movs	r0, #1
    b266:	4b13      	ldr	r3, [pc, #76]	; (b2b4 <usbdc_ctrl_status_end+0xa0>)
    b268:	4798      	blx	r3
		break;
    b26a:	e01e      	b.n	b2aa <usbdc_ctrl_status_end+0x96>
		usbdc_set_address(req->wValue);
    b26c:	687b      	ldr	r3, [r7, #4]
    b26e:	789a      	ldrb	r2, [r3, #2]
    b270:	78db      	ldrb	r3, [r3, #3]
    b272:	021b      	lsls	r3, r3, #8
    b274:	4313      	orrs	r3, r2
    b276:	b29b      	uxth	r3, r3
    b278:	b2db      	uxtb	r3, r3
    b27a:	0018      	movs	r0, r3
    b27c:	4b0e      	ldr	r3, [pc, #56]	; (b2b8 <usbdc_ctrl_status_end+0xa4>)
    b27e:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    b280:	687b      	ldr	r3, [r7, #4]
    b282:	789a      	ldrb	r2, [r3, #2]
    b284:	78db      	ldrb	r3, [r3, #3]
    b286:	021b      	lsls	r3, r3, #8
    b288:	4313      	orrs	r3, r2
    b28a:	b29b      	uxth	r3, r3
    b28c:	2b00      	cmp	r3, #0
    b28e:	d001      	beq.n	b294 <usbdc_ctrl_status_end+0x80>
    b290:	2203      	movs	r2, #3
    b292:	e000      	b.n	b296 <usbdc_ctrl_status_end+0x82>
    b294:	2202      	movs	r2, #2
    b296:	4b06      	ldr	r3, [pc, #24]	; (b2b0 <usbdc_ctrl_status_end+0x9c>)
    b298:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    b29a:	4b05      	ldr	r3, [pc, #20]	; (b2b0 <usbdc_ctrl_status_end+0x9c>)
    b29c:	7e9b      	ldrb	r3, [r3, #26]
    b29e:	0019      	movs	r1, r3
    b2a0:	2001      	movs	r0, #1
    b2a2:	4b04      	ldr	r3, [pc, #16]	; (b2b4 <usbdc_ctrl_status_end+0xa0>)
    b2a4:	4798      	blx	r3
		break;
    b2a6:	e000      	b.n	b2aa <usbdc_ctrl_status_end+0x96>
		return;
    b2a8:	46c0      	nop			; (mov r8, r8)
	}
}
    b2aa:	46bd      	mov	sp, r7
    b2ac:	b002      	add	sp, #8
    b2ae:	bd80      	pop	{r7, pc}
    b2b0:	20000460 	.word	0x20000460
    b2b4:	0000b0d1 	.word	0x0000b0d1
    b2b8:	0000ae25 	.word	0x0000ae25

0000b2bc <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    b2bc:	b580      	push	{r7, lr}
    b2be:	b082      	sub	sp, #8
    b2c0:	af00      	add	r7, sp, #0
    b2c2:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    b2c4:	687b      	ldr	r3, [r7, #4]
    b2c6:	2201      	movs	r2, #1
    b2c8:	0019      	movs	r1, r3
    b2ca:	2000      	movs	r0, #0
    b2cc:	4b03      	ldr	r3, [pc, #12]	; (b2dc <usbdc_ctrl_data_end+0x20>)
    b2ce:	4798      	blx	r3
	return false;
    b2d0:	2300      	movs	r3, #0
}
    b2d2:	0018      	movs	r0, r3
    b2d4:	46bd      	mov	sp, r7
    b2d6:	b002      	add	sp, #8
    b2d8:	bd80      	pop	{r7, pc}
    b2da:	46c0      	nop			; (mov r8, r8)
    b2dc:	0000b115 	.word	0x0000b115

0000b2e0 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    b2e0:	b580      	push	{r7, lr}
    b2e2:	b082      	sub	sp, #8
    b2e4:	af00      	add	r7, sp, #0
    b2e6:	603a      	str	r2, [r7, #0]
    b2e8:	1dfb      	adds	r3, r7, #7
    b2ea:	1c02      	adds	r2, r0, #0
    b2ec:	701a      	strb	r2, [r3, #0]
    b2ee:	1dbb      	adds	r3, r7, #6
    b2f0:	1c0a      	adds	r2, r1, #0
    b2f2:	701a      	strb	r2, [r3, #0]
	(void)ep;

	switch (code) {
    b2f4:	1dbb      	adds	r3, r7, #6
    b2f6:	781b      	ldrb	r3, [r3, #0]
    b2f8:	2b00      	cmp	r3, #0
    b2fa:	d002      	beq.n	b302 <usbdc_cb_ctl_done+0x22>
    b2fc:	2b01      	cmp	r3, #1
    b2fe:	d005      	beq.n	b30c <usbdc_cb_ctl_done+0x2c>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    b300:	e00a      	b.n	b318 <usbdc_cb_ctl_done+0x38>
		usbdc_ctrl_status_end(req);
    b302:	683b      	ldr	r3, [r7, #0]
    b304:	0018      	movs	r0, r3
    b306:	4b07      	ldr	r3, [pc, #28]	; (b324 <usbdc_cb_ctl_done+0x44>)
    b308:	4798      	blx	r3
		break;
    b30a:	e005      	b.n	b318 <usbdc_cb_ctl_done+0x38>
		return usbdc_ctrl_data_end(req);
    b30c:	683b      	ldr	r3, [r7, #0]
    b30e:	0018      	movs	r0, r3
    b310:	4b05      	ldr	r3, [pc, #20]	; (b328 <usbdc_cb_ctl_done+0x48>)
    b312:	4798      	blx	r3
    b314:	0003      	movs	r3, r0
    b316:	e000      	b.n	b31a <usbdc_cb_ctl_done+0x3a>
	}
	return false;
    b318:	2300      	movs	r3, #0
}
    b31a:	0018      	movs	r0, r3
    b31c:	46bd      	mov	sp, r7
    b31e:	b002      	add	sp, #8
    b320:	bd80      	pop	{r7, pc}
    b322:	46c0      	nop			; (mov r8, r8)
    b324:	0000b215 	.word	0x0000b215
    b328:	0000b2bd 	.word	0x0000b2bd

0000b32c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    b32c:	b580      	push	{r7, lr}
    b32e:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    b330:	4b12      	ldr	r3, [pc, #72]	; (b37c <usbdc_reset+0x50>)
    b332:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    b334:	4b12      	ldr	r3, [pc, #72]	; (b380 <usbdc_reset+0x54>)
    b336:	2202      	movs	r2, #2
    b338:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    b33a:	4b11      	ldr	r3, [pc, #68]	; (b380 <usbdc_reset+0x54>)
    b33c:	2200      	movs	r2, #0
    b33e:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    b340:	4b0f      	ldr	r3, [pc, #60]	; (b380 <usbdc_reset+0x54>)
    b342:	2200      	movs	r2, #0
    b344:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    b346:	2000      	movs	r0, #0
    b348:	4b0e      	ldr	r3, [pc, #56]	; (b384 <usbdc_reset+0x58>)
    b34a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    b34c:	4b0c      	ldr	r3, [pc, #48]	; (b380 <usbdc_reset+0x54>)
    b34e:	7f1b      	ldrb	r3, [r3, #28]
    b350:	0018      	movs	r0, r3
    b352:	4b0d      	ldr	r3, [pc, #52]	; (b388 <usbdc_reset+0x5c>)
    b354:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    b356:	4b0d      	ldr	r3, [pc, #52]	; (b38c <usbdc_reset+0x60>)
    b358:	001a      	movs	r2, r3
    b35a:	2100      	movs	r1, #0
    b35c:	2000      	movs	r0, #0
    b35e:	4b0c      	ldr	r3, [pc, #48]	; (b390 <usbdc_reset+0x64>)
    b360:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    b362:	4b0c      	ldr	r3, [pc, #48]	; (b394 <usbdc_reset+0x68>)
    b364:	001a      	movs	r2, r3
    b366:	2102      	movs	r1, #2
    b368:	2000      	movs	r0, #0
    b36a:	4b09      	ldr	r3, [pc, #36]	; (b390 <usbdc_reset+0x64>)
    b36c:	4798      	blx	r3
	usb_d_ep_enable(0);
    b36e:	2000      	movs	r0, #0
    b370:	4b09      	ldr	r3, [pc, #36]	; (b398 <usbdc_reset+0x6c>)
    b372:	4798      	blx	r3
}
    b374:	46c0      	nop			; (mov r8, r8)
    b376:	46bd      	mov	sp, r7
    b378:	bd80      	pop	{r7, pc}
    b37a:	46c0      	nop			; (mov r8, r8)
    b37c:	0000acbd 	.word	0x0000acbd
    b380:	20000460 	.word	0x20000460
    b384:	000028d1 	.word	0x000028d1
    b388:	000027d9 	.word	0x000027d9
    b38c:	0000b195 	.word	0x0000b195
    b390:	00002c49 	.word	0x00002c49
    b394:	0000b2e1 	.word	0x0000b2e1
    b398:	00002931 	.word	0x00002931

0000b39c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    b39c:	b580      	push	{r7, lr}
    b39e:	b082      	sub	sp, #8
    b3a0:	af00      	add	r7, sp, #0
    b3a2:	0002      	movs	r2, r0
    b3a4:	6039      	str	r1, [r7, #0]
    b3a6:	1dfb      	adds	r3, r7, #7
    b3a8:	701a      	strb	r2, [r3, #0]
	(void)param;

	switch (ev) {
    b3aa:	1dfb      	adds	r3, r7, #7
    b3ac:	781b      	ldrb	r3, [r3, #0]
    b3ae:	2b00      	cmp	r3, #0
    b3b0:	d002      	beq.n	b3b8 <usbd_event_cb+0x1c>
    b3b2:	2b01      	cmp	r3, #1
    b3b4:	d006      	beq.n	b3c4 <usbd_event_cb+0x28>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    b3b6:	e008      	b.n	b3ca <usbd_event_cb+0x2e>
		usbdc_change_notify(USBDC_C_CONN, param);
    b3b8:	683b      	ldr	r3, [r7, #0]
    b3ba:	0019      	movs	r1, r3
    b3bc:	2000      	movs	r0, #0
    b3be:	4b05      	ldr	r3, [pc, #20]	; (b3d4 <usbd_event_cb+0x38>)
    b3c0:	4798      	blx	r3
		break;
    b3c2:	e002      	b.n	b3ca <usbd_event_cb+0x2e>
		usbdc_reset();
    b3c4:	4b04      	ldr	r3, [pc, #16]	; (b3d8 <usbd_event_cb+0x3c>)
    b3c6:	4798      	blx	r3
		break;
    b3c8:	46c0      	nop			; (mov r8, r8)
	}
}
    b3ca:	46c0      	nop			; (mov r8, r8)
    b3cc:	46bd      	mov	sp, r7
    b3ce:	b002      	add	sp, #8
    b3d0:	bd80      	pop	{r7, pc}
    b3d2:	46c0      	nop			; (mov r8, r8)
    b3d4:	0000b0d1 	.word	0x0000b0d1
    b3d8:	0000b32d 	.word	0x0000b32d

0000b3dc <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    b3dc:	b580      	push	{r7, lr}
    b3de:	b088      	sub	sp, #32
    b3e0:	af00      	add	r7, sp, #0
    b3e2:	60b9      	str	r1, [r7, #8]
    b3e4:	607a      	str	r2, [r7, #4]
    b3e6:	0019      	movs	r1, r3
    b3e8:	230f      	movs	r3, #15
    b3ea:	18fb      	adds	r3, r7, r3
    b3ec:	1c02      	adds	r2, r0, #0
    b3ee:	701a      	strb	r2, [r3, #0]
    b3f0:	230e      	movs	r3, #14
    b3f2:	18fb      	adds	r3, r7, r3
    b3f4:	1c0a      	adds	r2, r1, #0
    b3f6:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b3f8:	2314      	movs	r3, #20
    b3fa:	18fb      	adds	r3, r7, r3
    b3fc:	68ba      	ldr	r2, [r7, #8]
    b3fe:	601a      	str	r2, [r3, #0]
    b400:	2314      	movs	r3, #20
    b402:	18fb      	adds	r3, r7, r3
    b404:	687a      	ldr	r2, [r7, #4]
    b406:	605a      	str	r2, [r3, #4]
    b408:	2314      	movs	r3, #20
    b40a:	18fb      	adds	r3, r7, r3
    b40c:	220f      	movs	r2, #15
    b40e:	18ba      	adds	r2, r7, r2
    b410:	7812      	ldrb	r2, [r2, #0]
    b412:	721a      	strb	r2, [r3, #8]
    b414:	230e      	movs	r3, #14
    b416:	18fb      	adds	r3, r7, r3
    b418:	781a      	ldrb	r2, [r3, #0]
    b41a:	2314      	movs	r3, #20
    b41c:	18fb      	adds	r3, r7, r3
    b41e:	725a      	strb	r2, [r3, #9]
	return usb_d_ep_transfer(&xfer);
    b420:	2314      	movs	r3, #20
    b422:	18fb      	adds	r3, r7, r3
    b424:	0018      	movs	r0, r3
    b426:	4b03      	ldr	r3, [pc, #12]	; (b434 <usbdc_xfer+0x58>)
    b428:	4798      	blx	r3
    b42a:	0003      	movs	r3, r0
}
    b42c:	0018      	movs	r0, r3
    b42e:	46bd      	mov	sp, r7
    b430:	b008      	add	sp, #32
    b432:	bd80      	pop	{r7, pc}
    b434:	000029b1 	.word	0x000029b1

0000b438 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    b438:	b580      	push	{r7, lr}
    b43a:	b082      	sub	sp, #8
    b43c:	af00      	add	r7, sp, #0
    b43e:	0002      	movs	r2, r0
    b440:	6039      	str	r1, [r7, #0]
    b442:	1dfb      	adds	r3, r7, #7
    b444:	701a      	strb	r2, [r3, #0]
	switch (type) {
    b446:	1dfb      	adds	r3, r7, #7
    b448:	781b      	ldrb	r3, [r3, #0]
    b44a:	2b01      	cmp	r3, #1
    b44c:	d00b      	beq.n	b466 <usbdc_register_handler+0x2e>
    b44e:	2b02      	cmp	r3, #2
    b450:	d010      	beq.n	b474 <usbdc_register_handler+0x3c>
    b452:	2b00      	cmp	r3, #0
    b454:	d000      	beq.n	b458 <usbdc_register_handler+0x20>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    b456:	e014      	b.n	b482 <usbdc_register_handler+0x4a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    b458:	683a      	ldr	r2, [r7, #0]
    b45a:	4b0c      	ldr	r3, [pc, #48]	; (b48c <usbdc_register_handler+0x54>)
    b45c:	0011      	movs	r1, r2
    b45e:	0018      	movs	r0, r3
    b460:	4b0b      	ldr	r3, [pc, #44]	; (b490 <usbdc_register_handler+0x58>)
    b462:	4798      	blx	r3
		break;
    b464:	e00d      	b.n	b482 <usbdc_register_handler+0x4a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    b466:	683a      	ldr	r2, [r7, #0]
    b468:	4b0a      	ldr	r3, [pc, #40]	; (b494 <usbdc_register_handler+0x5c>)
    b46a:	0011      	movs	r1, r2
    b46c:	0018      	movs	r0, r3
    b46e:	4b08      	ldr	r3, [pc, #32]	; (b490 <usbdc_register_handler+0x58>)
    b470:	4798      	blx	r3
		break;
    b472:	e006      	b.n	b482 <usbdc_register_handler+0x4a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    b474:	683a      	ldr	r2, [r7, #0]
    b476:	4b08      	ldr	r3, [pc, #32]	; (b498 <usbdc_register_handler+0x60>)
    b478:	0011      	movs	r1, r2
    b47a:	0018      	movs	r0, r3
    b47c:	4b04      	ldr	r3, [pc, #16]	; (b490 <usbdc_register_handler+0x58>)
    b47e:	4798      	blx	r3
		break;
    b480:	46c0      	nop			; (mov r8, r8)
	}
}
    b482:	46c0      	nop			; (mov r8, r8)
    b484:	46bd      	mov	sp, r7
    b486:	b002      	add	sp, #8
    b488:	bd80      	pop	{r7, pc}
    b48a:	46c0      	nop			; (mov r8, r8)
    b48c:	20000464 	.word	0x20000464
    b490:	00002dad 	.word	0x00002dad
    b494:	20000468 	.word	0x20000468
    b498:	2000046c 	.word	0x2000046c

0000b49c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    b49c:	b580      	push	{r7, lr}
    b49e:	b084      	sub	sp, #16
    b4a0:	af00      	add	r7, sp, #0
    b4a2:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    b4a4:	687b      	ldr	r3, [r7, #4]
    b4a6:	1e5a      	subs	r2, r3, #1
    b4a8:	4193      	sbcs	r3, r2
    b4aa:	b2db      	uxtb	r3, r3
    b4ac:	4a12      	ldr	r2, [pc, #72]	; (b4f8 <usbdc_init+0x5c>)
    b4ae:	4913      	ldr	r1, [pc, #76]	; (b4fc <usbdc_init+0x60>)
    b4b0:	0018      	movs	r0, r3
    b4b2:	4b13      	ldr	r3, [pc, #76]	; (b500 <usbdc_init+0x64>)
    b4b4:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    b4b6:	4b13      	ldr	r3, [pc, #76]	; (b504 <usbdc_init+0x68>)
    b4b8:	4798      	blx	r3
    b4ba:	0003      	movs	r3, r0
    b4bc:	60fb      	str	r3, [r7, #12]
	if (rc < 0) {
    b4be:	68fb      	ldr	r3, [r7, #12]
    b4c0:	2b00      	cmp	r3, #0
    b4c2:	da01      	bge.n	b4c8 <usbdc_init+0x2c>
		return rc;
    b4c4:	68fb      	ldr	r3, [r7, #12]
    b4c6:	e013      	b.n	b4f0 <usbdc_init+0x54>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    b4c8:	4b0f      	ldr	r3, [pc, #60]	; (b508 <usbdc_init+0x6c>)
    b4ca:	2220      	movs	r2, #32
    b4cc:	2100      	movs	r1, #0
    b4ce:	0018      	movs	r0, r3
    b4d0:	4b0e      	ldr	r3, [pc, #56]	; (b50c <usbdc_init+0x70>)
    b4d2:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    b4d4:	4b0c      	ldr	r3, [pc, #48]	; (b508 <usbdc_init+0x6c>)
    b4d6:	687a      	ldr	r2, [r7, #4]
    b4d8:	615a      	str	r2, [r3, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    b4da:	4b0d      	ldr	r3, [pc, #52]	; (b510 <usbdc_init+0x74>)
    b4dc:	0019      	movs	r1, r3
    b4de:	2000      	movs	r0, #0
    b4e0:	4b0c      	ldr	r3, [pc, #48]	; (b514 <usbdc_init+0x78>)
    b4e2:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    b4e4:	4b0c      	ldr	r3, [pc, #48]	; (b518 <usbdc_init+0x7c>)
    b4e6:	0019      	movs	r1, r3
    b4e8:	2001      	movs	r0, #1
    b4ea:	4b0a      	ldr	r3, [pc, #40]	; (b514 <usbdc_init+0x78>)
    b4ec:	4798      	blx	r3

	return 0;
    b4ee:	2300      	movs	r3, #0
}
    b4f0:	0018      	movs	r0, r3
    b4f2:	46bd      	mov	sp, r7
    b4f4:	b004      	add	sp, #16
    b4f6:	bd80      	pop	{r7, pc}
    b4f8:	00000355 	.word	0x00000355
    b4fc:	0000c4f4 	.word	0x0000c4f4
    b500:	00002cd5 	.word	0x00002cd5
    b504:	0000269d 	.word	0x0000269d
    b508:	20000460 	.word	0x20000460
    b50c:	0000ba57 	.word	0x0000ba57
    b510:	0000b181 	.word	0x0000b181
    b514:	00002765 	.word	0x00002765
    b518:	0000b39d 	.word	0x0000b39d

0000b51c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    b51c:	b580      	push	{r7, lr}
    b51e:	b082      	sub	sp, #8
    b520:	af00      	add	r7, sp, #0
    b522:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    b524:	687a      	ldr	r2, [r7, #4]
    b526:	4b04      	ldr	r3, [pc, #16]	; (b538 <usbdc_register_function+0x1c>)
    b528:	0011      	movs	r1, r2
    b52a:	0018      	movs	r0, r3
    b52c:	4b03      	ldr	r3, [pc, #12]	; (b53c <usbdc_register_function+0x20>)
    b52e:	4798      	blx	r3
}
    b530:	46c0      	nop			; (mov r8, r8)
    b532:	46bd      	mov	sp, r7
    b534:	b002      	add	sp, #8
    b536:	bd80      	pop	{r7, pc}
    b538:	20000470 	.word	0x20000470
    b53c:	00002dad 	.word	0x00002dad

0000b540 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    b540:	b580      	push	{r7, lr}
    b542:	b082      	sub	sp, #8
    b544:	af00      	add	r7, sp, #0
    b546:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    b548:	4b0f      	ldr	r3, [pc, #60]	; (b588 <usbdc_start+0x48>)
    b54a:	7e9b      	ldrb	r3, [r3, #26]
    b54c:	2b00      	cmp	r3, #0
    b54e:	d002      	beq.n	b556 <usbdc_start+0x16>
		return ERR_BUSY;
    b550:	2304      	movs	r3, #4
    b552:	425b      	negs	r3, r3
    b554:	e013      	b.n	b57e <usbdc_start+0x3e>
	}

	if (desces) {
    b556:	687b      	ldr	r3, [r7, #4]
    b558:	2b00      	cmp	r3, #0
    b55a:	d00e      	beq.n	b57a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    b55c:	4b0a      	ldr	r3, [pc, #40]	; (b588 <usbdc_start+0x48>)
    b55e:	687a      	ldr	r2, [r7, #4]
    b560:	601a      	str	r2, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    b562:	687b      	ldr	r3, [r7, #4]
    b564:	681b      	ldr	r3, [r3, #0]
    b566:	79da      	ldrb	r2, [r3, #7]
    b568:	4b07      	ldr	r3, [pc, #28]	; (b588 <usbdc_start+0x48>)
    b56a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    b56c:	4b06      	ldr	r3, [pc, #24]	; (b588 <usbdc_start+0x48>)
    b56e:	2201      	movs	r2, #1
    b570:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    b572:	4b06      	ldr	r3, [pc, #24]	; (b58c <usbdc_start+0x4c>)
    b574:	4798      	blx	r3
	return ERR_NONE;
    b576:	2300      	movs	r3, #0
    b578:	e001      	b.n	b57e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    b57a:	2309      	movs	r3, #9
    b57c:	425b      	negs	r3, r3
}
    b57e:	0018      	movs	r0, r3
    b580:	46bd      	mov	sp, r7
    b582:	b002      	add	sp, #8
    b584:	bd80      	pop	{r7, pc}
    b586:	46c0      	nop			; (mov r8, r8)
    b588:	20000460 	.word	0x20000460
    b58c:	0000278d 	.word	0x0000278d

0000b590 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    b590:	b580      	push	{r7, lr}
    b592:	af00      	add	r7, sp, #0
	usb_d_attach();
    b594:	4b02      	ldr	r3, [pc, #8]	; (b5a0 <usbdc_attach+0x10>)
    b596:	4798      	blx	r3
}
    b598:	46c0      	nop			; (mov r8, r8)
    b59a:	46bd      	mov	sp, r7
    b59c:	bd80      	pop	{r7, pc}
    b59e:	46c0      	nop			; (mov r8, r8)
    b5a0:	000027a1 	.word	0x000027a1

0000b5a4 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    b5a4:	b580      	push	{r7, lr}
    b5a6:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    b5a8:	4b02      	ldr	r3, [pc, #8]	; (b5b4 <usbdc_get_ctrl_buffer+0x10>)
    b5aa:	695b      	ldr	r3, [r3, #20]
}
    b5ac:	0018      	movs	r0, r3
    b5ae:	46bd      	mov	sp, r7
    b5b0:	bd80      	pop	{r7, pc}
    b5b2:	46c0      	nop			; (mov r8, r8)
    b5b4:	20000460 	.word	0x20000460

0000b5b8 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    b5b8:	b580      	push	{r7, lr}
    b5ba:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    b5bc:	4b06      	ldr	r3, [pc, #24]	; (b5d8 <usbdc_get_state+0x20>)
    b5be:	7e9b      	ldrb	r3, [r3, #26]
    b5c0:	001a      	movs	r2, r3
    b5c2:	2310      	movs	r3, #16
    b5c4:	4013      	ands	r3, r2
    b5c6:	d001      	beq.n	b5cc <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    b5c8:	2310      	movs	r3, #16
    b5ca:	e001      	b.n	b5d0 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    b5cc:	4b02      	ldr	r3, [pc, #8]	; (b5d8 <usbdc_get_state+0x20>)
    b5ce:	7e9b      	ldrb	r3, [r3, #26]
}
    b5d0:	0018      	movs	r0, r3
    b5d2:	46bd      	mov	sp, r7
    b5d4:	bd80      	pop	{r7, pc}
    b5d6:	46c0      	nop			; (mov r8, r8)
    b5d8:	20000460 	.word	0x20000460

0000b5dc <usb_get_u16>:
{
    b5dc:	b580      	push	{r7, lr}
    b5de:	b082      	sub	sp, #8
    b5e0:	af00      	add	r7, sp, #0
    b5e2:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b5e4:	687b      	ldr	r3, [r7, #4]
    b5e6:	781b      	ldrb	r3, [r3, #0]
    b5e8:	b29a      	uxth	r2, r3
    b5ea:	687b      	ldr	r3, [r7, #4]
    b5ec:	3301      	adds	r3, #1
    b5ee:	781b      	ldrb	r3, [r3, #0]
    b5f0:	b29b      	uxth	r3, r3
    b5f2:	021b      	lsls	r3, r3, #8
    b5f4:	b29b      	uxth	r3, r3
    b5f6:	18d3      	adds	r3, r2, r3
    b5f8:	b29b      	uxth	r3, r3
}
    b5fa:	0018      	movs	r0, r3
    b5fc:	46bd      	mov	sp, r7
    b5fe:	b002      	add	sp, #8
    b600:	bd80      	pop	{r7, pc}

0000b602 <usb_desc_len>:
{
    b602:	b580      	push	{r7, lr}
    b604:	b082      	sub	sp, #8
    b606:	af00      	add	r7, sp, #0
    b608:	6078      	str	r0, [r7, #4]
	return desc[0];
    b60a:	687b      	ldr	r3, [r7, #4]
    b60c:	781b      	ldrb	r3, [r3, #0]
}
    b60e:	0018      	movs	r0, r3
    b610:	46bd      	mov	sp, r7
    b612:	b002      	add	sp, #8
    b614:	bd80      	pop	{r7, pc}

0000b616 <usb_desc_type>:
{
    b616:	b580      	push	{r7, lr}
    b618:	b082      	sub	sp, #8
    b61a:	af00      	add	r7, sp, #0
    b61c:	6078      	str	r0, [r7, #4]
	return desc[1];
    b61e:	687b      	ldr	r3, [r7, #4]
    b620:	3301      	adds	r3, #1
    b622:	781b      	ldrb	r3, [r3, #0]
}
    b624:	0018      	movs	r0, r3
    b626:	46bd      	mov	sp, r7
    b628:	b002      	add	sp, #8
    b62a:	bd80      	pop	{r7, pc}

0000b62c <usb_desc_next>:
{
    b62c:	b580      	push	{r7, lr}
    b62e:	b082      	sub	sp, #8
    b630:	af00      	add	r7, sp, #0
    b632:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b634:	687b      	ldr	r3, [r7, #4]
    b636:	0018      	movs	r0, r3
    b638:	4b04      	ldr	r3, [pc, #16]	; (b64c <usb_desc_next+0x20>)
    b63a:	4798      	blx	r3
    b63c:	0003      	movs	r3, r0
    b63e:	001a      	movs	r2, r3
    b640:	687b      	ldr	r3, [r7, #4]
    b642:	189b      	adds	r3, r3, r2
}
    b644:	0018      	movs	r0, r3
    b646:	46bd      	mov	sp, r7
    b648:	b002      	add	sp, #8
    b64a:	bd80      	pop	{r7, pc}
    b64c:	0000b603 	.word	0x0000b603

0000b650 <usb_cfg_desc_total_len>:
{
    b650:	b580      	push	{r7, lr}
    b652:	b082      	sub	sp, #8
    b654:	af00      	add	r7, sp, #0
    b656:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    b658:	687b      	ldr	r3, [r7, #4]
    b65a:	3302      	adds	r3, #2
    b65c:	0018      	movs	r0, r3
    b65e:	4b03      	ldr	r3, [pc, #12]	; (b66c <usb_cfg_desc_total_len+0x1c>)
    b660:	4798      	blx	r3
    b662:	0003      	movs	r3, r0
}
    b664:	0018      	movs	r0, r3
    b666:	46bd      	mov	sp, r7
    b668:	b002      	add	sp, #8
    b66a:	bd80      	pop	{r7, pc}
    b66c:	0000b5dd 	.word	0x0000b5dd

0000b670 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    b670:	b580      	push	{r7, lr}
    b672:	b082      	sub	sp, #8
    b674:	af00      	add	r7, sp, #0
    b676:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    b678:	687b      	ldr	r3, [r7, #4]
    b67a:	0018      	movs	r0, r3
    b67c:	4b04      	ldr	r3, [pc, #16]	; (b690 <usb_cfg_desc_next+0x20>)
    b67e:	4798      	blx	r3
    b680:	0003      	movs	r3, r0
    b682:	001a      	movs	r2, r3
    b684:	687b      	ldr	r3, [r7, #4]
    b686:	189b      	adds	r3, r3, r2
}
    b688:	0018      	movs	r0, r3
    b68a:	46bd      	mov	sp, r7
    b68c:	b002      	add	sp, #8
    b68e:	bd80      	pop	{r7, pc}
    b690:	0000b651 	.word	0x0000b651

0000b694 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    b694:	b580      	push	{r7, lr}
    b696:	b084      	sub	sp, #16
    b698:	af00      	add	r7, sp, #0
    b69a:	60f8      	str	r0, [r7, #12]
    b69c:	60b9      	str	r1, [r7, #8]
    b69e:	1dfb      	adds	r3, r7, #7
    b6a0:	701a      	strb	r2, [r3, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    b6a2:	e01a      	b.n	b6da <usb_find_desc+0x46>
		_desc_len_check();
    b6a4:	68fb      	ldr	r3, [r7, #12]
    b6a6:	0018      	movs	r0, r3
    b6a8:	4b10      	ldr	r3, [pc, #64]	; (b6ec <usb_find_desc+0x58>)
    b6aa:	4798      	blx	r3
    b6ac:	0003      	movs	r3, r0
    b6ae:	2b01      	cmp	r3, #1
    b6b0:	d801      	bhi.n	b6b6 <usb_find_desc+0x22>
    b6b2:	2300      	movs	r3, #0
    b6b4:	e016      	b.n	b6e4 <usb_find_desc+0x50>
		if (type == usb_desc_type(desc)) {
    b6b6:	68fb      	ldr	r3, [r7, #12]
    b6b8:	0018      	movs	r0, r3
    b6ba:	4b0d      	ldr	r3, [pc, #52]	; (b6f0 <usb_find_desc+0x5c>)
    b6bc:	4798      	blx	r3
    b6be:	0003      	movs	r3, r0
    b6c0:	001a      	movs	r2, r3
    b6c2:	1dfb      	adds	r3, r7, #7
    b6c4:	781b      	ldrb	r3, [r3, #0]
    b6c6:	4293      	cmp	r3, r2
    b6c8:	d101      	bne.n	b6ce <usb_find_desc+0x3a>
			return desc;
    b6ca:	68fb      	ldr	r3, [r7, #12]
    b6cc:	e00a      	b.n	b6e4 <usb_find_desc+0x50>
		}
		desc = usb_desc_next(desc);
    b6ce:	68fb      	ldr	r3, [r7, #12]
    b6d0:	0018      	movs	r0, r3
    b6d2:	4b08      	ldr	r3, [pc, #32]	; (b6f4 <usb_find_desc+0x60>)
    b6d4:	4798      	blx	r3
    b6d6:	0003      	movs	r3, r0
    b6d8:	60fb      	str	r3, [r7, #12]
	while (desc < eof) {
    b6da:	68fa      	ldr	r2, [r7, #12]
    b6dc:	68bb      	ldr	r3, [r7, #8]
    b6de:	429a      	cmp	r2, r3
    b6e0:	d3e0      	bcc.n	b6a4 <usb_find_desc+0x10>
	}
	return NULL;
    b6e2:	2300      	movs	r3, #0
}
    b6e4:	0018      	movs	r0, r3
    b6e6:	46bd      	mov	sp, r7
    b6e8:	b004      	add	sp, #16
    b6ea:	bd80      	pop	{r7, pc}
    b6ec:	0000b603 	.word	0x0000b603
    b6f0:	0000b617 	.word	0x0000b617
    b6f4:	0000b62d 	.word	0x0000b62d

0000b6f8 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    b6f8:	b580      	push	{r7, lr}
    b6fa:	b082      	sub	sp, #8
    b6fc:	af00      	add	r7, sp, #0
    b6fe:	6078      	str	r0, [r7, #4]
    b700:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    b702:	e01e      	b.n	b742 <usb_find_ep_desc+0x4a>
		_desc_len_check();
    b704:	687b      	ldr	r3, [r7, #4]
    b706:	0018      	movs	r0, r3
    b708:	4b13      	ldr	r3, [pc, #76]	; (b758 <usb_find_ep_desc+0x60>)
    b70a:	4798      	blx	r3
    b70c:	0003      	movs	r3, r0
    b70e:	2b01      	cmp	r3, #1
    b710:	d801      	bhi.n	b716 <usb_find_ep_desc+0x1e>
    b712:	2300      	movs	r3, #0
    b714:	e01c      	b.n	b750 <usb_find_ep_desc+0x58>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    b716:	687b      	ldr	r3, [r7, #4]
    b718:	0018      	movs	r0, r3
    b71a:	4b10      	ldr	r3, [pc, #64]	; (b75c <usb_find_ep_desc+0x64>)
    b71c:	4798      	blx	r3
    b71e:	0003      	movs	r3, r0
    b720:	2b04      	cmp	r3, #4
    b722:	d013      	beq.n	b74c <usb_find_ep_desc+0x54>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    b724:	687b      	ldr	r3, [r7, #4]
    b726:	0018      	movs	r0, r3
    b728:	4b0c      	ldr	r3, [pc, #48]	; (b75c <usb_find_ep_desc+0x64>)
    b72a:	4798      	blx	r3
    b72c:	0003      	movs	r3, r0
    b72e:	2b05      	cmp	r3, #5
    b730:	d101      	bne.n	b736 <usb_find_ep_desc+0x3e>
			return desc;
    b732:	687b      	ldr	r3, [r7, #4]
    b734:	e00c      	b.n	b750 <usb_find_ep_desc+0x58>
		}
		desc = usb_desc_next(desc);
    b736:	687b      	ldr	r3, [r7, #4]
    b738:	0018      	movs	r0, r3
    b73a:	4b09      	ldr	r3, [pc, #36]	; (b760 <usb_find_ep_desc+0x68>)
    b73c:	4798      	blx	r3
    b73e:	0003      	movs	r3, r0
    b740:	607b      	str	r3, [r7, #4]
	while (desc < eof) {
    b742:	687a      	ldr	r2, [r7, #4]
    b744:	683b      	ldr	r3, [r7, #0]
    b746:	429a      	cmp	r2, r3
    b748:	d3dc      	bcc.n	b704 <usb_find_ep_desc+0xc>
    b74a:	e000      	b.n	b74e <usb_find_ep_desc+0x56>
			break;
    b74c:	46c0      	nop			; (mov r8, r8)
	}
	return NULL;
    b74e:	2300      	movs	r3, #0
}
    b750:	0018      	movs	r0, r3
    b752:	46bd      	mov	sp, r7
    b754:	b002      	add	sp, #8
    b756:	bd80      	pop	{r7, pc}
    b758:	0000b603 	.word	0x0000b603
    b75c:	0000b617 	.word	0x0000b617
    b760:	0000b62d 	.word	0x0000b62d

0000b764 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    b764:	b580      	push	{r7, lr}
    b766:	b084      	sub	sp, #16
    b768:	af00      	add	r7, sp, #0
    b76a:	60f8      	str	r0, [r7, #12]
    b76c:	60b9      	str	r1, [r7, #8]
    b76e:	1dfb      	adds	r3, r7, #7
    b770:	701a      	strb	r2, [r3, #0]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    b772:	68b9      	ldr	r1, [r7, #8]
    b774:	68fb      	ldr	r3, [r7, #12]
    b776:	2202      	movs	r2, #2
    b778:	0018      	movs	r0, r3
    b77a:	4b18      	ldr	r3, [pc, #96]	; (b7dc <usb_find_cfg_desc+0x78>)
    b77c:	4798      	blx	r3
    b77e:	0003      	movs	r3, r0
    b780:	60fb      	str	r3, [r7, #12]
	if (!desc) {
    b782:	68fb      	ldr	r3, [r7, #12]
    b784:	2b00      	cmp	r3, #0
    b786:	d11e      	bne.n	b7c6 <usb_find_cfg_desc+0x62>
		return NULL;
    b788:	2300      	movs	r3, #0
    b78a:	e023      	b.n	b7d4 <usb_find_cfg_desc+0x70>
	}
	while (desc < eof) {
		_desc_len_check();
    b78c:	68fb      	ldr	r3, [r7, #12]
    b78e:	0018      	movs	r0, r3
    b790:	4b13      	ldr	r3, [pc, #76]	; (b7e0 <usb_find_cfg_desc+0x7c>)
    b792:	4798      	blx	r3
    b794:	0003      	movs	r3, r0
    b796:	2b01      	cmp	r3, #1
    b798:	d801      	bhi.n	b79e <usb_find_cfg_desc+0x3a>
    b79a:	2300      	movs	r3, #0
    b79c:	e01a      	b.n	b7d4 <usb_find_cfg_desc+0x70>
		if (desc[1] != USB_DT_CONFIG) {
    b79e:	68fb      	ldr	r3, [r7, #12]
    b7a0:	3301      	adds	r3, #1
    b7a2:	781b      	ldrb	r3, [r3, #0]
    b7a4:	2b02      	cmp	r3, #2
    b7a6:	d113      	bne.n	b7d0 <usb_find_cfg_desc+0x6c>
			break;
		}
		if (desc[5] == cfg_value) {
    b7a8:	68fb      	ldr	r3, [r7, #12]
    b7aa:	3305      	adds	r3, #5
    b7ac:	781b      	ldrb	r3, [r3, #0]
    b7ae:	1dfa      	adds	r2, r7, #7
    b7b0:	7812      	ldrb	r2, [r2, #0]
    b7b2:	429a      	cmp	r2, r3
    b7b4:	d101      	bne.n	b7ba <usb_find_cfg_desc+0x56>
			return desc;
    b7b6:	68fb      	ldr	r3, [r7, #12]
    b7b8:	e00c      	b.n	b7d4 <usb_find_cfg_desc+0x70>
		}
		desc = usb_cfg_desc_next(desc);
    b7ba:	68fb      	ldr	r3, [r7, #12]
    b7bc:	0018      	movs	r0, r3
    b7be:	4b09      	ldr	r3, [pc, #36]	; (b7e4 <usb_find_cfg_desc+0x80>)
    b7c0:	4798      	blx	r3
    b7c2:	0003      	movs	r3, r0
    b7c4:	60fb      	str	r3, [r7, #12]
	while (desc < eof) {
    b7c6:	68fa      	ldr	r2, [r7, #12]
    b7c8:	68bb      	ldr	r3, [r7, #8]
    b7ca:	429a      	cmp	r2, r3
    b7cc:	d3de      	bcc.n	b78c <usb_find_cfg_desc+0x28>
    b7ce:	e000      	b.n	b7d2 <usb_find_cfg_desc+0x6e>
			break;
    b7d0:	46c0      	nop			; (mov r8, r8)
	}
	return NULL;
    b7d2:	2300      	movs	r3, #0
}
    b7d4:	0018      	movs	r0, r3
    b7d6:	46bd      	mov	sp, r7
    b7d8:	b004      	add	sp, #16
    b7da:	bd80      	pop	{r7, pc}
    b7dc:	0000b695 	.word	0x0000b695
    b7e0:	0000b603 	.word	0x0000b603
    b7e4:	0000b671 	.word	0x0000b671

0000b7e8 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    b7e8:	b580      	push	{r7, lr}
    b7ea:	b086      	sub	sp, #24
    b7ec:	af00      	add	r7, sp, #0
    b7ee:	60f8      	str	r0, [r7, #12]
    b7f0:	60b9      	str	r1, [r7, #8]
    b7f2:	1dfb      	adds	r3, r7, #7
    b7f4:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    b7f6:	2317      	movs	r3, #23
    b7f8:	18fb      	adds	r3, r7, r3
    b7fa:	2200      	movs	r2, #0
    b7fc:	701a      	strb	r2, [r3, #0]
    b7fe:	e02c      	b.n	b85a <usb_find_str_desc+0x72>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    b800:	68b9      	ldr	r1, [r7, #8]
    b802:	68fb      	ldr	r3, [r7, #12]
    b804:	2203      	movs	r2, #3
    b806:	0018      	movs	r0, r3
    b808:	4b18      	ldr	r3, [pc, #96]	; (b86c <usb_find_str_desc+0x84>)
    b80a:	4798      	blx	r3
    b80c:	0003      	movs	r3, r0
    b80e:	60fb      	str	r3, [r7, #12]
		if (desc) {
    b810:	68fb      	ldr	r3, [r7, #12]
    b812:	2b00      	cmp	r3, #0
    b814:	d01f      	beq.n	b856 <usb_find_str_desc+0x6e>
			_desc_len_check();
    b816:	68fb      	ldr	r3, [r7, #12]
    b818:	0018      	movs	r0, r3
    b81a:	4b15      	ldr	r3, [pc, #84]	; (b870 <usb_find_str_desc+0x88>)
    b81c:	4798      	blx	r3
    b81e:	0003      	movs	r3, r0
    b820:	2b01      	cmp	r3, #1
    b822:	d801      	bhi.n	b828 <usb_find_str_desc+0x40>
    b824:	2300      	movs	r3, #0
    b826:	e01d      	b.n	b864 <usb_find_str_desc+0x7c>
			if (i == str_index) {
    b828:	2317      	movs	r3, #23
    b82a:	18fa      	adds	r2, r7, r3
    b82c:	1dfb      	adds	r3, r7, #7
    b82e:	7812      	ldrb	r2, [r2, #0]
    b830:	781b      	ldrb	r3, [r3, #0]
    b832:	429a      	cmp	r2, r3
    b834:	d101      	bne.n	b83a <usb_find_str_desc+0x52>
				return desc;
    b836:	68fb      	ldr	r3, [r7, #12]
    b838:	e014      	b.n	b864 <usb_find_str_desc+0x7c>
			}
			i++;
    b83a:	2317      	movs	r3, #23
    b83c:	18fb      	adds	r3, r7, r3
    b83e:	781a      	ldrb	r2, [r3, #0]
    b840:	2317      	movs	r3, #23
    b842:	18fb      	adds	r3, r7, r3
    b844:	3201      	adds	r2, #1
    b846:	701a      	strb	r2, [r3, #0]
			desc = usb_desc_next(desc);
    b848:	68fb      	ldr	r3, [r7, #12]
    b84a:	0018      	movs	r0, r3
    b84c:	4b09      	ldr	r3, [pc, #36]	; (b874 <usb_find_str_desc+0x8c>)
    b84e:	4798      	blx	r3
    b850:	0003      	movs	r3, r0
    b852:	60fb      	str	r3, [r7, #12]
    b854:	e001      	b.n	b85a <usb_find_str_desc+0x72>
		} else {
			return NULL;
    b856:	2300      	movs	r3, #0
    b858:	e004      	b.n	b864 <usb_find_str_desc+0x7c>
	for (i = 0; desc < eof;) {
    b85a:	68fa      	ldr	r2, [r7, #12]
    b85c:	68bb      	ldr	r3, [r7, #8]
    b85e:	429a      	cmp	r2, r3
    b860:	d3ce      	bcc.n	b800 <usb_find_str_desc+0x18>
		}
	}
	return NULL;
    b862:	2300      	movs	r3, #0
}
    b864:	0018      	movs	r0, r3
    b866:	46bd      	mov	sp, r7
    b868:	b006      	add	sp, #24
    b86a:	bd80      	pop	{r7, pc}
    b86c:	0000b695 	.word	0x0000b695
    b870:	0000b603 	.word	0x0000b603
    b874:	0000b62d 	.word	0x0000b62d

0000b878 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b878:	b580      	push	{r7, lr}
    b87a:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b87c:	4b07      	ldr	r3, [pc, #28]	; (b89c <cdc_device_acm_init+0x24>)
    b87e:	0018      	movs	r0, r3
    b880:	4b07      	ldr	r3, [pc, #28]	; (b8a0 <cdc_device_acm_init+0x28>)
    b882:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b884:	4b07      	ldr	r3, [pc, #28]	; (b8a4 <cdc_device_acm_init+0x2c>)
    b886:	4798      	blx	r3

	usbdc_start(single_desc);
    b888:	4b07      	ldr	r3, [pc, #28]	; (b8a8 <cdc_device_acm_init+0x30>)
    b88a:	0018      	movs	r0, r3
    b88c:	4b07      	ldr	r3, [pc, #28]	; (b8ac <cdc_device_acm_init+0x34>)
    b88e:	4798      	blx	r3
	usbdc_attach();
    b890:	4b07      	ldr	r3, [pc, #28]	; (b8b0 <cdc_device_acm_init+0x38>)
    b892:	4798      	blx	r3
}
    b894:	46c0      	nop			; (mov r8, r8)
    b896:	46bd      	mov	sp, r7
    b898:	bd80      	pop	{r7, pc}
    b89a:	46c0      	nop			; (mov r8, r8)
    b89c:	200004c0 	.word	0x200004c0
    b8a0:	0000b49d 	.word	0x0000b49d
    b8a4:	0000a629 	.word	0x0000a629
    b8a8:	200000fc 	.word	0x200000fc
    b8ac:	0000b541 	.word	0x0000b541
    b8b0:	0000b591 	.word	0x0000b591

0000b8b4 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b8b4:	b580      	push	{r7, lr}
    b8b6:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b8b8:	4b02      	ldr	r3, [pc, #8]	; (b8c4 <usb_init+0x10>)
    b8ba:	4798      	blx	r3
}
    b8bc:	46c0      	nop			; (mov r8, r8)
    b8be:	46bd      	mov	sp, r7
    b8c0:	bd80      	pop	{r7, pc}
    b8c2:	46c0      	nop			; (mov r8, r8)
    b8c4:	0000b879 	.word	0x0000b879

0000b8c8 <__udivsi3>:
    b8c8:	2200      	movs	r2, #0
    b8ca:	0843      	lsrs	r3, r0, #1
    b8cc:	428b      	cmp	r3, r1
    b8ce:	d374      	bcc.n	b9ba <__udivsi3+0xf2>
    b8d0:	0903      	lsrs	r3, r0, #4
    b8d2:	428b      	cmp	r3, r1
    b8d4:	d35f      	bcc.n	b996 <__udivsi3+0xce>
    b8d6:	0a03      	lsrs	r3, r0, #8
    b8d8:	428b      	cmp	r3, r1
    b8da:	d344      	bcc.n	b966 <__udivsi3+0x9e>
    b8dc:	0b03      	lsrs	r3, r0, #12
    b8de:	428b      	cmp	r3, r1
    b8e0:	d328      	bcc.n	b934 <__udivsi3+0x6c>
    b8e2:	0c03      	lsrs	r3, r0, #16
    b8e4:	428b      	cmp	r3, r1
    b8e6:	d30d      	bcc.n	b904 <__udivsi3+0x3c>
    b8e8:	22ff      	movs	r2, #255	; 0xff
    b8ea:	0209      	lsls	r1, r1, #8
    b8ec:	ba12      	rev	r2, r2
    b8ee:	0c03      	lsrs	r3, r0, #16
    b8f0:	428b      	cmp	r3, r1
    b8f2:	d302      	bcc.n	b8fa <__udivsi3+0x32>
    b8f4:	1212      	asrs	r2, r2, #8
    b8f6:	0209      	lsls	r1, r1, #8
    b8f8:	d065      	beq.n	b9c6 <__udivsi3+0xfe>
    b8fa:	0b03      	lsrs	r3, r0, #12
    b8fc:	428b      	cmp	r3, r1
    b8fe:	d319      	bcc.n	b934 <__udivsi3+0x6c>
    b900:	e000      	b.n	b904 <__udivsi3+0x3c>
    b902:	0a09      	lsrs	r1, r1, #8
    b904:	0bc3      	lsrs	r3, r0, #15
    b906:	428b      	cmp	r3, r1
    b908:	d301      	bcc.n	b90e <__udivsi3+0x46>
    b90a:	03cb      	lsls	r3, r1, #15
    b90c:	1ac0      	subs	r0, r0, r3
    b90e:	4152      	adcs	r2, r2
    b910:	0b83      	lsrs	r3, r0, #14
    b912:	428b      	cmp	r3, r1
    b914:	d301      	bcc.n	b91a <__udivsi3+0x52>
    b916:	038b      	lsls	r3, r1, #14
    b918:	1ac0      	subs	r0, r0, r3
    b91a:	4152      	adcs	r2, r2
    b91c:	0b43      	lsrs	r3, r0, #13
    b91e:	428b      	cmp	r3, r1
    b920:	d301      	bcc.n	b926 <__udivsi3+0x5e>
    b922:	034b      	lsls	r3, r1, #13
    b924:	1ac0      	subs	r0, r0, r3
    b926:	4152      	adcs	r2, r2
    b928:	0b03      	lsrs	r3, r0, #12
    b92a:	428b      	cmp	r3, r1
    b92c:	d301      	bcc.n	b932 <__udivsi3+0x6a>
    b92e:	030b      	lsls	r3, r1, #12
    b930:	1ac0      	subs	r0, r0, r3
    b932:	4152      	adcs	r2, r2
    b934:	0ac3      	lsrs	r3, r0, #11
    b936:	428b      	cmp	r3, r1
    b938:	d301      	bcc.n	b93e <__udivsi3+0x76>
    b93a:	02cb      	lsls	r3, r1, #11
    b93c:	1ac0      	subs	r0, r0, r3
    b93e:	4152      	adcs	r2, r2
    b940:	0a83      	lsrs	r3, r0, #10
    b942:	428b      	cmp	r3, r1
    b944:	d301      	bcc.n	b94a <__udivsi3+0x82>
    b946:	028b      	lsls	r3, r1, #10
    b948:	1ac0      	subs	r0, r0, r3
    b94a:	4152      	adcs	r2, r2
    b94c:	0a43      	lsrs	r3, r0, #9
    b94e:	428b      	cmp	r3, r1
    b950:	d301      	bcc.n	b956 <__udivsi3+0x8e>
    b952:	024b      	lsls	r3, r1, #9
    b954:	1ac0      	subs	r0, r0, r3
    b956:	4152      	adcs	r2, r2
    b958:	0a03      	lsrs	r3, r0, #8
    b95a:	428b      	cmp	r3, r1
    b95c:	d301      	bcc.n	b962 <__udivsi3+0x9a>
    b95e:	020b      	lsls	r3, r1, #8
    b960:	1ac0      	subs	r0, r0, r3
    b962:	4152      	adcs	r2, r2
    b964:	d2cd      	bcs.n	b902 <__udivsi3+0x3a>
    b966:	09c3      	lsrs	r3, r0, #7
    b968:	428b      	cmp	r3, r1
    b96a:	d301      	bcc.n	b970 <__udivsi3+0xa8>
    b96c:	01cb      	lsls	r3, r1, #7
    b96e:	1ac0      	subs	r0, r0, r3
    b970:	4152      	adcs	r2, r2
    b972:	0983      	lsrs	r3, r0, #6
    b974:	428b      	cmp	r3, r1
    b976:	d301      	bcc.n	b97c <__udivsi3+0xb4>
    b978:	018b      	lsls	r3, r1, #6
    b97a:	1ac0      	subs	r0, r0, r3
    b97c:	4152      	adcs	r2, r2
    b97e:	0943      	lsrs	r3, r0, #5
    b980:	428b      	cmp	r3, r1
    b982:	d301      	bcc.n	b988 <__udivsi3+0xc0>
    b984:	014b      	lsls	r3, r1, #5
    b986:	1ac0      	subs	r0, r0, r3
    b988:	4152      	adcs	r2, r2
    b98a:	0903      	lsrs	r3, r0, #4
    b98c:	428b      	cmp	r3, r1
    b98e:	d301      	bcc.n	b994 <__udivsi3+0xcc>
    b990:	010b      	lsls	r3, r1, #4
    b992:	1ac0      	subs	r0, r0, r3
    b994:	4152      	adcs	r2, r2
    b996:	08c3      	lsrs	r3, r0, #3
    b998:	428b      	cmp	r3, r1
    b99a:	d301      	bcc.n	b9a0 <__udivsi3+0xd8>
    b99c:	00cb      	lsls	r3, r1, #3
    b99e:	1ac0      	subs	r0, r0, r3
    b9a0:	4152      	adcs	r2, r2
    b9a2:	0883      	lsrs	r3, r0, #2
    b9a4:	428b      	cmp	r3, r1
    b9a6:	d301      	bcc.n	b9ac <__udivsi3+0xe4>
    b9a8:	008b      	lsls	r3, r1, #2
    b9aa:	1ac0      	subs	r0, r0, r3
    b9ac:	4152      	adcs	r2, r2
    b9ae:	0843      	lsrs	r3, r0, #1
    b9b0:	428b      	cmp	r3, r1
    b9b2:	d301      	bcc.n	b9b8 <__udivsi3+0xf0>
    b9b4:	004b      	lsls	r3, r1, #1
    b9b6:	1ac0      	subs	r0, r0, r3
    b9b8:	4152      	adcs	r2, r2
    b9ba:	1a41      	subs	r1, r0, r1
    b9bc:	d200      	bcs.n	b9c0 <__udivsi3+0xf8>
    b9be:	4601      	mov	r1, r0
    b9c0:	4152      	adcs	r2, r2
    b9c2:	4610      	mov	r0, r2
    b9c4:	4770      	bx	lr
    b9c6:	e7ff      	b.n	b9c8 <__udivsi3+0x100>
    b9c8:	b501      	push	{r0, lr}
    b9ca:	2000      	movs	r0, #0
    b9cc:	f000 f806 	bl	b9dc <__aeabi_idiv0>
    b9d0:	bd02      	pop	{r1, pc}
    b9d2:	46c0      	nop			; (mov r8, r8)

0000b9d4 <__aeabi_uidivmod>:
    b9d4:	2900      	cmp	r1, #0
    b9d6:	d0f7      	beq.n	b9c8 <__udivsi3+0x100>
    b9d8:	e776      	b.n	b8c8 <__udivsi3>
    b9da:	4770      	bx	lr

0000b9dc <__aeabi_idiv0>:
    b9dc:	4770      	bx	lr
    b9de:	46c0      	nop			; (mov r8, r8)

0000b9e0 <ffs>:
    b9e0:	2300      	movs	r3, #0
    b9e2:	b510      	push	{r4, lr}
    b9e4:	4298      	cmp	r0, r3
    b9e6:	d007      	beq.n	b9f8 <ffs+0x18>
    b9e8:	001a      	movs	r2, r3
    b9ea:	2101      	movs	r1, #1
    b9ec:	0004      	movs	r4, r0
    b9ee:	4114      	asrs	r4, r2
    b9f0:	1c53      	adds	r3, r2, #1
    b9f2:	001a      	movs	r2, r3
    b9f4:	420c      	tst	r4, r1
    b9f6:	d0f9      	beq.n	b9ec <ffs+0xc>
    b9f8:	0018      	movs	r0, r3
    b9fa:	bd10      	pop	{r4, pc}

0000b9fc <__libc_init_array>:
    b9fc:	b570      	push	{r4, r5, r6, lr}
    b9fe:	2600      	movs	r6, #0
    ba00:	4d0c      	ldr	r5, [pc, #48]	; (ba34 <__libc_init_array+0x38>)
    ba02:	4c0d      	ldr	r4, [pc, #52]	; (ba38 <__libc_init_array+0x3c>)
    ba04:	1b64      	subs	r4, r4, r5
    ba06:	10a4      	asrs	r4, r4, #2
    ba08:	42a6      	cmp	r6, r4
    ba0a:	d109      	bne.n	ba20 <__libc_init_array+0x24>
    ba0c:	2600      	movs	r6, #0
    ba0e:	f000 fdc7 	bl	c5a0 <_init>
    ba12:	4d0a      	ldr	r5, [pc, #40]	; (ba3c <__libc_init_array+0x40>)
    ba14:	4c0a      	ldr	r4, [pc, #40]	; (ba40 <__libc_init_array+0x44>)
    ba16:	1b64      	subs	r4, r4, r5
    ba18:	10a4      	asrs	r4, r4, #2
    ba1a:	42a6      	cmp	r6, r4
    ba1c:	d105      	bne.n	ba2a <__libc_init_array+0x2e>
    ba1e:	bd70      	pop	{r4, r5, r6, pc}
    ba20:	00b3      	lsls	r3, r6, #2
    ba22:	58eb      	ldr	r3, [r5, r3]
    ba24:	4798      	blx	r3
    ba26:	3601      	adds	r6, #1
    ba28:	e7ee      	b.n	ba08 <__libc_init_array+0xc>
    ba2a:	00b3      	lsls	r3, r6, #2
    ba2c:	58eb      	ldr	r3, [r5, r3]
    ba2e:	4798      	blx	r3
    ba30:	3601      	adds	r6, #1
    ba32:	e7f2      	b.n	ba1a <__libc_init_array+0x1e>
    ba34:	0000c5ac 	.word	0x0000c5ac
    ba38:	0000c5ac 	.word	0x0000c5ac
    ba3c:	0000c5ac 	.word	0x0000c5ac
    ba40:	0000c5b0 	.word	0x0000c5b0

0000ba44 <memcpy>:
    ba44:	2300      	movs	r3, #0
    ba46:	b510      	push	{r4, lr}
    ba48:	429a      	cmp	r2, r3
    ba4a:	d100      	bne.n	ba4e <memcpy+0xa>
    ba4c:	bd10      	pop	{r4, pc}
    ba4e:	5ccc      	ldrb	r4, [r1, r3]
    ba50:	54c4      	strb	r4, [r0, r3]
    ba52:	3301      	adds	r3, #1
    ba54:	e7f8      	b.n	ba48 <memcpy+0x4>

0000ba56 <memset>:
    ba56:	0003      	movs	r3, r0
    ba58:	1882      	adds	r2, r0, r2
    ba5a:	4293      	cmp	r3, r2
    ba5c:	d100      	bne.n	ba60 <memset+0xa>
    ba5e:	4770      	bx	lr
    ba60:	7019      	strb	r1, [r3, #0]
    ba62:	3301      	adds	r3, #1
    ba64:	e7f9      	b.n	ba5a <memset+0x4>
	...

0000ba68 <siprintf>:
    ba68:	b40e      	push	{r1, r2, r3}
    ba6a:	b510      	push	{r4, lr}
    ba6c:	b09d      	sub	sp, #116	; 0x74
    ba6e:	a902      	add	r1, sp, #8
    ba70:	9002      	str	r0, [sp, #8]
    ba72:	6108      	str	r0, [r1, #16]
    ba74:	480b      	ldr	r0, [pc, #44]	; (baa4 <siprintf+0x3c>)
    ba76:	2482      	movs	r4, #130	; 0x82
    ba78:	6088      	str	r0, [r1, #8]
    ba7a:	6148      	str	r0, [r1, #20]
    ba7c:	2001      	movs	r0, #1
    ba7e:	4240      	negs	r0, r0
    ba80:	ab1f      	add	r3, sp, #124	; 0x7c
    ba82:	81c8      	strh	r0, [r1, #14]
    ba84:	4808      	ldr	r0, [pc, #32]	; (baa8 <siprintf+0x40>)
    ba86:	cb04      	ldmia	r3!, {r2}
    ba88:	00a4      	lsls	r4, r4, #2
    ba8a:	6800      	ldr	r0, [r0, #0]
    ba8c:	9301      	str	r3, [sp, #4]
    ba8e:	818c      	strh	r4, [r1, #12]
    ba90:	f000 f8d4 	bl	bc3c <_svfiprintf_r>
    ba94:	2300      	movs	r3, #0
    ba96:	9a02      	ldr	r2, [sp, #8]
    ba98:	7013      	strb	r3, [r2, #0]
    ba9a:	b01d      	add	sp, #116	; 0x74
    ba9c:	bc10      	pop	{r4}
    ba9e:	bc08      	pop	{r3}
    baa0:	b003      	add	sp, #12
    baa2:	4718      	bx	r3
    baa4:	7fffffff 	.word	0x7fffffff
    baa8:	20000104 	.word	0x20000104

0000baac <strlen>:
    baac:	2300      	movs	r3, #0
    baae:	5cc2      	ldrb	r2, [r0, r3]
    bab0:	3301      	adds	r3, #1
    bab2:	2a00      	cmp	r2, #0
    bab4:	d1fb      	bne.n	baae <strlen+0x2>
    bab6:	1e58      	subs	r0, r3, #1
    bab8:	4770      	bx	lr
	...

0000babc <_malloc_r>:
    babc:	2303      	movs	r3, #3
    babe:	b570      	push	{r4, r5, r6, lr}
    bac0:	1ccd      	adds	r5, r1, #3
    bac2:	439d      	bics	r5, r3
    bac4:	3508      	adds	r5, #8
    bac6:	0006      	movs	r6, r0
    bac8:	2d0c      	cmp	r5, #12
    baca:	d21e      	bcs.n	bb0a <_malloc_r+0x4e>
    bacc:	250c      	movs	r5, #12
    bace:	42a9      	cmp	r1, r5
    bad0:	d81d      	bhi.n	bb0e <_malloc_r+0x52>
    bad2:	0030      	movs	r0, r6
    bad4:	f000 fb6d 	bl	c1b2 <__malloc_lock>
    bad8:	4a25      	ldr	r2, [pc, #148]	; (bb70 <_malloc_r+0xb4>)
    bada:	6814      	ldr	r4, [r2, #0]
    badc:	0021      	movs	r1, r4
    bade:	2900      	cmp	r1, #0
    bae0:	d119      	bne.n	bb16 <_malloc_r+0x5a>
    bae2:	4c24      	ldr	r4, [pc, #144]	; (bb74 <_malloc_r+0xb8>)
    bae4:	6823      	ldr	r3, [r4, #0]
    bae6:	2b00      	cmp	r3, #0
    bae8:	d103      	bne.n	baf2 <_malloc_r+0x36>
    baea:	0030      	movs	r0, r6
    baec:	f000 fb32 	bl	c154 <_sbrk_r>
    baf0:	6020      	str	r0, [r4, #0]
    baf2:	0029      	movs	r1, r5
    baf4:	0030      	movs	r0, r6
    baf6:	f000 fb2d 	bl	c154 <_sbrk_r>
    bafa:	1c43      	adds	r3, r0, #1
    bafc:	d12c      	bne.n	bb58 <_malloc_r+0x9c>
    bafe:	230c      	movs	r3, #12
    bb00:	0030      	movs	r0, r6
    bb02:	6033      	str	r3, [r6, #0]
    bb04:	f000 fb56 	bl	c1b4 <__malloc_unlock>
    bb08:	e003      	b.n	bb12 <_malloc_r+0x56>
    bb0a:	2d00      	cmp	r5, #0
    bb0c:	dadf      	bge.n	bace <_malloc_r+0x12>
    bb0e:	230c      	movs	r3, #12
    bb10:	6033      	str	r3, [r6, #0]
    bb12:	2000      	movs	r0, #0
    bb14:	bd70      	pop	{r4, r5, r6, pc}
    bb16:	680b      	ldr	r3, [r1, #0]
    bb18:	1b5b      	subs	r3, r3, r5
    bb1a:	d41a      	bmi.n	bb52 <_malloc_r+0x96>
    bb1c:	2b0b      	cmp	r3, #11
    bb1e:	d903      	bls.n	bb28 <_malloc_r+0x6c>
    bb20:	600b      	str	r3, [r1, #0]
    bb22:	18cc      	adds	r4, r1, r3
    bb24:	6025      	str	r5, [r4, #0]
    bb26:	e003      	b.n	bb30 <_malloc_r+0x74>
    bb28:	428c      	cmp	r4, r1
    bb2a:	d10e      	bne.n	bb4a <_malloc_r+0x8e>
    bb2c:	6863      	ldr	r3, [r4, #4]
    bb2e:	6013      	str	r3, [r2, #0]
    bb30:	0030      	movs	r0, r6
    bb32:	f000 fb3f 	bl	c1b4 <__malloc_unlock>
    bb36:	0020      	movs	r0, r4
    bb38:	2207      	movs	r2, #7
    bb3a:	300b      	adds	r0, #11
    bb3c:	1d23      	adds	r3, r4, #4
    bb3e:	4390      	bics	r0, r2
    bb40:	1ac3      	subs	r3, r0, r3
    bb42:	d0e7      	beq.n	bb14 <_malloc_r+0x58>
    bb44:	425a      	negs	r2, r3
    bb46:	50e2      	str	r2, [r4, r3]
    bb48:	e7e4      	b.n	bb14 <_malloc_r+0x58>
    bb4a:	684b      	ldr	r3, [r1, #4]
    bb4c:	6063      	str	r3, [r4, #4]
    bb4e:	000c      	movs	r4, r1
    bb50:	e7ee      	b.n	bb30 <_malloc_r+0x74>
    bb52:	000c      	movs	r4, r1
    bb54:	6849      	ldr	r1, [r1, #4]
    bb56:	e7c2      	b.n	bade <_malloc_r+0x22>
    bb58:	2303      	movs	r3, #3
    bb5a:	1cc4      	adds	r4, r0, #3
    bb5c:	439c      	bics	r4, r3
    bb5e:	42a0      	cmp	r0, r4
    bb60:	d0e0      	beq.n	bb24 <_malloc_r+0x68>
    bb62:	1a21      	subs	r1, r4, r0
    bb64:	0030      	movs	r0, r6
    bb66:	f000 faf5 	bl	c154 <_sbrk_r>
    bb6a:	1c43      	adds	r3, r0, #1
    bb6c:	d1da      	bne.n	bb24 <_malloc_r+0x68>
    bb6e:	e7c6      	b.n	bafe <_malloc_r+0x42>
    bb70:	20000500 	.word	0x20000500
    bb74:	20000504 	.word	0x20000504

0000bb78 <__ssputs_r>:
    bb78:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb7a:	688e      	ldr	r6, [r1, #8]
    bb7c:	b085      	sub	sp, #20
    bb7e:	0007      	movs	r7, r0
    bb80:	000c      	movs	r4, r1
    bb82:	9203      	str	r2, [sp, #12]
    bb84:	9301      	str	r3, [sp, #4]
    bb86:	429e      	cmp	r6, r3
    bb88:	d839      	bhi.n	bbfe <__ssputs_r+0x86>
    bb8a:	2390      	movs	r3, #144	; 0x90
    bb8c:	898a      	ldrh	r2, [r1, #12]
    bb8e:	00db      	lsls	r3, r3, #3
    bb90:	421a      	tst	r2, r3
    bb92:	d034      	beq.n	bbfe <__ssputs_r+0x86>
    bb94:	2503      	movs	r5, #3
    bb96:	6909      	ldr	r1, [r1, #16]
    bb98:	6823      	ldr	r3, [r4, #0]
    bb9a:	1a5b      	subs	r3, r3, r1
    bb9c:	9302      	str	r3, [sp, #8]
    bb9e:	6963      	ldr	r3, [r4, #20]
    bba0:	9802      	ldr	r0, [sp, #8]
    bba2:	435d      	muls	r5, r3
    bba4:	0feb      	lsrs	r3, r5, #31
    bba6:	195d      	adds	r5, r3, r5
    bba8:	9b01      	ldr	r3, [sp, #4]
    bbaa:	106d      	asrs	r5, r5, #1
    bbac:	3301      	adds	r3, #1
    bbae:	181b      	adds	r3, r3, r0
    bbb0:	42ab      	cmp	r3, r5
    bbb2:	d900      	bls.n	bbb6 <__ssputs_r+0x3e>
    bbb4:	001d      	movs	r5, r3
    bbb6:	0553      	lsls	r3, r2, #21
    bbb8:	d532      	bpl.n	bc20 <__ssputs_r+0xa8>
    bbba:	0029      	movs	r1, r5
    bbbc:	0038      	movs	r0, r7
    bbbe:	f7ff ff7d 	bl	babc <_malloc_r>
    bbc2:	1e06      	subs	r6, r0, #0
    bbc4:	d109      	bne.n	bbda <__ssputs_r+0x62>
    bbc6:	230c      	movs	r3, #12
    bbc8:	603b      	str	r3, [r7, #0]
    bbca:	2340      	movs	r3, #64	; 0x40
    bbcc:	2001      	movs	r0, #1
    bbce:	89a2      	ldrh	r2, [r4, #12]
    bbd0:	4240      	negs	r0, r0
    bbd2:	4313      	orrs	r3, r2
    bbd4:	81a3      	strh	r3, [r4, #12]
    bbd6:	b005      	add	sp, #20
    bbd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bbda:	9a02      	ldr	r2, [sp, #8]
    bbdc:	6921      	ldr	r1, [r4, #16]
    bbde:	f7ff ff31 	bl	ba44 <memcpy>
    bbe2:	89a3      	ldrh	r3, [r4, #12]
    bbe4:	4a14      	ldr	r2, [pc, #80]	; (bc38 <__ssputs_r+0xc0>)
    bbe6:	401a      	ands	r2, r3
    bbe8:	2380      	movs	r3, #128	; 0x80
    bbea:	4313      	orrs	r3, r2
    bbec:	81a3      	strh	r3, [r4, #12]
    bbee:	9b02      	ldr	r3, [sp, #8]
    bbf0:	6126      	str	r6, [r4, #16]
    bbf2:	18f6      	adds	r6, r6, r3
    bbf4:	6026      	str	r6, [r4, #0]
    bbf6:	6165      	str	r5, [r4, #20]
    bbf8:	9e01      	ldr	r6, [sp, #4]
    bbfa:	1aed      	subs	r5, r5, r3
    bbfc:	60a5      	str	r5, [r4, #8]
    bbfe:	9b01      	ldr	r3, [sp, #4]
    bc00:	42b3      	cmp	r3, r6
    bc02:	d200      	bcs.n	bc06 <__ssputs_r+0x8e>
    bc04:	001e      	movs	r6, r3
    bc06:	0032      	movs	r2, r6
    bc08:	9903      	ldr	r1, [sp, #12]
    bc0a:	6820      	ldr	r0, [r4, #0]
    bc0c:	f000 fabf 	bl	c18e <memmove>
    bc10:	68a3      	ldr	r3, [r4, #8]
    bc12:	2000      	movs	r0, #0
    bc14:	1b9b      	subs	r3, r3, r6
    bc16:	60a3      	str	r3, [r4, #8]
    bc18:	6823      	ldr	r3, [r4, #0]
    bc1a:	199e      	adds	r6, r3, r6
    bc1c:	6026      	str	r6, [r4, #0]
    bc1e:	e7da      	b.n	bbd6 <__ssputs_r+0x5e>
    bc20:	002a      	movs	r2, r5
    bc22:	0038      	movs	r0, r7
    bc24:	f000 fb12 	bl	c24c <_realloc_r>
    bc28:	1e06      	subs	r6, r0, #0
    bc2a:	d1e0      	bne.n	bbee <__ssputs_r+0x76>
    bc2c:	6921      	ldr	r1, [r4, #16]
    bc2e:	0038      	movs	r0, r7
    bc30:	f000 fac2 	bl	c1b8 <_free_r>
    bc34:	e7c7      	b.n	bbc6 <__ssputs_r+0x4e>
    bc36:	46c0      	nop			; (mov r8, r8)
    bc38:	fffffb7f 	.word	0xfffffb7f

0000bc3c <_svfiprintf_r>:
    bc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc3e:	b09f      	sub	sp, #124	; 0x7c
    bc40:	9002      	str	r0, [sp, #8]
    bc42:	9305      	str	r3, [sp, #20]
    bc44:	898b      	ldrh	r3, [r1, #12]
    bc46:	000f      	movs	r7, r1
    bc48:	0016      	movs	r6, r2
    bc4a:	061b      	lsls	r3, r3, #24
    bc4c:	d511      	bpl.n	bc72 <_svfiprintf_r+0x36>
    bc4e:	690b      	ldr	r3, [r1, #16]
    bc50:	2b00      	cmp	r3, #0
    bc52:	d10e      	bne.n	bc72 <_svfiprintf_r+0x36>
    bc54:	2140      	movs	r1, #64	; 0x40
    bc56:	f7ff ff31 	bl	babc <_malloc_r>
    bc5a:	6038      	str	r0, [r7, #0]
    bc5c:	6138      	str	r0, [r7, #16]
    bc5e:	2800      	cmp	r0, #0
    bc60:	d105      	bne.n	bc6e <_svfiprintf_r+0x32>
    bc62:	230c      	movs	r3, #12
    bc64:	9a02      	ldr	r2, [sp, #8]
    bc66:	3801      	subs	r0, #1
    bc68:	6013      	str	r3, [r2, #0]
    bc6a:	b01f      	add	sp, #124	; 0x7c
    bc6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc6e:	2340      	movs	r3, #64	; 0x40
    bc70:	617b      	str	r3, [r7, #20]
    bc72:	2300      	movs	r3, #0
    bc74:	ad06      	add	r5, sp, #24
    bc76:	616b      	str	r3, [r5, #20]
    bc78:	3320      	adds	r3, #32
    bc7a:	766b      	strb	r3, [r5, #25]
    bc7c:	3310      	adds	r3, #16
    bc7e:	76ab      	strb	r3, [r5, #26]
    bc80:	0034      	movs	r4, r6
    bc82:	7823      	ldrb	r3, [r4, #0]
    bc84:	2b00      	cmp	r3, #0
    bc86:	d147      	bne.n	bd18 <_svfiprintf_r+0xdc>
    bc88:	1ba3      	subs	r3, r4, r6
    bc8a:	9304      	str	r3, [sp, #16]
    bc8c:	d00d      	beq.n	bcaa <_svfiprintf_r+0x6e>
    bc8e:	1ba3      	subs	r3, r4, r6
    bc90:	0032      	movs	r2, r6
    bc92:	0039      	movs	r1, r7
    bc94:	9802      	ldr	r0, [sp, #8]
    bc96:	f7ff ff6f 	bl	bb78 <__ssputs_r>
    bc9a:	1c43      	adds	r3, r0, #1
    bc9c:	d100      	bne.n	bca0 <_svfiprintf_r+0x64>
    bc9e:	e0b5      	b.n	be0c <_svfiprintf_r+0x1d0>
    bca0:	696a      	ldr	r2, [r5, #20]
    bca2:	9b04      	ldr	r3, [sp, #16]
    bca4:	4694      	mov	ip, r2
    bca6:	4463      	add	r3, ip
    bca8:	616b      	str	r3, [r5, #20]
    bcaa:	7823      	ldrb	r3, [r4, #0]
    bcac:	2b00      	cmp	r3, #0
    bcae:	d100      	bne.n	bcb2 <_svfiprintf_r+0x76>
    bcb0:	e0ac      	b.n	be0c <_svfiprintf_r+0x1d0>
    bcb2:	2201      	movs	r2, #1
    bcb4:	2300      	movs	r3, #0
    bcb6:	4252      	negs	r2, r2
    bcb8:	606a      	str	r2, [r5, #4]
    bcba:	a902      	add	r1, sp, #8
    bcbc:	3254      	adds	r2, #84	; 0x54
    bcbe:	1852      	adds	r2, r2, r1
    bcc0:	3401      	adds	r4, #1
    bcc2:	602b      	str	r3, [r5, #0]
    bcc4:	60eb      	str	r3, [r5, #12]
    bcc6:	60ab      	str	r3, [r5, #8]
    bcc8:	7013      	strb	r3, [r2, #0]
    bcca:	65ab      	str	r3, [r5, #88]	; 0x58
    bccc:	4e58      	ldr	r6, [pc, #352]	; (be30 <_svfiprintf_r+0x1f4>)
    bcce:	2205      	movs	r2, #5
    bcd0:	7821      	ldrb	r1, [r4, #0]
    bcd2:	0030      	movs	r0, r6
    bcd4:	f000 fa50 	bl	c178 <memchr>
    bcd8:	1c62      	adds	r2, r4, #1
    bcda:	2800      	cmp	r0, #0
    bcdc:	d120      	bne.n	bd20 <_svfiprintf_r+0xe4>
    bcde:	6829      	ldr	r1, [r5, #0]
    bce0:	06cb      	lsls	r3, r1, #27
    bce2:	d504      	bpl.n	bcee <_svfiprintf_r+0xb2>
    bce4:	2353      	movs	r3, #83	; 0x53
    bce6:	ae02      	add	r6, sp, #8
    bce8:	3020      	adds	r0, #32
    bcea:	199b      	adds	r3, r3, r6
    bcec:	7018      	strb	r0, [r3, #0]
    bcee:	070b      	lsls	r3, r1, #28
    bcf0:	d504      	bpl.n	bcfc <_svfiprintf_r+0xc0>
    bcf2:	2353      	movs	r3, #83	; 0x53
    bcf4:	202b      	movs	r0, #43	; 0x2b
    bcf6:	ae02      	add	r6, sp, #8
    bcf8:	199b      	adds	r3, r3, r6
    bcfa:	7018      	strb	r0, [r3, #0]
    bcfc:	7823      	ldrb	r3, [r4, #0]
    bcfe:	2b2a      	cmp	r3, #42	; 0x2a
    bd00:	d016      	beq.n	bd30 <_svfiprintf_r+0xf4>
    bd02:	2000      	movs	r0, #0
    bd04:	210a      	movs	r1, #10
    bd06:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bd08:	7822      	ldrb	r2, [r4, #0]
    bd0a:	3a30      	subs	r2, #48	; 0x30
    bd0c:	2a09      	cmp	r2, #9
    bd0e:	d955      	bls.n	bdbc <_svfiprintf_r+0x180>
    bd10:	2800      	cmp	r0, #0
    bd12:	d015      	beq.n	bd40 <_svfiprintf_r+0x104>
    bd14:	9309      	str	r3, [sp, #36]	; 0x24
    bd16:	e013      	b.n	bd40 <_svfiprintf_r+0x104>
    bd18:	2b25      	cmp	r3, #37	; 0x25
    bd1a:	d0b5      	beq.n	bc88 <_svfiprintf_r+0x4c>
    bd1c:	3401      	adds	r4, #1
    bd1e:	e7b0      	b.n	bc82 <_svfiprintf_r+0x46>
    bd20:	2301      	movs	r3, #1
    bd22:	1b80      	subs	r0, r0, r6
    bd24:	4083      	lsls	r3, r0
    bd26:	6829      	ldr	r1, [r5, #0]
    bd28:	0014      	movs	r4, r2
    bd2a:	430b      	orrs	r3, r1
    bd2c:	602b      	str	r3, [r5, #0]
    bd2e:	e7cd      	b.n	bccc <_svfiprintf_r+0x90>
    bd30:	9b05      	ldr	r3, [sp, #20]
    bd32:	1d18      	adds	r0, r3, #4
    bd34:	681b      	ldr	r3, [r3, #0]
    bd36:	9005      	str	r0, [sp, #20]
    bd38:	2b00      	cmp	r3, #0
    bd3a:	db39      	blt.n	bdb0 <_svfiprintf_r+0x174>
    bd3c:	9309      	str	r3, [sp, #36]	; 0x24
    bd3e:	0014      	movs	r4, r2
    bd40:	7823      	ldrb	r3, [r4, #0]
    bd42:	2b2e      	cmp	r3, #46	; 0x2e
    bd44:	d10b      	bne.n	bd5e <_svfiprintf_r+0x122>
    bd46:	7863      	ldrb	r3, [r4, #1]
    bd48:	1c62      	adds	r2, r4, #1
    bd4a:	2b2a      	cmp	r3, #42	; 0x2a
    bd4c:	d13e      	bne.n	bdcc <_svfiprintf_r+0x190>
    bd4e:	9b05      	ldr	r3, [sp, #20]
    bd50:	3402      	adds	r4, #2
    bd52:	1d1a      	adds	r2, r3, #4
    bd54:	681b      	ldr	r3, [r3, #0]
    bd56:	9205      	str	r2, [sp, #20]
    bd58:	2b00      	cmp	r3, #0
    bd5a:	db34      	blt.n	bdc6 <_svfiprintf_r+0x18a>
    bd5c:	9307      	str	r3, [sp, #28]
    bd5e:	4e35      	ldr	r6, [pc, #212]	; (be34 <_svfiprintf_r+0x1f8>)
    bd60:	7821      	ldrb	r1, [r4, #0]
    bd62:	2203      	movs	r2, #3
    bd64:	0030      	movs	r0, r6
    bd66:	f000 fa07 	bl	c178 <memchr>
    bd6a:	2800      	cmp	r0, #0
    bd6c:	d006      	beq.n	bd7c <_svfiprintf_r+0x140>
    bd6e:	2340      	movs	r3, #64	; 0x40
    bd70:	1b80      	subs	r0, r0, r6
    bd72:	4083      	lsls	r3, r0
    bd74:	682a      	ldr	r2, [r5, #0]
    bd76:	3401      	adds	r4, #1
    bd78:	4313      	orrs	r3, r2
    bd7a:	602b      	str	r3, [r5, #0]
    bd7c:	7821      	ldrb	r1, [r4, #0]
    bd7e:	2206      	movs	r2, #6
    bd80:	482d      	ldr	r0, [pc, #180]	; (be38 <_svfiprintf_r+0x1fc>)
    bd82:	1c66      	adds	r6, r4, #1
    bd84:	7629      	strb	r1, [r5, #24]
    bd86:	f000 f9f7 	bl	c178 <memchr>
    bd8a:	2800      	cmp	r0, #0
    bd8c:	d046      	beq.n	be1c <_svfiprintf_r+0x1e0>
    bd8e:	4b2b      	ldr	r3, [pc, #172]	; (be3c <_svfiprintf_r+0x200>)
    bd90:	2b00      	cmp	r3, #0
    bd92:	d12f      	bne.n	bdf4 <_svfiprintf_r+0x1b8>
    bd94:	6829      	ldr	r1, [r5, #0]
    bd96:	9b05      	ldr	r3, [sp, #20]
    bd98:	2207      	movs	r2, #7
    bd9a:	05c9      	lsls	r1, r1, #23
    bd9c:	d528      	bpl.n	bdf0 <_svfiprintf_r+0x1b4>
    bd9e:	189b      	adds	r3, r3, r2
    bda0:	4393      	bics	r3, r2
    bda2:	3308      	adds	r3, #8
    bda4:	9305      	str	r3, [sp, #20]
    bda6:	696b      	ldr	r3, [r5, #20]
    bda8:	9a03      	ldr	r2, [sp, #12]
    bdaa:	189b      	adds	r3, r3, r2
    bdac:	616b      	str	r3, [r5, #20]
    bdae:	e767      	b.n	bc80 <_svfiprintf_r+0x44>
    bdb0:	425b      	negs	r3, r3
    bdb2:	60eb      	str	r3, [r5, #12]
    bdb4:	2302      	movs	r3, #2
    bdb6:	430b      	orrs	r3, r1
    bdb8:	602b      	str	r3, [r5, #0]
    bdba:	e7c0      	b.n	bd3e <_svfiprintf_r+0x102>
    bdbc:	434b      	muls	r3, r1
    bdbe:	3401      	adds	r4, #1
    bdc0:	189b      	adds	r3, r3, r2
    bdc2:	2001      	movs	r0, #1
    bdc4:	e7a0      	b.n	bd08 <_svfiprintf_r+0xcc>
    bdc6:	2301      	movs	r3, #1
    bdc8:	425b      	negs	r3, r3
    bdca:	e7c7      	b.n	bd5c <_svfiprintf_r+0x120>
    bdcc:	2300      	movs	r3, #0
    bdce:	0014      	movs	r4, r2
    bdd0:	200a      	movs	r0, #10
    bdd2:	001a      	movs	r2, r3
    bdd4:	606b      	str	r3, [r5, #4]
    bdd6:	7821      	ldrb	r1, [r4, #0]
    bdd8:	3930      	subs	r1, #48	; 0x30
    bdda:	2909      	cmp	r1, #9
    bddc:	d903      	bls.n	bde6 <_svfiprintf_r+0x1aa>
    bdde:	2b00      	cmp	r3, #0
    bde0:	d0bd      	beq.n	bd5e <_svfiprintf_r+0x122>
    bde2:	9207      	str	r2, [sp, #28]
    bde4:	e7bb      	b.n	bd5e <_svfiprintf_r+0x122>
    bde6:	4342      	muls	r2, r0
    bde8:	3401      	adds	r4, #1
    bdea:	1852      	adds	r2, r2, r1
    bdec:	2301      	movs	r3, #1
    bdee:	e7f2      	b.n	bdd6 <_svfiprintf_r+0x19a>
    bdf0:	3307      	adds	r3, #7
    bdf2:	e7d5      	b.n	bda0 <_svfiprintf_r+0x164>
    bdf4:	ab05      	add	r3, sp, #20
    bdf6:	9300      	str	r3, [sp, #0]
    bdf8:	003a      	movs	r2, r7
    bdfa:	4b11      	ldr	r3, [pc, #68]	; (be40 <_svfiprintf_r+0x204>)
    bdfc:	0029      	movs	r1, r5
    bdfe:	9802      	ldr	r0, [sp, #8]
    be00:	e000      	b.n	be04 <_svfiprintf_r+0x1c8>
    be02:	bf00      	nop
    be04:	9003      	str	r0, [sp, #12]
    be06:	9b03      	ldr	r3, [sp, #12]
    be08:	3301      	adds	r3, #1
    be0a:	d1cc      	bne.n	bda6 <_svfiprintf_r+0x16a>
    be0c:	89bb      	ldrh	r3, [r7, #12]
    be0e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    be10:	065b      	lsls	r3, r3, #25
    be12:	d400      	bmi.n	be16 <_svfiprintf_r+0x1da>
    be14:	e729      	b.n	bc6a <_svfiprintf_r+0x2e>
    be16:	2001      	movs	r0, #1
    be18:	4240      	negs	r0, r0
    be1a:	e726      	b.n	bc6a <_svfiprintf_r+0x2e>
    be1c:	ab05      	add	r3, sp, #20
    be1e:	9300      	str	r3, [sp, #0]
    be20:	003a      	movs	r2, r7
    be22:	4b07      	ldr	r3, [pc, #28]	; (be40 <_svfiprintf_r+0x204>)
    be24:	0029      	movs	r1, r5
    be26:	9802      	ldr	r0, [sp, #8]
    be28:	f000 f87a 	bl	bf20 <_printf_i>
    be2c:	e7ea      	b.n	be04 <_svfiprintf_r+0x1c8>
    be2e:	46c0      	nop			; (mov r8, r8)
    be30:	0000c56c 	.word	0x0000c56c
    be34:	0000c572 	.word	0x0000c572
    be38:	0000c576 	.word	0x0000c576
    be3c:	00000000 	.word	0x00000000
    be40:	0000bb79 	.word	0x0000bb79

0000be44 <_printf_common>:
    be44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    be46:	0015      	movs	r5, r2
    be48:	9301      	str	r3, [sp, #4]
    be4a:	688a      	ldr	r2, [r1, #8]
    be4c:	690b      	ldr	r3, [r1, #16]
    be4e:	9000      	str	r0, [sp, #0]
    be50:	000c      	movs	r4, r1
    be52:	4293      	cmp	r3, r2
    be54:	da00      	bge.n	be58 <_printf_common+0x14>
    be56:	0013      	movs	r3, r2
    be58:	0022      	movs	r2, r4
    be5a:	602b      	str	r3, [r5, #0]
    be5c:	3243      	adds	r2, #67	; 0x43
    be5e:	7812      	ldrb	r2, [r2, #0]
    be60:	2a00      	cmp	r2, #0
    be62:	d001      	beq.n	be68 <_printf_common+0x24>
    be64:	3301      	adds	r3, #1
    be66:	602b      	str	r3, [r5, #0]
    be68:	6823      	ldr	r3, [r4, #0]
    be6a:	069b      	lsls	r3, r3, #26
    be6c:	d502      	bpl.n	be74 <_printf_common+0x30>
    be6e:	682b      	ldr	r3, [r5, #0]
    be70:	3302      	adds	r3, #2
    be72:	602b      	str	r3, [r5, #0]
    be74:	2706      	movs	r7, #6
    be76:	6823      	ldr	r3, [r4, #0]
    be78:	401f      	ands	r7, r3
    be7a:	d027      	beq.n	becc <_printf_common+0x88>
    be7c:	0023      	movs	r3, r4
    be7e:	3343      	adds	r3, #67	; 0x43
    be80:	781b      	ldrb	r3, [r3, #0]
    be82:	1e5a      	subs	r2, r3, #1
    be84:	4193      	sbcs	r3, r2
    be86:	6822      	ldr	r2, [r4, #0]
    be88:	0692      	lsls	r2, r2, #26
    be8a:	d430      	bmi.n	beee <_printf_common+0xaa>
    be8c:	0022      	movs	r2, r4
    be8e:	9901      	ldr	r1, [sp, #4]
    be90:	3243      	adds	r2, #67	; 0x43
    be92:	9800      	ldr	r0, [sp, #0]
    be94:	9e08      	ldr	r6, [sp, #32]
    be96:	47b0      	blx	r6
    be98:	1c43      	adds	r3, r0, #1
    be9a:	d025      	beq.n	bee8 <_printf_common+0xa4>
    be9c:	2306      	movs	r3, #6
    be9e:	6820      	ldr	r0, [r4, #0]
    bea0:	682a      	ldr	r2, [r5, #0]
    bea2:	68e1      	ldr	r1, [r4, #12]
    bea4:	4003      	ands	r3, r0
    bea6:	2500      	movs	r5, #0
    bea8:	2b04      	cmp	r3, #4
    beaa:	d103      	bne.n	beb4 <_printf_common+0x70>
    beac:	1a8d      	subs	r5, r1, r2
    beae:	43eb      	mvns	r3, r5
    beb0:	17db      	asrs	r3, r3, #31
    beb2:	401d      	ands	r5, r3
    beb4:	68a3      	ldr	r3, [r4, #8]
    beb6:	6922      	ldr	r2, [r4, #16]
    beb8:	4293      	cmp	r3, r2
    beba:	dd01      	ble.n	bec0 <_printf_common+0x7c>
    bebc:	1a9b      	subs	r3, r3, r2
    bebe:	18ed      	adds	r5, r5, r3
    bec0:	2700      	movs	r7, #0
    bec2:	42bd      	cmp	r5, r7
    bec4:	d120      	bne.n	bf08 <_printf_common+0xc4>
    bec6:	2000      	movs	r0, #0
    bec8:	e010      	b.n	beec <_printf_common+0xa8>
    beca:	3701      	adds	r7, #1
    becc:	68e3      	ldr	r3, [r4, #12]
    bece:	682a      	ldr	r2, [r5, #0]
    bed0:	1a9b      	subs	r3, r3, r2
    bed2:	429f      	cmp	r7, r3
    bed4:	dad2      	bge.n	be7c <_printf_common+0x38>
    bed6:	0022      	movs	r2, r4
    bed8:	2301      	movs	r3, #1
    beda:	3219      	adds	r2, #25
    bedc:	9901      	ldr	r1, [sp, #4]
    bede:	9800      	ldr	r0, [sp, #0]
    bee0:	9e08      	ldr	r6, [sp, #32]
    bee2:	47b0      	blx	r6
    bee4:	1c43      	adds	r3, r0, #1
    bee6:	d1f0      	bne.n	beca <_printf_common+0x86>
    bee8:	2001      	movs	r0, #1
    beea:	4240      	negs	r0, r0
    beec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    beee:	2030      	movs	r0, #48	; 0x30
    bef0:	18e1      	adds	r1, r4, r3
    bef2:	3143      	adds	r1, #67	; 0x43
    bef4:	7008      	strb	r0, [r1, #0]
    bef6:	0021      	movs	r1, r4
    bef8:	1c5a      	adds	r2, r3, #1
    befa:	3145      	adds	r1, #69	; 0x45
    befc:	7809      	ldrb	r1, [r1, #0]
    befe:	18a2      	adds	r2, r4, r2
    bf00:	3243      	adds	r2, #67	; 0x43
    bf02:	3302      	adds	r3, #2
    bf04:	7011      	strb	r1, [r2, #0]
    bf06:	e7c1      	b.n	be8c <_printf_common+0x48>
    bf08:	0022      	movs	r2, r4
    bf0a:	2301      	movs	r3, #1
    bf0c:	321a      	adds	r2, #26
    bf0e:	9901      	ldr	r1, [sp, #4]
    bf10:	9800      	ldr	r0, [sp, #0]
    bf12:	9e08      	ldr	r6, [sp, #32]
    bf14:	47b0      	blx	r6
    bf16:	1c43      	adds	r3, r0, #1
    bf18:	d0e6      	beq.n	bee8 <_printf_common+0xa4>
    bf1a:	3701      	adds	r7, #1
    bf1c:	e7d1      	b.n	bec2 <_printf_common+0x7e>
	...

0000bf20 <_printf_i>:
    bf20:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf22:	b08b      	sub	sp, #44	; 0x2c
    bf24:	9206      	str	r2, [sp, #24]
    bf26:	000a      	movs	r2, r1
    bf28:	3243      	adds	r2, #67	; 0x43
    bf2a:	9307      	str	r3, [sp, #28]
    bf2c:	9005      	str	r0, [sp, #20]
    bf2e:	9204      	str	r2, [sp, #16]
    bf30:	7e0a      	ldrb	r2, [r1, #24]
    bf32:	000c      	movs	r4, r1
    bf34:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bf36:	2a6e      	cmp	r2, #110	; 0x6e
    bf38:	d100      	bne.n	bf3c <_printf_i+0x1c>
    bf3a:	e08f      	b.n	c05c <_printf_i+0x13c>
    bf3c:	d817      	bhi.n	bf6e <_printf_i+0x4e>
    bf3e:	2a63      	cmp	r2, #99	; 0x63
    bf40:	d02c      	beq.n	bf9c <_printf_i+0x7c>
    bf42:	d808      	bhi.n	bf56 <_printf_i+0x36>
    bf44:	2a00      	cmp	r2, #0
    bf46:	d100      	bne.n	bf4a <_printf_i+0x2a>
    bf48:	e099      	b.n	c07e <_printf_i+0x15e>
    bf4a:	2a58      	cmp	r2, #88	; 0x58
    bf4c:	d054      	beq.n	bff8 <_printf_i+0xd8>
    bf4e:	0026      	movs	r6, r4
    bf50:	3642      	adds	r6, #66	; 0x42
    bf52:	7032      	strb	r2, [r6, #0]
    bf54:	e029      	b.n	bfaa <_printf_i+0x8a>
    bf56:	2a64      	cmp	r2, #100	; 0x64
    bf58:	d001      	beq.n	bf5e <_printf_i+0x3e>
    bf5a:	2a69      	cmp	r2, #105	; 0x69
    bf5c:	d1f7      	bne.n	bf4e <_printf_i+0x2e>
    bf5e:	6821      	ldr	r1, [r4, #0]
    bf60:	681a      	ldr	r2, [r3, #0]
    bf62:	0608      	lsls	r0, r1, #24
    bf64:	d523      	bpl.n	bfae <_printf_i+0x8e>
    bf66:	1d11      	adds	r1, r2, #4
    bf68:	6019      	str	r1, [r3, #0]
    bf6a:	6815      	ldr	r5, [r2, #0]
    bf6c:	e025      	b.n	bfba <_printf_i+0x9a>
    bf6e:	2a73      	cmp	r2, #115	; 0x73
    bf70:	d100      	bne.n	bf74 <_printf_i+0x54>
    bf72:	e088      	b.n	c086 <_printf_i+0x166>
    bf74:	d808      	bhi.n	bf88 <_printf_i+0x68>
    bf76:	2a6f      	cmp	r2, #111	; 0x6f
    bf78:	d029      	beq.n	bfce <_printf_i+0xae>
    bf7a:	2a70      	cmp	r2, #112	; 0x70
    bf7c:	d1e7      	bne.n	bf4e <_printf_i+0x2e>
    bf7e:	2220      	movs	r2, #32
    bf80:	6809      	ldr	r1, [r1, #0]
    bf82:	430a      	orrs	r2, r1
    bf84:	6022      	str	r2, [r4, #0]
    bf86:	e003      	b.n	bf90 <_printf_i+0x70>
    bf88:	2a75      	cmp	r2, #117	; 0x75
    bf8a:	d020      	beq.n	bfce <_printf_i+0xae>
    bf8c:	2a78      	cmp	r2, #120	; 0x78
    bf8e:	d1de      	bne.n	bf4e <_printf_i+0x2e>
    bf90:	0022      	movs	r2, r4
    bf92:	2178      	movs	r1, #120	; 0x78
    bf94:	3245      	adds	r2, #69	; 0x45
    bf96:	7011      	strb	r1, [r2, #0]
    bf98:	4a6c      	ldr	r2, [pc, #432]	; (c14c <_printf_i+0x22c>)
    bf9a:	e030      	b.n	bffe <_printf_i+0xde>
    bf9c:	000e      	movs	r6, r1
    bf9e:	681a      	ldr	r2, [r3, #0]
    bfa0:	3642      	adds	r6, #66	; 0x42
    bfa2:	1d11      	adds	r1, r2, #4
    bfa4:	6019      	str	r1, [r3, #0]
    bfa6:	6813      	ldr	r3, [r2, #0]
    bfa8:	7033      	strb	r3, [r6, #0]
    bfaa:	2301      	movs	r3, #1
    bfac:	e079      	b.n	c0a2 <_printf_i+0x182>
    bfae:	0649      	lsls	r1, r1, #25
    bfb0:	d5d9      	bpl.n	bf66 <_printf_i+0x46>
    bfb2:	1d11      	adds	r1, r2, #4
    bfb4:	6019      	str	r1, [r3, #0]
    bfb6:	2300      	movs	r3, #0
    bfb8:	5ed5      	ldrsh	r5, [r2, r3]
    bfba:	2d00      	cmp	r5, #0
    bfbc:	da03      	bge.n	bfc6 <_printf_i+0xa6>
    bfbe:	232d      	movs	r3, #45	; 0x2d
    bfc0:	9a04      	ldr	r2, [sp, #16]
    bfc2:	426d      	negs	r5, r5
    bfc4:	7013      	strb	r3, [r2, #0]
    bfc6:	4b62      	ldr	r3, [pc, #392]	; (c150 <_printf_i+0x230>)
    bfc8:	270a      	movs	r7, #10
    bfca:	9303      	str	r3, [sp, #12]
    bfcc:	e02f      	b.n	c02e <_printf_i+0x10e>
    bfce:	6820      	ldr	r0, [r4, #0]
    bfd0:	6819      	ldr	r1, [r3, #0]
    bfd2:	0605      	lsls	r5, r0, #24
    bfd4:	d503      	bpl.n	bfde <_printf_i+0xbe>
    bfd6:	1d08      	adds	r0, r1, #4
    bfd8:	6018      	str	r0, [r3, #0]
    bfda:	680d      	ldr	r5, [r1, #0]
    bfdc:	e005      	b.n	bfea <_printf_i+0xca>
    bfde:	0640      	lsls	r0, r0, #25
    bfe0:	d5f9      	bpl.n	bfd6 <_printf_i+0xb6>
    bfe2:	680d      	ldr	r5, [r1, #0]
    bfe4:	1d08      	adds	r0, r1, #4
    bfe6:	6018      	str	r0, [r3, #0]
    bfe8:	b2ad      	uxth	r5, r5
    bfea:	4b59      	ldr	r3, [pc, #356]	; (c150 <_printf_i+0x230>)
    bfec:	2708      	movs	r7, #8
    bfee:	9303      	str	r3, [sp, #12]
    bff0:	2a6f      	cmp	r2, #111	; 0x6f
    bff2:	d018      	beq.n	c026 <_printf_i+0x106>
    bff4:	270a      	movs	r7, #10
    bff6:	e016      	b.n	c026 <_printf_i+0x106>
    bff8:	3145      	adds	r1, #69	; 0x45
    bffa:	700a      	strb	r2, [r1, #0]
    bffc:	4a54      	ldr	r2, [pc, #336]	; (c150 <_printf_i+0x230>)
    bffe:	9203      	str	r2, [sp, #12]
    c000:	681a      	ldr	r2, [r3, #0]
    c002:	6821      	ldr	r1, [r4, #0]
    c004:	1d10      	adds	r0, r2, #4
    c006:	6018      	str	r0, [r3, #0]
    c008:	6815      	ldr	r5, [r2, #0]
    c00a:	0608      	lsls	r0, r1, #24
    c00c:	d522      	bpl.n	c054 <_printf_i+0x134>
    c00e:	07cb      	lsls	r3, r1, #31
    c010:	d502      	bpl.n	c018 <_printf_i+0xf8>
    c012:	2320      	movs	r3, #32
    c014:	4319      	orrs	r1, r3
    c016:	6021      	str	r1, [r4, #0]
    c018:	2710      	movs	r7, #16
    c01a:	2d00      	cmp	r5, #0
    c01c:	d103      	bne.n	c026 <_printf_i+0x106>
    c01e:	2320      	movs	r3, #32
    c020:	6822      	ldr	r2, [r4, #0]
    c022:	439a      	bics	r2, r3
    c024:	6022      	str	r2, [r4, #0]
    c026:	0023      	movs	r3, r4
    c028:	2200      	movs	r2, #0
    c02a:	3343      	adds	r3, #67	; 0x43
    c02c:	701a      	strb	r2, [r3, #0]
    c02e:	6863      	ldr	r3, [r4, #4]
    c030:	60a3      	str	r3, [r4, #8]
    c032:	2b00      	cmp	r3, #0
    c034:	db5c      	blt.n	c0f0 <_printf_i+0x1d0>
    c036:	2204      	movs	r2, #4
    c038:	6821      	ldr	r1, [r4, #0]
    c03a:	4391      	bics	r1, r2
    c03c:	6021      	str	r1, [r4, #0]
    c03e:	2d00      	cmp	r5, #0
    c040:	d158      	bne.n	c0f4 <_printf_i+0x1d4>
    c042:	9e04      	ldr	r6, [sp, #16]
    c044:	2b00      	cmp	r3, #0
    c046:	d064      	beq.n	c112 <_printf_i+0x1f2>
    c048:	0026      	movs	r6, r4
    c04a:	9b03      	ldr	r3, [sp, #12]
    c04c:	3642      	adds	r6, #66	; 0x42
    c04e:	781b      	ldrb	r3, [r3, #0]
    c050:	7033      	strb	r3, [r6, #0]
    c052:	e05e      	b.n	c112 <_printf_i+0x1f2>
    c054:	0648      	lsls	r0, r1, #25
    c056:	d5da      	bpl.n	c00e <_printf_i+0xee>
    c058:	b2ad      	uxth	r5, r5
    c05a:	e7d8      	b.n	c00e <_printf_i+0xee>
    c05c:	6809      	ldr	r1, [r1, #0]
    c05e:	681a      	ldr	r2, [r3, #0]
    c060:	0608      	lsls	r0, r1, #24
    c062:	d505      	bpl.n	c070 <_printf_i+0x150>
    c064:	1d11      	adds	r1, r2, #4
    c066:	6019      	str	r1, [r3, #0]
    c068:	6813      	ldr	r3, [r2, #0]
    c06a:	6962      	ldr	r2, [r4, #20]
    c06c:	601a      	str	r2, [r3, #0]
    c06e:	e006      	b.n	c07e <_printf_i+0x15e>
    c070:	0649      	lsls	r1, r1, #25
    c072:	d5f7      	bpl.n	c064 <_printf_i+0x144>
    c074:	1d11      	adds	r1, r2, #4
    c076:	6019      	str	r1, [r3, #0]
    c078:	6813      	ldr	r3, [r2, #0]
    c07a:	8aa2      	ldrh	r2, [r4, #20]
    c07c:	801a      	strh	r2, [r3, #0]
    c07e:	2300      	movs	r3, #0
    c080:	9e04      	ldr	r6, [sp, #16]
    c082:	6123      	str	r3, [r4, #16]
    c084:	e054      	b.n	c130 <_printf_i+0x210>
    c086:	681a      	ldr	r2, [r3, #0]
    c088:	1d11      	adds	r1, r2, #4
    c08a:	6019      	str	r1, [r3, #0]
    c08c:	6816      	ldr	r6, [r2, #0]
    c08e:	2100      	movs	r1, #0
    c090:	6862      	ldr	r2, [r4, #4]
    c092:	0030      	movs	r0, r6
    c094:	f000 f870 	bl	c178 <memchr>
    c098:	2800      	cmp	r0, #0
    c09a:	d001      	beq.n	c0a0 <_printf_i+0x180>
    c09c:	1b80      	subs	r0, r0, r6
    c09e:	6060      	str	r0, [r4, #4]
    c0a0:	6863      	ldr	r3, [r4, #4]
    c0a2:	6123      	str	r3, [r4, #16]
    c0a4:	2300      	movs	r3, #0
    c0a6:	9a04      	ldr	r2, [sp, #16]
    c0a8:	7013      	strb	r3, [r2, #0]
    c0aa:	e041      	b.n	c130 <_printf_i+0x210>
    c0ac:	6923      	ldr	r3, [r4, #16]
    c0ae:	0032      	movs	r2, r6
    c0b0:	9906      	ldr	r1, [sp, #24]
    c0b2:	9805      	ldr	r0, [sp, #20]
    c0b4:	9d07      	ldr	r5, [sp, #28]
    c0b6:	47a8      	blx	r5
    c0b8:	1c43      	adds	r3, r0, #1
    c0ba:	d043      	beq.n	c144 <_printf_i+0x224>
    c0bc:	6823      	ldr	r3, [r4, #0]
    c0be:	2500      	movs	r5, #0
    c0c0:	079b      	lsls	r3, r3, #30
    c0c2:	d40f      	bmi.n	c0e4 <_printf_i+0x1c4>
    c0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c0c6:	68e0      	ldr	r0, [r4, #12]
    c0c8:	4298      	cmp	r0, r3
    c0ca:	da3d      	bge.n	c148 <_printf_i+0x228>
    c0cc:	0018      	movs	r0, r3
    c0ce:	e03b      	b.n	c148 <_printf_i+0x228>
    c0d0:	0022      	movs	r2, r4
    c0d2:	2301      	movs	r3, #1
    c0d4:	3219      	adds	r2, #25
    c0d6:	9906      	ldr	r1, [sp, #24]
    c0d8:	9805      	ldr	r0, [sp, #20]
    c0da:	9e07      	ldr	r6, [sp, #28]
    c0dc:	47b0      	blx	r6
    c0de:	1c43      	adds	r3, r0, #1
    c0e0:	d030      	beq.n	c144 <_printf_i+0x224>
    c0e2:	3501      	adds	r5, #1
    c0e4:	68e3      	ldr	r3, [r4, #12]
    c0e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c0e8:	1a9b      	subs	r3, r3, r2
    c0ea:	429d      	cmp	r5, r3
    c0ec:	dbf0      	blt.n	c0d0 <_printf_i+0x1b0>
    c0ee:	e7e9      	b.n	c0c4 <_printf_i+0x1a4>
    c0f0:	2d00      	cmp	r5, #0
    c0f2:	d0a9      	beq.n	c048 <_printf_i+0x128>
    c0f4:	9e04      	ldr	r6, [sp, #16]
    c0f6:	0028      	movs	r0, r5
    c0f8:	0039      	movs	r1, r7
    c0fa:	f7ff fc6b 	bl	b9d4 <__aeabi_uidivmod>
    c0fe:	9b03      	ldr	r3, [sp, #12]
    c100:	3e01      	subs	r6, #1
    c102:	5c5b      	ldrb	r3, [r3, r1]
    c104:	0028      	movs	r0, r5
    c106:	7033      	strb	r3, [r6, #0]
    c108:	0039      	movs	r1, r7
    c10a:	f7ff fbdd 	bl	b8c8 <__udivsi3>
    c10e:	1e05      	subs	r5, r0, #0
    c110:	d1f1      	bne.n	c0f6 <_printf_i+0x1d6>
    c112:	2f08      	cmp	r7, #8
    c114:	d109      	bne.n	c12a <_printf_i+0x20a>
    c116:	6823      	ldr	r3, [r4, #0]
    c118:	07db      	lsls	r3, r3, #31
    c11a:	d506      	bpl.n	c12a <_printf_i+0x20a>
    c11c:	6863      	ldr	r3, [r4, #4]
    c11e:	6922      	ldr	r2, [r4, #16]
    c120:	4293      	cmp	r3, r2
    c122:	dc02      	bgt.n	c12a <_printf_i+0x20a>
    c124:	2330      	movs	r3, #48	; 0x30
    c126:	3e01      	subs	r6, #1
    c128:	7033      	strb	r3, [r6, #0]
    c12a:	9b04      	ldr	r3, [sp, #16]
    c12c:	1b9b      	subs	r3, r3, r6
    c12e:	6123      	str	r3, [r4, #16]
    c130:	9b07      	ldr	r3, [sp, #28]
    c132:	aa09      	add	r2, sp, #36	; 0x24
    c134:	9300      	str	r3, [sp, #0]
    c136:	0021      	movs	r1, r4
    c138:	9b06      	ldr	r3, [sp, #24]
    c13a:	9805      	ldr	r0, [sp, #20]
    c13c:	f7ff fe82 	bl	be44 <_printf_common>
    c140:	1c43      	adds	r3, r0, #1
    c142:	d1b3      	bne.n	c0ac <_printf_i+0x18c>
    c144:	2001      	movs	r0, #1
    c146:	4240      	negs	r0, r0
    c148:	b00b      	add	sp, #44	; 0x2c
    c14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c14c:	0000c58e 	.word	0x0000c58e
    c150:	0000c57d 	.word	0x0000c57d

0000c154 <_sbrk_r>:
    c154:	2300      	movs	r3, #0
    c156:	b570      	push	{r4, r5, r6, lr}
    c158:	4c06      	ldr	r4, [pc, #24]	; (c174 <_sbrk_r+0x20>)
    c15a:	0005      	movs	r5, r0
    c15c:	0008      	movs	r0, r1
    c15e:	6023      	str	r3, [r4, #0]
    c160:	f7f6 fe7c 	bl	2e5c <_sbrk>
    c164:	1c43      	adds	r3, r0, #1
    c166:	d103      	bne.n	c170 <_sbrk_r+0x1c>
    c168:	6823      	ldr	r3, [r4, #0]
    c16a:	2b00      	cmp	r3, #0
    c16c:	d000      	beq.n	c170 <_sbrk_r+0x1c>
    c16e:	602b      	str	r3, [r5, #0]
    c170:	bd70      	pop	{r4, r5, r6, pc}
    c172:	46c0      	nop			; (mov r8, r8)
    c174:	2000066c 	.word	0x2000066c

0000c178 <memchr>:
    c178:	b2c9      	uxtb	r1, r1
    c17a:	1882      	adds	r2, r0, r2
    c17c:	4290      	cmp	r0, r2
    c17e:	d101      	bne.n	c184 <memchr+0xc>
    c180:	2000      	movs	r0, #0
    c182:	4770      	bx	lr
    c184:	7803      	ldrb	r3, [r0, #0]
    c186:	428b      	cmp	r3, r1
    c188:	d0fb      	beq.n	c182 <memchr+0xa>
    c18a:	3001      	adds	r0, #1
    c18c:	e7f6      	b.n	c17c <memchr+0x4>

0000c18e <memmove>:
    c18e:	b510      	push	{r4, lr}
    c190:	4288      	cmp	r0, r1
    c192:	d902      	bls.n	c19a <memmove+0xc>
    c194:	188b      	adds	r3, r1, r2
    c196:	4298      	cmp	r0, r3
    c198:	d308      	bcc.n	c1ac <memmove+0x1e>
    c19a:	2300      	movs	r3, #0
    c19c:	429a      	cmp	r2, r3
    c19e:	d007      	beq.n	c1b0 <memmove+0x22>
    c1a0:	5ccc      	ldrb	r4, [r1, r3]
    c1a2:	54c4      	strb	r4, [r0, r3]
    c1a4:	3301      	adds	r3, #1
    c1a6:	e7f9      	b.n	c19c <memmove+0xe>
    c1a8:	5c8b      	ldrb	r3, [r1, r2]
    c1aa:	5483      	strb	r3, [r0, r2]
    c1ac:	3a01      	subs	r2, #1
    c1ae:	d2fb      	bcs.n	c1a8 <memmove+0x1a>
    c1b0:	bd10      	pop	{r4, pc}

0000c1b2 <__malloc_lock>:
    c1b2:	4770      	bx	lr

0000c1b4 <__malloc_unlock>:
    c1b4:	4770      	bx	lr
	...

0000c1b8 <_free_r>:
    c1b8:	b570      	push	{r4, r5, r6, lr}
    c1ba:	0005      	movs	r5, r0
    c1bc:	2900      	cmp	r1, #0
    c1be:	d010      	beq.n	c1e2 <_free_r+0x2a>
    c1c0:	1f0c      	subs	r4, r1, #4
    c1c2:	6823      	ldr	r3, [r4, #0]
    c1c4:	2b00      	cmp	r3, #0
    c1c6:	da00      	bge.n	c1ca <_free_r+0x12>
    c1c8:	18e4      	adds	r4, r4, r3
    c1ca:	0028      	movs	r0, r5
    c1cc:	f7ff fff1 	bl	c1b2 <__malloc_lock>
    c1d0:	4a1d      	ldr	r2, [pc, #116]	; (c248 <_free_r+0x90>)
    c1d2:	6813      	ldr	r3, [r2, #0]
    c1d4:	2b00      	cmp	r3, #0
    c1d6:	d105      	bne.n	c1e4 <_free_r+0x2c>
    c1d8:	6063      	str	r3, [r4, #4]
    c1da:	6014      	str	r4, [r2, #0]
    c1dc:	0028      	movs	r0, r5
    c1de:	f7ff ffe9 	bl	c1b4 <__malloc_unlock>
    c1e2:	bd70      	pop	{r4, r5, r6, pc}
    c1e4:	42a3      	cmp	r3, r4
    c1e6:	d909      	bls.n	c1fc <_free_r+0x44>
    c1e8:	6821      	ldr	r1, [r4, #0]
    c1ea:	1860      	adds	r0, r4, r1
    c1ec:	4283      	cmp	r3, r0
    c1ee:	d1f3      	bne.n	c1d8 <_free_r+0x20>
    c1f0:	6818      	ldr	r0, [r3, #0]
    c1f2:	685b      	ldr	r3, [r3, #4]
    c1f4:	1841      	adds	r1, r0, r1
    c1f6:	6021      	str	r1, [r4, #0]
    c1f8:	e7ee      	b.n	c1d8 <_free_r+0x20>
    c1fa:	0013      	movs	r3, r2
    c1fc:	685a      	ldr	r2, [r3, #4]
    c1fe:	2a00      	cmp	r2, #0
    c200:	d001      	beq.n	c206 <_free_r+0x4e>
    c202:	42a2      	cmp	r2, r4
    c204:	d9f9      	bls.n	c1fa <_free_r+0x42>
    c206:	6819      	ldr	r1, [r3, #0]
    c208:	1858      	adds	r0, r3, r1
    c20a:	42a0      	cmp	r0, r4
    c20c:	d10b      	bne.n	c226 <_free_r+0x6e>
    c20e:	6820      	ldr	r0, [r4, #0]
    c210:	1809      	adds	r1, r1, r0
    c212:	1858      	adds	r0, r3, r1
    c214:	6019      	str	r1, [r3, #0]
    c216:	4282      	cmp	r2, r0
    c218:	d1e0      	bne.n	c1dc <_free_r+0x24>
    c21a:	6810      	ldr	r0, [r2, #0]
    c21c:	6852      	ldr	r2, [r2, #4]
    c21e:	1841      	adds	r1, r0, r1
    c220:	6019      	str	r1, [r3, #0]
    c222:	605a      	str	r2, [r3, #4]
    c224:	e7da      	b.n	c1dc <_free_r+0x24>
    c226:	42a0      	cmp	r0, r4
    c228:	d902      	bls.n	c230 <_free_r+0x78>
    c22a:	230c      	movs	r3, #12
    c22c:	602b      	str	r3, [r5, #0]
    c22e:	e7d5      	b.n	c1dc <_free_r+0x24>
    c230:	6821      	ldr	r1, [r4, #0]
    c232:	1860      	adds	r0, r4, r1
    c234:	4282      	cmp	r2, r0
    c236:	d103      	bne.n	c240 <_free_r+0x88>
    c238:	6810      	ldr	r0, [r2, #0]
    c23a:	6852      	ldr	r2, [r2, #4]
    c23c:	1841      	adds	r1, r0, r1
    c23e:	6021      	str	r1, [r4, #0]
    c240:	6062      	str	r2, [r4, #4]
    c242:	605c      	str	r4, [r3, #4]
    c244:	e7ca      	b.n	c1dc <_free_r+0x24>
    c246:	46c0      	nop			; (mov r8, r8)
    c248:	20000500 	.word	0x20000500

0000c24c <_realloc_r>:
    c24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c24e:	0007      	movs	r7, r0
    c250:	000d      	movs	r5, r1
    c252:	0016      	movs	r6, r2
    c254:	2900      	cmp	r1, #0
    c256:	d105      	bne.n	c264 <_realloc_r+0x18>
    c258:	0011      	movs	r1, r2
    c25a:	f7ff fc2f 	bl	babc <_malloc_r>
    c25e:	0004      	movs	r4, r0
    c260:	0020      	movs	r0, r4
    c262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c264:	2a00      	cmp	r2, #0
    c266:	d103      	bne.n	c270 <_realloc_r+0x24>
    c268:	f7ff ffa6 	bl	c1b8 <_free_r>
    c26c:	0034      	movs	r4, r6
    c26e:	e7f7      	b.n	c260 <_realloc_r+0x14>
    c270:	f000 f812 	bl	c298 <_malloc_usable_size_r>
    c274:	002c      	movs	r4, r5
    c276:	4286      	cmp	r6, r0
    c278:	d9f2      	bls.n	c260 <_realloc_r+0x14>
    c27a:	0031      	movs	r1, r6
    c27c:	0038      	movs	r0, r7
    c27e:	f7ff fc1d 	bl	babc <_malloc_r>
    c282:	1e04      	subs	r4, r0, #0
    c284:	d0ec      	beq.n	c260 <_realloc_r+0x14>
    c286:	0029      	movs	r1, r5
    c288:	0032      	movs	r2, r6
    c28a:	f7ff fbdb 	bl	ba44 <memcpy>
    c28e:	0029      	movs	r1, r5
    c290:	0038      	movs	r0, r7
    c292:	f7ff ff91 	bl	c1b8 <_free_r>
    c296:	e7e3      	b.n	c260 <_realloc_r+0x14>

0000c298 <_malloc_usable_size_r>:
    c298:	1f0b      	subs	r3, r1, #4
    c29a:	681b      	ldr	r3, [r3, #0]
    c29c:	1f18      	subs	r0, r3, #4
    c29e:	2b00      	cmp	r3, #0
    c2a0:	da01      	bge.n	c2a6 <_malloc_usable_size_r+0xe>
    c2a2:	580b      	ldr	r3, [r1, r0]
    c2a4:	18c0      	adds	r0, r0, r3
    c2a6:	4770      	bx	lr
    c2a8:	682f2e2e 	.word	0x682f2e2e
    c2ac:	702f6c70 	.word	0x702f6c70
    c2b0:	2f74726f 	.word	0x2f74726f
    c2b4:	5f6c7068 	.word	0x5f6c7068
    c2b8:	6f697067 	.word	0x6f697067
    c2bc:	7361625f 	.word	0x7361625f
    c2c0:	00682e65 	.word	0x00682e65
    c2c4:	682f2e2e 	.word	0x682f2e2e
    c2c8:	702f6c70 	.word	0x702f6c70
    c2cc:	70682f6d 	.word	0x70682f6d
    c2d0:	6d705f6c 	.word	0x6d705f6c
    c2d4:	7361625f 	.word	0x7361625f
    c2d8:	00682e65 	.word	0x00682e65
    c2dc:	682f2e2e 	.word	0x682f2e2e
    c2e0:	732f6c61 	.word	0x732f6c61
    c2e4:	682f6372 	.word	0x682f6372
    c2e8:	615f6c61 	.word	0x615f6c61
    c2ec:	735f6364 	.word	0x735f6364
    c2f0:	2e636e79 	.word	0x2e636e79
    c2f4:	00000063 	.word	0x00000063
    c2f8:	682f2e2e 	.word	0x682f2e2e
    c2fc:	732f6c61 	.word	0x732f6c61
    c300:	682f6372 	.word	0x682f6372
    c304:	695f6c61 	.word	0x695f6c61
    c308:	6d5f6332 	.word	0x6d5f6332
    c30c:	6e79735f 	.word	0x6e79735f
    c310:	00632e63 	.word	0x00632e63
    c314:	682f2e2e 	.word	0x682f2e2e
    c318:	732f6c61 	.word	0x732f6c61
    c31c:	682f6372 	.word	0x682f6372
    c320:	705f6c61 	.word	0x705f6c61
    c324:	632e6d77 	.word	0x632e6d77
    c328:	00000000 	.word	0x00000000
    c32c:	682f2e2e 	.word	0x682f2e2e
    c330:	732f6c61 	.word	0x732f6c61
    c334:	682f6372 	.word	0x682f6372
    c338:	735f6c61 	.word	0x735f6c61
    c33c:	6d5f6970 	.word	0x6d5f6970
    c340:	6e79735f 	.word	0x6e79735f
    c344:	00632e63 	.word	0x00632e63
    c348:	682f2e2e 	.word	0x682f2e2e
    c34c:	732f6c61 	.word	0x732f6c61
    c350:	682f6372 	.word	0x682f6372
    c354:	745f6c61 	.word	0x745f6c61
    c358:	72656d69 	.word	0x72656d69
    c35c:	0000632e 	.word	0x0000632e
    c360:	682f2e2e 	.word	0x682f2e2e
    c364:	732f6c61 	.word	0x732f6c61
    c368:	682f6372 	.word	0x682f6372
    c36c:	755f6c61 	.word	0x755f6c61
    c370:	74726173 	.word	0x74726173
    c374:	6e79735f 	.word	0x6e79735f
    c378:	00632e63 	.word	0x00632e63
    c37c:	682f2e2e 	.word	0x682f2e2e
    c380:	752f6c61 	.word	0x752f6c61
    c384:	736c6974 	.word	0x736c6974
    c388:	6372732f 	.word	0x6372732f
    c38c:	6974752f 	.word	0x6974752f
    c390:	6c5f736c 	.word	0x6c5f736c
    c394:	2e747369 	.word	0x2e747369
    c398:	00000063 	.word	0x00000063
    c39c:	682f2e2e 	.word	0x682f2e2e
    c3a0:	612f6c70 	.word	0x612f6c70
    c3a4:	682f6364 	.word	0x682f6364
    c3a8:	615f6c70 	.word	0x615f6c70
    c3ac:	632e6364 	.word	0x632e6364
    c3b0:	00000000 	.word	0x00000000
    c3b4:	682f2e2e 	.word	0x682f2e2e
    c3b8:	632f6c70 	.word	0x632f6c70
    c3bc:	2f65726f 	.word	0x2f65726f
    c3c0:	5f6c7068 	.word	0x5f6c7068
    c3c4:	65726f63 	.word	0x65726f63
    c3c8:	70306d5f 	.word	0x70306d5f
    c3cc:	5f73756c 	.word	0x5f73756c
    c3d0:	65736162 	.word	0x65736162
    c3d4:	0000632e 	.word	0x0000632e
    c3d8:	000034fe 	.word	0x000034fe
    c3dc:	000034dc 	.word	0x000034dc
    c3e0:	000034ba 	.word	0x000034ba
    c3e4:	00003498 	.word	0x00003498
    c3e8:	00003476 	.word	0x00003476
    c3ec:	00003616 	.word	0x00003616
    c3f0:	000035f4 	.word	0x000035f4
    c3f4:	000035e0 	.word	0x000035e0
    c3f8:	000035c2 	.word	0x000035c2
    c3fc:	000035aa 	.word	0x000035aa

0000c400 <_map>:
    c400:	00000002 00000022 682f2e2e 652f6c70     ...."...../hpl/e
    c410:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    c420:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    c430:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
    c440:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    c450:	0000632e                                .c..

0000c454 <sercomspi_regs>:
    c454:	0001000c 00020000 00000000 01ff004f     ............O...
    c464:	01000c04 02000000 00000000 ff004f00     .............O..
    c474:	00000501                                ....

0000c478 <_usb_ep_cfgs>:
    c478:	20000220 00000000 00000040 20000260      .. ....@...`.. 
    c488:	00000000 00000040 200002a0 00000000     ....@...... ....
    c498:	00000040 00000804 00004a25 446f6547     @.......%J..GeoD
    c4a8:	216b6375 302e310a 00000000 73657270     uck!.1.0....pres
    c4b8:	20646573 0a0d6425 00000000 0000b078     sed %d......x...
    c4c8:	0000b032 0000b078 0000b044 0000b078     2...x...D...x...
    c4d8:	0000afdc 0000b078 0000b078 0000b078     ....x...x...x...
    c4e8:	0000aff4 0000b078 0000b056 752f2e2e     ....x...V...../u
    c4f8:	642f6273 63697665 73752f65 2e636462     sb/device/usbdc.
    c508:	00000063                                c...

0000c50c <__sf_fake_stderr>:
	...

0000c52c <__sf_fake_stdin>:
	...

0000c54c <__sf_fake_stdout>:
	...
    c56c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    c57c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    c58c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    c59c:	00006665                                ef..

0000c5a0 <_init>:
    c5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c5a2:	46c0      	nop			; (mov r8, r8)
    c5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c5a6:	bc08      	pop	{r3}
    c5a8:	469e      	mov	lr, r3
    c5aa:	4770      	bx	lr

0000c5ac <__init_array_start>:
    c5ac:	000000dd 	.word	0x000000dd

0000c5b0 <_fini>:
    c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c5b2:	46c0      	nop			; (mov r8, r8)
    c5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c5b6:	bc08      	pop	{r3}
    c5b8:	469e      	mov	lr, r3
    c5ba:	4770      	bx	lr

0000c5bc <__fini_array_start>:
    c5bc:	000000b5 	.word	0x000000b5
